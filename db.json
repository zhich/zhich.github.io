{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/12.png","path":"images/12.png","modified":0,"renderable":0},{"_id":"source/images/16.png","path":"images/16.png","modified":0,"renderable":0},{"_id":"source/images/14.png","path":"images/14.png","modified":0,"renderable":0},{"_id":"source/images/17.png","path":"images/17.png","modified":0,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/19.png","path":"images/19.png","modified":0,"renderable":0},{"_id":"source/images/15.png","path":"images/15.png","modified":0,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":0,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":0,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":0,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":0,"renderable":0},{"_id":"source/images/9.png","path":"images/9.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/8.png","path":"images/8.png","modified":0,"renderable":0},{"_id":"source/images/10.png","path":"images/10.png","modified":0,"renderable":0},{"_id":"source/images/13.png","path":"images/13.png","modified":0,"renderable":0},{"_id":"source/images/18.png","path":"images/18.png","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/android.png","path":"images/android.png","modified":0,"renderable":0},{"_id":"source/images/11.png","path":"images/11.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"c3e025f8c72743f9cde53fcd2fbbee70b0952a2f","modified":1530498399235},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1529901945167},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1529901945168},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1529901945168},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1529901945172},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1529901945172},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1529901945173},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1529901945173},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1529901945176},{"_id":"themes/next/_config.yml","hash":"7fe0683a25ab39f6c232e77c1d1467ea5b723a77","modified":1530498399242},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1529901945175},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1529901945174},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1529901945174},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1529901945179},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1529901945177},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1529901945179},{"_id":"source/_posts/Android-学习.md","hash":"4c429c07e2a5d3a19908699136765ddbe5152714","modified":1530498792445},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1529901945296},{"_id":"source/_posts/Android-Studio-的一些技巧.md","hash":"f3691a4c9eca4431685a0b62927b1ebde00f015c","modified":1529898179100},{"_id":"source/_posts/Android-一个应用多个数据库.md","hash":"2a88e6e303a6afa21732abb490afdfe4197d6709","modified":1529898179104},{"_id":"source/_posts/Chrome-开发者工具调试.md","hash":"afe10836d168351ccc5c261ce80707cbe1c82063","modified":1529898179119},{"_id":"source/_posts/Java-一个方法返回多个整型值.md","hash":"d9818e7f2352f566485f4015eaa721a9fe252dc7","modified":1529898179126},{"_id":"source/_posts/Mock-测试.md","hash":"e2813677574c1e8c56565cfae879b29ec0c80e06","modified":1529898179136},{"_id":"source/_posts/前端学习.md","hash":"c7e23f9ded05c7a4b492b5bbccf9699d8d55aa3a","modified":1530498685387},{"_id":"source/_posts/Java-子类和父类相关成员执行顺序.md","hash":"e1589633f6b03325514deb3957bb90bfd34beac2","modified":1529898179132},{"_id":"source/_posts/Chrome-插件.md","hash":"c1675a07e3ecaf6136993e7c92287c5d865dac7d","modified":1529898179123},{"_id":"source/categories/index.md","hash":"f7b22c7150dfd8ad58382732dfc46b3cd1bf2da9","modified":1530498399234},{"_id":"source/_posts/剑指-Offer.md","hash":"f8af337361e0aedeb54c2e861061eb32d814020d","modified":1529898179142},{"_id":"source/_posts/我的书单.md","hash":"12b0027b7b26fc3772ae996f0f098971fe30cb78","modified":1529898179146},{"_id":"source/images/12.png","hash":"5622db39ff4e4ff0a255b9f7d3ec457056754b25","modified":1529898179169},{"_id":"source/_posts/Android-代码优化小提示.md","hash":"61a372a24758fd411955c146f8735d4340788bc4","modified":1529898179113},{"_id":"source/images/16.png","hash":"751fe01ecc8e19fdd521b362415e2e1205a20e6b","modified":1529898179184},{"_id":"source/images/14.png","hash":"fc7ee1c973eb523e44049b9515551f1a7f81d06d","modified":1529898179177},{"_id":"source/images/17.png","hash":"5801ee4a32e30fcb1e2f53fefbf9bd33ab5d7b80","modified":1529898179188},{"_id":"source/images/1.png","hash":"db14437c81b74e408f36984b11660601c8888613","modified":1529898179156},{"_id":"source/images/19.png","hash":"7c81e93629b853e7a48dbb78798b8626085236ed","modified":1529898179195},{"_id":"source/images/15.png","hash":"12a5942418f9af752c7b16e36e58c2004ec644f5","modified":1529898179181},{"_id":"source/images/4.png","hash":"1ba96bdaa9accf4eddcc8cb1e940d7197512771d","modified":1529898179207},{"_id":"source/images/5.png","hash":"473871d54d12388248482cc09d69a6d4c5445377","modified":1529898179210},{"_id":"source/images/6.png","hash":"908189af7a18d6b2a911b41b1e8bbb814697183b","modified":1529898179214},{"_id":"source/images/7.png","hash":"1e15183fc21701526007a2cbbf916777aab96ebb","modified":1529898179217},{"_id":"source/images/9.png","hash":"984b9ba843cacb4ecd62d1b7058dcc0b319344ea","modified":1529898179224},{"_id":"source/tags/index.md","hash":"ddf13a75ba7be3f21c9c955b3e3da25f9a5792f6","modified":1530498399238},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1529901945169},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1529901945171},{"_id":"source/images/3.png","hash":"133f2fd4ee40128968b9a6b1974847d1833603a0","modified":1529898179203},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529901945171},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1529901945180},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1529901945181},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1529901945182},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1529901945182},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1529901945183},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1529901945193},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1529901945193},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1529901945170},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1529901945195},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1529901945194},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1529901945196},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1529901945195},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1529901945197},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1529901945198},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1529901945199},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1529901945199},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1529901945204},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1529901945196},{"_id":"source/images/8.png","hash":"734f03b0d06bf5187a58f0efefeceeb2a0880c66","modified":1529898179221},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1529901945288},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1529901945292},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1529901945292},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1529901945297},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1529901945294},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1529901945299},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1529901945555},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1529901945290},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1529901945295},{"_id":"source/images/10.png","hash":"a7a6512fc3381302ed41fa3fc1d39828babe752e","modified":1529898179160},{"_id":"source/images/13.png","hash":"2c77006930fcad86b944f21e6d990f9525c4d2a4","modified":1529898179174},{"_id":"source/images/18.png","hash":"ec6a6f3d0a28f9b3240fbca50fe3f445a9366b4d","modified":1529898179192},{"_id":"source/images/2.png","hash":"d445279787e7caaedb12006f1711f4f974383439","modified":1529898179199},{"_id":"source/images/android.png","hash":"bafd89bad4f5aa860389354f20c050de2dc64c02","modified":1529898179228},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1529901945556},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945424},{"_id":"source/images/11.png","hash":"19c1bd24e252949c7b9320992d6ace61ea0ea782","modified":1529898179165},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1529901945202},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1529901945203},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1529901945205},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1529901945207},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1529901945557},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1529901945296},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1529901945212},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1529901945212},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1529901945209},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1529901945217},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1529901945214},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1529901945224},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1529901945222},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1529901945225},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1529901945236},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1529901945237},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1529901945210},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1529901945273},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1529901945274},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1529901945245},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1529901945279},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1529919272749},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1529901945275},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1529901945221},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1529901945301},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1529901945277},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1529901945302},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1529901945304},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1529901945307},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1529901945308},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1529901945303},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1529901945306},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1529901945310},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1529901945311},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1529901945425},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1529901945276},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1529901945423},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1529901945428},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529901945427},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1529901945428},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1529901945429},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1529901945431},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1529901945431},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529901945426},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1529901945278},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529901945434},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529901945435},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1529901945432},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1529901945430},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1529901945435},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1529901945436},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529901945433},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529901945434},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1529901945436},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945243},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529901945437},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945397},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945397},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945399},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945420},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945422},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945243},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1529901945219},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1529901945227},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1529901945228},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1529901945229},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1529901945231},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1529901945220},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1529901945240},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1529901945242},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1529901945244},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1529901945232},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1529901945234},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1529901945235},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1529901945262},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1529901945264},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1529901945268},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1529901945263},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1529901945266},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1529901945271},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1529901945247},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1529901945267},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1529901945249},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1529901945269},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1529901945251},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1529901945252},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1529901945271},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1529901945254},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1529901945255},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1529901945250},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1529901945257},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1529901945259},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1529901945253},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1529901945287},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1529901945283},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1529901945284},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1529901945256},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1529901945260},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1529901945395},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1529901945398},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1529901945248},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1529901945396},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1529901945420},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1529901945399},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1529901945286},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1529901945420},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1529901945421},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1529901945422},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1529901945440},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1529901945440},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1529901945441},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1529901945439},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1529901945442},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1529901945441},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1529901945443},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1529901945445},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1529901945438},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1529901945447},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529901945467},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1529901945446},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1529901945470},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1529901945471},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529901945462},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1529901945485},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1529901945487},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1529901945469},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1529901945491},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1529901945492},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1529901945493},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1529901945494},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1529901945486},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1529901945515},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1529901945518},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1529901945520},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1529901945486},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1529901945521},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1529901945518},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1529901945523},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1529901945491},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1529901945524},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1529901945522},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529901945526},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529901945527},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1529901945519},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529901945527},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529901945529},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529901945531},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529901945529},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529901945530},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529901945528},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1529901945525},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529901945533},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529901945533},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1529901945536},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529901945530},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1529901945536},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529901945532},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1529901945547},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1529901945534},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1529901945548},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1529901945552},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1529901945537},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529901945532},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1529901945554},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1529901945517},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1529901945553},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1529901945282},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1529901945281},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1529901945378},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1529901945321},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1529901945322},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1529901945316},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1529901945316},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1529901945365},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1529901945345},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1529901945379},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1529901945320},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1529901945392},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1529901945382},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1529901945393},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1529901945402},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1529901945401},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1529901945403},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1529901945383},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1529901945380},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1529901945406},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1529901945402},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1529901945409},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1529901945410},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1529901945411},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1529901945412},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1529901945413},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1529901945416},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1529901945405},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1529901945406},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1529901945418},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1529901945417},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1529901945419},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1529901945417},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1529901945418},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1529901945404},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1529901945444},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529901945472},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1529901945455},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529901945473},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529901945474},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1529901945459},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529901945475},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529901945475},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1529901945481},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529901945476},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1529901945484},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1529901945461},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529901945489},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1529901945483},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1529901945488},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1529901945495},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1529901945496},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1529901945546},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1529901945545},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1529901945497},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1529901945458},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529901945514},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529901945515},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1529901945325},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1529901945328},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1529901945329},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1529901945334},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1529901945335},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1529901945332},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1529901945339},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1529901945341},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1529901945342},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1529901945343},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1529901945338},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1529901945347},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1529901945348},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1529901945330},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1529901945350},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1529901945337},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1529901945352},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1529901945351},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1529901945344},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1529901945348},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1529901945354},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1529901945355},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1529901945353},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1529901945356},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1529901945356},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1529901945357},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1529901945358},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1529901945357},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1529901945360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1529901945360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1529901945361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1529901945359},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1529901945353},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1529901945354},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1529901945361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1529901945362},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1529901945363},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1529901945367},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1529901945368},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1529901945364},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1529901945369},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1529901945364},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1529901945366},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1529901945369},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1529901945371},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1529901945370},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1529901945373},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1529901945374},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1529901945371},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1529901945375},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1529901945375},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1529901945376},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1529901945372},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1529901945377},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1529901945377},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1529901945407},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1529901945408},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1529901945414},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1529901945374},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529901945451},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529901945451},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1529901945370},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529901945453},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1529901945551},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529901945455},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529901945454},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1529901945478},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529901945477},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1529901945479},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1529901945480},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529901945503},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529901945500},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529901945512},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1529901945479},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1529901945466},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1529901945376},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1529901945481},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1529901945509},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1529901945543},{"_id":"public/search.xml","hash":"1a71dde606f82032c67bad6185e27ff42dd912a3","modified":1530498559690},{"_id":"public/tags/index.html","hash":"9f81ea924e8431660e395bcdcc3254ee55f00a2d","modified":1530498567621},{"_id":"public/2018/06/23/Java-一个方法返回多个整型值/index.html","hash":"bb93ee824350fda483f6ca5e7ffac5a8ed6e37ae","modified":1530498567642},{"_id":"public/2018/06/02/Java-子类和父类相关成员执行顺序/index.html","hash":"07ef1d26cf942abf08fcc11ada72421a35e5d513","modified":1530498567642},{"_id":"public/2018/03/20/Mock-测试/index.html","hash":"0a90353134715346e01884f666d526fad87827e3","modified":1530498567642},{"_id":"public/2018/05/25/前端学习/index.html","hash":"80c328c7953d4319f2ea8bf9726ed7c4a5cf7f64","modified":1530498567720},{"_id":"public/2018/04/27/Android-学习/index.html","hash":"857fc047d6d161b91fb214bbdb1fc2ce0c498564","modified":1530498567720},{"_id":"public/2018/03/07/我的书单/index.html","hash":"fad4812af753015921c102a7b8562c5b34725bb6","modified":1530498567721},{"_id":"public/2018/01/09/Android-代码优化小提示/index.html","hash":"a43a317556b232e83116b3a7b32104c9fde7d145","modified":1530498567721},{"_id":"public/2018/03/04/Chrome-开发者工具调试/index.html","hash":"6818261520f8a5920926b08de28a26576132dc47","modified":1530498567721},{"_id":"public/2017/12/09/剑指-Offer/index.html","hash":"cc62b4cf255a6716bd6039877b8869c7d0f9201b","modified":1530498567721},{"_id":"public/2017/12/06/Chrome-插件/index.html","hash":"0f53753a0b9dfa2048a92c0c8cd09ef5b44c0bd3","modified":1530498567721},{"_id":"public/2018/01/06/Android-一个应用多个数据库/index.html","hash":"fc14f08014f46fed321296dedde154a979b9be72","modified":1530498567722},{"_id":"public/2016/09/25/Android-Studio-的一些技巧/index.html","hash":"93cc40ecc025683b0fd711f9f27dc2a4cc114c96","modified":1530498567722},{"_id":"public/archives/2016/index.html","hash":"229afa46ed8592d0e3b63069a9d6eb08b468ea96","modified":1530498567722},{"_id":"public/archives/index.html","hash":"da8df053e902714d62fddcf0e3025580d4ac222e","modified":1530498567722},{"_id":"public/archives/2016/09/index.html","hash":"56bd9e5f792087a819909654317f2d9de556184c","modified":1530498567723},{"_id":"public/categories/index.html","hash":"3941e0fb85e53d7497884c3a475bacbaa36e2b43","modified":1530498567723},{"_id":"public/archives/2018/index.html","hash":"7d0ee9522a74080da9fa71f83ec4b1a37fd7190a","modified":1530498567723},{"_id":"public/archives/2017/12/index.html","hash":"4299e50e82ad0f14d76050ba2205b98639cfef7c","modified":1530498567723},{"_id":"public/archives/2017/index.html","hash":"7ee33794e28cbe4a08910536fcf2829849179807","modified":1530498567723},{"_id":"public/archives/2018/01/index.html","hash":"e52471a1da94e2edd9d344059636060e886e78e5","modified":1530498567724},{"_id":"public/archives/2018/03/index.html","hash":"959caf4f06e5b056e4113cd4c6aa821ef7d99099","modified":1530498567724},{"_id":"public/archives/2018/04/index.html","hash":"afbd71c574f22beca52a5e6937eb6d3146276bc4","modified":1530498567724},{"_id":"public/archives/page/2/index.html","hash":"dd89ea9843e4a421417f7240295d99536ae08c93","modified":1530498567724},{"_id":"public/archives/2018/06/index.html","hash":"d2e11686be1c98f55258cc3b9578764544e94cbb","modified":1530498567724},{"_id":"public/categories/Android/index.html","hash":"9b5b2e14aedc9dbf98ee922af08b196a5a2eca31","modified":1530498567724},{"_id":"public/categories/工具/index.html","hash":"3e4a1a8473db2af27efd41c9b0b751d344e033e1","modified":1530498567725},{"_id":"public/categories/二进制/index.html","hash":"e29e75c1f1e0c0ae3b23b9e484e6daa3ac5425c9","modified":1530498567725},{"_id":"public/archives/2018/05/index.html","hash":"0ff4385add7ea4cec659c049a368656d2d864a6a","modified":1530498567725},{"_id":"public/categories/Java/index.html","hash":"22c2467fa41cf6d11a50a0e2a2b450d3f175a8b2","modified":1530498567725},{"_id":"public/categories/算法/index.html","hash":"3369bada33a8eacd9d66aaf5595db618a98d3147","modified":1530498567725},{"_id":"public/categories/前端/index.html","hash":"ebc5c0ab121b639c1ca200efaf82fd55145a4775","modified":1530498567726},{"_id":"public/categories/测试/index.html","hash":"0018b9c5fb55d97367d13d3fb70822b9498559ee","modified":1530498567726},{"_id":"public/categories/阅读笔记/index.html","hash":"858b6bed8bf8afc7a38176352871c607cfa08bb7","modified":1530498567726},{"_id":"public/index.html","hash":"3e628f90020b9da3a865e0a820953dc333ada62d","modified":1530498567726},{"_id":"public/tags/Android-Studio/index.html","hash":"77b9f97181f8aeb0413ac20674ced3da66645046","modified":1530498567726},{"_id":"public/tags/Chrome/index.html","hash":"26f0014e871e7ba29b0cf930e0f06cd3379490ae","modified":1530498567727},{"_id":"public/page/2/index.html","hash":"1f1c28d7870c3e92a9aebc46e4774a67e9886a7a","modified":1530498567727},{"_id":"public/tags/调试/index.html","hash":"425c1f262e528f9f6d86873040a16ac467bcd411","modified":1530498567727},{"_id":"public/tags/工具/index.html","hash":"ee97c77090f7edc8823e30516a2d07d67038cf8a","modified":1530498567727},{"_id":"public/tags/Java/index.html","hash":"915a4e2715eb5213648beb25b7ffa70ddbfff665","modified":1530498567727},{"_id":"public/tags/测试/index.html","hash":"01518f986d477b7b0d9fe28e49ea0c721d02156b","modified":1530498567727},{"_id":"public/tags/mock/index.html","hash":"bc2fa077b71751959dabf491a4ae40904721a135","modified":1530498567728},{"_id":"public/tags/二进制/index.html","hash":"bf37ab9bb65aff9317c48fb05122944197fda51f","modified":1530498567728},{"_id":"public/tags/前端/index.html","hash":"447ef6af290b9b11e43f2350ce2a9375f5254c68","modified":1530498567728},{"_id":"public/tags/阅读笔记/index.html","hash":"0ef1065a30eef902e81042f6b6438e4498562070","modified":1530498567728},{"_id":"public/tags/算法/index.html","hash":"443e58ab348e13cfa4866d716bf4828b3a197398","modified":1530498567728},{"_id":"public/tags/Android/index.html","hash":"f4d58818ce979348d1390d73b0de0a120d8f8112","modified":1530498567729},{"_id":"public/robots.txt","hash":"c3e025f8c72743f9cde53fcd2fbbee70b0952a2f","modified":1530498567749},{"_id":"public/images/16.png","hash":"751fe01ecc8e19fdd521b362415e2e1205a20e6b","modified":1530498567749},{"_id":"public/images/17.png","hash":"5801ee4a32e30fcb1e2f53fefbf9bd33ab5d7b80","modified":1530498567749},{"_id":"public/images/14.png","hash":"fc7ee1c973eb523e44049b9515551f1a7f81d06d","modified":1530498567749},{"_id":"public/images/12.png","hash":"5622db39ff4e4ff0a255b9f7d3ec457056754b25","modified":1530498567750},{"_id":"public/images/4.png","hash":"1ba96bdaa9accf4eddcc8cb1e940d7197512771d","modified":1530498567750},{"_id":"public/images/15.png","hash":"12a5942418f9af752c7b16e36e58c2004ec644f5","modified":1530498567750},{"_id":"public/images/1.png","hash":"db14437c81b74e408f36984b11660601c8888613","modified":1530498567750},{"_id":"public/images/6.png","hash":"908189af7a18d6b2a911b41b1e8bbb814697183b","modified":1530498567751},{"_id":"public/images/19.png","hash":"7c81e93629b853e7a48dbb78798b8626085236ed","modified":1530498567751},{"_id":"public/images/3.png","hash":"133f2fd4ee40128968b9a6b1974847d1833603a0","modified":1530498567751},{"_id":"public/images/9.png","hash":"984b9ba843cacb4ecd62d1b7058dcc0b319344ea","modified":1530498567751},{"_id":"public/images/7.png","hash":"1e15183fc21701526007a2cbbf916777aab96ebb","modified":1530498567751},{"_id":"public/images/5.png","hash":"473871d54d12388248482cc09d69a6d4c5445377","modified":1530498567752},{"_id":"public/images/8.png","hash":"734f03b0d06bf5187a58f0efefeceeb2a0880c66","modified":1530498567752},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1530498567752},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1530498567752},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1530498567752},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1530498567753},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1530498567753},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1530498567753},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1530498567753},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530498567753},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1530498567753},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1530498567754},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1530498567754},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530498567754},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1530498567754},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1530498567754},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1530498567754},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1530498567755},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1530498567755},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1530498567755},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1530498567755},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1530498567755},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1530498567755},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1530498567755},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1530498567756},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1530498567756},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1530498567756},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1530498567756},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1530498567756},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1530498567756},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1530498567757},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1530498567757},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1530498567757},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1530498567757},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1530498567757},{"_id":"public/images/10.png","hash":"a7a6512fc3381302ed41fa3fc1d39828babe752e","modified":1530498570127},{"_id":"public/images/18.png","hash":"ec6a6f3d0a28f9b3240fbca50fe3f445a9366b4d","modified":1530498570129},{"_id":"public/images/2.png","hash":"d445279787e7caaedb12006f1711f4f974383439","modified":1530498570146},{"_id":"public/images/android.png","hash":"bafd89bad4f5aa860389354f20c050de2dc64c02","modified":1530498570146},{"_id":"public/images/13.png","hash":"2c77006930fcad86b944f21e6d990f9525c4d2a4","modified":1530498570148},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1530498570149},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1530498570165},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1530498570165},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1530498570165},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1530498570166},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1530498570166},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1530498570166},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1530498570166},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1530498570166},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1530498570166},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1530498570167},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1530498570167},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1530498570167},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1530498570167},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1530498570167},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1530498570167},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1530498570168},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1530498570168},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1530498570168},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1530498570168},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1530498570168},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1530498570168},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1530498570169},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1530498570169},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1530498570169},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1530498570169},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1530498570169},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1530498570169},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1530498570170},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1530498570170},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1530498570170},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1530498570170},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1530498570170},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1530498570170},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1530498570171},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1530498570171},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1530498570171},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1530498570171},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1530498570171},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1530498570171},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1530498570172},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1530498570172},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1530498570172},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1530498570172},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1530498570173},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1530498570173},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1530498570173},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1530498570174},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1530498570174},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1530498570174},{"_id":"public/css/main.css","hash":"68327acde237e21f6d6b51c23866f47bf3e52160","modified":1530498570174},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1530498570174},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1530498570174},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1530498570175},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1530498570175},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1530498570175},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1530498570175},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1530498570175},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1530498570175},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1530498570176},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1530498570176},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1530498570176},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1530498570176},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1530498570176},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1530498570177},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1530498570177},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1530498570177},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1530498570177},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1530498570177},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1530498570177},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1530498570178},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1530498570178},{"_id":"public/images/11.png","hash":"19c1bd24e252949c7b9320992d6ace61ea0ea782","modified":1530498570178},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1530498570179},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1530498570179},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1530498570179},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1530498570230}],"Category":[{"name":"Android","_id":"cjj3nboog0004coqulnaorqzn"},{"name":"工具","_id":"cjj3nbopd000gcoqutzqn2mzb"},{"name":"二进制","_id":"cjj3nbopn000mcoqucds88u6n"},{"name":"测试","_id":"cjj3nbopt000tcoqutzwgfek7"},{"name":"前端","_id":"cjj3nbopy000zcoquez1u6j0l"},{"name":"Java","_id":"cjj3nboq10013coquhmk2jvbi"},{"name":"算法","_id":"cjj3nboq40018coqu3up9s207"},{"name":"阅读笔记","_id":"cjj3nboq6001ccoquxcnxa6db"}],"Data":[],"Page":[{"title":"标签","date":"2016-09-24T21:28:31.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2016-09-25 05:28:31\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-07-02T02:26:39.234Z","path":"categories/index.html","layout":"page","_id":"cjj3nboo60001coqujdwrtle1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2016-09-24T21:28:31.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-09-25 05:28:31\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-07-02T02:26:39.238Z","path":"tags/index.html","layout":"page","_id":"cjj3nbooc0003coquo0q6iygu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android 学习","date":"2018-04-27T13:33:00.000Z","_content":"\n**长歌行**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">佚名</font>\n\n> 青青园中葵，朝露待日晞。\n\n> 阳春布德泽，万物生光辉。\n\n> 常恐秋节至，焜黄华叶衰。\n\n> 百川东到海，何时复西归？\n\n> 少壮不努力，老大徒伤悲！\n\n<br/>\n\n> 本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .\n\n## 基础篇\n\n- ### 四大组件\n\n  - #### Activity\n\n  - #### Service\n\n  - #### BroadcastReceiver\n\n  - #### ContentProvider\n\n* ### View\n\n## 开源库\n\n- ### 网络\n\n  - #### Okhttp\n\n  - #### Retrofit\n\n- ### 图片加载\n\n  - #### Glide\n\n  - #### Fresco\n\n  - #### Picasso\n\n  - #### Glide Bitmap Pool\n\n- ### 数据库\n\n  - #### GreenDAO\n\n  - #### ORMLite\n\n- ### 依赖注入\n\n  - #### Butter Knife\n\n  - #### Dagger 2\n\n  - #### AndroidAnnotations\n\n- ### 工具库\n\n  - #### EventBus\n\n  - #### LeakCanary\n\n  - #### Secure Preference Manager\n\n  - #### Weak handler\n\n- ### 调试工具\n\n  - #### Stetho\n\n- ### 其它\n\n  - #### [RxJava](https://github.com/zhich/RxJava-Learning)\n\n\n## 架构\n\n- ### MVP\n\n- ### MVVM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android-学习.md","raw":"---\ntitle: Android 学习\ndate: 2018-04-27 21:33:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n**长歌行**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">佚名</font>\n\n> 青青园中葵，朝露待日晞。\n\n> 阳春布德泽，万物生光辉。\n\n> 常恐秋节至，焜黄华叶衰。\n\n> 百川东到海，何时复西归？\n\n> 少壮不努力，老大徒伤悲！\n\n<br/>\n\n> 本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .\n\n## 基础篇\n\n- ### 四大组件\n\n  - #### Activity\n\n  - #### Service\n\n  - #### BroadcastReceiver\n\n  - #### ContentProvider\n\n* ### View\n\n## 开源库\n\n- ### 网络\n\n  - #### Okhttp\n\n  - #### Retrofit\n\n- ### 图片加载\n\n  - #### Glide\n\n  - #### Fresco\n\n  - #### Picasso\n\n  - #### Glide Bitmap Pool\n\n- ### 数据库\n\n  - #### GreenDAO\n\n  - #### ORMLite\n\n- ### 依赖注入\n\n  - #### Butter Knife\n\n  - #### Dagger 2\n\n  - #### AndroidAnnotations\n\n- ### 工具库\n\n  - #### EventBus\n\n  - #### LeakCanary\n\n  - #### Secure Preference Manager\n\n  - #### Weak handler\n\n- ### 调试工具\n\n  - #### Stetho\n\n- ### 其它\n\n  - #### [RxJava](https://github.com/zhich/RxJava-Learning)\n\n\n## 架构\n\n- ### MVP\n\n- ### MVVM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Android-学习","published":1,"updated":"2018-07-02T02:33:12.445Z","_id":"cjj3nbonv0000coqu5dpj3ddu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>长歌行</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">佚名</font></p>\n<blockquote>\n<p>青青园中葵，朝露待日晞。</p>\n</blockquote>\n<blockquote>\n<p>阳春布德泽，万物生光辉。</p>\n</blockquote>\n<blockquote>\n<p>常恐秋节至，焜黄华叶衰。</p>\n</blockquote>\n<blockquote>\n<p>百川东到海，何时复西归？</p>\n</blockquote>\n<blockquote>\n<p>少壮不努力，老大徒伤悲！</p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .</p>\n</blockquote>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><ul>\n<li><h3 id=\"四大组件\"><a href=\"#四大组件\" class=\"headerlink\" title=\"四大组件\"></a>四大组件</h3><ul>\n<li><h4 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h4></li>\n<li><h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4></li>\n<li><h4 id=\"BroadcastReceiver\"><a href=\"#BroadcastReceiver\" class=\"headerlink\" title=\"BroadcastReceiver\"></a>BroadcastReceiver</h4></li>\n<li><h4 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3></li>\n</ul>\n<h2 id=\"开源库\"><a href=\"#开源库\" class=\"headerlink\" title=\"开源库\"></a>开源库</h2><ul>\n<li><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><ul>\n<li><h4 id=\"Okhttp\"><a href=\"#Okhttp\" class=\"headerlink\" title=\"Okhttp\"></a>Okhttp</h4></li>\n<li><h4 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h4></li>\n</ul>\n</li>\n<li><h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><ul>\n<li><h4 id=\"Glide\"><a href=\"#Glide\" class=\"headerlink\" title=\"Glide\"></a>Glide</h4></li>\n<li><h4 id=\"Fresco\"><a href=\"#Fresco\" class=\"headerlink\" title=\"Fresco\"></a>Fresco</h4></li>\n<li><h4 id=\"Picasso\"><a href=\"#Picasso\" class=\"headerlink\" title=\"Picasso\"></a>Picasso</h4></li>\n<li><h4 id=\"Glide-Bitmap-Pool\"><a href=\"#Glide-Bitmap-Pool\" class=\"headerlink\" title=\"Glide Bitmap Pool\"></a>Glide Bitmap Pool</h4></li>\n</ul>\n</li>\n<li><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li><h4 id=\"GreenDAO\"><a href=\"#GreenDAO\" class=\"headerlink\" title=\"GreenDAO\"></a>GreenDAO</h4></li>\n<li><h4 id=\"ORMLite\"><a href=\"#ORMLite\" class=\"headerlink\" title=\"ORMLite\"></a>ORMLite</h4></li>\n</ul>\n</li>\n<li><h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><ul>\n<li><h4 id=\"Butter-Knife\"><a href=\"#Butter-Knife\" class=\"headerlink\" title=\"Butter Knife\"></a>Butter Knife</h4></li>\n<li><h4 id=\"Dagger-2\"><a href=\"#Dagger-2\" class=\"headerlink\" title=\"Dagger 2\"></a>Dagger 2</h4></li>\n<li><h4 id=\"AndroidAnnotations\"><a href=\"#AndroidAnnotations\" class=\"headerlink\" title=\"AndroidAnnotations\"></a>AndroidAnnotations</h4></li>\n</ul>\n</li>\n<li><h3 id=\"工具库\"><a href=\"#工具库\" class=\"headerlink\" title=\"工具库\"></a>工具库</h3><ul>\n<li><h4 id=\"EventBus\"><a href=\"#EventBus\" class=\"headerlink\" title=\"EventBus\"></a>EventBus</h4></li>\n<li><h4 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h4></li>\n<li><h4 id=\"Secure-Preference-Manager\"><a href=\"#Secure-Preference-Manager\" class=\"headerlink\" title=\"Secure Preference Manager\"></a>Secure Preference Manager</h4></li>\n<li><h4 id=\"Weak-handler\"><a href=\"#Weak-handler\" class=\"headerlink\" title=\"Weak handler\"></a>Weak handler</h4></li>\n</ul>\n</li>\n<li><h3 id=\"调试工具\"><a href=\"#调试工具\" class=\"headerlink\" title=\"调试工具\"></a>调试工具</h3><ul>\n<li><h4 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h4></li>\n</ul>\n</li>\n<li><h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><h4 id=\"RxJava\"><a href=\"#RxJava\" class=\"headerlink\" title=\"RxJava\"></a><a href=\"https://github.com/zhich/RxJava-Learning\" target=\"_blank\" rel=\"noopener\">RxJava</a></h4></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><ul>\n<li><h3 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h3></li>\n<li><h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>长歌行</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">佚名</font></p>\n<blockquote>\n<p>青青园中葵，朝露待日晞。</p>\n</blockquote>\n<blockquote>\n<p>阳春布德泽，万物生光辉。</p>\n</blockquote>\n<blockquote>\n<p>常恐秋节至，焜黄华叶衰。</p>\n</blockquote>\n<blockquote>\n<p>百川东到海，何时复西归？</p>\n</blockquote>\n<blockquote>\n<p>少壮不努力，老大徒伤悲！</p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .</p>\n</blockquote>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><ul>\n<li><h3 id=\"四大组件\"><a href=\"#四大组件\" class=\"headerlink\" title=\"四大组件\"></a>四大组件</h3><ul>\n<li><h4 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h4></li>\n<li><h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4></li>\n<li><h4 id=\"BroadcastReceiver\"><a href=\"#BroadcastReceiver\" class=\"headerlink\" title=\"BroadcastReceiver\"></a>BroadcastReceiver</h4></li>\n<li><h4 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3></li>\n</ul>\n<h2 id=\"开源库\"><a href=\"#开源库\" class=\"headerlink\" title=\"开源库\"></a>开源库</h2><ul>\n<li><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><ul>\n<li><h4 id=\"Okhttp\"><a href=\"#Okhttp\" class=\"headerlink\" title=\"Okhttp\"></a>Okhttp</h4></li>\n<li><h4 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h4></li>\n</ul>\n</li>\n<li><h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><ul>\n<li><h4 id=\"Glide\"><a href=\"#Glide\" class=\"headerlink\" title=\"Glide\"></a>Glide</h4></li>\n<li><h4 id=\"Fresco\"><a href=\"#Fresco\" class=\"headerlink\" title=\"Fresco\"></a>Fresco</h4></li>\n<li><h4 id=\"Picasso\"><a href=\"#Picasso\" class=\"headerlink\" title=\"Picasso\"></a>Picasso</h4></li>\n<li><h4 id=\"Glide-Bitmap-Pool\"><a href=\"#Glide-Bitmap-Pool\" class=\"headerlink\" title=\"Glide Bitmap Pool\"></a>Glide Bitmap Pool</h4></li>\n</ul>\n</li>\n<li><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li><h4 id=\"GreenDAO\"><a href=\"#GreenDAO\" class=\"headerlink\" title=\"GreenDAO\"></a>GreenDAO</h4></li>\n<li><h4 id=\"ORMLite\"><a href=\"#ORMLite\" class=\"headerlink\" title=\"ORMLite\"></a>ORMLite</h4></li>\n</ul>\n</li>\n<li><h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><ul>\n<li><h4 id=\"Butter-Knife\"><a href=\"#Butter-Knife\" class=\"headerlink\" title=\"Butter Knife\"></a>Butter Knife</h4></li>\n<li><h4 id=\"Dagger-2\"><a href=\"#Dagger-2\" class=\"headerlink\" title=\"Dagger 2\"></a>Dagger 2</h4></li>\n<li><h4 id=\"AndroidAnnotations\"><a href=\"#AndroidAnnotations\" class=\"headerlink\" title=\"AndroidAnnotations\"></a>AndroidAnnotations</h4></li>\n</ul>\n</li>\n<li><h3 id=\"工具库\"><a href=\"#工具库\" class=\"headerlink\" title=\"工具库\"></a>工具库</h3><ul>\n<li><h4 id=\"EventBus\"><a href=\"#EventBus\" class=\"headerlink\" title=\"EventBus\"></a>EventBus</h4></li>\n<li><h4 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h4></li>\n<li><h4 id=\"Secure-Preference-Manager\"><a href=\"#Secure-Preference-Manager\" class=\"headerlink\" title=\"Secure Preference Manager\"></a>Secure Preference Manager</h4></li>\n<li><h4 id=\"Weak-handler\"><a href=\"#Weak-handler\" class=\"headerlink\" title=\"Weak handler\"></a>Weak handler</h4></li>\n</ul>\n</li>\n<li><h3 id=\"调试工具\"><a href=\"#调试工具\" class=\"headerlink\" title=\"调试工具\"></a>调试工具</h3><ul>\n<li><h4 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h4></li>\n</ul>\n</li>\n<li><h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><h4 id=\"RxJava\"><a href=\"#RxJava\" class=\"headerlink\" title=\"RxJava\"></a><a href=\"https://github.com/zhich/RxJava-Learning\" target=\"_blank\" rel=\"noopener\">RxJava</a></h4></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><ul>\n<li><h3 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h3></li>\n<li><h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3></li>\n</ul>\n"},{"title":"Android Studio 的一些技巧","date":"2016-09-25T04:28:31.000Z","_content":"\n\n\n[技巧](#技巧)\n\n[插件](#插件)\n\n[工具](#工具)\n\n\n\n## 技巧\n### 快速查找\n`双击 Shift 键`。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。\n\n### Search Action\n`Ctrl + Shift + A`。类似搜索指令的入口。如输入 \"Open Recent\" 可以查找最近的工程；输入 \"hier\" 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。\n\n### 演示模式\n在菜单栏 `View 选项` 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。\n\n### 显示最近操作、修改\n`Ctrl + E` 和 `Ctrl + Shift + E` 快速显示最近文件操作和文件修改。同时可用 `Ctrl + Tab` 进行各个界面的切换。\n\n### 操作记录前进和回退\n`Ctrl + Alt + Left/Right`。\n\n### 移动行\n`Alt + Shift + 方向键上/方向键下`。整体移动也是类似的方法。\n\n### 交换行\n`Ctrl + Shift + 方向键上/方向键下`。\n\n### Log 快捷模板\n在 onCreate 中输入 `logi` ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。\n```Java\nLog.i(TAG, \"onCreate: \");\n```\n\n### 查看大纲\n`(Fn) + Ctrl + F12 `。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。\n\n### 附加调试\n在 ADB 连接手机情况下，点击 `attach to debugger` 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。\n\n### 代码折叠\n全局折叠、展开：`Ctrl + Shift + -` 、`Ctrl + Shift + +` \n局部折叠、展开：`Ctrl  + -` 、`Ctrl  + +` \n\n### 在文件系统中打开文件\n按住 Ctrl 键并点击打开的代码的 Tab 页。\n\n### 预览方法定义\n`Ctrl + Shift + i (mac 为 Command + Y)`。在本页面预览方法的定义，无需跳转到方法定义的地方去。\n\n### 拆分窗口\n在编辑区域显示多个编辑界面：Window --> Editor Tabs --> Split vertical \\ horizontal\n\n### Extract 的妙用\n**Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。**\n在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。\n\n### 方法调用栈\n`Ctrl + Alt + H` 可以快速找到该方法的调用栈。\n\n### Surround With\n`Ctrl + Alt + T`。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。\n\n### Image Asset && Vector Asset\n可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。\n\n### 断点\n  - 条件断点\n     满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。\n  - 临时断点\n    执行一次断点后该断点就会消失。在当前行使用快捷键 `(Fn) + Ctrl + Alt + F8`，即可生成一个临时断点，临时断点上有一个数字“1”。\n  - 异常断点\n    在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。\n  - 日志断点\n    当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。\n\n### 代码模板\n  - 内置模板\n  `Ctrl + J` 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。\n\n  - 后缀模板\n `Ctrl + J` 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。\n\n  - 自定义模板\n  \n    **方法注释**\n\n     ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。\n\n   ```Java\n     /**\n      * $desc$\n      *\n      * @author zch\n      * create at $date$\n      */\n   ```\n\n    **文件、类注释**\n   \n   ①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。\n   \nClassHeader 模板：\n    \n```Java\n/**\n * class description here\n * @author ${USER}\n * @version 1.0.0\n * @since ${YEAR}-${MONTH}-${DAY}\n */\n```\n    \nFileHeader模板：\n    \n```Java\n/*\n * ${NAME}      ${YEAR}-${MONTH}-${DAY}\n * Copyright (c) ${YEAR} jufuns. All right reserved.\n *\n */\n#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != \"\")package ${PACKAGE_NAME};#end\n```\n    \nMyActivity模板：\n\n```Java\n#parse(\"FileHeader.java\")\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n#parse(\"ClassHeader.java\")\npublic class ${NAME} extends Activity{\n\n   @Override\n    public void onCreate(Bundle savedInstanceState){\n           super.onCreate(savedInstanceState);\n    }\n\n}\n```\n \n用 MyActivity 模板新建的 LoginActivity：\n\t\n```Java\n/*\n * LoginActivity      2016-10-07\n * Copyright (c) 2016 jufuns. All right reserved.\n *\n */\npackage com.jiejue.catwalk.ui.ac;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n/**\n * class description here\n *\n * @author zch\n * @version 1.0.0\n * @since 2016-10-07\n */\npublic class LoginActivity extends Activity {\n\n    @Override\n   \tpublic void onCreate(Bundle savedInstanceState) {\n       \tsuper.onCreate(savedInstanceState);\n       \t\n   \t}\n   \t\n}\n```\n> 类似地，我们也可以建立 Adapter、单例等等的模板代码。\n\n### 立即停止 AndroidStudio 编译\n\n  一个命令就可以停止它！\n\n  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。\n\n  ```Java\n  mac\n  ./gradlew --stop\n\n  window\n  gradlew --stop\n  ```\n\n  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。\n\n### 关闭 / 显示方法参数提示\n\n![](/images/1.png)\n\n![](/images/2.png)\n\n## 插件\n### .ignore\n给 Git 项目生成最合适的 ignore 文件。\n\n### ButterKnife Zelezny\n在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。\n\n### SelectorChapek\n可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。\n\n### GsonFormat\n可将一段 Json 生成所需的 Gson 实体。\n\n### Android Parcelable code generator\n可自动生成 Parcelable 接口所需的代码。\n\n### AndroidCodeGenerator\n可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。\n\n### Prettify\n可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。\n\n### Exynap\n[Exynap](http://exynap.com/) 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。\n\n### Android Methods Count\n高效统计 Android 开源库的方法数。\n\n### AndroidLocalizationer\n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。\n\n### Key Promoter\n当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。\n\n### FindBugs-IDEA\n一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .\n\n### ADB Idea\n[ADB Idea](https://github.com/pbreault/adb-idea) 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。\n\n### Codota\n[Codota](https://www.codota.com/) 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。\n\n## 工具\n### Stetho\nStetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。\n\n### Gradle, please\n[Gradle, please](http://gradleplease.appspot.com/) 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。\n\n### LeakCanary\nLeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。\n\n### Android Debug Database\nAndroid Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。\n\n### Android WiFi ADB\n[Android WiFi ADB](https://github.com/pedrovgs/AndroidWiFiADB) 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。\n\n### drawable-optimizer\n[drawable-optimizer](https://github.com/fabiomsr/drawable-optimizer) 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。\n\n### DevKnox\napp 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。**使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -> Devknox Scan 就会开始扫描。**\n\n### ClassyShark\n[ClassyShark](https://github.com/google/android-classyshark) 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。\n\n","source":"_posts/Android-Studio-的一些技巧.md","raw":"---\ntitle: Android Studio 的一些技巧\ndate: 2016-09-25 12:28:31\ncategories: \"Android\"\ntags:\n     - Android\n     - Android Studio\n---\n\n\n\n[技巧](#技巧)\n\n[插件](#插件)\n\n[工具](#工具)\n\n\n\n## 技巧\n### 快速查找\n`双击 Shift 键`。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。\n\n### Search Action\n`Ctrl + Shift + A`。类似搜索指令的入口。如输入 \"Open Recent\" 可以查找最近的工程；输入 \"hier\" 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。\n\n### 演示模式\n在菜单栏 `View 选项` 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。\n\n### 显示最近操作、修改\n`Ctrl + E` 和 `Ctrl + Shift + E` 快速显示最近文件操作和文件修改。同时可用 `Ctrl + Tab` 进行各个界面的切换。\n\n### 操作记录前进和回退\n`Ctrl + Alt + Left/Right`。\n\n### 移动行\n`Alt + Shift + 方向键上/方向键下`。整体移动也是类似的方法。\n\n### 交换行\n`Ctrl + Shift + 方向键上/方向键下`。\n\n### Log 快捷模板\n在 onCreate 中输入 `logi` ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。\n```Java\nLog.i(TAG, \"onCreate: \");\n```\n\n### 查看大纲\n`(Fn) + Ctrl + F12 `。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。\n\n### 附加调试\n在 ADB 连接手机情况下，点击 `attach to debugger` 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。\n\n### 代码折叠\n全局折叠、展开：`Ctrl + Shift + -` 、`Ctrl + Shift + +` \n局部折叠、展开：`Ctrl  + -` 、`Ctrl  + +` \n\n### 在文件系统中打开文件\n按住 Ctrl 键并点击打开的代码的 Tab 页。\n\n### 预览方法定义\n`Ctrl + Shift + i (mac 为 Command + Y)`。在本页面预览方法的定义，无需跳转到方法定义的地方去。\n\n### 拆分窗口\n在编辑区域显示多个编辑界面：Window --> Editor Tabs --> Split vertical \\ horizontal\n\n### Extract 的妙用\n**Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。**\n在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。\n\n### 方法调用栈\n`Ctrl + Alt + H` 可以快速找到该方法的调用栈。\n\n### Surround With\n`Ctrl + Alt + T`。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。\n\n### Image Asset && Vector Asset\n可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。\n\n### 断点\n  - 条件断点\n     满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。\n  - 临时断点\n    执行一次断点后该断点就会消失。在当前行使用快捷键 `(Fn) + Ctrl + Alt + F8`，即可生成一个临时断点，临时断点上有一个数字“1”。\n  - 异常断点\n    在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。\n  - 日志断点\n    当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。\n\n### 代码模板\n  - 内置模板\n  `Ctrl + J` 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。\n\n  - 后缀模板\n `Ctrl + J` 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。\n\n  - 自定义模板\n  \n    **方法注释**\n\n     ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。\n\n   ```Java\n     /**\n      * $desc$\n      *\n      * @author zch\n      * create at $date$\n      */\n   ```\n\n    **文件、类注释**\n   \n   ①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。\n   \nClassHeader 模板：\n    \n```Java\n/**\n * class description here\n * @author ${USER}\n * @version 1.0.0\n * @since ${YEAR}-${MONTH}-${DAY}\n */\n```\n    \nFileHeader模板：\n    \n```Java\n/*\n * ${NAME}      ${YEAR}-${MONTH}-${DAY}\n * Copyright (c) ${YEAR} jufuns. All right reserved.\n *\n */\n#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != \"\")package ${PACKAGE_NAME};#end\n```\n    \nMyActivity模板：\n\n```Java\n#parse(\"FileHeader.java\")\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n#parse(\"ClassHeader.java\")\npublic class ${NAME} extends Activity{\n\n   @Override\n    public void onCreate(Bundle savedInstanceState){\n           super.onCreate(savedInstanceState);\n    }\n\n}\n```\n \n用 MyActivity 模板新建的 LoginActivity：\n\t\n```Java\n/*\n * LoginActivity      2016-10-07\n * Copyright (c) 2016 jufuns. All right reserved.\n *\n */\npackage com.jiejue.catwalk.ui.ac;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n/**\n * class description here\n *\n * @author zch\n * @version 1.0.0\n * @since 2016-10-07\n */\npublic class LoginActivity extends Activity {\n\n    @Override\n   \tpublic void onCreate(Bundle savedInstanceState) {\n       \tsuper.onCreate(savedInstanceState);\n       \t\n   \t}\n   \t\n}\n```\n> 类似地，我们也可以建立 Adapter、单例等等的模板代码。\n\n### 立即停止 AndroidStudio 编译\n\n  一个命令就可以停止它！\n\n  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。\n\n  ```Java\n  mac\n  ./gradlew --stop\n\n  window\n  gradlew --stop\n  ```\n\n  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。\n\n### 关闭 / 显示方法参数提示\n\n![](/images/1.png)\n\n![](/images/2.png)\n\n## 插件\n### .ignore\n给 Git 项目生成最合适的 ignore 文件。\n\n### ButterKnife Zelezny\n在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。\n\n### SelectorChapek\n可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。\n\n### GsonFormat\n可将一段 Json 生成所需的 Gson 实体。\n\n### Android Parcelable code generator\n可自动生成 Parcelable 接口所需的代码。\n\n### AndroidCodeGenerator\n可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。\n\n### Prettify\n可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。\n\n### Exynap\n[Exynap](http://exynap.com/) 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。\n\n### Android Methods Count\n高效统计 Android 开源库的方法数。\n\n### AndroidLocalizationer\n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。\n\n### Key Promoter\n当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。\n\n### FindBugs-IDEA\n一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .\n\n### ADB Idea\n[ADB Idea](https://github.com/pbreault/adb-idea) 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。\n\n### Codota\n[Codota](https://www.codota.com/) 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。\n\n## 工具\n### Stetho\nStetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。\n\n### Gradle, please\n[Gradle, please](http://gradleplease.appspot.com/) 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。\n\n### LeakCanary\nLeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。\n\n### Android Debug Database\nAndroid Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。\n\n### Android WiFi ADB\n[Android WiFi ADB](https://github.com/pedrovgs/AndroidWiFiADB) 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。\n\n### drawable-optimizer\n[drawable-optimizer](https://github.com/fabiomsr/drawable-optimizer) 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。\n\n### DevKnox\napp 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。**使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -> Devknox Scan 就会开始扫描。**\n\n### ClassyShark\n[ClassyShark](https://github.com/google/android-classyshark) 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。\n\n","slug":"Android-Studio-的一些技巧","published":1,"updated":"2018-06-25T03:42:59.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nboo90002coqu1msnaf66","content":"<p><a href=\"#技巧\">技巧</a></p>\n<p><a href=\"#插件\">插件</a></p>\n<p><a href=\"#工具\">工具</a></p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p><code>双击 Shift 键</code>。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。</p>\n<h3 id=\"Search-Action\"><a href=\"#Search-Action\" class=\"headerlink\" title=\"Search Action\"></a>Search Action</h3><p><code>Ctrl + Shift + A</code>。类似搜索指令的入口。如输入 “Open Recent” 可以查找最近的工程；输入 “hier” 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。</p>\n<h3 id=\"演示模式\"><a href=\"#演示模式\" class=\"headerlink\" title=\"演示模式\"></a>演示模式</h3><p>在菜单栏 <code>View 选项</code> 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。</p>\n<h3 id=\"显示最近操作、修改\"><a href=\"#显示最近操作、修改\" class=\"headerlink\" title=\"显示最近操作、修改\"></a>显示最近操作、修改</h3><p><code>Ctrl + E</code> 和 <code>Ctrl + Shift + E</code> 快速显示最近文件操作和文件修改。同时可用 <code>Ctrl + Tab</code> 进行各个界面的切换。</p>\n<h3 id=\"操作记录前进和回退\"><a href=\"#操作记录前进和回退\" class=\"headerlink\" title=\"操作记录前进和回退\"></a>操作记录前进和回退</h3><p><code>Ctrl + Alt + Left/Right</code>。</p>\n<h3 id=\"移动行\"><a href=\"#移动行\" class=\"headerlink\" title=\"移动行\"></a>移动行</h3><p><code>Alt + Shift + 方向键上/方向键下</code>。整体移动也是类似的方法。</p>\n<h3 id=\"交换行\"><a href=\"#交换行\" class=\"headerlink\" title=\"交换行\"></a>交换行</h3><p><code>Ctrl + Shift + 方向键上/方向键下</code>。</p>\n<h3 id=\"Log-快捷模板\"><a href=\"#Log-快捷模板\" class=\"headerlink\" title=\"Log 快捷模板\"></a>Log 快捷模板</h3><p>在 onCreate 中输入 <code>logi</code> ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.i(TAG, <span class=\"string\">\"onCreate: \"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看大纲\"><a href=\"#查看大纲\" class=\"headerlink\" title=\"查看大纲\"></a>查看大纲</h3><p><code>(Fn) + Ctrl + F12</code>。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。</p>\n<h3 id=\"附加调试\"><a href=\"#附加调试\" class=\"headerlink\" title=\"附加调试\"></a>附加调试</h3><p>在 ADB 连接手机情况下，点击 <code>attach to debugger</code> 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>全局折叠、展开：<code>Ctrl + Shift + -</code> 、<code>Ctrl + Shift + +</code><br>局部折叠、展开：<code>Ctrl  + -</code> 、<code>Ctrl  + +</code> </p>\n<h3 id=\"在文件系统中打开文件\"><a href=\"#在文件系统中打开文件\" class=\"headerlink\" title=\"在文件系统中打开文件\"></a>在文件系统中打开文件</h3><p>按住 Ctrl 键并点击打开的代码的 Tab 页。</p>\n<h3 id=\"预览方法定义\"><a href=\"#预览方法定义\" class=\"headerlink\" title=\"预览方法定义\"></a>预览方法定义</h3><p><code>Ctrl + Shift + i (mac 为 Command + Y)</code>。在本页面预览方法的定义，无需跳转到方法定义的地方去。</p>\n<h3 id=\"拆分窗口\"><a href=\"#拆分窗口\" class=\"headerlink\" title=\"拆分窗口\"></a>拆分窗口</h3><p>在编辑区域显示多个编辑界面：Window –&gt; Editor Tabs –&gt; Split vertical \\ horizontal</p>\n<h3 id=\"Extract-的妙用\"><a href=\"#Extract-的妙用\" class=\"headerlink\" title=\"Extract 的妙用\"></a>Extract 的妙用</h3><p><strong>Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。</strong><br>在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。</p>\n<h3 id=\"方法调用栈\"><a href=\"#方法调用栈\" class=\"headerlink\" title=\"方法调用栈\"></a>方法调用栈</h3><p><code>Ctrl + Alt + H</code> 可以快速找到该方法的调用栈。</p>\n<h3 id=\"Surround-With\"><a href=\"#Surround-With\" class=\"headerlink\" title=\"Surround With\"></a>Surround With</h3><p><code>Ctrl + Alt + T</code>。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。</p>\n<h3 id=\"Image-Asset-amp-amp-Vector-Asset\"><a href=\"#Image-Asset-amp-amp-Vector-Asset\" class=\"headerlink\" title=\"Image Asset &amp;&amp; Vector Asset\"></a>Image Asset &amp;&amp; Vector Asset</h3><p>可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><ul>\n<li>条件断点<br> 满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。</li>\n<li>临时断点<br>执行一次断点后该断点就会消失。在当前行使用快捷键 <code>(Fn) + Ctrl + Alt + F8</code>，即可生成一个临时断点，临时断点上有一个数字“1”。</li>\n<li>异常断点<br>在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。</li>\n<li>日志断点<br>当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。</li>\n</ul>\n<h3 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h3><ul>\n<li><p>内置模板<br><code>Ctrl + J</code> 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。</p>\n</li>\n<li><p>后缀模板<br><code>Ctrl + J</code> 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。</p>\n</li>\n<li><p>自定义模板</p>\n<p><strong>方法注释</strong></p>\n<p> ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * $desc$</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * create at $date$</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p><strong>文件、类注释</strong></p>\n<p>①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。</p>\n</li>\n</ul>\n<p>ClassHeader 模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> $&#123;USER&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>FileHeader模板：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * $&#123;NAME&#125;      $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) $&#123;YEAR&#125; jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package $&#123;PACKAGE_NAME&#125;;#end</span><br></pre></td></tr></table></figure>\n<p>MyActivity模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parse(\"FileHeader.java\")</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(\"ClassHeader.java\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> $</span>&#123;NAME&#125; extends Activity&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用 MyActivity 模板新建的 LoginActivity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * LoginActivity      2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2016 jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.jiejue.catwalk.ui.ac;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       \t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>类似地，我们也可以建立 Adapter、单例等等的模板代码。</p>\n</blockquote>\n<h3 id=\"立即停止-AndroidStudio-编译\"><a href=\"#立即停止-AndroidStudio-编译\" class=\"headerlink\" title=\"立即停止 AndroidStudio 编译\"></a>立即停止 AndroidStudio 编译</h3><p>  一个命令就可以停止它！</p>\n<p>  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac</span><br><span class=\"line\">./gradlew --stop</span><br><span class=\"line\"></span><br><span class=\"line\">window</span><br><span class=\"line\">gradlew --stop</span><br></pre></td></tr></table></figure>\n<p>  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。</p>\n<h3 id=\"关闭-显示方法参数提示\"><a href=\"#关闭-显示方法参数提示\" class=\"headerlink\" title=\"关闭 / 显示方法参数提示\"></a>关闭 / 显示方法参数提示</h3><p><img src=\"/images/1.png\" alt=\"\"></p>\n<p><img src=\"/images/2.png\" alt=\"\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\".ignore\"></a>.ignore</h3><p>给 Git 项目生成最合适的 ignore 文件。</p>\n<h3 id=\"ButterKnife-Zelezny\"><a href=\"#ButterKnife-Zelezny\" class=\"headerlink\" title=\"ButterKnife Zelezny\"></a>ButterKnife Zelezny</h3><p>在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。</p>\n<h3 id=\"SelectorChapek\"><a href=\"#SelectorChapek\" class=\"headerlink\" title=\"SelectorChapek\"></a>SelectorChapek</h3><p>可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。</p>\n<h3 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h3><p>可将一段 Json 生成所需的 Gson 实体。</p>\n<h3 id=\"Android-Parcelable-code-generator\"><a href=\"#Android-Parcelable-code-generator\" class=\"headerlink\" title=\"Android Parcelable code generator\"></a>Android Parcelable code generator</h3><p>可自动生成 Parcelable 接口所需的代码。</p>\n<h3 id=\"AndroidCodeGenerator\"><a href=\"#AndroidCodeGenerator\" class=\"headerlink\" title=\"AndroidCodeGenerator\"></a>AndroidCodeGenerator</h3><p>可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。</p>\n<h3 id=\"Prettify\"><a href=\"#Prettify\" class=\"headerlink\" title=\"Prettify\"></a>Prettify</h3><p>可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。</p>\n<h3 id=\"Exynap\"><a href=\"#Exynap\" class=\"headerlink\" title=\"Exynap\"></a>Exynap</h3><p><a href=\"http://exynap.com/\" target=\"_blank\" rel=\"noopener\">Exynap</a> 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。</p>\n<h3 id=\"Android-Methods-Count\"><a href=\"#Android-Methods-Count\" class=\"headerlink\" title=\"Android Methods Count\"></a>Android Methods Count</h3><p>高效统计 Android 开源库的方法数。</p>\n<h3 id=\"AndroidLocalizationer\"><a href=\"#AndroidLocalizationer\" class=\"headerlink\" title=\"AndroidLocalizationer\"></a>AndroidLocalizationer</h3><p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。</p>\n<h3 id=\"Key-Promoter\"><a href=\"#Key-Promoter\" class=\"headerlink\" title=\"Key Promoter\"></a>Key Promoter</h3><p>当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。</p>\n<h3 id=\"FindBugs-IDEA\"><a href=\"#FindBugs-IDEA\" class=\"headerlink\" title=\"FindBugs-IDEA\"></a>FindBugs-IDEA</h3><p>一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .</p>\n<h3 id=\"ADB-Idea\"><a href=\"#ADB-Idea\" class=\"headerlink\" title=\"ADB Idea\"></a>ADB Idea</h3><p><a href=\"https://github.com/pbreault/adb-idea\" target=\"_blank\" rel=\"noopener\">ADB Idea</a> 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。</p>\n<h3 id=\"Codota\"><a href=\"#Codota\" class=\"headerlink\" title=\"Codota\"></a>Codota</h3><p><a href=\"https://www.codota.com/\" target=\"_blank\" rel=\"noopener\">Codota</a> 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h3><p>Stetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。</p>\n<h3 id=\"Gradle-please\"><a href=\"#Gradle-please\" class=\"headerlink\" title=\"Gradle, please\"></a>Gradle, please</h3><p><a href=\"http://gradleplease.appspot.com/\" target=\"_blank\" rel=\"noopener\">Gradle, please</a> 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。</p>\n<h3 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h3><p>LeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。</p>\n<h3 id=\"Android-Debug-Database\"><a href=\"#Android-Debug-Database\" class=\"headerlink\" title=\"Android Debug Database\"></a>Android Debug Database</h3><p>Android Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。</p>\n<h3 id=\"Android-WiFi-ADB\"><a href=\"#Android-WiFi-ADB\" class=\"headerlink\" title=\"Android WiFi ADB\"></a>Android WiFi ADB</h3><p><a href=\"https://github.com/pedrovgs/AndroidWiFiADB\" target=\"_blank\" rel=\"noopener\">Android WiFi ADB</a> 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。</p>\n<h3 id=\"drawable-optimizer\"><a href=\"#drawable-optimizer\" class=\"headerlink\" title=\"drawable-optimizer\"></a>drawable-optimizer</h3><p><a href=\"https://github.com/fabiomsr/drawable-optimizer\" target=\"_blank\" rel=\"noopener\">drawable-optimizer</a> 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。</p>\n<h3 id=\"DevKnox\"><a href=\"#DevKnox\" class=\"headerlink\" title=\"DevKnox\"></a>DevKnox</h3><p>app 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。<strong>使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -&gt; Devknox Scan 就会开始扫描。</strong></p>\n<h3 id=\"ClassyShark\"><a href=\"#ClassyShark\" class=\"headerlink\" title=\"ClassyShark\"></a>ClassyShark</h3><p><a href=\"https://github.com/google/android-classyshark\" target=\"_blank\" rel=\"noopener\">ClassyShark</a> 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"#技巧\">技巧</a></p>\n<p><a href=\"#插件\">插件</a></p>\n<p><a href=\"#工具\">工具</a></p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p><code>双击 Shift 键</code>。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。</p>\n<h3 id=\"Search-Action\"><a href=\"#Search-Action\" class=\"headerlink\" title=\"Search Action\"></a>Search Action</h3><p><code>Ctrl + Shift + A</code>。类似搜索指令的入口。如输入 “Open Recent” 可以查找最近的工程；输入 “hier” 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。</p>\n<h3 id=\"演示模式\"><a href=\"#演示模式\" class=\"headerlink\" title=\"演示模式\"></a>演示模式</h3><p>在菜单栏 <code>View 选项</code> 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。</p>\n<h3 id=\"显示最近操作、修改\"><a href=\"#显示最近操作、修改\" class=\"headerlink\" title=\"显示最近操作、修改\"></a>显示最近操作、修改</h3><p><code>Ctrl + E</code> 和 <code>Ctrl + Shift + E</code> 快速显示最近文件操作和文件修改。同时可用 <code>Ctrl + Tab</code> 进行各个界面的切换。</p>\n<h3 id=\"操作记录前进和回退\"><a href=\"#操作记录前进和回退\" class=\"headerlink\" title=\"操作记录前进和回退\"></a>操作记录前进和回退</h3><p><code>Ctrl + Alt + Left/Right</code>。</p>\n<h3 id=\"移动行\"><a href=\"#移动行\" class=\"headerlink\" title=\"移动行\"></a>移动行</h3><p><code>Alt + Shift + 方向键上/方向键下</code>。整体移动也是类似的方法。</p>\n<h3 id=\"交换行\"><a href=\"#交换行\" class=\"headerlink\" title=\"交换行\"></a>交换行</h3><p><code>Ctrl + Shift + 方向键上/方向键下</code>。</p>\n<h3 id=\"Log-快捷模板\"><a href=\"#Log-快捷模板\" class=\"headerlink\" title=\"Log 快捷模板\"></a>Log 快捷模板</h3><p>在 onCreate 中输入 <code>logi</code> ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.i(TAG, <span class=\"string\">\"onCreate: \"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看大纲\"><a href=\"#查看大纲\" class=\"headerlink\" title=\"查看大纲\"></a>查看大纲</h3><p><code>(Fn) + Ctrl + F12</code>。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。</p>\n<h3 id=\"附加调试\"><a href=\"#附加调试\" class=\"headerlink\" title=\"附加调试\"></a>附加调试</h3><p>在 ADB 连接手机情况下，点击 <code>attach to debugger</code> 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>全局折叠、展开：<code>Ctrl + Shift + -</code> 、<code>Ctrl + Shift + +</code><br>局部折叠、展开：<code>Ctrl  + -</code> 、<code>Ctrl  + +</code> </p>\n<h3 id=\"在文件系统中打开文件\"><a href=\"#在文件系统中打开文件\" class=\"headerlink\" title=\"在文件系统中打开文件\"></a>在文件系统中打开文件</h3><p>按住 Ctrl 键并点击打开的代码的 Tab 页。</p>\n<h3 id=\"预览方法定义\"><a href=\"#预览方法定义\" class=\"headerlink\" title=\"预览方法定义\"></a>预览方法定义</h3><p><code>Ctrl + Shift + i (mac 为 Command + Y)</code>。在本页面预览方法的定义，无需跳转到方法定义的地方去。</p>\n<h3 id=\"拆分窗口\"><a href=\"#拆分窗口\" class=\"headerlink\" title=\"拆分窗口\"></a>拆分窗口</h3><p>在编辑区域显示多个编辑界面：Window –&gt; Editor Tabs –&gt; Split vertical \\ horizontal</p>\n<h3 id=\"Extract-的妙用\"><a href=\"#Extract-的妙用\" class=\"headerlink\" title=\"Extract 的妙用\"></a>Extract 的妙用</h3><p><strong>Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。</strong><br>在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。</p>\n<h3 id=\"方法调用栈\"><a href=\"#方法调用栈\" class=\"headerlink\" title=\"方法调用栈\"></a>方法调用栈</h3><p><code>Ctrl + Alt + H</code> 可以快速找到该方法的调用栈。</p>\n<h3 id=\"Surround-With\"><a href=\"#Surround-With\" class=\"headerlink\" title=\"Surround With\"></a>Surround With</h3><p><code>Ctrl + Alt + T</code>。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。</p>\n<h3 id=\"Image-Asset-amp-amp-Vector-Asset\"><a href=\"#Image-Asset-amp-amp-Vector-Asset\" class=\"headerlink\" title=\"Image Asset &amp;&amp; Vector Asset\"></a>Image Asset &amp;&amp; Vector Asset</h3><p>可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><ul>\n<li>条件断点<br> 满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。</li>\n<li>临时断点<br>执行一次断点后该断点就会消失。在当前行使用快捷键 <code>(Fn) + Ctrl + Alt + F8</code>，即可生成一个临时断点，临时断点上有一个数字“1”。</li>\n<li>异常断点<br>在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。</li>\n<li>日志断点<br>当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。</li>\n</ul>\n<h3 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h3><ul>\n<li><p>内置模板<br><code>Ctrl + J</code> 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。</p>\n</li>\n<li><p>后缀模板<br><code>Ctrl + J</code> 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。</p>\n</li>\n<li><p>自定义模板</p>\n<p><strong>方法注释</strong></p>\n<p> ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * $desc$</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * create at $date$</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p><strong>文件、类注释</strong></p>\n<p>①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。</p>\n</li>\n</ul>\n<p>ClassHeader 模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> $&#123;USER&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>FileHeader模板：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * $&#123;NAME&#125;      $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) $&#123;YEAR&#125; jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package $&#123;PACKAGE_NAME&#125;;#end</span><br></pre></td></tr></table></figure>\n<p>MyActivity模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parse(\"FileHeader.java\")</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(\"ClassHeader.java\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> $</span>&#123;NAME&#125; extends Activity&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用 MyActivity 模板新建的 LoginActivity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * LoginActivity      2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2016 jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.jiejue.catwalk.ui.ac;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       \t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>类似地，我们也可以建立 Adapter、单例等等的模板代码。</p>\n</blockquote>\n<h3 id=\"立即停止-AndroidStudio-编译\"><a href=\"#立即停止-AndroidStudio-编译\" class=\"headerlink\" title=\"立即停止 AndroidStudio 编译\"></a>立即停止 AndroidStudio 编译</h3><p>  一个命令就可以停止它！</p>\n<p>  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac</span><br><span class=\"line\">./gradlew --stop</span><br><span class=\"line\"></span><br><span class=\"line\">window</span><br><span class=\"line\">gradlew --stop</span><br></pre></td></tr></table></figure>\n<p>  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。</p>\n<h3 id=\"关闭-显示方法参数提示\"><a href=\"#关闭-显示方法参数提示\" class=\"headerlink\" title=\"关闭 / 显示方法参数提示\"></a>关闭 / 显示方法参数提示</h3><p><img src=\"/images/1.png\" alt=\"\"></p>\n<p><img src=\"/images/2.png\" alt=\"\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\".ignore\"></a>.ignore</h3><p>给 Git 项目生成最合适的 ignore 文件。</p>\n<h3 id=\"ButterKnife-Zelezny\"><a href=\"#ButterKnife-Zelezny\" class=\"headerlink\" title=\"ButterKnife Zelezny\"></a>ButterKnife Zelezny</h3><p>在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。</p>\n<h3 id=\"SelectorChapek\"><a href=\"#SelectorChapek\" class=\"headerlink\" title=\"SelectorChapek\"></a>SelectorChapek</h3><p>可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。</p>\n<h3 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h3><p>可将一段 Json 生成所需的 Gson 实体。</p>\n<h3 id=\"Android-Parcelable-code-generator\"><a href=\"#Android-Parcelable-code-generator\" class=\"headerlink\" title=\"Android Parcelable code generator\"></a>Android Parcelable code generator</h3><p>可自动生成 Parcelable 接口所需的代码。</p>\n<h3 id=\"AndroidCodeGenerator\"><a href=\"#AndroidCodeGenerator\" class=\"headerlink\" title=\"AndroidCodeGenerator\"></a>AndroidCodeGenerator</h3><p>可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。</p>\n<h3 id=\"Prettify\"><a href=\"#Prettify\" class=\"headerlink\" title=\"Prettify\"></a>Prettify</h3><p>可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。</p>\n<h3 id=\"Exynap\"><a href=\"#Exynap\" class=\"headerlink\" title=\"Exynap\"></a>Exynap</h3><p><a href=\"http://exynap.com/\" target=\"_blank\" rel=\"noopener\">Exynap</a> 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。</p>\n<h3 id=\"Android-Methods-Count\"><a href=\"#Android-Methods-Count\" class=\"headerlink\" title=\"Android Methods Count\"></a>Android Methods Count</h3><p>高效统计 Android 开源库的方法数。</p>\n<h3 id=\"AndroidLocalizationer\"><a href=\"#AndroidLocalizationer\" class=\"headerlink\" title=\"AndroidLocalizationer\"></a>AndroidLocalizationer</h3><p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。</p>\n<h3 id=\"Key-Promoter\"><a href=\"#Key-Promoter\" class=\"headerlink\" title=\"Key Promoter\"></a>Key Promoter</h3><p>当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。</p>\n<h3 id=\"FindBugs-IDEA\"><a href=\"#FindBugs-IDEA\" class=\"headerlink\" title=\"FindBugs-IDEA\"></a>FindBugs-IDEA</h3><p>一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .</p>\n<h3 id=\"ADB-Idea\"><a href=\"#ADB-Idea\" class=\"headerlink\" title=\"ADB Idea\"></a>ADB Idea</h3><p><a href=\"https://github.com/pbreault/adb-idea\" target=\"_blank\" rel=\"noopener\">ADB Idea</a> 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。</p>\n<h3 id=\"Codota\"><a href=\"#Codota\" class=\"headerlink\" title=\"Codota\"></a>Codota</h3><p><a href=\"https://www.codota.com/\" target=\"_blank\" rel=\"noopener\">Codota</a> 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h3><p>Stetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。</p>\n<h3 id=\"Gradle-please\"><a href=\"#Gradle-please\" class=\"headerlink\" title=\"Gradle, please\"></a>Gradle, please</h3><p><a href=\"http://gradleplease.appspot.com/\" target=\"_blank\" rel=\"noopener\">Gradle, please</a> 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。</p>\n<h3 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h3><p>LeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。</p>\n<h3 id=\"Android-Debug-Database\"><a href=\"#Android-Debug-Database\" class=\"headerlink\" title=\"Android Debug Database\"></a>Android Debug Database</h3><p>Android Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。</p>\n<h3 id=\"Android-WiFi-ADB\"><a href=\"#Android-WiFi-ADB\" class=\"headerlink\" title=\"Android WiFi ADB\"></a>Android WiFi ADB</h3><p><a href=\"https://github.com/pedrovgs/AndroidWiFiADB\" target=\"_blank\" rel=\"noopener\">Android WiFi ADB</a> 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。</p>\n<h3 id=\"drawable-optimizer\"><a href=\"#drawable-optimizer\" class=\"headerlink\" title=\"drawable-optimizer\"></a>drawable-optimizer</h3><p><a href=\"https://github.com/fabiomsr/drawable-optimizer\" target=\"_blank\" rel=\"noopener\">drawable-optimizer</a> 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。</p>\n<h3 id=\"DevKnox\"><a href=\"#DevKnox\" class=\"headerlink\" title=\"DevKnox\"></a>DevKnox</h3><p>app 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。<strong>使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -&gt; Devknox Scan 就会开始扫描。</strong></p>\n<h3 id=\"ClassyShark\"><a href=\"#ClassyShark\" class=\"headerlink\" title=\"ClassyShark\"></a>ClassyShark</h3><p><a href=\"https://github.com/google/android-classyshark\" target=\"_blank\" rel=\"noopener\">ClassyShark</a> 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。</p>\n"},{"title":"Chrome 开发者工具调试","date":"2018-03-03T16:00:00.000Z","_content":"\n\n\n\n\n\n### Chrome 开发者工具面板简介\n\n![](/images/3.png)\n\n- 箭头图标\n\n  用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。\n\n- 设备图标\n\n  可以选择不同的终端设备、不同的尺寸比例进行模拟开发。\n\n- Elements\n\n  查找网页源代码 HTML 中的任一元素，手动修改任一元素的**属性**和**样式**且能实时在浏览器里面得到反馈。\n\n- Console\n\n  记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .\n\n- Sources\n\n  用于**查看**和**调试**当前页面所加载的脚本的源文件。\n\n- Network\n\n  用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。\n\n- Performance\n\n- Memory\n\n- Application\n\n  记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。\n\n- Security\n\n  判断当前网站的安全性，查看有效证书等。\n\n- Audits\n\n  对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。\n\n### Elements\n\n可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。\n\n- 双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。\n\n- 点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。\n\n![](/images/4.png)\n\n- 点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。\n\n> 注意：**以上对页面上的修改并不会作用到源码上**，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。\n\n### Console\n\n#### 在控制台输出日志\n**在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中**\n\n- console.log\n\n  打印一般的基础日志信息，当要打印的基础日志太多时可使用 `console.group` 将相关的日志进行分组。\n\n- console.warn\n\n  打印带有黄色小图标的警告信息。\n\n- console.error\n\n  打印带有红色小图标的错误信息。\n\n![](/images/5.png)\n\n- console.assert\n\n  当第一个参数为 false 时，才会打印第二个参数的值。\n\n![](/images/6.png)\n\n**可以根据 JS 条件判断输出不同的日志信息**\n\n> 当需要换到下一行而不是回车的时候，请按 `Shift + Enter`\n\n![](/images/7.png)\n\n#### 与控制台交互\n\n- JS 表达式计算\n\n  可以在控制台中输入 JS 表达式，然后点击 `Enter` 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 `Tab` 键补全命令。\n\n![](/images/8.png)\n\n- 选择元素\n\n  **$(selector)**: 列出与 selector 匹配的所有元素。\n\n  **$$(selector)**: 列出与 selector 匹配的所有元素组成了数组。\n\n  **$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 \n\n另外还有两种方法与上面类似：\n\n**document.querySelector(\"img\")**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。\n\n**document.querySelectorAll(\"img\")**：等同于 $$(selector) 。\n\n![](/images/9.png)\n\n> 点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。\n\n### Sources\n\n#### 格式化代码\n\n![](/images/10.png)\n\n![](/images/11.png)\n\n以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 `{}` 即可将源代码格式化。\n\n#### Sinppets 代码片段\n\n我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。\n\n以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 `Save` 保存代码。在 sum.js 文件上右键选择 `Run` 即可运行代码，代码的运行结果会在底部的 Console 输出。\n\n![](/images/12.png)\n\n此外，**如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。**\n\n比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。\n\n![](/images/13.png)\n\n#### 断点调试\n\n#### 在代码中打断点\n\n![](/images/18.png)\n\n在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。\n\n> 在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。\n\n#### 快速进入调试的方法\n\n当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 `F11` 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 `F10` 或者点击右上角的第二个按钮即可直接进入此方法的断点处。\n\n##### 调试的功能区域介绍\n\n调试的功能区域在调试页面的**右侧**。下图为在某方法处打了一个断点。\n\n![](/images/19.png)\n\n- watch\n\n  可以用来实时监视变量的值。\n\n- Call Stack\n\n  断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。\n\n  如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 **Restart Frame** ，那么断点就会跳转到该方法的开头处重新执行。 \n\n- Scope\n\n  可以查看此时局部变量和全局变量的值。\n \n- Breakpoints\n\n  展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。\n\n- XHR Breakpoints\n\n  点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。\n\n- DOM Breakpoints\n\n  当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。\n\n- Event listener Breakpoints \n\n  此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。\n\n\n\n\n\n\n\n\n参考资料：\n\n[Chrome开发者工具详解(1)-Elements、Console、Sources面板](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n[超完整的 Chrome 浏览器客户端调试大全](http://web.jobbole.com/89344/)","source":"_posts/Chrome-开发者工具调试.md","raw":"---\ntitle: Chrome 开发者工具调试\ndate: 2018-3-4\ncategories: \"工具\"\ntags:\n     - Chrome\n     - 工具\n     - 调试\n---\n\n\n\n\n\n\n### Chrome 开发者工具面板简介\n\n![](/images/3.png)\n\n- 箭头图标\n\n  用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。\n\n- 设备图标\n\n  可以选择不同的终端设备、不同的尺寸比例进行模拟开发。\n\n- Elements\n\n  查找网页源代码 HTML 中的任一元素，手动修改任一元素的**属性**和**样式**且能实时在浏览器里面得到反馈。\n\n- Console\n\n  记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .\n\n- Sources\n\n  用于**查看**和**调试**当前页面所加载的脚本的源文件。\n\n- Network\n\n  用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。\n\n- Performance\n\n- Memory\n\n- Application\n\n  记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。\n\n- Security\n\n  判断当前网站的安全性，查看有效证书等。\n\n- Audits\n\n  对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。\n\n### Elements\n\n可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。\n\n- 双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。\n\n- 点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。\n\n![](/images/4.png)\n\n- 点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。\n\n> 注意：**以上对页面上的修改并不会作用到源码上**，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。\n\n### Console\n\n#### 在控制台输出日志\n**在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中**\n\n- console.log\n\n  打印一般的基础日志信息，当要打印的基础日志太多时可使用 `console.group` 将相关的日志进行分组。\n\n- console.warn\n\n  打印带有黄色小图标的警告信息。\n\n- console.error\n\n  打印带有红色小图标的错误信息。\n\n![](/images/5.png)\n\n- console.assert\n\n  当第一个参数为 false 时，才会打印第二个参数的值。\n\n![](/images/6.png)\n\n**可以根据 JS 条件判断输出不同的日志信息**\n\n> 当需要换到下一行而不是回车的时候，请按 `Shift + Enter`\n\n![](/images/7.png)\n\n#### 与控制台交互\n\n- JS 表达式计算\n\n  可以在控制台中输入 JS 表达式，然后点击 `Enter` 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 `Tab` 键补全命令。\n\n![](/images/8.png)\n\n- 选择元素\n\n  **$(selector)**: 列出与 selector 匹配的所有元素。\n\n  **$$(selector)**: 列出与 selector 匹配的所有元素组成了数组。\n\n  **$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 \n\n另外还有两种方法与上面类似：\n\n**document.querySelector(\"img\")**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。\n\n**document.querySelectorAll(\"img\")**：等同于 $$(selector) 。\n\n![](/images/9.png)\n\n> 点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。\n\n### Sources\n\n#### 格式化代码\n\n![](/images/10.png)\n\n![](/images/11.png)\n\n以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 `{}` 即可将源代码格式化。\n\n#### Sinppets 代码片段\n\n我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。\n\n以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 `Save` 保存代码。在 sum.js 文件上右键选择 `Run` 即可运行代码，代码的运行结果会在底部的 Console 输出。\n\n![](/images/12.png)\n\n此外，**如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。**\n\n比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。\n\n![](/images/13.png)\n\n#### 断点调试\n\n#### 在代码中打断点\n\n![](/images/18.png)\n\n在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。\n\n> 在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。\n\n#### 快速进入调试的方法\n\n当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 `F11` 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 `F10` 或者点击右上角的第二个按钮即可直接进入此方法的断点处。\n\n##### 调试的功能区域介绍\n\n调试的功能区域在调试页面的**右侧**。下图为在某方法处打了一个断点。\n\n![](/images/19.png)\n\n- watch\n\n  可以用来实时监视变量的值。\n\n- Call Stack\n\n  断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。\n\n  如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 **Restart Frame** ，那么断点就会跳转到该方法的开头处重新执行。 \n\n- Scope\n\n  可以查看此时局部变量和全局变量的值。\n \n- Breakpoints\n\n  展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。\n\n- XHR Breakpoints\n\n  点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。\n\n- DOM Breakpoints\n\n  当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。\n\n- Event listener Breakpoints \n\n  此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。\n\n\n\n\n\n\n\n\n参考资料：\n\n[Chrome开发者工具详解(1)-Elements、Console、Sources面板](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n[超完整的 Chrome 浏览器客户端调试大全](http://web.jobbole.com/89344/)","slug":"Chrome-开发者工具调试","published":1,"updated":"2018-06-25T03:42:59.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbook0006coquayij20ko","content":"<h3 id=\"Chrome-开发者工具面板简介\"><a href=\"#Chrome-开发者工具面板简介\" class=\"headerlink\" title=\"Chrome 开发者工具面板简介\"></a>Chrome 开发者工具面板简介</h3><p><img src=\"/images/3.png\" alt=\"\"></p>\n<ul>\n<li><p>箭头图标</p>\n<p>用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。</p>\n</li>\n<li><p>设备图标</p>\n<p>可以选择不同的终端设备、不同的尺寸比例进行模拟开发。</p>\n</li>\n<li><p>Elements</p>\n<p>查找网页源代码 HTML 中的任一元素，手动修改任一元素的<strong>属性</strong>和<strong>样式</strong>且能实时在浏览器里面得到反馈。</p>\n</li>\n<li><p>Console</p>\n<p>记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .</p>\n</li>\n<li><p>Sources</p>\n<p>用于<strong>查看</strong>和<strong>调试</strong>当前页面所加载的脚本的源文件。</p>\n</li>\n<li><p>Network</p>\n<p>用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。</p>\n</li>\n<li><p>Performance</p>\n</li>\n<li><p>Memory</p>\n</li>\n<li><p>Application</p>\n<p>记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p>\n</li>\n<li><p>Security</p>\n<p>判断当前网站的安全性，查看有效证书等。</p>\n</li>\n<li><p>Audits</p>\n<p>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。</p>\n</li>\n</ul>\n<h3 id=\"Elements\"><a href=\"#Elements\" class=\"headerlink\" title=\"Elements\"></a>Elements</h3><p>可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。</p>\n<ul>\n<li><p>双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。</p>\n</li>\n<li><p>点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。</p>\n</li>\n</ul>\n<p><img src=\"/images/4.png\" alt=\"\"></p>\n<ul>\n<li>点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。</li>\n</ul>\n<blockquote>\n<p>注意：<strong>以上对页面上的修改并不会作用到源码上</strong>，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。</p>\n</blockquote>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><h4 id=\"在控制台输出日志\"><a href=\"#在控制台输出日志\" class=\"headerlink\" title=\"在控制台输出日志\"></a>在控制台输出日志</h4><p><strong>在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中</strong></p>\n<ul>\n<li><p>console.log</p>\n<p>打印一般的基础日志信息，当要打印的基础日志太多时可使用 <code>console.group</code> 将相关的日志进行分组。</p>\n</li>\n<li><p>console.warn</p>\n<p>打印带有黄色小图标的警告信息。</p>\n</li>\n<li><p>console.error</p>\n<p>打印带有红色小图标的错误信息。</p>\n</li>\n</ul>\n<p><img src=\"/images/5.png\" alt=\"\"></p>\n<ul>\n<li><p>console.assert</p>\n<p>当第一个参数为 false 时，才会打印第二个参数的值。</p>\n</li>\n</ul>\n<p><img src=\"/images/6.png\" alt=\"\"></p>\n<p><strong>可以根据 JS 条件判断输出不同的日志信息</strong></p>\n<blockquote>\n<p>当需要换到下一行而不是回车的时候，请按 <code>Shift + Enter</code></p>\n</blockquote>\n<p><img src=\"/images/7.png\" alt=\"\"></p>\n<h4 id=\"与控制台交互\"><a href=\"#与控制台交互\" class=\"headerlink\" title=\"与控制台交互\"></a>与控制台交互</h4><ul>\n<li><p>JS 表达式计算</p>\n<p>可以在控制台中输入 JS 表达式，然后点击 <code>Enter</code> 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 <code>Tab</code> 键补全命令。</p>\n</li>\n</ul>\n<p><img src=\"/images/8.png\" alt=\"\"></p>\n<ul>\n<li><p>选择元素</p>\n<p><strong>$(selector)</strong>: 列出与 selector 匹配的所有元素。</p>\n<p><strong>$$(selector)</strong>: 列出与 selector 匹配的所有元素组成了数组。</p>\n<p><strong>$x(path)</strong>：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 </p>\n</li>\n</ul>\n<p>另外还有两种方法与上面类似：</p>\n<p><strong>document.querySelector(“img”)</strong>：会返回 DOM 中匹配的第一个元素（只返回一个元素）。</p>\n<p><strong>document.querySelectorAll(“img”)</strong>：等同于 $$(selector) 。</p>\n<p><img src=\"/images/9.png\" alt=\"\"></p>\n<blockquote>\n<p>点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。</p>\n</blockquote>\n<h3 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h3><h4 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h4><p><img src=\"/images/10.png\" alt=\"\"></p>\n<p><img src=\"/images/11.png\" alt=\"\"></p>\n<p>以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 <code>{}</code> 即可将源代码格式化。</p>\n<h4 id=\"Sinppets-代码片段\"><a href=\"#Sinppets-代码片段\" class=\"headerlink\" title=\"Sinppets 代码片段\"></a>Sinppets 代码片段</h4><p>我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。</p>\n<p>以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 <code>Save</code> 保存代码。在 sum.js 文件上右键选择 <code>Run</code> 即可运行代码，代码的运行结果会在底部的 Console 输出。</p>\n<p><img src=\"/images/12.png\" alt=\"\"></p>\n<p>此外，<strong>如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。</strong></p>\n<p>比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。</p>\n<p><img src=\"/images/13.png\" alt=\"\"></p>\n<h4 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h4><h4 id=\"在代码中打断点\"><a href=\"#在代码中打断点\" class=\"headerlink\" title=\"在代码中打断点\"></a>在代码中打断点</h4><p><img src=\"/images/18.png\" alt=\"\"></p>\n<p>在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。</p>\n<blockquote>\n<p>在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。</p>\n</blockquote>\n<h4 id=\"快速进入调试的方法\"><a href=\"#快速进入调试的方法\" class=\"headerlink\" title=\"快速进入调试的方法\"></a>快速进入调试的方法</h4><p>当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 <code>F11</code> 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 <code>F10</code> 或者点击右上角的第二个按钮即可直接进入此方法的断点处。</p>\n<h5 id=\"调试的功能区域介绍\"><a href=\"#调试的功能区域介绍\" class=\"headerlink\" title=\"调试的功能区域介绍\"></a>调试的功能区域介绍</h5><p>调试的功能区域在调试页面的<strong>右侧</strong>。下图为在某方法处打了一个断点。</p>\n<p><img src=\"/images/19.png\" alt=\"\"></p>\n<ul>\n<li><p>watch</p>\n<p>可以用来实时监视变量的值。</p>\n</li>\n<li><p>Call Stack</p>\n<p>断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。</p>\n<p>如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 <strong>Restart Frame</strong> ，那么断点就会跳转到该方法的开头处重新执行。 </p>\n</li>\n<li><p>Scope</p>\n<p>可以查看此时局部变量和全局变量的值。</p>\n</li>\n<li><p>Breakpoints</p>\n<p>展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。</p>\n</li>\n<li><p>XHR Breakpoints</p>\n<p>点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。</p>\n</li>\n<li><p>DOM Breakpoints</p>\n<p>当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。</p>\n</li>\n<li><p>Event listener Breakpoints </p>\n<p>此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。</p>\n</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具详解(1)-Elements、Console、Sources面板</a></p>\n<p><a href=\"http://web.jobbole.com/89344/\" target=\"_blank\" rel=\"noopener\">超完整的 Chrome 浏览器客户端调试大全</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Chrome-开发者工具面板简介\"><a href=\"#Chrome-开发者工具面板简介\" class=\"headerlink\" title=\"Chrome 开发者工具面板简介\"></a>Chrome 开发者工具面板简介</h3><p><img src=\"/images/3.png\" alt=\"\"></p>\n<ul>\n<li><p>箭头图标</p>\n<p>用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。</p>\n</li>\n<li><p>设备图标</p>\n<p>可以选择不同的终端设备、不同的尺寸比例进行模拟开发。</p>\n</li>\n<li><p>Elements</p>\n<p>查找网页源代码 HTML 中的任一元素，手动修改任一元素的<strong>属性</strong>和<strong>样式</strong>且能实时在浏览器里面得到反馈。</p>\n</li>\n<li><p>Console</p>\n<p>记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .</p>\n</li>\n<li><p>Sources</p>\n<p>用于<strong>查看</strong>和<strong>调试</strong>当前页面所加载的脚本的源文件。</p>\n</li>\n<li><p>Network</p>\n<p>用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。</p>\n</li>\n<li><p>Performance</p>\n</li>\n<li><p>Memory</p>\n</li>\n<li><p>Application</p>\n<p>记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p>\n</li>\n<li><p>Security</p>\n<p>判断当前网站的安全性，查看有效证书等。</p>\n</li>\n<li><p>Audits</p>\n<p>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。</p>\n</li>\n</ul>\n<h3 id=\"Elements\"><a href=\"#Elements\" class=\"headerlink\" title=\"Elements\"></a>Elements</h3><p>可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。</p>\n<ul>\n<li><p>双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。</p>\n</li>\n<li><p>点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。</p>\n</li>\n</ul>\n<p><img src=\"/images/4.png\" alt=\"\"></p>\n<ul>\n<li>点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。</li>\n</ul>\n<blockquote>\n<p>注意：<strong>以上对页面上的修改并不会作用到源码上</strong>，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。</p>\n</blockquote>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><h4 id=\"在控制台输出日志\"><a href=\"#在控制台输出日志\" class=\"headerlink\" title=\"在控制台输出日志\"></a>在控制台输出日志</h4><p><strong>在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中</strong></p>\n<ul>\n<li><p>console.log</p>\n<p>打印一般的基础日志信息，当要打印的基础日志太多时可使用 <code>console.group</code> 将相关的日志进行分组。</p>\n</li>\n<li><p>console.warn</p>\n<p>打印带有黄色小图标的警告信息。</p>\n</li>\n<li><p>console.error</p>\n<p>打印带有红色小图标的错误信息。</p>\n</li>\n</ul>\n<p><img src=\"/images/5.png\" alt=\"\"></p>\n<ul>\n<li><p>console.assert</p>\n<p>当第一个参数为 false 时，才会打印第二个参数的值。</p>\n</li>\n</ul>\n<p><img src=\"/images/6.png\" alt=\"\"></p>\n<p><strong>可以根据 JS 条件判断输出不同的日志信息</strong></p>\n<blockquote>\n<p>当需要换到下一行而不是回车的时候，请按 <code>Shift + Enter</code></p>\n</blockquote>\n<p><img src=\"/images/7.png\" alt=\"\"></p>\n<h4 id=\"与控制台交互\"><a href=\"#与控制台交互\" class=\"headerlink\" title=\"与控制台交互\"></a>与控制台交互</h4><ul>\n<li><p>JS 表达式计算</p>\n<p>可以在控制台中输入 JS 表达式，然后点击 <code>Enter</code> 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 <code>Tab</code> 键补全命令。</p>\n</li>\n</ul>\n<p><img src=\"/images/8.png\" alt=\"\"></p>\n<ul>\n<li><p>选择元素</p>\n<p><strong>$(selector)</strong>: 列出与 selector 匹配的所有元素。</p>\n<p><strong>$$(selector)</strong>: 列出与 selector 匹配的所有元素组成了数组。</p>\n<p><strong>$x(path)</strong>：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 </p>\n</li>\n</ul>\n<p>另外还有两种方法与上面类似：</p>\n<p><strong>document.querySelector(“img”)</strong>：会返回 DOM 中匹配的第一个元素（只返回一个元素）。</p>\n<p><strong>document.querySelectorAll(“img”)</strong>：等同于 $$(selector) 。</p>\n<p><img src=\"/images/9.png\" alt=\"\"></p>\n<blockquote>\n<p>点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。</p>\n</blockquote>\n<h3 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h3><h4 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h4><p><img src=\"/images/10.png\" alt=\"\"></p>\n<p><img src=\"/images/11.png\" alt=\"\"></p>\n<p>以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 <code>{}</code> 即可将源代码格式化。</p>\n<h4 id=\"Sinppets-代码片段\"><a href=\"#Sinppets-代码片段\" class=\"headerlink\" title=\"Sinppets 代码片段\"></a>Sinppets 代码片段</h4><p>我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。</p>\n<p>以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 <code>Save</code> 保存代码。在 sum.js 文件上右键选择 <code>Run</code> 即可运行代码，代码的运行结果会在底部的 Console 输出。</p>\n<p><img src=\"/images/12.png\" alt=\"\"></p>\n<p>此外，<strong>如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。</strong></p>\n<p>比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。</p>\n<p><img src=\"/images/13.png\" alt=\"\"></p>\n<h4 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h4><h4 id=\"在代码中打断点\"><a href=\"#在代码中打断点\" class=\"headerlink\" title=\"在代码中打断点\"></a>在代码中打断点</h4><p><img src=\"/images/18.png\" alt=\"\"></p>\n<p>在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。</p>\n<blockquote>\n<p>在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。</p>\n</blockquote>\n<h4 id=\"快速进入调试的方法\"><a href=\"#快速进入调试的方法\" class=\"headerlink\" title=\"快速进入调试的方法\"></a>快速进入调试的方法</h4><p>当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 <code>F11</code> 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 <code>F10</code> 或者点击右上角的第二个按钮即可直接进入此方法的断点处。</p>\n<h5 id=\"调试的功能区域介绍\"><a href=\"#调试的功能区域介绍\" class=\"headerlink\" title=\"调试的功能区域介绍\"></a>调试的功能区域介绍</h5><p>调试的功能区域在调试页面的<strong>右侧</strong>。下图为在某方法处打了一个断点。</p>\n<p><img src=\"/images/19.png\" alt=\"\"></p>\n<ul>\n<li><p>watch</p>\n<p>可以用来实时监视变量的值。</p>\n</li>\n<li><p>Call Stack</p>\n<p>断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。</p>\n<p>如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 <strong>Restart Frame</strong> ，那么断点就会跳转到该方法的开头处重新执行。 </p>\n</li>\n<li><p>Scope</p>\n<p>可以查看此时局部变量和全局变量的值。</p>\n</li>\n<li><p>Breakpoints</p>\n<p>展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。</p>\n</li>\n<li><p>XHR Breakpoints</p>\n<p>点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。</p>\n</li>\n<li><p>DOM Breakpoints</p>\n<p>当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。</p>\n</li>\n<li><p>Event listener Breakpoints </p>\n<p>此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。</p>\n</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具详解(1)-Elements、Console、Sources面板</a></p>\n<p><a href=\"http://web.jobbole.com/89344/\" target=\"_blank\" rel=\"noopener\">超完整的 Chrome 浏览器客户端调试大全</a></p>\n"},{"title":"Android 一个应用多个数据库","date":"2018-01-05T16:42:00.000Z","_content":"\n\n\n最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。\n\n以存储用户信息为例：\n\n- 先贴出使用代码：\n\n```Java\nmUserDAO = new UserDAO(this, account); // 此处的 account 就是要操作的数据库名称\nmUserDAO.insert(new User(account, userName));\n```\n\n- 以下为三个关键类\n\n```Java\n/**\n * 数据库帮助类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class DBHelper extends SQLiteOpenHelper {\n\n    private static final int DB_VERSION = 1;\n    public static final String TABLE_NAME = \"user\";\n\n    public DBHelper(Context context, String dbName) {\n        super(context, dbName, null, DB_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        String sql = \"create table if not exists \" + TABLE_NAME + \" (account text primary key , userName text)\";\n        db.execSQL(sql);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        String sql = \"drop table if exists \" + TABLE_NAME;\n        db.execSQL(sql);\n        onCreate(db);\n    }\n}\n```\n\n```Java\n/**\n * 用户实体类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class User {\n\n    public String account; // 用户账号，假设唯一，用它作为数据库名称（dbName）\n    public String userName;\n\n    public User(String account, String userName) {\n        this.account = account;\n        this.userName = userName;\n    }\n}\n```\n\n```Java\n/**\n * 用户数据表相关操作\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class UserDAO {\n\n    private DBHelper mDBHelper;\n\n    public UserDAO(Context context, String dbName) {\n        mDBHelper = new DBHelper(context, dbName);\n    }\n\n    /**\n     * 插入一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean insert(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            ContentValues values = new ContentValues();\n            values.put(\"account\", user.account);\n            values.put(\"userName\", user.userName);\n            db.insertOrThrow(DBHelper.TABLE_NAME, null, values);\n            db.setTransactionSuccessful();\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 删除一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean delete(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            db.delete(DBHelper.TABLE_NAME, \"account = ?\", new String[]{user.account});\n            db.setTransactionSuccessful();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取所有数据\n     *\n     * @return\n     */\n    public List<User> getUserList() {\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n\n        try {\n            db = mDBHelper.getReadableDatabase();\n            cursor = db.query(DBHelper.TABLE_NAME,\n                    new String[]{\"account\", \"userName\"},\n                    null,\n                    null,\n                    null, null, null);\n\n            if (cursor.getCount() > 0) {\n                List<User> userList = new ArrayList<>();\n                while (cursor.moveToNext()) {\n                    User user = new User(cursor.getString(cursor.getColumnIndex(\"account\")), cursor.getString(cursor.getColumnIndex(\"userName\")));\n                    userList.add(user);\n                }\n                return userList;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != cursor) {\n                try {\n                    cursor.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (null != db) {\n                try {\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n}\n```","source":"_posts/Android-一个应用多个数据库.md","raw":"---\ntitle: Android 一个应用多个数据库\ndate: 2018-1-6 00:42:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n\n\n最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。\n\n以存储用户信息为例：\n\n- 先贴出使用代码：\n\n```Java\nmUserDAO = new UserDAO(this, account); // 此处的 account 就是要操作的数据库名称\nmUserDAO.insert(new User(account, userName));\n```\n\n- 以下为三个关键类\n\n```Java\n/**\n * 数据库帮助类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class DBHelper extends SQLiteOpenHelper {\n\n    private static final int DB_VERSION = 1;\n    public static final String TABLE_NAME = \"user\";\n\n    public DBHelper(Context context, String dbName) {\n        super(context, dbName, null, DB_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        String sql = \"create table if not exists \" + TABLE_NAME + \" (account text primary key , userName text)\";\n        db.execSQL(sql);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        String sql = \"drop table if exists \" + TABLE_NAME;\n        db.execSQL(sql);\n        onCreate(db);\n    }\n}\n```\n\n```Java\n/**\n * 用户实体类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class User {\n\n    public String account; // 用户账号，假设唯一，用它作为数据库名称（dbName）\n    public String userName;\n\n    public User(String account, String userName) {\n        this.account = account;\n        this.userName = userName;\n    }\n}\n```\n\n```Java\n/**\n * 用户数据表相关操作\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class UserDAO {\n\n    private DBHelper mDBHelper;\n\n    public UserDAO(Context context, String dbName) {\n        mDBHelper = new DBHelper(context, dbName);\n    }\n\n    /**\n     * 插入一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean insert(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            ContentValues values = new ContentValues();\n            values.put(\"account\", user.account);\n            values.put(\"userName\", user.userName);\n            db.insertOrThrow(DBHelper.TABLE_NAME, null, values);\n            db.setTransactionSuccessful();\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 删除一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean delete(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            db.delete(DBHelper.TABLE_NAME, \"account = ?\", new String[]{user.account});\n            db.setTransactionSuccessful();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取所有数据\n     *\n     * @return\n     */\n    public List<User> getUserList() {\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n\n        try {\n            db = mDBHelper.getReadableDatabase();\n            cursor = db.query(DBHelper.TABLE_NAME,\n                    new String[]{\"account\", \"userName\"},\n                    null,\n                    null,\n                    null, null, null);\n\n            if (cursor.getCount() > 0) {\n                List<User> userList = new ArrayList<>();\n                while (cursor.moveToNext()) {\n                    User user = new User(cursor.getString(cursor.getColumnIndex(\"account\")), cursor.getString(cursor.getColumnIndex(\"userName\")));\n                    userList.add(user);\n                }\n                return userList;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != cursor) {\n                try {\n                    cursor.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (null != db) {\n                try {\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n}\n```","slug":"Android-一个应用多个数据库","published":1,"updated":"2018-06-25T03:42:59.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbooo0007coqug971ig1e","content":"<p>最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。</p>\n<p>以存储用户信息为例：</p>\n<ul>\n<li>先贴出使用代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mUserDAO = <span class=\"keyword\">new</span> UserDAO(<span class=\"keyword\">this</span>, account); <span class=\"comment\">// 此处的 account 就是要操作的数据库名称</span></span><br><span class=\"line\">mUserDAO.insert(<span class=\"keyword\">new</span> User(account, userName));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以下为三个关键类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库帮助类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DB_VERSION = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_NAME = <span class=\"string\">\"user\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DBHelper</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, dbName, <span class=\"keyword\">null</span>, DB_VERSION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"create table if not exists \"</span> + TABLE_NAME + <span class=\"string\">\" (account text primary key , userName text)\"</span>;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"drop table if exists \"</span> + TABLE_NAME;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String account; <span class=\"comment\">// 用户账号，假设唯一，用它作为数据库名称（dbName）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String account, String userName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.account = account;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户数据表相关操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDAO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBHelper mDBHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDAO</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        mDBHelper = <span class=\"keyword\">new</span> DBHelper(context, dbName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">            values.put(<span class=\"string\">\"account\"</span>, user.account);</span><br><span class=\"line\">            values.put(<span class=\"string\">\"userName\"</span>, user.userName);</span><br><span class=\"line\">            db.insertOrThrow(DBHelper.TABLE_NAME, <span class=\"keyword\">null</span>, values);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            db.delete(DBHelper.TABLE_NAME, <span class=\"string\">\"account = ?\"</span>, <span class=\"keyword\">new</span> String[]&#123;user.account&#125;);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getReadableDatabase();</span><br><span class=\"line\">            cursor = db.query(DBHelper.TABLE_NAME,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"account\"</span>, <span class=\"string\">\"userName\"</span>&#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cursor.getCount() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">                    User user = <span class=\"keyword\">new</span> User(cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"account\"</span>)), cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"userName\"</span>)));</span><br><span class=\"line\">                    userList.add(user);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cursor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cursor.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。</p>\n<p>以存储用户信息为例：</p>\n<ul>\n<li>先贴出使用代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mUserDAO = <span class=\"keyword\">new</span> UserDAO(<span class=\"keyword\">this</span>, account); <span class=\"comment\">// 此处的 account 就是要操作的数据库名称</span></span><br><span class=\"line\">mUserDAO.insert(<span class=\"keyword\">new</span> User(account, userName));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以下为三个关键类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库帮助类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DB_VERSION = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_NAME = <span class=\"string\">\"user\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DBHelper</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, dbName, <span class=\"keyword\">null</span>, DB_VERSION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"create table if not exists \"</span> + TABLE_NAME + <span class=\"string\">\" (account text primary key , userName text)\"</span>;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"drop table if exists \"</span> + TABLE_NAME;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String account; <span class=\"comment\">// 用户账号，假设唯一，用它作为数据库名称（dbName）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String account, String userName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.account = account;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户数据表相关操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDAO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBHelper mDBHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDAO</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        mDBHelper = <span class=\"keyword\">new</span> DBHelper(context, dbName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">            values.put(<span class=\"string\">\"account\"</span>, user.account);</span><br><span class=\"line\">            values.put(<span class=\"string\">\"userName\"</span>, user.userName);</span><br><span class=\"line\">            db.insertOrThrow(DBHelper.TABLE_NAME, <span class=\"keyword\">null</span>, values);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            db.delete(DBHelper.TABLE_NAME, <span class=\"string\">\"account = ?\"</span>, <span class=\"keyword\">new</span> String[]&#123;user.account&#125;);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getReadableDatabase();</span><br><span class=\"line\">            cursor = db.query(DBHelper.TABLE_NAME,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"account\"</span>, <span class=\"string\">\"userName\"</span>&#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cursor.getCount() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">                    User user = <span class=\"keyword\">new</span> User(cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"account\"</span>)), cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"userName\"</span>)));</span><br><span class=\"line\">                    userList.add(user);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cursor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cursor.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java 一个方法返回多个整型值","date":"2018-06-23T04:51:00.000Z","_content":"\n\n\n### 前言\n\n在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        return 0;\n    }\n```\n\ngetItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？\n\n### 场景\n\n当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        return 0;\n    }\n```\n\n### 解决方法\n\n一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        int result = (state & 0x7fff) << 16;\n        result |= (type & 0x7fff);\n\n        return result;\n    }\n```\n\n在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .\n\n```Java\n   @Override\n    public AbstractChatHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        ViewHolder viewHolder;\n\n        int type = viewType & 0x7fff;\n        int state = (viewType >> 16) & 0x7fff;\n\n        // 根据 state 和 type 创建各种 ViewHolder ......\n\n        // 省略其它代码 ......\n\n        return viewHolder;\n    }\n```\n\n### 注意点\n\n- state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位\n\n","source":"_posts/Java-一个方法返回多个整型值.md","raw":"---\ntitle: Java 一个方法返回多个整型值\ndate: 2018-6-23 12:51:00\ncategories: \"二进制\"\ntags:\n     - Java\n     - Android\n     - 二进制\n---\n\n\n\n### 前言\n\n在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        return 0;\n    }\n```\n\ngetItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？\n\n### 场景\n\n当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        return 0;\n    }\n```\n\n### 解决方法\n\n一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        int result = (state & 0x7fff) << 16;\n        result |= (type & 0x7fff);\n\n        return result;\n    }\n```\n\n在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .\n\n```Java\n   @Override\n    public AbstractChatHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        ViewHolder viewHolder;\n\n        int type = viewType & 0x7fff;\n        int state = (viewType >> 16) & 0x7fff;\n\n        // 根据 state 和 type 创建各种 ViewHolder ......\n\n        // 省略其它代码 ......\n\n        return viewHolder;\n    }\n```\n\n### 注意点\n\n- state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位\n\n","slug":"Java-一个方法返回多个整型值","published":1,"updated":"2018-06-25T03:42:59.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nboos0008coqu3rlhqdtg","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = (state &amp; <span class=\"number\">0x7fff</span>) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    result |= (type &amp; <span class=\"number\">0x7fff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> AbstractChatHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">     ViewHolder viewHolder;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> type = viewType &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> state = (viewType &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 根据 state 和 type 创建各种 ViewHolder ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 省略其它代码 ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> viewHolder;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = (state &amp; <span class=\"number\">0x7fff</span>) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    result |= (type &amp; <span class=\"number\">0x7fff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> AbstractChatHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">     ViewHolder viewHolder;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> type = viewType &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> state = (viewType &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 根据 state 和 type 创建各种 ViewHolder ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 省略其它代码 ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> viewHolder;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位</li>\n</ul>\n"},{"title":"Mock 测试","date":"2018-03-19T16:00:00.000Z","_content":"\n在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。\n\n接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？\n\n有了接口文档，我们就清楚了与后端交互的**数据结构**，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。\n\n以下简单介绍 Github 上的一个 Mock 开源库的使用 - [moco](https://github.com/dreamhead/moco/)。\n\n**step 1:**\n\n下载如图所示的 jar 包，并简单命名为 moco .\n\n![](/images/15.png)\n\n**step 2:**\n\n把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。\n\n![](/images/14.png)\n\n**config.json**\n\n```json\n[\n  {\n    \"request\": {\n      \"uri\": \"/hello\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"hello.json\"\n    }\n  },\n  {\n    \"request\": {\n      \"uri\": \"/checkAppUpgrade\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"checkAppUpgrade.json\"\n    }\n  }\n]\n```\n\n**hello.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"desc\": \"Hello World !\"\n  }\n}\n```\n\n**checkAppUpgrade.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"versonName\": \"1.2\",\n    \"versonCode\": 3,\n    \"downloadUrl\": \"http://www.baidu.com/v1.2.apk\",\n    \"desc\": \"v1.2 版本修复了重大 bug .\",\n    \"isForceUpdate\": true\n  }\n}\n```\n\n**step 3:**\n\n在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。\n\n```bash\njava -jar moco.jar http -p 8089 -c config.json\n```\n\n**step 4:**\n\n在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。\n\n![](/images/16.png)\n\n![](/images/17.png)\n\n> 把 localhost 换成自己电脑的 ip 就可以在手机上访问了。\n","source":"_posts/Mock-测试.md","raw":"---\ntitle: Mock 测试\ndate: 2018-3-20\ncategories: \"测试\"\ntags:\n     - 测试\n     - mock\n---\n\n在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。\n\n接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？\n\n有了接口文档，我们就清楚了与后端交互的**数据结构**，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。\n\n以下简单介绍 Github 上的一个 Mock 开源库的使用 - [moco](https://github.com/dreamhead/moco/)。\n\n**step 1:**\n\n下载如图所示的 jar 包，并简单命名为 moco .\n\n![](/images/15.png)\n\n**step 2:**\n\n把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。\n\n![](/images/14.png)\n\n**config.json**\n\n```json\n[\n  {\n    \"request\": {\n      \"uri\": \"/hello\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"hello.json\"\n    }\n  },\n  {\n    \"request\": {\n      \"uri\": \"/checkAppUpgrade\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"checkAppUpgrade.json\"\n    }\n  }\n]\n```\n\n**hello.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"desc\": \"Hello World !\"\n  }\n}\n```\n\n**checkAppUpgrade.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"versonName\": \"1.2\",\n    \"versonCode\": 3,\n    \"downloadUrl\": \"http://www.baidu.com/v1.2.apk\",\n    \"desc\": \"v1.2 版本修复了重大 bug .\",\n    \"isForceUpdate\": true\n  }\n}\n```\n\n**step 3:**\n\n在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。\n\n```bash\njava -jar moco.jar http -p 8089 -c config.json\n```\n\n**step 4:**\n\n在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。\n\n![](/images/16.png)\n\n![](/images/17.png)\n\n> 把 localhost 换成自己电脑的 ip 就可以在手机上访问了。\n","slug":"Mock-测试","published":1,"updated":"2018-06-25T03:42:59.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbop2000ccoquady0p8ti","content":"<p>在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。</p>\n<p>接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？</p>\n<p>有了接口文档，我们就清楚了与后端交互的<strong>数据结构</strong>，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。</p>\n<p>以下简单介绍 Github 上的一个 Mock 开源库的使用 - <a href=\"https://github.com/dreamhead/moco/\" target=\"_blank\" rel=\"noopener\">moco</a>。</p>\n<p><strong>step 1:</strong></p>\n<p>下载如图所示的 jar 包，并简单命名为 moco .</p>\n<p><img src=\"/images/15.png\" alt=\"\"></p>\n<p><strong>step 2:</strong></p>\n<p>把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。</p>\n<p><img src=\"/images/14.png\" alt=\"\"></p>\n<p><strong>config.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/hello\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"hello.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/checkAppUpgrade\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"checkAppUpgrade.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>hello.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"Hello World !\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>checkAppUpgrade.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"versonName\"</span>: <span class=\"string\">\"1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"versonCode\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"downloadUrl\"</span>: <span class=\"string\">\"http://www.baidu.com/v1.2.apk\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"v1.2 版本修复了重大 bug .\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isForceUpdate\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>step 3:</strong></p>\n<p>在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco.jar http -p 8089 -c config.json</span><br></pre></td></tr></table></figure>\n<p><strong>step 4:</strong></p>\n<p>在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。</p>\n<p><img src=\"/images/16.png\" alt=\"\"></p>\n<p><img src=\"/images/17.png\" alt=\"\"></p>\n<blockquote>\n<p>把 localhost 换成自己电脑的 ip 就可以在手机上访问了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。</p>\n<p>接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？</p>\n<p>有了接口文档，我们就清楚了与后端交互的<strong>数据结构</strong>，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。</p>\n<p>以下简单介绍 Github 上的一个 Mock 开源库的使用 - <a href=\"https://github.com/dreamhead/moco/\" target=\"_blank\" rel=\"noopener\">moco</a>。</p>\n<p><strong>step 1:</strong></p>\n<p>下载如图所示的 jar 包，并简单命名为 moco .</p>\n<p><img src=\"/images/15.png\" alt=\"\"></p>\n<p><strong>step 2:</strong></p>\n<p>把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。</p>\n<p><img src=\"/images/14.png\" alt=\"\"></p>\n<p><strong>config.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/hello\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"hello.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/checkAppUpgrade\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"checkAppUpgrade.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>hello.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"Hello World !\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>checkAppUpgrade.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"versonName\"</span>: <span class=\"string\">\"1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"versonCode\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"downloadUrl\"</span>: <span class=\"string\">\"http://www.baidu.com/v1.2.apk\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"v1.2 版本修复了重大 bug .\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isForceUpdate\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>step 3:</strong></p>\n<p>在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco.jar http -p 8089 -c config.json</span><br></pre></td></tr></table></figure>\n<p><strong>step 4:</strong></p>\n<p>在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。</p>\n<p><img src=\"/images/16.png\" alt=\"\"></p>\n<p><img src=\"/images/17.png\" alt=\"\"></p>\n<blockquote>\n<p>把 localhost 换成自己电脑的 ip 就可以在手机上访问了。</p>\n</blockquote>\n"},{"title":"前端学习","date":"2018-05-25T05:45:00.000Z","_content":"\n**劝学**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font>\n\n> 三更灯火五更鸡，正是男儿读书时。\n\n> 黑发不知勤学早，白首方悔读书迟。\n\n<br/>\n\n## ES6\n\n- [ES6-Learning](https://github.com/zhich/ES6-Learning)\n\n## React\n\n- [React-Learning](https://github.com/zhich/React-Learning)\n\n## Vue\n\n- [Vue-Learning](https://github.com/zhich/Vue-Learning)","source":"_posts/前端学习.md","raw":"---\ntitle: 前端学习\ndate: 2018-05-25 13:45:00\ncategories: \"前端\"\ntags:\n     - 前端\n---\n\n**劝学**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font>\n\n> 三更灯火五更鸡，正是男儿读书时。\n\n> 黑发不知勤学早，白首方悔读书迟。\n\n<br/>\n\n## ES6\n\n- [ES6-Learning](https://github.com/zhich/ES6-Learning)\n\n## React\n\n- [React-Learning](https://github.com/zhich/React-Learning)\n\n## Vue\n\n- [Vue-Learning](https://github.com/zhich/Vue-Learning)","slug":"前端学习","published":1,"updated":"2018-07-02T02:31:25.387Z","_id":"cjj3nbop7000ecoquu8bafifp","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>劝学</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font></p>\n<blockquote>\n<p>三更灯火五更鸡，正是男儿读书时。</p>\n</blockquote>\n<blockquote>\n<p>黑发不知勤学早，白首方悔读书迟。</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><ul>\n<li><a href=\"https://github.com/zhich/ES6-Learning\" target=\"_blank\" rel=\"noopener\">ES6-Learning</a></li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li><a href=\"https://github.com/zhich/React-Learning\" target=\"_blank\" rel=\"noopener\">React-Learning</a></li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li><a href=\"https://github.com/zhich/Vue-Learning\" target=\"_blank\" rel=\"noopener\">Vue-Learning</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>劝学</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font></p>\n<blockquote>\n<p>三更灯火五更鸡，正是男儿读书时。</p>\n</blockquote>\n<blockquote>\n<p>黑发不知勤学早，白首方悔读书迟。</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><ul>\n<li><a href=\"https://github.com/zhich/ES6-Learning\" target=\"_blank\" rel=\"noopener\">ES6-Learning</a></li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li><a href=\"https://github.com/zhich/React-Learning\" target=\"_blank\" rel=\"noopener\">React-Learning</a></li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li><a href=\"https://github.com/zhich/Vue-Learning\" target=\"_blank\" rel=\"noopener\">Vue-Learning</a></li>\n</ul>\n"},{"title":"Chrome 插件","date":"2017-12-05T16:00:00.000Z","_content":"\n\n\n\n\n\n### [Insight.io for Github](https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog)\nGitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。\n\n### [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog)\n可以在 GitHub 和 GitLab 左侧显示目录树结构。\n\n### [GitCodeTree](https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog)\n基于 octotree 的[码云](http://gitee.com)文件树插件。\n\n### [jsonView jsonViewer json formatter 格式化](https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog)\n格式化、着色、美观、易读 ... jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。\n\n### [Adblock](https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom)\n号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。\n\n### 广告终结者\n清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。\n\n### [Axure RP Extension for Chrome](https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp)\n原型设计工具。\n\n### [Google文档、表格及幻灯片的Office编辑扩展程序](https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog)\n使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。\n","source":"_posts/Chrome-插件.md","raw":"---\ntitle: Chrome 插件\ndate: 2017-12-6\ncategories: \"工具\"\ntags:\n     - Chrome\n     - 工具\n---\n\n\n\n\n\n\n### [Insight.io for Github](https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog)\nGitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。\n\n### [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog)\n可以在 GitHub 和 GitLab 左侧显示目录树结构。\n\n### [GitCodeTree](https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog)\n基于 octotree 的[码云](http://gitee.com)文件树插件。\n\n### [jsonView jsonViewer json formatter 格式化](https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog)\n格式化、着色、美观、易读 ... jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。\n\n### [Adblock](https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom)\n号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。\n\n### 广告终结者\n清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。\n\n### [Axure RP Extension for Chrome](https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp)\n原型设计工具。\n\n### [Google文档、表格及幻灯片的Office编辑扩展程序](https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog)\n使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。\n","slug":"Chrome-插件","published":1,"updated":"2018-06-25T03:42:59.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbopg000icoqut423vyna","content":"<h3 id=\"Insight-io-for-Github\"><a href=\"#Insight-io-for-Github\" class=\"headerlink\" title=\"Insight.io for Github\"></a><a href=\"https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Insight.io for Github</a></h3><p>GitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。</p>\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Octotree</a></h3><p>可以在 GitHub 和 GitLab 左侧显示目录树结构。</p>\n<h3 id=\"GitCodeTree\"><a href=\"#GitCodeTree\" class=\"headerlink\" title=\"GitCodeTree\"></a><a href=\"https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">GitCodeTree</a></h3><p>基于 octotree 的<a href=\"http://gitee.com\" target=\"_blank\" rel=\"noopener\">码云</a>文件树插件。</p>\n<h3 id=\"jsonView-jsonViewer-json-formatter-格式化\"><a href=\"#jsonView-jsonViewer-json-formatter-格式化\" class=\"headerlink\" title=\"jsonView jsonViewer json formatter 格式化\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">jsonView jsonViewer json formatter 格式化</a></h3><p>格式化、着色、美观、易读 … jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。</p>\n<h3 id=\"Adblock\"><a href=\"#Adblock\" class=\"headerlink\" title=\"Adblock\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom\" target=\"_blank\" rel=\"noopener\">Adblock</a></h3><p>号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。</p>\n<h3 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h3><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。</p>\n<h3 id=\"Axure-RP-Extension-for-Chrome\"><a href=\"#Axure-RP-Extension-for-Chrome\" class=\"headerlink\" title=\"Axure RP Extension for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp\" target=\"_blank\" rel=\"noopener\">Axure RP Extension for Chrome</a></h3><p>原型设计工具。</p>\n<h3 id=\"Google文档、表格及幻灯片的Office编辑扩展程序\"><a href=\"#Google文档、表格及幻灯片的Office编辑扩展程序\" class=\"headerlink\" title=\"Google文档、表格及幻灯片的Office编辑扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Google文档、表格及幻灯片的Office编辑扩展程序</a></h3><p>使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Insight-io-for-Github\"><a href=\"#Insight-io-for-Github\" class=\"headerlink\" title=\"Insight.io for Github\"></a><a href=\"https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Insight.io for Github</a></h3><p>GitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。</p>\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Octotree</a></h3><p>可以在 GitHub 和 GitLab 左侧显示目录树结构。</p>\n<h3 id=\"GitCodeTree\"><a href=\"#GitCodeTree\" class=\"headerlink\" title=\"GitCodeTree\"></a><a href=\"https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">GitCodeTree</a></h3><p>基于 octotree 的<a href=\"http://gitee.com\" target=\"_blank\" rel=\"noopener\">码云</a>文件树插件。</p>\n<h3 id=\"jsonView-jsonViewer-json-formatter-格式化\"><a href=\"#jsonView-jsonViewer-json-formatter-格式化\" class=\"headerlink\" title=\"jsonView jsonViewer json formatter 格式化\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">jsonView jsonViewer json formatter 格式化</a></h3><p>格式化、着色、美观、易读 … jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。</p>\n<h3 id=\"Adblock\"><a href=\"#Adblock\" class=\"headerlink\" title=\"Adblock\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom\" target=\"_blank\" rel=\"noopener\">Adblock</a></h3><p>号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。</p>\n<h3 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h3><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。</p>\n<h3 id=\"Axure-RP-Extension-for-Chrome\"><a href=\"#Axure-RP-Extension-for-Chrome\" class=\"headerlink\" title=\"Axure RP Extension for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp\" target=\"_blank\" rel=\"noopener\">Axure RP Extension for Chrome</a></h3><p>原型设计工具。</p>\n<h3 id=\"Google文档、表格及幻灯片的Office编辑扩展程序\"><a href=\"#Google文档、表格及幻灯片的Office编辑扩展程序\" class=\"headerlink\" title=\"Google文档、表格及幻灯片的Office编辑扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Google文档、表格及幻灯片的Office编辑扩展程序</a></h3><p>使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。</p>\n"},{"title":"Java 子类和父类相关成员执行顺序","date":"2018-06-02T06:20:00.000Z","_content":"\n\n> 先说结论，再通过运行程序去验证。\n\n\n## 结论\n\n- new 一个子类的初始化顺序\n\n  父类静态成员变量、静态代码块 --> 子类静态成员变量、静态代码块 --> 父类成员变量、构造代码块 --> 父类无参构造方法 --> 子类成员变量、   构造代码块 --> 子类无参构造方法\n\n- 多次创建对象，静态成员变量和静态代码块都只执行一次\n\n- 除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();\n\n## 程序运行\n\n**打印类（用于打印结果）**\n\n```Java\nclass Test {\n\n\tpublic Test(String str) {\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n**父类**\n\n```Java\nclass Parent {\n\n\tprivate static Test t10 = new Test(\"父类静态成员变量 0\");\n\tprivate Test t11 = new Test(\"父类成员变量  0\");\n\n\t{\n\t\tTest t14 = new Test(\"父类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t12 = new Test(\"父类静态代码块 0\");\n\t}\n\n\tprivate Test t16 = new Test(\"父类成员变量 1\");\n\n\t{\n\t\tTest t15 = new Test(\"父类构造代码块 1\");\n\t}\n\n\tprivate static Test t13 = new Test(\"父类静态成员变量 1\");\n\n\tpublic Parent() {\n\t\tSystem.out.println(\"父类无参构造方法\");\n\t}\n\n\tpublic Parent(int i) {\n\t\tSystem.out.println(\"父类有参构造方法 0\");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"父类成员方法\");\n\t}\n\n\tpublic static void g() {\n\t\tSystem.out.println(\"父类静态成员方法\");\n\t}\n}\n```\n\n**子类**\n\n```Java\nclass Son extends Parent {\n\n\tprivate static Test t0 = new Test(\"子类静态成员变量 0\");\n\tprivate Test t1 = new Test(\"子类成员变量 0\");\n\n\t{\n\t\tTest t4 = new Test(\"子类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t2 = new Test(\"子类静态代码块 0\");\n\t}\n\n\tprivate Test t6 = new Test(\"子类成员变量 1\");\n\n\t{\n\t\tTest t5 = new Test(\"子类构造代码块 1\");\n\t}\n\n\tprivate static Test t3 = new Test(\"子类静态成员变量 1\");\n\n\tpublic Son() {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\n\tpublic Son(int i) {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类有参构造方法 0\");\n\t}\n\n\tpublic Son(int i, int j) {\n\t\t// super(); 不会调用了，因为显式调用了 super(1)\n\t\tsuper(1);\n\t\tSystem.out.println(\"子类有参构造方法 1\");\n\t}\n\n\tpublic void ff() {\n\t\tSystem.out.println(\"子类成员方法\");\n\t}\n\n\tpublic static void gg() {\n\t\tSystem.out.println(\"子类静态成员方法\");\n\t}\n}\n```\n\n**调用类**\n\n```Java\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1);\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1, 2);\n\t}\n}\n```\n\n\n执行了调用类后，打印结果如下：\n\n```Java\n父类静态成员变量 0\n父类静态代码块 0\n父类静态成员变量 1\n子类静态成员变量 0\n子类静态代码块 0\n子类静态成员变量 1\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 0\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类有参构造方法 0\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 1\n```\n\n## 扩展说明\n\n[引自此处](https://blog.csdn.net/u010687392/article/details/42388585)\n\n- 子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。\n\n- new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。\n所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。","source":"_posts/Java-子类和父类相关成员执行顺序.md","raw":"---\ntitle: Java 子类和父类相关成员执行顺序\ndate: 2018-6-2 14:20:00\ncategories: \"Java\"\ntags:\n     - Java\n---\n\n\n> 先说结论，再通过运行程序去验证。\n\n\n## 结论\n\n- new 一个子类的初始化顺序\n\n  父类静态成员变量、静态代码块 --> 子类静态成员变量、静态代码块 --> 父类成员变量、构造代码块 --> 父类无参构造方法 --> 子类成员变量、   构造代码块 --> 子类无参构造方法\n\n- 多次创建对象，静态成员变量和静态代码块都只执行一次\n\n- 除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();\n\n## 程序运行\n\n**打印类（用于打印结果）**\n\n```Java\nclass Test {\n\n\tpublic Test(String str) {\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n**父类**\n\n```Java\nclass Parent {\n\n\tprivate static Test t10 = new Test(\"父类静态成员变量 0\");\n\tprivate Test t11 = new Test(\"父类成员变量  0\");\n\n\t{\n\t\tTest t14 = new Test(\"父类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t12 = new Test(\"父类静态代码块 0\");\n\t}\n\n\tprivate Test t16 = new Test(\"父类成员变量 1\");\n\n\t{\n\t\tTest t15 = new Test(\"父类构造代码块 1\");\n\t}\n\n\tprivate static Test t13 = new Test(\"父类静态成员变量 1\");\n\n\tpublic Parent() {\n\t\tSystem.out.println(\"父类无参构造方法\");\n\t}\n\n\tpublic Parent(int i) {\n\t\tSystem.out.println(\"父类有参构造方法 0\");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"父类成员方法\");\n\t}\n\n\tpublic static void g() {\n\t\tSystem.out.println(\"父类静态成员方法\");\n\t}\n}\n```\n\n**子类**\n\n```Java\nclass Son extends Parent {\n\n\tprivate static Test t0 = new Test(\"子类静态成员变量 0\");\n\tprivate Test t1 = new Test(\"子类成员变量 0\");\n\n\t{\n\t\tTest t4 = new Test(\"子类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t2 = new Test(\"子类静态代码块 0\");\n\t}\n\n\tprivate Test t6 = new Test(\"子类成员变量 1\");\n\n\t{\n\t\tTest t5 = new Test(\"子类构造代码块 1\");\n\t}\n\n\tprivate static Test t3 = new Test(\"子类静态成员变量 1\");\n\n\tpublic Son() {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\n\tpublic Son(int i) {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类有参构造方法 0\");\n\t}\n\n\tpublic Son(int i, int j) {\n\t\t// super(); 不会调用了，因为显式调用了 super(1)\n\t\tsuper(1);\n\t\tSystem.out.println(\"子类有参构造方法 1\");\n\t}\n\n\tpublic void ff() {\n\t\tSystem.out.println(\"子类成员方法\");\n\t}\n\n\tpublic static void gg() {\n\t\tSystem.out.println(\"子类静态成员方法\");\n\t}\n}\n```\n\n**调用类**\n\n```Java\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1);\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1, 2);\n\t}\n}\n```\n\n\n执行了调用类后，打印结果如下：\n\n```Java\n父类静态成员变量 0\n父类静态代码块 0\n父类静态成员变量 1\n子类静态成员变量 0\n子类静态代码块 0\n子类静态成员变量 1\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 0\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类有参构造方法 0\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 1\n```\n\n## 扩展说明\n\n[引自此处](https://blog.csdn.net/u010687392/article/details/42388585)\n\n- 子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。\n\n- new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。\n所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。","slug":"Java-子类和父类相关成员执行顺序","published":1,"updated":"2018-06-25T03:42:59.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbopk000kcoque1dfiw0v","content":"<blockquote>\n<p>先说结论，再通过运行程序去验证。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><p>new 一个子类的初始化顺序</p>\n<p>父类静态成员变量、静态代码块 –&gt; 子类静态成员变量、静态代码块 –&gt; 父类成员变量、构造代码块 –&gt; 父类无参构造方法 –&gt; 子类成员变量、   构造代码块 –&gt; 子类无参构造方法</p>\n</li>\n<li><p>多次创建对象，静态成员变量和静态代码块都只执行一次</p>\n</li>\n<li><p>除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();</p>\n</li>\n</ul>\n<h2 id=\"程序运行\"><a href=\"#程序运行\" class=\"headerlink\" title=\"程序运行\"></a>程序运行</h2><p><strong>打印类（用于打印结果）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>父类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t10 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t11 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量  0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t14 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t12 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t16 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t15 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t13 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>子类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t0 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t1 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t4 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t2 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t6 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t5 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t3 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 不会调用了，因为显式调用了 super(1)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ff</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行了调用类后，打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h2><p><a href=\"https://blog.csdn.net/u010687392/article/details/42388585\" target=\"_blank\" rel=\"noopener\">引自此处</a></p>\n<ul>\n<li><p>子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。</p>\n</li>\n<li><p>new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。<br>所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>先说结论，再通过运行程序去验证。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><p>new 一个子类的初始化顺序</p>\n<p>父类静态成员变量、静态代码块 –&gt; 子类静态成员变量、静态代码块 –&gt; 父类成员变量、构造代码块 –&gt; 父类无参构造方法 –&gt; 子类成员变量、   构造代码块 –&gt; 子类无参构造方法</p>\n</li>\n<li><p>多次创建对象，静态成员变量和静态代码块都只执行一次</p>\n</li>\n<li><p>除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();</p>\n</li>\n</ul>\n<h2 id=\"程序运行\"><a href=\"#程序运行\" class=\"headerlink\" title=\"程序运行\"></a>程序运行</h2><p><strong>打印类（用于打印结果）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>父类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t10 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t11 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量  0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t14 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t12 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t16 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t15 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t13 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>子类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t0 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t1 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t4 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t2 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t6 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t5 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t3 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 不会调用了，因为显式调用了 super(1)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ff</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行了调用类后，打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h2><p><a href=\"https://blog.csdn.net/u010687392/article/details/42388585\" target=\"_blank\" rel=\"noopener\">引自此处</a></p>\n<ul>\n<li><p>子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。</p>\n</li>\n<li><p>new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。<br>所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。</p>\n</li>\n</ul>\n"},{"title":"剑指 Offer","date":"2017-12-08T16:00:00.000Z","_content":"\n\n\n\n\n\n## [二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路**\n\n从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。\n\nSolution 1 : (168 ms , 16792 K)\n\n```Java\n    public boolean Find(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int tempJ = columnCount - 1;\n        for (int i = 0; i < rowCount; i++) {\n            for (int j = tempJ; j >= 0; j--) {\n                if (target == array[i][j]) {\n//                    System.out.println(i + \" \" + j);\n                    return true;\n                }\n                if (target > array[i][j]) {\n                    break;\n                }\n                tempJ = j - 1;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\nSolution 2 : (184 ms , 16708 K)\n\n```Java\n    public boolean Find2(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int i = 0;\n        int j = columnCount - 1;\n        while (i < rowCount && i >= 0 && j < columnCount && j >= 0) {\n            if (target == array[i][j]) {\n//                System.out.println(i + \" \" + j);\n                return true;\n            }\n            if (target > array[i][j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\n## [变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n\n**思路 1：**\n\n在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。\n\n假设 n 级台阶有 f(n) 种跳法。\n\n若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； \n\n若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；\n\n……\n\n若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。\n\n总结起来就是：\n\n**f(n) = f(n - 1) + f(n - 2) + …… + f(1)**  &nbsp; &nbsp; &nbsp; ①\n\n根据递推知识，不难想到\n\nf(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②\n\n将 ② 代入 ① 得：\n\n**f(n) = 2 * f(n - 1)**\n\n即 n 级台阶有 **2 ^ (n - 1)** 种跳法。\n\nSolution 1 : (17 ms , 8624 K)\n\n```Java\n    int JumpFloorII(int target) {\n        if (target <= 0) {\n            return 0;\n        }\n        return 1 << (target - 1);\n    }\n```\n\n**思路 2：**\n\nn 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 **2^n / 2 = 2^(n - 1)** 种。\n\n\n","source":"_posts/剑指-Offer.md","raw":"---\ntitle: 剑指 Offer\ndate: 2017-12-9\ncategories: \"算法\"\ntags:\n     - 算法\n---\n\n\n\n\n\n\n## [二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路**\n\n从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。\n\nSolution 1 : (168 ms , 16792 K)\n\n```Java\n    public boolean Find(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int tempJ = columnCount - 1;\n        for (int i = 0; i < rowCount; i++) {\n            for (int j = tempJ; j >= 0; j--) {\n                if (target == array[i][j]) {\n//                    System.out.println(i + \" \" + j);\n                    return true;\n                }\n                if (target > array[i][j]) {\n                    break;\n                }\n                tempJ = j - 1;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\nSolution 2 : (184 ms , 16708 K)\n\n```Java\n    public boolean Find2(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int i = 0;\n        int j = columnCount - 1;\n        while (i < rowCount && i >= 0 && j < columnCount && j >= 0) {\n            if (target == array[i][j]) {\n//                System.out.println(i + \" \" + j);\n                return true;\n            }\n            if (target > array[i][j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\n## [变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n\n**思路 1：**\n\n在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。\n\n假设 n 级台阶有 f(n) 种跳法。\n\n若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； \n\n若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；\n\n……\n\n若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。\n\n总结起来就是：\n\n**f(n) = f(n - 1) + f(n - 2) + …… + f(1)**  &nbsp; &nbsp; &nbsp; ①\n\n根据递推知识，不难想到\n\nf(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②\n\n将 ② 代入 ① 得：\n\n**f(n) = 2 * f(n - 1)**\n\n即 n 级台阶有 **2 ^ (n - 1)** 种跳法。\n\nSolution 1 : (17 ms , 8624 K)\n\n```Java\n    int JumpFloorII(int target) {\n        if (target <= 0) {\n            return 0;\n        }\n        return 1 << (target - 1);\n    }\n```\n\n**思路 2：**\n\nn 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 **2^n / 2 = 2^(n - 1)** 种。\n\n\n","slug":"剑指-Offer","published":1,"updated":"2018-06-25T03:42:59.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbopo000ocoqupi2mga56","content":"<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">二维数组中的查找</a></h2><p><strong>题目描述</strong></p>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路</strong></p>\n<p>从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。</p>\n<p>Solution 1 : (168 ms , 16792 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempJ = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rowCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = tempJ; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tempJ = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Solution 2 : (184 ms , 16708 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find2</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; rowCount &amp;&amp; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; columnCount &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=11162&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">变态跳台阶</a></h2><p><strong>题目描述</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>思路 1：</strong></p>\n<p>在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。</p>\n<p>假设 n 级台阶有 f(n) 种跳法。</p>\n<p>若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； </p>\n<p>若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；</p>\n<p>……</p>\n<p>若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。</p>\n<p>总结起来就是：</p>\n<p><strong>f(n) = f(n - 1) + f(n - 2) + …… + f(1)</strong>  &nbsp; &nbsp; &nbsp; ①</p>\n<p>根据递推知识，不难想到</p>\n<p>f(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②</p>\n<p>将 ② 代入 ① 得：</p>\n<p><strong>f(n) = 2 * f(n - 1)</strong></p>\n<p>即 n 级台阶有 <strong>2 ^ (n - 1)</strong> 种跳法。</p>\n<p>Solution 1 : (17 ms , 8624 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">JumpFloorII</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; (target - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>思路 2：</strong></p>\n<p>n 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 <strong>2^n / 2 = 2^(n - 1)</strong> 种。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">二维数组中的查找</a></h2><p><strong>题目描述</strong></p>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路</strong></p>\n<p>从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。</p>\n<p>Solution 1 : (168 ms , 16792 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempJ = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rowCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = tempJ; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tempJ = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Solution 2 : (184 ms , 16708 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find2</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; rowCount &amp;&amp; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; columnCount &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=11162&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">变态跳台阶</a></h2><p><strong>题目描述</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>思路 1：</strong></p>\n<p>在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。</p>\n<p>假设 n 级台阶有 f(n) 种跳法。</p>\n<p>若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； </p>\n<p>若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；</p>\n<p>……</p>\n<p>若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。</p>\n<p>总结起来就是：</p>\n<p><strong>f(n) = f(n - 1) + f(n - 2) + …… + f(1)</strong>  &nbsp; &nbsp; &nbsp; ①</p>\n<p>根据递推知识，不难想到</p>\n<p>f(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②</p>\n<p>将 ② 代入 ① 得：</p>\n<p><strong>f(n) = 2 * f(n - 1)</strong></p>\n<p>即 n 级台阶有 <strong>2 ^ (n - 1)</strong> 种跳法。</p>\n<p>Solution 1 : (17 ms , 8624 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">JumpFloorII</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; (target - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>思路 2：</strong></p>\n<p>n 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 <strong>2^n / 2 = 2^(n - 1)</strong> 种。</p>\n"},{"title":"我的书单","date":"2018-03-06T16:00:00.000Z","_content":"\n\n\n\n\n\n### Java\n\n- [Java 编程思想（第 4 版）](https://book.douban.com/subject/2130190/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。\n\n- [Effective java 中文版（第 2 版）](https://book.douban.com/subject/3360807/)<font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。\n\n- [Java 并发编程实战](https://book.douban.com/subject/10484692/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  多线程并发方面不可多得的好书。\n\n- [深入理解 Java 虚拟机（第 2 版）](https://book.douban.com/subject/24722612/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  了解 Java 虚拟机的必读书籍。\n\n- [Java 程序员修炼之道](https://book.douban.com/subject/24841235/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n### Android\n\n- [Android 开发艺术探索](https://book.douban.com/subject/26599538/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 群英传](https://book.douban.com/subject/26599539/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 群英传：神兵利器](https://book.douban.com/subject/26855851/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [App 研发录：架构设计、Crash 分析和竞品技术分析](https://book.douban.com/subject/26649050/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 源码设计模式解析与实战](https://book.douban.com/subject/26644935/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 开发精要](https://book.douban.com/subject/11530748/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Web 前端\n\n- [JavaScript 权威指南 第 6 版（上、下册）](https://book.douban.com/subject/6854549/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Python\n\n- [Python 学习手册（第 4 版）](https://book.douban.com/subject/6049132/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 算法\n\n- [算法（第 4 版）](https://book.douban.com/subject/19952400/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n  Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。\n\n### 设计模式\n\n- [设计模式之禅（第 2 版）](https://book.douban.com/subject/25843319/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 其它技术书籍\n\n- [代码大全（第 2 版）](https://book.douban.com/subject/1477390/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [图解 HTTP](https://book.douban.com/subject/25863515/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [剑指 offer](https://book.douban.com/subject/6966465/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [重构 : 改善既有代码的设计](https://book.douban.com/subject/4262627/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [Maven 实战](https://book.douban.com/subject/5345682/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### 非技术书籍\n\n- [程序员的思维修炼](https://book.douban.com/subject/5372651/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [学习之道（第 2 版）](https://book.douban.com/subject/2345548/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [如何把事情做到最好](https://book.douban.com/subject/25830853/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [清醒思考的艺术](https://book.douban.com/subject/20492550/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [番茄工作法图解](https://book.douban.com/subject/5916234/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [习惯的力量](https://book.douban.com/subject/20507212/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [尽管去做](https://book.douban.com/subject/1085660/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [拖延心理学](https://book.douban.com/subject/4180711/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n\n","source":"_posts/我的书单.md","raw":"---\ntitle: 我的书单\ndate: 2018-3-7\ncategories: \"阅读笔记\"\ntags:\n     - 阅读笔记\n---\n\n\n\n\n\n\n### Java\n\n- [Java 编程思想（第 4 版）](https://book.douban.com/subject/2130190/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。\n\n- [Effective java 中文版（第 2 版）](https://book.douban.com/subject/3360807/)<font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。\n\n- [Java 并发编程实战](https://book.douban.com/subject/10484692/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  多线程并发方面不可多得的好书。\n\n- [深入理解 Java 虚拟机（第 2 版）](https://book.douban.com/subject/24722612/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  了解 Java 虚拟机的必读书籍。\n\n- [Java 程序员修炼之道](https://book.douban.com/subject/24841235/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n### Android\n\n- [Android 开发艺术探索](https://book.douban.com/subject/26599538/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 群英传](https://book.douban.com/subject/26599539/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 群英传：神兵利器](https://book.douban.com/subject/26855851/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [App 研发录：架构设计、Crash 分析和竞品技术分析](https://book.douban.com/subject/26649050/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 源码设计模式解析与实战](https://book.douban.com/subject/26644935/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 开发精要](https://book.douban.com/subject/11530748/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Web 前端\n\n- [JavaScript 权威指南 第 6 版（上、下册）](https://book.douban.com/subject/6854549/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Python\n\n- [Python 学习手册（第 4 版）](https://book.douban.com/subject/6049132/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 算法\n\n- [算法（第 4 版）](https://book.douban.com/subject/19952400/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n  Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。\n\n### 设计模式\n\n- [设计模式之禅（第 2 版）](https://book.douban.com/subject/25843319/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 其它技术书籍\n\n- [代码大全（第 2 版）](https://book.douban.com/subject/1477390/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [图解 HTTP](https://book.douban.com/subject/25863515/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [剑指 offer](https://book.douban.com/subject/6966465/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [重构 : 改善既有代码的设计](https://book.douban.com/subject/4262627/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [Maven 实战](https://book.douban.com/subject/5345682/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### 非技术书籍\n\n- [程序员的思维修炼](https://book.douban.com/subject/5372651/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [学习之道（第 2 版）](https://book.douban.com/subject/2345548/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [如何把事情做到最好](https://book.douban.com/subject/25830853/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [清醒思考的艺术](https://book.douban.com/subject/20492550/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [番茄工作法图解](https://book.douban.com/subject/5916234/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [习惯的力量](https://book.douban.com/subject/20507212/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [尽管去做](https://book.douban.com/subject/1085660/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [拖延心理学](https://book.douban.com/subject/4180711/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n\n","slug":"我的书单","published":1,"updated":"2018-06-25T03:42:59.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbopq000qcoquvk77nq44","content":"<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/2130190/\" target=\"_blank\" rel=\"noopener\">Java 编程思想（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/3360807/\" target=\"_blank\" rel=\"noopener\">Effective java 中文版（第 2 版）</a><font color=\"##3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/10484692/\" target=\"_blank\" rel=\"noopener\">Java 并发编程实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>多线程并发方面不可多得的好书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24722612/\" target=\"_blank\" rel=\"noopener\">深入理解 Java 虚拟机（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>了解 Java 虚拟机的必读书籍。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24841235/\" target=\"_blank\" rel=\"noopener\">Java 程序员修炼之道</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/26599538/\" target=\"_blank\" rel=\"noopener\">Android 开发艺术探索</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26599539/\" target=\"_blank\" rel=\"noopener\">Android 群英传</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26855851/\" target=\"_blank\" rel=\"noopener\">Android 群英传：神兵利器</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26649050/\" target=\"_blank\" rel=\"noopener\">App 研发录：架构设计、Crash 分析和竞品技术分析</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26644935/\" target=\"_blank\" rel=\"noopener\">Android 源码设计模式解析与实战</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/11530748/\" target=\"_blank\" rel=\"noopener\">Android 开发精要</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Web-前端\"><a href=\"#Web-前端\" class=\"headerlink\" title=\"Web 前端\"></a>Web 前端</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6854549/\" target=\"_blank\" rel=\"noopener\">JavaScript 权威指南 第 6 版（上、下册）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6049132/\" target=\"_blank\" rel=\"noopener\">Python 学习手册（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/19952400/\" target=\"_blank\" rel=\"noopener\">算法（第 4 版）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><ul>\n<li><a href=\"https://book.douban.com/subject/25843319/\" target=\"_blank\" rel=\"noopener\">设计模式之禅（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"其它技术书籍\"><a href=\"#其它技术书籍\" class=\"headerlink\" title=\"其它技术书籍\"></a>其它技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener\">代码大全（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">图解 HTTP</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6966465/\" target=\"_blank\" rel=\"noopener\">剑指 offer</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4262627/\" target=\"_blank\" rel=\"noopener\">重构 : 改善既有代码的设计</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5345682/\" target=\"_blank\" rel=\"noopener\">Maven 实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"非技术书籍\"><a href=\"#非技术书籍\" class=\"headerlink\" title=\"非技术书籍\"></a>非技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/5372651/\" target=\"_blank\" rel=\"noopener\">程序员的思维修炼</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/2345548/\" target=\"_blank\" rel=\"noopener\">学习之道（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25830853/\" target=\"_blank\" rel=\"noopener\">如何把事情做到最好</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20492550/\" target=\"_blank\" rel=\"noopener\">清醒思考的艺术</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5916234/\" target=\"_blank\" rel=\"noopener\">番茄工作法图解</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20507212/\" target=\"_blank\" rel=\"noopener\">习惯的力量</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/1085660/\" target=\"_blank\" rel=\"noopener\">尽管去做</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4180711/\" target=\"_blank\" rel=\"noopener\">拖延心理学</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/2130190/\" target=\"_blank\" rel=\"noopener\">Java 编程思想（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/3360807/\" target=\"_blank\" rel=\"noopener\">Effective java 中文版（第 2 版）</a><font color=\"##3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/10484692/\" target=\"_blank\" rel=\"noopener\">Java 并发编程实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>多线程并发方面不可多得的好书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24722612/\" target=\"_blank\" rel=\"noopener\">深入理解 Java 虚拟机（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>了解 Java 虚拟机的必读书籍。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24841235/\" target=\"_blank\" rel=\"noopener\">Java 程序员修炼之道</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/26599538/\" target=\"_blank\" rel=\"noopener\">Android 开发艺术探索</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26599539/\" target=\"_blank\" rel=\"noopener\">Android 群英传</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26855851/\" target=\"_blank\" rel=\"noopener\">Android 群英传：神兵利器</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26649050/\" target=\"_blank\" rel=\"noopener\">App 研发录：架构设计、Crash 分析和竞品技术分析</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26644935/\" target=\"_blank\" rel=\"noopener\">Android 源码设计模式解析与实战</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/11530748/\" target=\"_blank\" rel=\"noopener\">Android 开发精要</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Web-前端\"><a href=\"#Web-前端\" class=\"headerlink\" title=\"Web 前端\"></a>Web 前端</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6854549/\" target=\"_blank\" rel=\"noopener\">JavaScript 权威指南 第 6 版（上、下册）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6049132/\" target=\"_blank\" rel=\"noopener\">Python 学习手册（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/19952400/\" target=\"_blank\" rel=\"noopener\">算法（第 4 版）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><ul>\n<li><a href=\"https://book.douban.com/subject/25843319/\" target=\"_blank\" rel=\"noopener\">设计模式之禅（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"其它技术书籍\"><a href=\"#其它技术书籍\" class=\"headerlink\" title=\"其它技术书籍\"></a>其它技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener\">代码大全（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">图解 HTTP</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6966465/\" target=\"_blank\" rel=\"noopener\">剑指 offer</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4262627/\" target=\"_blank\" rel=\"noopener\">重构 : 改善既有代码的设计</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5345682/\" target=\"_blank\" rel=\"noopener\">Maven 实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"非技术书籍\"><a href=\"#非技术书籍\" class=\"headerlink\" title=\"非技术书籍\"></a>非技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/5372651/\" target=\"_blank\" rel=\"noopener\">程序员的思维修炼</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/2345548/\" target=\"_blank\" rel=\"noopener\">学习之道（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25830853/\" target=\"_blank\" rel=\"noopener\">如何把事情做到最好</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20492550/\" target=\"_blank\" rel=\"noopener\">清醒思考的艺术</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5916234/\" target=\"_blank\" rel=\"noopener\">番茄工作法图解</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20507212/\" target=\"_blank\" rel=\"noopener\">习惯的力量</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/1085660/\" target=\"_blank\" rel=\"noopener\">尽管去做</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4180711/\" target=\"_blank\" rel=\"noopener\">拖延心理学</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n</ul>\n"},{"title":"Android 代码优化小提示","date":"2018-01-09T14:35:29.000Z","_content":"\n## 代码逻辑相关\n\n### 遍历一个List集合\n\nbad:\n\n```Java\nList<User> userList = new ArrayList<>();\nfor (int i = 0; i < userList.size(); i++) {\n    User user = new User();\n   \t //省略 n 行代码...\n    userList.add(user);\n}\n```\n\nbetter:\n\n```Java\nList<User> userList = new ArrayList<>();\nUser user = null;\nfor (int i = 0, size = userList.size(); i < size; i++) {\n    user = new User();\n    //省略 n 行代码...\n    userList.add(user);\n}\n```\n\n> ①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。\n\n### 遍历HashMap的最佳方法\n\n```Java\nMap<String, User> userMap = new HashMap<>();\nIterator it = userMap.entrySet().iterator();\nwhile (it.hasNext()) {\n    Map.Entry entry = (Map.Entry) it.next();\n    System.out.println(entry.getKey() + \" = \" + entry.getValue());\n    //迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素\n    it.remove(); // 避免抛 ConcurrentModificationException 异常\n}\n```\n\n### 字符串\n\n#### 判断字符串str是否为null或空串\n\nbad:\n\n```Java\nif (null == str || \"\".equals(str)) {\n}\n```\n\nbetter:\n\n```Java\nif (TextUtils.isEmpty(str)) {\n}\n```\n\n> TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。\n\n### 容易报空指针的情况\n\n#### 判断一个字符串的内容是否为某值\n\nbad:\n\n```Java\nif (str.equals(\"hello\")) {\n}\n```\n\nbetter:\n\n```Java\n// 避免空指针异常，应该把常量写在前面\nif (\"hello\".equals(str)) {\n}\n```\n\n#### 判断集合某个元素对象的某个字段是否为空\n\nbad:\n\n```Java\n// 如果元素对象为 null 这里就挂了吧\nif (null != userList.get(i).name) {\n}\n```\n\nbetter:\n\n```Java\n// 使用对象的方法或字段时，考虑下对象本身是否可能为 null\nif (null != userList.get(i) && null != userList.get(i).name) {\n}\n```\n\n### 常用资源释放\n\n#### Cursor\n\n```Java\ntry {\n    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), null, null, null, null);\n    //省略 n 行代码...\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    if(cursor != null){\n       try {\n            cursor.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n       }\n    }\n}\n```\n\n#### 流文件\n\n```Java\npublic class Test {\n\n    private static final int BUFFER_SIZE = 1024;\n\n    public static void main(String[] args) {\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            fr = new FileReader(\"origin.txt\");\n            fw = new FileWriter(\"destination.txt\");\n            char[] buf = new char[BUFFER_SIZE];\n            int len = 0;\n            while ((len = fr.read(buf)) != -1) {\n                fw.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"读写失败\");\n        } finally {\n            if (fw != null)\n                try {\n                    fw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (fr != null)\n                try {\n                    fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n}\n```\n\n#### WebView\n\n- 首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。\n\n```Java\nwebView =  new BridgeWebView(getContext().getApplicationContext());\nwebFrameLayout.addView(webView, 0);\n```\n\n> 在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。\n\n- 而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。\n\n```Java\npublic void onDetach() {\n    releaseWebViews();\n    super.onDetach();\n}\n\nprivate void releaseWebViews() {\n    if(webView != null) {\n        try {\n            if(webView.getParent() != null) {\n                ((ViewGroup) webView.getParent()).removeView(webView);\n            }\n            webView.destroy();\n        }catch (IllegalArgumentException e) {\n        }\n        RefWatcher refWatcher = FApplication.getRefWatcher();\n        refWatcher.watch(webView);\n        webView = null;\n    }\n}\n```\n\n参考文章：\n\n[Android WebView: 性能优化不得不说的事](https://www.jianshu.com/p/95d4d73be3d1)\n\n[android内存优化之webview](https://www.jianshu.com/p/c2412918b2b5#fn2)\n\n#### Handler\n\n- 使用弱引用\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private NoLeakHandler mNoLeakHandler;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mNoLeakHandler = new NoLeakHandler(this);\n        Message message = Message.obtain();\n        mNoLeakHandler.sendMessageDelayed(message, 2000);\n    }\n\n    private static class NoLeakHandler extends Handler {\n\n        private WeakReference<NoLeakActivity> mActivity;\n\n        public NoLeakHandler(NoLeakActivity activity) {\n            mActivity = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n        }\n    }\n}\n```\n\n- 及时清除消息\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private Handler mHandler = new Handler();\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n//                startMainActivity();\n            }\n        }, 2000);\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 把所有的消息和回调移除\n        mHandler.removeCallbacksAndMessages(null);\n        super.onDestroy();\n    }\n\n    @Override\n    public void onBackPressed() {\n        // 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）\n        mHandler.removeCallbacksAndMessages(null);\n        super.onBackPressed();\n    }\n}\n```\n\n### 其它\n\n#### 反面判断条件\n\nbad:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null != userList && userList.size() > 0) {\n\t\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\nbetter:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null == userList || userList.isEmpty()) {\n\t\treturn;\n\t}\n\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t// ...\n\t}\n}\n```\n\n> 很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。\n\n#### if与return搭配\n\nbad:\n\n```Java\npublic int testIfElse(String cmd) {\n    if (\"1\".equals(cmd)) {\n   \t return 1;\n    } else if (\"2\".equals(cmd)) {\n   \t return 2;\n    } else if (\"3\".equals(cmd)) {\n   \t return 3;\n    } else {\n   \t return 4;\n    }\n}\n```\n\nbetter:\n\n```Java\npublic int testIfElse(String cmd) {\n   if (\"1\".equals(cmd)) {\n       return 1;\n   }\n   if (\"2\".equals(cmd)) {\n       return 2;\n   }\n   if (\"3\".equals(cmd)) {\n       return 3;\n   }\n   return 4;\n}\n```\n\n#### 对象序列化\n\nAndroid 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .\n\n#### SharedPreferences\n\n`SharedPreferences.Editor.commit` 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level >= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  `SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)` 即可。\n\n#### 其它优化\n\n- 静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。\n\n- Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。\n\n- 不少人在子线程中更新 View 时喜欢使用 `Context.runOnUiThread` , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。\n\n- Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。\n\n- Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .\n\n- 如果使用 `Context.startActivity` 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。\n\n- 如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。\n\n- `transient` 关键字修饰变量可以限制序列化。\n\n- `View.getContext` 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .\n\n## UI相关\n\n### Space\n\nSpace 经常用于组件之间的缝隙，其 `draw()` 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。\n\n### tools标签\n\ntools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：\n\n```xml\n<TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:text=\"这段话只在预览时能看到,运行以后就看不到了\" />\n```\n\n### ContextCompat\n\nAndroid 6.0 之后 `getResources().getColor()` 被废弃了，可用 `ContextCompat.getColor(context, R.color.color_name)` 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 `getDrawable()` 等方法。\n\n\n\n","source":"_posts/Android-代码优化小提示.md","raw":"---\ntitle: Android 代码优化小提示\ndate: 2018-01-09 22:35:29\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n## 代码逻辑相关\n\n### 遍历一个List集合\n\nbad:\n\n```Java\nList<User> userList = new ArrayList<>();\nfor (int i = 0; i < userList.size(); i++) {\n    User user = new User();\n   \t //省略 n 行代码...\n    userList.add(user);\n}\n```\n\nbetter:\n\n```Java\nList<User> userList = new ArrayList<>();\nUser user = null;\nfor (int i = 0, size = userList.size(); i < size; i++) {\n    user = new User();\n    //省略 n 行代码...\n    userList.add(user);\n}\n```\n\n> ①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。\n\n### 遍历HashMap的最佳方法\n\n```Java\nMap<String, User> userMap = new HashMap<>();\nIterator it = userMap.entrySet().iterator();\nwhile (it.hasNext()) {\n    Map.Entry entry = (Map.Entry) it.next();\n    System.out.println(entry.getKey() + \" = \" + entry.getValue());\n    //迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素\n    it.remove(); // 避免抛 ConcurrentModificationException 异常\n}\n```\n\n### 字符串\n\n#### 判断字符串str是否为null或空串\n\nbad:\n\n```Java\nif (null == str || \"\".equals(str)) {\n}\n```\n\nbetter:\n\n```Java\nif (TextUtils.isEmpty(str)) {\n}\n```\n\n> TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。\n\n### 容易报空指针的情况\n\n#### 判断一个字符串的内容是否为某值\n\nbad:\n\n```Java\nif (str.equals(\"hello\")) {\n}\n```\n\nbetter:\n\n```Java\n// 避免空指针异常，应该把常量写在前面\nif (\"hello\".equals(str)) {\n}\n```\n\n#### 判断集合某个元素对象的某个字段是否为空\n\nbad:\n\n```Java\n// 如果元素对象为 null 这里就挂了吧\nif (null != userList.get(i).name) {\n}\n```\n\nbetter:\n\n```Java\n// 使用对象的方法或字段时，考虑下对象本身是否可能为 null\nif (null != userList.get(i) && null != userList.get(i).name) {\n}\n```\n\n### 常用资源释放\n\n#### Cursor\n\n```Java\ntry {\n    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), null, null, null, null);\n    //省略 n 行代码...\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    if(cursor != null){\n       try {\n            cursor.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n       }\n    }\n}\n```\n\n#### 流文件\n\n```Java\npublic class Test {\n\n    private static final int BUFFER_SIZE = 1024;\n\n    public static void main(String[] args) {\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            fr = new FileReader(\"origin.txt\");\n            fw = new FileWriter(\"destination.txt\");\n            char[] buf = new char[BUFFER_SIZE];\n            int len = 0;\n            while ((len = fr.read(buf)) != -1) {\n                fw.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"读写失败\");\n        } finally {\n            if (fw != null)\n                try {\n                    fw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (fr != null)\n                try {\n                    fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n}\n```\n\n#### WebView\n\n- 首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。\n\n```Java\nwebView =  new BridgeWebView(getContext().getApplicationContext());\nwebFrameLayout.addView(webView, 0);\n```\n\n> 在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。\n\n- 而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。\n\n```Java\npublic void onDetach() {\n    releaseWebViews();\n    super.onDetach();\n}\n\nprivate void releaseWebViews() {\n    if(webView != null) {\n        try {\n            if(webView.getParent() != null) {\n                ((ViewGroup) webView.getParent()).removeView(webView);\n            }\n            webView.destroy();\n        }catch (IllegalArgumentException e) {\n        }\n        RefWatcher refWatcher = FApplication.getRefWatcher();\n        refWatcher.watch(webView);\n        webView = null;\n    }\n}\n```\n\n参考文章：\n\n[Android WebView: 性能优化不得不说的事](https://www.jianshu.com/p/95d4d73be3d1)\n\n[android内存优化之webview](https://www.jianshu.com/p/c2412918b2b5#fn2)\n\n#### Handler\n\n- 使用弱引用\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private NoLeakHandler mNoLeakHandler;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mNoLeakHandler = new NoLeakHandler(this);\n        Message message = Message.obtain();\n        mNoLeakHandler.sendMessageDelayed(message, 2000);\n    }\n\n    private static class NoLeakHandler extends Handler {\n\n        private WeakReference<NoLeakActivity> mActivity;\n\n        public NoLeakHandler(NoLeakActivity activity) {\n            mActivity = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n        }\n    }\n}\n```\n\n- 及时清除消息\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private Handler mHandler = new Handler();\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n//                startMainActivity();\n            }\n        }, 2000);\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 把所有的消息和回调移除\n        mHandler.removeCallbacksAndMessages(null);\n        super.onDestroy();\n    }\n\n    @Override\n    public void onBackPressed() {\n        // 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）\n        mHandler.removeCallbacksAndMessages(null);\n        super.onBackPressed();\n    }\n}\n```\n\n### 其它\n\n#### 反面判断条件\n\nbad:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null != userList && userList.size() > 0) {\n\t\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\nbetter:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null == userList || userList.isEmpty()) {\n\t\treturn;\n\t}\n\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t// ...\n\t}\n}\n```\n\n> 很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。\n\n#### if与return搭配\n\nbad:\n\n```Java\npublic int testIfElse(String cmd) {\n    if (\"1\".equals(cmd)) {\n   \t return 1;\n    } else if (\"2\".equals(cmd)) {\n   \t return 2;\n    } else if (\"3\".equals(cmd)) {\n   \t return 3;\n    } else {\n   \t return 4;\n    }\n}\n```\n\nbetter:\n\n```Java\npublic int testIfElse(String cmd) {\n   if (\"1\".equals(cmd)) {\n       return 1;\n   }\n   if (\"2\".equals(cmd)) {\n       return 2;\n   }\n   if (\"3\".equals(cmd)) {\n       return 3;\n   }\n   return 4;\n}\n```\n\n#### 对象序列化\n\nAndroid 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .\n\n#### SharedPreferences\n\n`SharedPreferences.Editor.commit` 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level >= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  `SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)` 即可。\n\n#### 其它优化\n\n- 静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。\n\n- Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。\n\n- 不少人在子线程中更新 View 时喜欢使用 `Context.runOnUiThread` , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。\n\n- Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。\n\n- Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .\n\n- 如果使用 `Context.startActivity` 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。\n\n- 如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。\n\n- `transient` 关键字修饰变量可以限制序列化。\n\n- `View.getContext` 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .\n\n## UI相关\n\n### Space\n\nSpace 经常用于组件之间的缝隙，其 `draw()` 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。\n\n### tools标签\n\ntools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：\n\n```xml\n<TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:text=\"这段话只在预览时能看到,运行以后就看不到了\" />\n```\n\n### ContextCompat\n\nAndroid 6.0 之后 `getResources().getColor()` 被废弃了，可用 `ContextCompat.getColor(context, R.color.color_name)` 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 `getDrawable()` 等方法。\n\n\n\n","slug":"Android-代码优化小提示","published":1,"updated":"2018-06-25T03:42:59.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj3nbopu000vcoqu7k6rxdtt","content":"<h2 id=\"代码逻辑相关\"><a href=\"#代码逻辑相关\" class=\"headerlink\" title=\"代码逻辑相关\"></a>代码逻辑相关</h2><h3 id=\"遍历一个List集合\"><a href=\"#遍历一个List集合\" class=\"headerlink\" title=\"遍历一个List集合\"></a>遍历一个List集合</h3><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">   \t <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">    user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。</p>\n</blockquote>\n<h3 id=\"遍历HashMap的最佳方法\"><a href=\"#遍历HashMap的最佳方法\" class=\"headerlink\" title=\"遍历HashMap的最佳方法\"></a>遍历HashMap的最佳方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, User&gt; userMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Iterator it = userMap.entrySet().iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Map.Entry entry = (Map.Entry) it.next();</span><br><span class=\"line\">    System.out.println(entry.getKey() + <span class=\"string\">\" = \"</span> + entry.getValue());</span><br><span class=\"line\">    <span class=\"comment\">//迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素</span></span><br><span class=\"line\">    it.remove(); <span class=\"comment\">// 避免抛 ConcurrentModificationException 异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"判断字符串str是否为null或空串\"><a href=\"#判断字符串str是否为null或空串\" class=\"headerlink\" title=\"判断字符串str是否为null或空串\"></a>判断字符串str是否为null或空串</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == str || <span class=\"string\">\"\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以    用 TextUtils 的 join 和 split 方法。</p>\n</blockquote>\n<h3 id=\"容易报空指针的情况\"><a href=\"#容易报空指针的情况\" class=\"headerlink\" title=\"容易报空指针的情况\"></a>容易报空指针的情况</h3><h4 id=\"判断一个字符串的内容是否为某值\"><a href=\"#判断一个字符串的内容是否为某值\" class=\"headerlink\" title=\"判断一个字符串的内容是否为某值\"></a>判断一个字符串的内容是否为某值</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"hello\"</span>)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 避免空指针异常，应该把常量写在前面</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"hello\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断集合某个元素对象的某个字段是否为空\"><a href=\"#判断集合某个元素对象的某个字段是否为空\" class=\"headerlink\" title=\"判断集合某个元素对象的某个字段是否为空\"></a>判断集合某个元素对象的某个字段是否为空</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果元素对象为 null 这里就挂了吧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对象的方法或字段时，考虑下对象本身是否可能为 null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i) &amp;&amp; <span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用资源释放\"><a href=\"#常用资源释放\" class=\"headerlink\" title=\"常用资源释放\"></a>常用资源释放</h3><h4 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cursor.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"流文件\"><a href=\"#流文件\" class=\"headerlink\" title=\"流文件\"></a>流文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUFFER_SIZE = <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FileReader fr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileWriter fw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"origin.txt\"</span>);</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"destination.txt\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] buf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[BUFFER_SIZE];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fw.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"读写失败\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fw != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><ul>\n<li>首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView =  <span class=\"keyword\">new</span> BridgeWebView(getContext().getApplicationContext());</span><br><span class=\"line\">webFrameLayout.addView(webView, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。</p>\n</blockquote>\n<ul>\n<li>而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    releaseWebViews();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseWebViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(webView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(webView.getParent() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                ((ViewGroup) webView.getParent()).removeView(webView);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            webView.destroy();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RefWatcher refWatcher = FApplication.getRefWatcher();</span><br><span class=\"line\">        refWatcher.watch(webView);</span><br><span class=\"line\">        webView = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/95d4d73be3d1\" target=\"_blank\" rel=\"noopener\">Android WebView: 性能优化不得不说的事</a></p>\n<p><a href=\"https://www.jianshu.com/p/c2412918b2b5#fn2\" target=\"_blank\" rel=\"noopener\">android内存优化之webview</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><ul>\n<li>使用弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NoLeakHandler mNoLeakHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mNoLeakHandler = <span class=\"keyword\">new</span> NoLeakHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Message message = Message.obtain();</span><br><span class=\"line\">        mNoLeakHandler.sendMessageDelayed(message, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;NoLeakActivity&gt; mActivity;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NoLeakHandler</span><span class=\"params\">(NoLeakActivity activity)</span> </span>&#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>及时清除消息</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mHandler.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//                startMainActivity();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><h4 id=\"反面判断条件\"><a href=\"#反面判断条件\" class=\"headerlink\" title=\"反面判断条件\"></a>反面判断条件</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList &amp;&amp; userList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == userList || userList.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。</p>\n</blockquote>\n<h4 id=\"if与return搭配\"><a href=\"#if与return搭配\" class=\"headerlink\" title=\"if与return搭配\"></a>if与return搭配</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h4><p>Android 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .</p>\n<h4 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h4><p><code>SharedPreferences.Editor.commit</code> 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level &gt;= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  <code>SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)</code> 即可。</p>\n<h4 id=\"其它优化\"><a href=\"#其它优化\" class=\"headerlink\" title=\"其它优化\"></a>其它优化</h4><ul>\n<li><p>静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。</p>\n</li>\n<li><p>Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。</p>\n</li>\n<li><p>不少人在子线程中更新 View 时喜欢使用 <code>Context.runOnUiThread</code> , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。</p>\n</li>\n<li><p>Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。</p>\n</li>\n<li><p>Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .</p>\n</li>\n<li><p>如果使用 <code>Context.startActivity</code> 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。</p>\n</li>\n<li><p>如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。</p>\n</li>\n<li><p><code>transient</code> 关键字修饰变量可以限制序列化。</p>\n</li>\n<li><p><code>View.getContext</code> 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .</p>\n</li>\n</ul>\n<h2 id=\"UI相关\"><a href=\"#UI相关\" class=\"headerlink\" title=\"UI相关\"></a>UI相关</h2><h3 id=\"Space\"><a href=\"#Space\" class=\"headerlink\" title=\"Space\"></a>Space</h3><p>Space 经常用于组件之间的缝隙，其 <code>draw()</code> 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。</p>\n<h3 id=\"tools标签\"><a href=\"#tools标签\" class=\"headerlink\" title=\"tools标签\"></a>tools标签</h3><p>tools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">\"这段话只在预览时能看到,运行以后就看不到了\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ContextCompat\"><a href=\"#ContextCompat\" class=\"headerlink\" title=\"ContextCompat\"></a>ContextCompat</h3><p>Android 6.0 之后 <code>getResources().getColor()</code> 被废弃了，可用 <code>ContextCompat.getColor(context, R.color.color_name)</code> 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 <code>getDrawable()</code> 等方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码逻辑相关\"><a href=\"#代码逻辑相关\" class=\"headerlink\" title=\"代码逻辑相关\"></a>代码逻辑相关</h2><h3 id=\"遍历一个List集合\"><a href=\"#遍历一个List集合\" class=\"headerlink\" title=\"遍历一个List集合\"></a>遍历一个List集合</h3><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">   \t <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">    user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。</p>\n</blockquote>\n<h3 id=\"遍历HashMap的最佳方法\"><a href=\"#遍历HashMap的最佳方法\" class=\"headerlink\" title=\"遍历HashMap的最佳方法\"></a>遍历HashMap的最佳方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, User&gt; userMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Iterator it = userMap.entrySet().iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Map.Entry entry = (Map.Entry) it.next();</span><br><span class=\"line\">    System.out.println(entry.getKey() + <span class=\"string\">\" = \"</span> + entry.getValue());</span><br><span class=\"line\">    <span class=\"comment\">//迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素</span></span><br><span class=\"line\">    it.remove(); <span class=\"comment\">// 避免抛 ConcurrentModificationException 异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"判断字符串str是否为null或空串\"><a href=\"#判断字符串str是否为null或空串\" class=\"headerlink\" title=\"判断字符串str是否为null或空串\"></a>判断字符串str是否为null或空串</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == str || <span class=\"string\">\"\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以    用 TextUtils 的 join 和 split 方法。</p>\n</blockquote>\n<h3 id=\"容易报空指针的情况\"><a href=\"#容易报空指针的情况\" class=\"headerlink\" title=\"容易报空指针的情况\"></a>容易报空指针的情况</h3><h4 id=\"判断一个字符串的内容是否为某值\"><a href=\"#判断一个字符串的内容是否为某值\" class=\"headerlink\" title=\"判断一个字符串的内容是否为某值\"></a>判断一个字符串的内容是否为某值</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"hello\"</span>)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 避免空指针异常，应该把常量写在前面</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"hello\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断集合某个元素对象的某个字段是否为空\"><a href=\"#判断集合某个元素对象的某个字段是否为空\" class=\"headerlink\" title=\"判断集合某个元素对象的某个字段是否为空\"></a>判断集合某个元素对象的某个字段是否为空</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果元素对象为 null 这里就挂了吧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对象的方法或字段时，考虑下对象本身是否可能为 null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i) &amp;&amp; <span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用资源释放\"><a href=\"#常用资源释放\" class=\"headerlink\" title=\"常用资源释放\"></a>常用资源释放</h3><h4 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cursor.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"流文件\"><a href=\"#流文件\" class=\"headerlink\" title=\"流文件\"></a>流文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUFFER_SIZE = <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FileReader fr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileWriter fw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"origin.txt\"</span>);</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"destination.txt\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] buf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[BUFFER_SIZE];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fw.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"读写失败\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fw != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><ul>\n<li>首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView =  <span class=\"keyword\">new</span> BridgeWebView(getContext().getApplicationContext());</span><br><span class=\"line\">webFrameLayout.addView(webView, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。</p>\n</blockquote>\n<ul>\n<li>而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    releaseWebViews();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseWebViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(webView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(webView.getParent() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                ((ViewGroup) webView.getParent()).removeView(webView);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            webView.destroy();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RefWatcher refWatcher = FApplication.getRefWatcher();</span><br><span class=\"line\">        refWatcher.watch(webView);</span><br><span class=\"line\">        webView = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/95d4d73be3d1\" target=\"_blank\" rel=\"noopener\">Android WebView: 性能优化不得不说的事</a></p>\n<p><a href=\"https://www.jianshu.com/p/c2412918b2b5#fn2\" target=\"_blank\" rel=\"noopener\">android内存优化之webview</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><ul>\n<li>使用弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NoLeakHandler mNoLeakHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mNoLeakHandler = <span class=\"keyword\">new</span> NoLeakHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Message message = Message.obtain();</span><br><span class=\"line\">        mNoLeakHandler.sendMessageDelayed(message, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;NoLeakActivity&gt; mActivity;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NoLeakHandler</span><span class=\"params\">(NoLeakActivity activity)</span> </span>&#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>及时清除消息</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mHandler.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//                startMainActivity();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><h4 id=\"反面判断条件\"><a href=\"#反面判断条件\" class=\"headerlink\" title=\"反面判断条件\"></a>反面判断条件</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList &amp;&amp; userList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == userList || userList.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。</p>\n</blockquote>\n<h4 id=\"if与return搭配\"><a href=\"#if与return搭配\" class=\"headerlink\" title=\"if与return搭配\"></a>if与return搭配</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h4><p>Android 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .</p>\n<h4 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h4><p><code>SharedPreferences.Editor.commit</code> 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level &gt;= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  <code>SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)</code> 即可。</p>\n<h4 id=\"其它优化\"><a href=\"#其它优化\" class=\"headerlink\" title=\"其它优化\"></a>其它优化</h4><ul>\n<li><p>静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。</p>\n</li>\n<li><p>Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。</p>\n</li>\n<li><p>不少人在子线程中更新 View 时喜欢使用 <code>Context.runOnUiThread</code> , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。</p>\n</li>\n<li><p>Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。</p>\n</li>\n<li><p>Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .</p>\n</li>\n<li><p>如果使用 <code>Context.startActivity</code> 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。</p>\n</li>\n<li><p>如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。</p>\n</li>\n<li><p><code>transient</code> 关键字修饰变量可以限制序列化。</p>\n</li>\n<li><p><code>View.getContext</code> 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .</p>\n</li>\n</ul>\n<h2 id=\"UI相关\"><a href=\"#UI相关\" class=\"headerlink\" title=\"UI相关\"></a>UI相关</h2><h3 id=\"Space\"><a href=\"#Space\" class=\"headerlink\" title=\"Space\"></a>Space</h3><p>Space 经常用于组件之间的缝隙，其 <code>draw()</code> 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。</p>\n<h3 id=\"tools标签\"><a href=\"#tools标签\" class=\"headerlink\" title=\"tools标签\"></a>tools标签</h3><p>tools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">\"这段话只在预览时能看到,运行以后就看不到了\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ContextCompat\"><a href=\"#ContextCompat\" class=\"headerlink\" title=\"ContextCompat\"></a>ContextCompat</h3><p>Android 6.0 之后 <code>getResources().getColor()</code> 被废弃了，可用 <code>ContextCompat.getColor(context, R.color.color_name)</code> 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 <code>getDrawable()</code> 等方法。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjj3nbooo0007coqug971ig1e","category_id":"cjj3nboog0004coqulnaorqzn","_id":"cjj3nbopc000fcoqu28t5erdy"},{"post_id":"cjj3nbonv0000coqu5dpj3ddu","category_id":"cjj3nboog0004coqulnaorqzn","_id":"cjj3nbopj000jcoquw29apb68"},{"post_id":"cjj3nboo90002coqu1msnaf66","category_id":"cjj3nboog0004coqulnaorqzn","_id":"cjj3nbopm000lcoqup0hszi09"},{"post_id":"cjj3nbopg000icoqut423vyna","category_id":"cjj3nbopd000gcoqutzqn2mzb","_id":"cjj3nbopt000rcoquf8f4mdzx"},{"post_id":"cjj3nbook0006coquayij20ko","category_id":"cjj3nbopd000gcoqutzqn2mzb","_id":"cjj3nbopw000wcoqunuvglgzj"},{"post_id":"cjj3nboos0008coqu3rlhqdtg","category_id":"cjj3nbopn000mcoqucds88u6n","_id":"cjj3nbopx000xcoqu7ydz84aq"},{"post_id":"cjj3nbopu000vcoqu7k6rxdtt","category_id":"cjj3nboog0004coqulnaorqzn","_id":"cjj3nbopz0011coquwk4fdona"},{"post_id":"cjj3nbop2000ccoquady0p8ti","category_id":"cjj3nbopt000tcoqutzwgfek7","_id":"cjj3nboq10012coqu8pfp4h13"},{"post_id":"cjj3nbop7000ecoquu8bafifp","category_id":"cjj3nbopy000zcoquez1u6j0l","_id":"cjj3nboq40017coqulwxg1so8"},{"post_id":"cjj3nbopk000kcoque1dfiw0v","category_id":"cjj3nboq10013coquhmk2jvbi","_id":"cjj3nboq6001bcoquz4rhsquu"},{"post_id":"cjj3nbopo000ocoqupi2mga56","category_id":"cjj3nboq40018coqu3up9s207","_id":"cjj3nboq8001gcoqug3q53hrr"},{"post_id":"cjj3nbopq000qcoquvk77nq44","category_id":"cjj3nboq6001ccoquxcnxa6db","_id":"cjj3nboq9001jcoqu52r8gov3"}],"PostTag":[{"post_id":"cjj3nbooo0007coqug971ig1e","tag_id":"cjj3nbooj0005coqud48updil","_id":"cjj3nbop1000bcoqubfr3ful2"},{"post_id":"cjj3nbonv0000coqu5dpj3ddu","tag_id":"cjj3nbooj0005coqud48updil","_id":"cjj3nbop5000dcoqueeeeapvl"},{"post_id":"cjj3nboo90002coqu1msnaf66","tag_id":"cjj3nbooj0005coqud48updil","_id":"cjj3nbopp000pcoqukj1fgo11"},{"post_id":"cjj3nboo90002coqu1msnaf66","tag_id":"cjj3nbopd000hcoquchntfl99","_id":"cjj3nbopt000scoqu3f2tt0pg"},{"post_id":"cjj3nbopu000vcoqu7k6rxdtt","tag_id":"cjj3nbooj0005coqud48updil","_id":"cjj3nbopy000ycoquqcx3pe2h"},{"post_id":"cjj3nbook0006coquayij20ko","tag_id":"cjj3nbopn000ncoquo5yvc8vk","_id":"cjj3nboq30015coquk9sa3jxx"},{"post_id":"cjj3nbook0006coquayij20ko","tag_id":"cjj3nbopu000ucoqummu2pf7e","_id":"cjj3nboq40016coquv54kow22"},{"post_id":"cjj3nbook0006coquayij20ko","tag_id":"cjj3nbopy0010coqua2cs5xju","_id":"cjj3nboq5001acoqujelp4v02"},{"post_id":"cjj3nboos0008coqu3rlhqdtg","tag_id":"cjj3nboq20014coqur8agf12e","_id":"cjj3nboq7001ecoquijj7hd6c"},{"post_id":"cjj3nboos0008coqu3rlhqdtg","tag_id":"cjj3nbooj0005coqud48updil","_id":"cjj3nboq8001fcoqu2fit3xje"},{"post_id":"cjj3nboos0008coqu3rlhqdtg","tag_id":"cjj3nboq50019coqu0my9m4ja","_id":"cjj3nboq9001icoqu3bltet6f"},{"post_id":"cjj3nbop2000ccoquady0p8ti","tag_id":"cjj3nboq7001dcoqun1l63hk4","_id":"cjj3nboqa001lcoquowc9lgao"},{"post_id":"cjj3nbop2000ccoquady0p8ti","tag_id":"cjj3nboq8001hcoquopzoz2z8","_id":"cjj3nboqb001mcoqutcdwhr2f"},{"post_id":"cjj3nbop7000ecoquu8bafifp","tag_id":"cjj3nboqa001kcoquliftcy6k","_id":"cjj3nboqc001ocoquv5qpg0nj"},{"post_id":"cjj3nbopg000icoqut423vyna","tag_id":"cjj3nbopn000ncoquo5yvc8vk","_id":"cjj3nboqf001rcoqul7ls00kc"},{"post_id":"cjj3nbopg000icoqut423vyna","tag_id":"cjj3nbopu000ucoqummu2pf7e","_id":"cjj3nboqg001scoqu4keetyq7"},{"post_id":"cjj3nbopk000kcoque1dfiw0v","tag_id":"cjj3nboq20014coqur8agf12e","_id":"cjj3nboqh001ucoqu7bp2snh7"},{"post_id":"cjj3nbopo000ocoqupi2mga56","tag_id":"cjj3nboqg001tcoquqyan5307","_id":"cjj3nboqi001wcoqurgwj5t0q"},{"post_id":"cjj3nbopq000qcoquvk77nq44","tag_id":"cjj3nboqh001vcoquf1p8jpju","_id":"cjj3nboqj001xcoqutfhglxce"}],"Tag":[{"name":"Android","_id":"cjj3nbooj0005coqud48updil"},{"name":"Android Studio","_id":"cjj3nbopd000hcoquchntfl99"},{"name":"Chrome","_id":"cjj3nbopn000ncoquo5yvc8vk"},{"name":"工具","_id":"cjj3nbopu000ucoqummu2pf7e"},{"name":"调试","_id":"cjj3nbopy0010coqua2cs5xju"},{"name":"Java","_id":"cjj3nboq20014coqur8agf12e"},{"name":"二进制","_id":"cjj3nboq50019coqu0my9m4ja"},{"name":"测试","_id":"cjj3nboq7001dcoqun1l63hk4"},{"name":"mock","_id":"cjj3nboq8001hcoquopzoz2z8"},{"name":"前端","_id":"cjj3nboqa001kcoquliftcy6k"},{"name":"算法","_id":"cjj3nboqg001tcoquqyan5307"},{"name":"阅读笔记","_id":"cjj3nboqh001vcoquf1p8jpju"}]}}