{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source\\robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source\\images\\android.png","path":"images/android.png","modified":0,"renderable":0},{"_id":"source\\images\\avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source\\images\\kobe.png","path":"images/kobe.png","modified":0,"renderable":0},{"_id":"themes\\next\\source\\css\\main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\images\\searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\algolia-instant-search\\instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\algolia-instant-search\\instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\canvas-nest\\canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\canvas-ribbon\\canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fastclick\\LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fastclick\\README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fastclick\\bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\jquery\\index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\needsharebutton\\font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\needsharebutton\\needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\needsharebutton\\needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\pace\\pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\three\\canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\three\\canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\three\\three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\three\\three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\velocity\\bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\js\\src\\schemes\\pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fastclick\\lib\\fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fastclick\\lib\\fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\css\\font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\css\\font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\css\\font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\ua-parser-js\\dist\\ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\ua-parser-js\\dist\\ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source\\robots.txt","hash":"c3e025f8c72743f9cde53fcd2fbbee70b0952a2f","modified":1717426431450},{"_id":"source\\_posts\\Android-Jetpack-之-LiveData.md","hash":"0589c580b963a72cf551aaccf0282c70d5ab2c87","modified":1717426431419},{"_id":"source\\_posts\\Android-Jetpack-之-LifeCycle.md","hash":"83e136c20d34b8e653b550fb8dcbb0fad7b32171","modified":1717426431419},{"_id":"source\\_posts\\Android-Studio-的一些技巧.md","hash":"085aaad9ff42b2a880dc16c76e9d0557102e7108","modified":1717426431435},{"_id":"source\\_posts\\Android-Jetpack-之-ViewModel.md","hash":"1e7d7d301599347b939b80c5455f6b317ff9e85e","modified":1717426431419},{"_id":"source\\_posts\\Android-之-Fragment.md","hash":"204cc4aab4ee2153c6e721a050926b8d200604e7","modified":1717426431435},{"_id":"source\\_posts\\Android-Jetpack-之-WorkManager.md","hash":"0773f111e35eb75338f701c7b5831c347089d98a","modified":1717426431419},{"_id":"source\\_posts\\Android-一个应用多个数据库.md","hash":"a048a077cb927062b1ad9bf371f8d943c8af9a3f","modified":1717426431435},{"_id":"source\\_posts\\Android-之-Activity.md","hash":"b5233f9d4269eb36a1d02b64c66f1dfcea0405bc","modified":1717426431435},{"_id":"source\\_posts\\Android-代码优化小提示.md","hash":"2cca4c16678b9fe3e1699c9f03c073bd020fa68c","modified":1717426431435},{"_id":"source\\_posts\\Chrome-开发者工具调试.md","hash":"40378d8b5e47bd9a9b49ac0e102766548b82fd40","modified":1717426431435},{"_id":"source\\_posts\\Chrome-插件.md","hash":"b0b9e59e1e222882af9c0188a95227d642384eaf","modified":1717426431435},{"_id":"source\\_posts\\Dart-学习笔记.md","hash":"d9400801b9dd393ec50beb22af88b3e5743f3210","modified":1717426431435},{"_id":"source\\_posts\\Java-一个方法返回多个整型值.md","hash":"982f42751bc303c5ca4dd5b90cd1960548302b53","modified":1717426431435},{"_id":"source\\_posts\\Java-子类和父类相关成员执行顺序.md","hash":"a6feac545f7f31ab62eea5604f376f675062a471","modified":1717426431435},{"_id":"source\\_posts\\Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply.md","hash":"fd890b5e2b76987c77aa10ec8146e759f5f21565","modified":1717426431435},{"_id":"source\\_posts\\Mock-测试.md","hash":"18059fd6b92a2d781edbe2d63b7ac938338bf749","modified":1717426431435},{"_id":"source\\_posts\\Kotlin-泛型中的-in-和-out.md","hash":"1720f323a0d83e6613846dc9c7fc2aa6f7a1a220","modified":1717426431435},{"_id":"source\\_posts\\Pair-了解一下.md","hash":"8847c8c01e60fb892548e1e08fb93d900ea6550d","modified":1717426431435},{"_id":"source\\_posts\\localStorage-实现历史记录功能.md","hash":"178d692ec526a902d899c7be0af8e393060f5a71","modified":1717426431435},{"_id":"source\\_posts\\WebStorm-2018-版本破解.md","hash":"20cdda6e85f562408557e6f46fc2f7abd1e58df6","modified":1717426431435},{"_id":"source\\_posts\\我的书单.md","hash":"22977f4c87bebe42165bc3ce4de5d50b4db0596d","modified":1717426431450},{"_id":"source\\_posts\\位运算总结.md","hash":"c60191a3b2f83be379f6d3446e3464a69f76a03f","modified":1717426431450},{"_id":"source\\_posts\\接口代理实现-Android-Application-的多继承.md","hash":"42d833a795a8aa876c9b0c2d78eaaaf9faa91feb","modified":1717426431450},{"_id":"source\\_posts\\剑指-Offer.md","hash":"a37da072c3a6a3fa1c390d08b7e02c53231d3bda","modified":1717426431450},{"_id":"source\\_posts\\鸿蒙开发教程.md","hash":"6d75ae9a9b4e256abbb6c8ca982661266ab47ef3","modified":1717429914231},{"_id":"source\\categories\\index.md","hash":"f7b22c7150dfd8ad58382732dfc46b3cd1bf2da9","modified":1717426431450},{"_id":"source\\_posts\\Kotlin-协程.md","hash":"da042a6ea94d6b66d5fb306d0f55937f60296ab3","modified":1717426431435},{"_id":"source\\_posts\\Kotlin-教程.md","hash":"560947760119b49558c644b24730c791c6b71c10","modified":1717426431435},{"_id":"source\\images\\android.png","hash":"bafd89bad4f5aa860389354f20c050de2dc64c02","modified":1717426431450},{"_id":"source\\tags\\index.md","hash":"ddf13a75ba7be3f21c9c955b3e3da25f9a5792f6","modified":1717426431450},{"_id":"source\\images\\avatar.jpg","hash":"766c61a4b06b3901453fb646f666a16182379f75","modified":1717426431450},{"_id":"source\\images\\kobe.png","hash":"f8534c83ddfd100d615d9fca3576c39d36479d43","modified":1717426431450},{"_id":"themes\\next\\source\\fonts\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431636},{"_id":"themes\\next\\layout\\_scripts\\schemes\\mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431560},{"_id":"themes\\next\\layout\\_scripts\\schemes\\muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431560},{"_id":"themes\\next\\source\\css\\_mixins\\Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431620},{"_id":"themes\\next\\source\\css\\_mixins\\Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431621},{"_id":"themes\\next\\source\\css\\_mixins\\custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431622},{"_id":"themes\\next\\source\\css\\_variables\\Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431634},{"_id":"themes\\next\\source\\css\\_variables\\custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717426431635},{"_id":"themes\\next\\.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1717426431505},{"_id":"themes\\next\\.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1717426431503},{"_id":"themes\\next\\.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1717426431502},{"_id":"themes\\next\\.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1717426431506},{"_id":"themes\\next\\.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1717426431507},{"_id":"themes\\next\\.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1717426431507},{"_id":"themes\\next\\.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1717426431507},{"_id":"themes\\next\\LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1717426431508},{"_id":"themes\\next\\.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1717426431506},{"_id":"themes\\next\\README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1717426431508},{"_id":"themes\\next\\README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1717426431509},{"_id":"themes\\next\\bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1717426431510},{"_id":"themes\\next\\_config.yml","hash":"7fe0683a25ab39f6c232e77c1d1467ea5b723a77","modified":1717426431509},{"_id":"themes\\next\\.github\\CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1717426431504},{"_id":"themes\\next\\gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1717426431510},{"_id":"themes\\next\\.github\\browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1717426431505},{"_id":"themes\\next\\.github\\ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1717426431504},{"_id":"themes\\next\\.github\\PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1717426431505},{"_id":"themes\\next\\languages\\de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1717426431511},{"_id":"themes\\next\\languages\\default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1717426431511},{"_id":"themes\\next\\languages\\en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1717426431511},{"_id":"themes\\next\\languages\\id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1717426431512},{"_id":"themes\\next\\languages\\fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1717426431512},{"_id":"themes\\next\\languages\\it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1717426431513},{"_id":"themes\\next\\languages\\ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1717426431514},{"_id":"themes\\next\\languages\\ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1717426431514},{"_id":"themes\\next\\languages\\nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1717426431515},{"_id":"themes\\next\\languages\\pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1717426431515},{"_id":"themes\\next\\languages\\pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1717426431516},{"_id":"themes\\next\\languages\\ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1717426431520},{"_id":"themes\\next\\languages\\vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1717426431521},{"_id":"themes\\next\\languages\\zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1717426431521},{"_id":"themes\\next\\languages\\zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1717426431522},{"_id":"themes\\next\\languages\\zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1717426431522},{"_id":"themes\\next\\layout\\index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1717426431580},{"_id":"themes\\next\\layout\\category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1717426431579},{"_id":"themes\\next\\layout\\_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1717426431524},{"_id":"themes\\next\\layout\\archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1717426431579},{"_id":"themes\\next\\layout\\schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1717426431581},{"_id":"themes\\next\\scripts\\merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1717426431582},{"_id":"themes\\next\\scripts\\merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1717426431583},{"_id":"themes\\next\\layout\\post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1717426431580},{"_id":"themes\\next\\layout\\page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1717426431580},{"_id":"themes\\next\\layout\\tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1717426431581},{"_id":"themes\\next\\layout\\_custom\\header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1717426431523},{"_id":"themes\\next\\layout\\_custom\\sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1717426431523},{"_id":"themes\\next\\test\\.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1717426431709},{"_id":"themes\\next\\layout\\_macro\\post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1717426431524},{"_id":"themes\\next\\layout\\_macro\\post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1717426431525},{"_id":"themes\\next\\test\\helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1717426431709},{"_id":"themes\\next\\test\\intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1717426431710},{"_id":"themes\\next\\layout\\_macro\\reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1717426431526},{"_id":"themes\\next\\layout\\_macro\\wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1717426431548},{"_id":"themes\\next\\layout\\_macro\\sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1717426431526},{"_id":"themes\\next\\layout\\_partials\\comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1717426431549},{"_id":"themes\\next\\layout\\_macro\\post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1717426431525},{"_id":"themes\\next\\layout\\_partials\\footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1717426431549},{"_id":"themes\\next\\layout\\_partials\\page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1717426431552},{"_id":"themes\\next\\layout\\_partials\\header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1717426431551},{"_id":"themes\\next\\layout\\_partials\\pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1717426431554},{"_id":"themes\\next\\layout\\_partials\\head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1717426431550},{"_id":"themes\\next\\layout\\_partials\\search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1717426431554},{"_id":"themes\\next\\layout\\_third-party\\exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1717426431573},{"_id":"themes\\next\\layout\\_third-party\\needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1717426431574},{"_id":"themes\\next\\layout\\_third-party\\duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1717426431573},{"_id":"themes\\next\\.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1717426431503},{"_id":"themes\\next\\layout\\_third-party\\rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1717426431574},{"_id":"themes\\next\\layout\\_third-party\\mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1717426431573},{"_id":"themes\\next\\layout\\_third-party\\scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1717426431575},{"_id":"themes\\next\\layout\\_third-party\\schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1717426431575},{"_id":"themes\\next\\layout\\_scripts\\commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1717426431558},{"_id":"themes\\next\\layout\\_scripts\\boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1717426431558},{"_id":"themes\\next\\source\\images\\apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1717426431637},{"_id":"themes\\next\\source\\images\\avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1717426431638},{"_id":"themes\\next\\source\\css\\main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1717426431636},{"_id":"themes\\next\\source\\images\\algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1717426431637},{"_id":"themes\\next\\layout\\_scripts\\vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1717426431561},{"_id":"themes\\next\\source\\images\\cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1717426431639},{"_id":"themes\\next\\source\\images\\cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1717426431638},{"_id":"themes\\next\\source\\images\\cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1717426431639},{"_id":"themes\\next\\source\\images\\cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1717426431640},{"_id":"themes\\next\\source\\images\\cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1717426431640},{"_id":"themes\\next\\source\\images\\cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1717426431641},{"_id":"themes\\next\\source\\images\\favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1717426431641},{"_id":"themes\\next\\source\\images\\loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1717426431642},{"_id":"themes\\next\\source\\images\\placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1717426431643},{"_id":"themes\\next\\source\\images\\cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1717426431641},{"_id":"themes\\next\\source\\images\\favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1717426431642},{"_id":"themes\\next\\source\\images\\logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1717426431643},{"_id":"themes\\next\\scripts\\tags\\button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1717426431583},{"_id":"themes\\next\\scripts\\tags\\center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1717426431584},{"_id":"themes\\next\\scripts\\tags\\exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1717426431584},{"_id":"themes\\next\\scripts\\tags\\full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1717426431584},{"_id":"themes\\next\\scripts\\tags\\group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1717426431585},{"_id":"themes\\next\\scripts\\tags\\label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1717426431585},{"_id":"themes\\next\\scripts\\tags\\lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1717426431586},{"_id":"themes\\next\\scripts\\tags\\note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1717426431586},{"_id":"themes\\next\\source\\images\\quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1717426431644},{"_id":"themes\\next\\scripts\\tags\\tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1717426431587},{"_id":"themes\\next\\source\\images\\searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1717426431644},{"_id":"themes\\next\\source\\images\\quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1717426431643},{"_id":"themes\\next\\layout\\_partials\\head\\external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1717426431551},{"_id":"themes\\next\\layout\\_partials\\search\\localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1717426431555},{"_id":"themes\\next\\layout\\_partials\\head\\custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1717426431551},{"_id":"themes\\next\\layout\\_partials\\share\\duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1717426431557},{"_id":"themes\\next\\layout\\_partials\\search\\swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1717426431555},{"_id":"themes\\next\\layout\\_partials\\search\\tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1717426431556},{"_id":"themes\\next\\layout\\_partials\\share\\add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1717426431556},{"_id":"themes\\next\\layout\\_third-party\\analytics\\analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1717426431562},{"_id":"themes\\next\\layout\\_partials\\share\\jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1717426431558},{"_id":"themes\\next\\layout\\_partials\\share\\baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1717426431557},{"_id":"themes\\next\\layout\\_third-party\\analytics\\busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1717426431563},{"_id":"themes\\next\\layout\\_third-party\\analytics\\application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1717426431563},{"_id":"themes\\next\\layout\\_third-party\\analytics\\baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1717426431563},{"_id":"themes\\next\\layout\\_third-party\\analytics\\facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1717426431564},{"_id":"themes\\next\\layout\\_third-party\\analytics\\index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1717426431565},{"_id":"themes\\next\\layout\\_third-party\\analytics\\cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1717426431564},{"_id":"themes\\next\\layout\\_third-party\\analytics\\google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1717426431565},{"_id":"themes\\next\\layout\\_third-party\\analytics\\firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1717426431565},{"_id":"themes\\next\\layout\\_third-party\\analytics\\tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1717426431568},{"_id":"themes\\next\\layout\\_third-party\\analytics\\lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1717426431567},{"_id":"themes\\next\\layout\\_third-party\\analytics\\tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1717426431567},{"_id":"themes\\next\\layout\\_third-party\\analytics\\vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1717426431568},{"_id":"themes\\next\\layout\\_third-party\\comments\\disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1717426431569},{"_id":"themes\\next\\layout\\_third-party\\comments\\changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1717426431569},{"_id":"themes\\next\\layout\\_third-party\\comments\\duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1717426431570},{"_id":"themes\\next\\layout\\_third-party\\comments\\gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1717426431570},{"_id":"themes\\next\\layout\\_third-party\\comments\\index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1717426431571},{"_id":"themes\\next\\layout\\_third-party\\comments\\youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1717426431572},{"_id":"themes\\next\\layout\\_third-party\\comments\\livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1717426431571},{"_id":"themes\\next\\layout\\_third-party\\comments\\hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1717426431570},{"_id":"themes\\next\\layout\\_third-party\\comments\\valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1717426431572},{"_id":"themes\\next\\layout\\_third-party\\search\\index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1717426431577},{"_id":"themes\\next\\layout\\_scripts\\pages\\post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1717426431559},{"_id":"themes\\next\\layout\\_third-party\\search\\tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1717426431577},{"_id":"themes\\next\\layout\\_scripts\\schemes\\gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1717426431559},{"_id":"themes\\next\\layout\\_scripts\\schemes\\pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1717426431561},{"_id":"themes\\next\\layout\\_third-party\\search\\localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1717426431577},{"_id":"themes\\next\\layout\\_third-party\\seo\\baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1717426431578},{"_id":"themes\\next\\source\\css\\_custom\\custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1717426431620},{"_id":"themes\\next\\source\\css\\_mixins\\Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1717426431620},{"_id":"themes\\next\\source\\css\\_mixins\\Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1717426431621},{"_id":"themes\\next\\source\\css\\_mixins\\base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1717426431621},{"_id":"themes\\next\\source\\css\\_variables\\Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1717426431634},{"_id":"themes\\next\\source\\css\\_variables\\Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1717426431634},{"_id":"themes\\next\\source\\css\\_variables\\Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1717426431635},{"_id":"themes\\next\\source\\css\\_variables\\base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1717426431635},{"_id":"themes\\next\\source\\js\\src\\algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1717426431645},{"_id":"themes\\next\\source\\js\\src\\affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1717426431645},{"_id":"themes\\next\\source\\js\\src\\bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1717426431646},{"_id":"themes\\next\\source\\js\\src\\hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1717426431646},{"_id":"themes\\next\\source\\js\\src\\js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1717426431647},{"_id":"themes\\next\\source\\js\\src\\motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1717426431647},{"_id":"themes\\next\\source\\js\\src\\exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1717426431646},{"_id":"themes\\next\\source\\js\\src\\scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1717426431649},{"_id":"themes\\next\\source\\js\\src\\post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1717426431648},{"_id":"themes\\next\\source\\js\\src\\scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1717426431649},{"_id":"themes\\next\\source\\lib\\algolia-instant-search\\instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1717426431656},{"_id":"themes\\next\\source\\js\\src\\utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1717426431650},{"_id":"themes\\next\\source\\lib\\fastclick\\.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1717426431670},{"_id":"themes\\next\\source\\lib\\canvas-ribbon\\canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1717426431660},{"_id":"themes\\next\\source\\lib\\canvas-nest\\canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1717426431660},{"_id":"themes\\next\\source\\lib\\fastclick\\bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1717426431671},{"_id":"themes\\next\\source\\lib\\fastclick\\LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1717426431670},{"_id":"themes\\next\\source\\lib\\fastclick\\README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1717426431671},{"_id":"themes\\next\\source\\lib\\font-awesome\\.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1717426431673},{"_id":"themes\\next\\source\\lib\\font-awesome\\.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1717426431673},{"_id":"themes\\next\\source\\lib\\font-awesome\\.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1717426431674},{"_id":"themes\\next\\source\\lib\\font-awesome\\HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1717426431674},{"_id":"themes\\next\\source\\lib\\font-awesome\\bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1717426431674},{"_id":"themes\\next\\source\\lib\\jquery\\.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1717426431685},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1717426431687},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1717426431688},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1717426431687},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1717426431688},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1717426431688},{"_id":"themes\\next\\source\\lib\\jquery_lazyload\\jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1717426431689},{"_id":"themes\\next\\source\\lib\\needsharebutton\\needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1717426431691},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1717426431692},{"_id":"themes\\next\\source\\lib\\needsharebutton\\needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1717426431691},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1717426431692},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1717426431692},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1717426431693},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1717426431694},{"_id":"themes\\next\\source\\lib\\needsharebutton\\font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1717426431690},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1717426431693},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1717426431694},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1717426431695},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1717426431695},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1717426431695},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1717426431696},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1717426431696},{"_id":"themes\\next\\source\\lib\\pace\\pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1717426431697},{"_id":"themes\\next\\source\\lib\\pace\\pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1717426431697},{"_id":"themes\\next\\source\\lib\\three\\canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1717426431698},{"_id":"themes\\next\\source\\lib\\three\\canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1717426431699},{"_id":"themes\\next\\source\\lib\\three\\three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1717426431699},{"_id":"themes\\next\\source\\lib\\velocity\\.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1717426431705},{"_id":"themes\\next\\source\\lib\\velocity\\bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1717426431705},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1717426431708},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1717426431707},{"_id":"themes\\next\\layout\\_third-party\\search\\algolia-search\\assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1717426431576},{"_id":"themes\\next\\layout\\_third-party\\search\\algolia-search\\dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1717426431576},{"_id":"themes\\next\\source\\css\\_common\\components\\back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1717426431588},{"_id":"themes\\next\\source\\css\\_common\\outline\\outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1717426431617},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1717426431708},{"_id":"themes\\next\\source\\css\\_common\\components\\back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1717426431588},{"_id":"themes\\next\\source\\css\\_common\\components\\buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1717426431589},{"_id":"themes\\next\\source\\css\\_common\\components\\comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1717426431589},{"_id":"themes\\next\\source\\css\\_common\\components\\components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1717426431589},{"_id":"themes\\next\\source\\css\\_common\\components\\tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1717426431608},{"_id":"themes\\next\\source\\css\\_common\\scaffolding\\base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1717426431617},{"_id":"themes\\next\\source\\css\\_common\\components\\pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1717426431596},{"_id":"themes\\next\\source\\css\\_common\\scaffolding\\helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1717426431618},{"_id":"themes\\next\\source\\css\\_common\\scaffolding\\mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1717426431618},{"_id":"themes\\next\\source\\css\\_common\\scaffolding\\normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1717426431618},{"_id":"themes\\next\\source\\css\\_common\\scaffolding\\scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1717426431619},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1717426431623},{"_id":"themes\\next\\source\\css\\_schemes\\Gemini\\index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1717426431623},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1717426431624},{"_id":"themes\\next\\source\\css\\_common\\scaffolding\\tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1717426431619},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1717426431625},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1717426431624},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1717426431625},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1717426431624},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1717426431626},{"_id":"themes\\next\\source\\css\\_schemes\\Muse\\_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1717426431628},{"_id":"themes\\next\\source\\css\\_schemes\\Muse\\_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1717426431630},{"_id":"themes\\next\\source\\css\\_schemes\\Muse\\_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1717426431629},{"_id":"themes\\next\\source\\css\\_schemes\\Muse\\index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1717426431630},{"_id":"themes\\next\\source\\css\\_schemes\\Muse\\_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1717426431629},{"_id":"themes\\next\\source\\css\\_schemes\\Pisces\\_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1717426431631},{"_id":"themes\\next\\source\\css\\_schemes\\Pisces\\_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1717426431632},{"_id":"themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1717426431631},{"_id":"themes\\next\\source\\css\\_schemes\\Pisces\\index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1717426431633},{"_id":"themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1717426431633},{"_id":"themes\\next\\source\\css\\_schemes\\Pisces\\_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1717426431632},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1717426431654},{"_id":"themes\\next\\source\\js\\src\\schemes\\pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1717426431648},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1717426431655},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1717426431662},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1717426431661},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1717426431662},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1717426431663},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1717426431656},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1717426431663},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1717426431664},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1717426431668},{"_id":"themes\\next\\source\\lib\\fastclick\\lib\\fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1717426431672},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1717426431669},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1717426431669},{"_id":"themes\\next\\source\\lib\\font-awesome\\css\\font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1717426431676},{"_id":"themes\\next\\source\\lib\\font-awesome\\css\\font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1717426431675},{"_id":"themes\\next\\source\\lib\\fastclick\\lib\\fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1717426431672},{"_id":"themes\\next\\source\\lib\\font-awesome\\css\\font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1717426431676},{"_id":"themes\\next\\source\\css\\_common\\components\\footer\\footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1717426431590},{"_id":"themes\\next\\source\\css\\_common\\components\\header\\header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1717426431590},{"_id":"themes\\next\\source\\css\\_common\\components\\header\\headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1717426431591},{"_id":"themes\\next\\source\\lib\\ua-parser-js\\dist\\ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1717426431704},{"_id":"themes\\next\\source\\lib\\ua-parser-js\\dist\\ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1717426431703},{"_id":"themes\\next\\source\\css\\_common\\components\\header\\site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1717426431592},{"_id":"themes\\next\\source\\css\\_common\\components\\header\\menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1717426431591},{"_id":"themes\\next\\source\\css\\_common\\components\\header\\site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1717426431592},{"_id":"themes\\next\\source\\css\\_common\\components\\pages\\archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1717426431594},{"_id":"themes\\next\\source\\css\\_common\\components\\highlight\\highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1717426431593},{"_id":"themes\\next\\source\\css\\_common\\components\\highlight\\diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1717426431593},{"_id":"themes\\next\\source\\css\\_common\\components\\highlight\\theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1717426431594},{"_id":"themes\\next\\source\\css\\_common\\components\\pages\\categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1717426431594},{"_id":"themes\\next\\source\\css\\_common\\components\\pages\\post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1717426431595},{"_id":"themes\\next\\source\\css\\_common\\components\\pages\\pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1717426431595},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1717426431596},{"_id":"themes\\next\\source\\css\\_common\\components\\pages\\schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1717426431596},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1717426431597},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1717426431598},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1717426431597},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1717426431598},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1717426431600},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1717426431600},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1717426431600},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1717426431601},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1717426431602},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1717426431601},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1717426431602},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1717426431602},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1717426431603},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1717426431604},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1717426431605},{"_id":"themes\\next\\source\\css\\_common\\components\\post\\post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1717426431603},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1717426431604},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1717426431605},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1717426431605},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1717426431606},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1717426431606},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1717426431607},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1717426431607},{"_id":"themes\\next\\source\\css\\_common\\components\\sidebar\\site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1717426431608},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1717426431609},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1717426431610},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1717426431610},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1717426431609},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1717426431609},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1717426431611},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1717426431611},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1717426431612},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1717426431613},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1717426431613},{"_id":"themes\\next\\source\\css\\_common\\components\\tags\\tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1717426431612},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1717426431614},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1717426431614},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1717426431614},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1717426431615},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1717426431615},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1717426431615},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1717426431616},{"_id":"themes\\next\\source\\css\\_common\\components\\third-party\\third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1717426431616},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\outline\\outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1717426431627},{"_id":"themes\\next\\source\\css\\_schemes\\Muse\\sidebar\\sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1717426431631},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1717426431651},{"_id":"themes\\next\\source\\css\\_schemes\\Mist\\sidebar\\sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1717426431628},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1717426431652},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1717426431652},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1717426431653},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1717426431665},{"_id":"themes\\next\\source\\lib\\Han\\dist\\font\\han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1717426431653},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1717426431666},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1717426431666},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1717426431667},{"_id":"themes\\next\\source\\lib\\jquery\\index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1717426431686},{"_id":"themes\\next\\source\\lib\\Han\\dist\\han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1717426431655},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1717426431683},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1717426431684},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1717426431666},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1717426431678},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1717426431680},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1717426431682},{"_id":"themes\\next\\source\\lib\\fancybox\\source\\helpers\\jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1717426431667},{"_id":"themes\\next\\source\\lib\\velocity\\velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1717426431707},{"_id":"themes\\next\\source\\lib\\algolia-instant-search\\instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1717426431659},{"_id":"themes\\next\\source\\lib\\font-awesome\\fonts\\fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1717426431681},{"_id":"themes\\next\\source\\lib\\three\\three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1717426431702},{"_id":"public/search.xml","hash":"f9a77a9047f4b57299eda0f72a168306279a3bd2","modified":1717429922446},{"_id":"public/baidusitemap.xml","hash":"a060ed081578f0a10bab6da0706ba4821ff90db4","modified":1717429922446},{"_id":"public/sitemap.xml","hash":"d2e16306508149bd58984384569a9b3001567c53","modified":1717429922446},{"_id":"public/categories/index.html","hash":"d4d0aa8acac910220ec7cd9862adc78f787d09b8","modified":1717430093125},{"_id":"public/tags/index.html","hash":"de0d807e7e7d2e8d7b70c3e5b862328222b88e25","modified":1717430093125},{"_id":"public/2024/05/18/鸿蒙开发教程/index.html","hash":"34021149c94cb4bbce93c8dbd84a0bc4ba971aaa","modified":1717430093125},{"_id":"public/2023/08/08/Kotlin-协程/index.html","hash":"193c275a37352d086167205d9c9cfa94ff9ffa03","modified":1717430093125},{"_id":"public/2023/04/26/Kotlin-教程/index.html","hash":"445d36b8a84a408951d8f25f05df79018906e7ed","modified":1717430093125},{"_id":"public/2020/12/30/Dart-学习笔记/index.html","hash":"225a2c4cb88f034f393f20b4dd7173a17bbca410","modified":1717430093125},{"_id":"public/2020/04/12/Android-Jetpack-之-WorkManager/index.html","hash":"c38b4ad083b0d9dadccb5430efb5553dbf71d21b","modified":1717430093125},{"_id":"public/2019/06/25/位运算总结/index.html","hash":"67abeb464b0e7875a24cd570973d3f28a9a23ad6","modified":1717430093125},{"_id":"public/2019/03/27/Kotlin-泛型中的-in-和-out/index.html","hash":"3100aa79111c87228e2573f7345b65936ca703d4","modified":1717430093125},{"_id":"public/2019/01/30/Pair-了解一下/index.html","hash":"967ba683f8513dc075af9a83075c91674ae8039d","modified":1717430093125},{"_id":"public/2018/11/22/Android-Jetpack-之-LiveData/index.html","hash":"21e99ce7a8f55da6a639d129be0c4a52c6fcc4d3","modified":1717430093125},{"_id":"public/2018/11/06/Android-Jetpack-之-LifeCycle/index.html","hash":"710f063c3fe0996d07adb5e69abc5a4edf20a686","modified":1717430093125},{"_id":"public/2018/10/27/Android-Jetpack-之-ViewModel/index.html","hash":"f64dc908a1340f96ea92936252805b42d124e61f","modified":1717430093125},{"_id":"public/2018/10/16/Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply/index.html","hash":"3e5daec48ef9cb4aec8f3ba1e117e63cbff71f3a","modified":1717430093125},{"_id":"public/2018/09/29/localStorage-实现历史记录功能/index.html","hash":"74f7856a1660b555ff2e15307e3c883d5d8e3ec9","modified":1717430093125},{"_id":"public/2018/08/15/WebStorm-2018-版本破解/index.html","hash":"ebd037052856b67d37813b754771180638cb065b","modified":1717430093125},{"_id":"public/2018/08/03/接口代理实现-Android-Application-的多继承/index.html","hash":"f1062e3b4560a2691beb91a14d18c690060bfe24","modified":1717430093125},{"_id":"public/2018/07/23/Android-之-Fragment/index.html","hash":"faeb46fcf8fadcca5d572c77af42447ff8d7e9f0","modified":1717430093125},{"_id":"public/2018/07/05/Android-之-Activity/index.html","hash":"3a054532f9c80ffea1b0dee1538176f532eb606a","modified":1717430093125},{"_id":"public/2018/06/23/Java-一个方法返回多个整型值/index.html","hash":"89edd8bed1cfe11bc488e01d4a22da7dbf8ade8b","modified":1717430093125},{"_id":"public/2018/06/02/Java-子类和父类相关成员执行顺序/index.html","hash":"314bec118cf195d2dee70c58b9c7c5809653ce00","modified":1717430093125},{"_id":"public/2018/03/20/Mock-测试/index.html","hash":"12f4dc403aa196511a2ef78740366aea440bcfe1","modified":1717430093125},{"_id":"public/2018/03/07/我的书单/index.html","hash":"f4803cf3ded8a1850cdf2229caef9ad568a95b61","modified":1717430093125},{"_id":"public/2018/03/04/Chrome-开发者工具调试/index.html","hash":"87c3e094c5988a9ea38523a445ff56e31825c399","modified":1717430093125},{"_id":"public/2018/01/09/Android-代码优化小提示/index.html","hash":"137b40fea9a38a6c3cc893c792e6bab85e2f3ac8","modified":1717430093125},{"_id":"public/2018/01/06/Android-一个应用多个数据库/index.html","hash":"02e59c0d4823643055b10a55bfc9893c49bb41e0","modified":1717430093125},{"_id":"public/2017/12/09/剑指-Offer/index.html","hash":"7a9f90d5b42a248d2251ba30421b456a88127267","modified":1717430093125},{"_id":"public/2017/12/06/Chrome-插件/index.html","hash":"b480d233e6c4b07a0de36eb57c0bbdf1f1007f93","modified":1717430093125},{"_id":"public/archives/index.html","hash":"5e0795d3cb03fa3ed97bf9577cf13aacd00462b4","modified":1717430093125},{"_id":"public/2016/09/25/Android-Studio-的一些技巧/index.html","hash":"22d5171a1c386eef8e6a8f6a8d2bd496313e1d35","modified":1717430093125},{"_id":"public/archives/page/2/index.html","hash":"4e92ffe8f6ccdab04b0bafde4067ef715a3d4113","modified":1717430093125},{"_id":"public/archives/page/3/index.html","hash":"3d6756da1a0c00166e927c9a7fb3b1bc3231fe17","modified":1717430093125},{"_id":"public/archives/2016/index.html","hash":"4bd5e1afabc5283515fb3686df5e85301a4ad762","modified":1717430093125},{"_id":"public/archives/2016/09/index.html","hash":"52ce44f213d848380e3e3392cf63c3cdaa49b118","modified":1717430093125},{"_id":"public/archives/2017/index.html","hash":"a41897966805fd576db3642ab695c6edfa898620","modified":1717430093125},{"_id":"public/archives/2017/12/index.html","hash":"c369c00c171a3a80eda21349dd44a12959eeb223","modified":1717430093125},{"_id":"public/archives/2018/index.html","hash":"8bc57e477aa960204ec474e922c1e96d18bf227f","modified":1717430093125},{"_id":"public/archives/2018/page/2/index.html","hash":"738a8cbd6c928820533978c0f9e5b086c3bb367c","modified":1717430093125},{"_id":"public/archives/2018/01/index.html","hash":"9ca49c0d0824ba9167a82a39c411dc712b160217","modified":1717430093125},{"_id":"public/archives/2018/03/index.html","hash":"638420bc9556563f23cd5faea8447da1e6a20b6f","modified":1717430093125},{"_id":"public/archives/2018/06/index.html","hash":"30a97363e0c32592fdb0721415483da2281e5f69","modified":1717430093125},{"_id":"public/archives/2018/07/index.html","hash":"cf5d5f4395d677061fdd14bae1e41053e56cb536","modified":1717430093125},{"_id":"public/archives/2018/08/index.html","hash":"907989edf7bad3778b3dbad3bc36fbf185559a9f","modified":1717430093125},{"_id":"public/archives/2018/09/index.html","hash":"d0e88d69929d50a162f8636e667cc7c5c8def801","modified":1717430093125},{"_id":"public/archives/2018/10/index.html","hash":"5ec8d61020dad332edcc3e1f7da9a15ad6ff60c2","modified":1717430093125},{"_id":"public/archives/2018/11/index.html","hash":"feef2b2e94ca0f7e476bba260a784b30f6ff70a9","modified":1717430093125},{"_id":"public/archives/2019/index.html","hash":"3860f0a76c17a5a6ea5e6e9b3dc7d282a381d3d1","modified":1717430093125},{"_id":"public/archives/2019/01/index.html","hash":"6910ae9ae65c23cb7da6f82f723bcbfbcfdc4564","modified":1717430093125},{"_id":"public/archives/2019/03/index.html","hash":"af10164a58a39839748927dabb3202fc4a742002","modified":1717430093125},{"_id":"public/archives/2019/06/index.html","hash":"d0c195432f1b1b4d7e18891f74d0fe58e27c5b2b","modified":1717430093125},{"_id":"public/archives/2020/index.html","hash":"6f82dc8a3a465a4974000a96cd4153d10277077f","modified":1717430093125},{"_id":"public/archives/2020/04/index.html","hash":"d24bcb0888347edb60748103db04e2f624509f2b","modified":1717430093125},{"_id":"public/archives/2020/12/index.html","hash":"a4def151a38a5474b6b2986c19f5703ffcd7487c","modified":1717430093125},{"_id":"public/archives/2023/index.html","hash":"30eb16047c8aa506d3d6268b39ac8c9e099a9ea6","modified":1717430093125},{"_id":"public/archives/2023/04/index.html","hash":"c453208b28f4cbd341984ee7aba5070060781336","modified":1717430093125},{"_id":"public/archives/2023/08/index.html","hash":"197c79f7ed3ea6647f4566df01bb6d3d438260bb","modified":1717430093125},{"_id":"public/archives/2024/index.html","hash":"b06ae1d6aa8293887558ce4611e451a2228ca5e0","modified":1717430093125},{"_id":"public/archives/2024/05/index.html","hash":"4506fcb960081c1fd877f5fa99704366c29ba149","modified":1717430093125},{"_id":"public/categories/Android/index.html","hash":"1493246db8a57aca78bd54011ba5e907f95fd41b","modified":1717430093125},{"_id":"public/categories/Android/page/2/index.html","hash":"8b7a9f5cf2e186882db2a2c507305151490210fa","modified":1717430093125},{"_id":"public/categories/工具/index.html","hash":"931d964f0524881e18a039c742f71f5152b4e263","modified":1717430093125},{"_id":"public/categories/Dart/index.html","hash":"7f66b95601a522963f6bc96dfa50256374c1650b","modified":1717430093125},{"_id":"public/categories/二进制/index.html","hash":"ca1e4dd6ab8eacefc97a45912f2cd77715a5abaa","modified":1717430093125},{"_id":"public/categories/Kotlin/index.html","hash":"2c1d768cbea28df3fa4b5e9fedc9f6c668a2612c","modified":1717430093125},{"_id":"public/categories/Java/index.html","hash":"c56ec44921ae0f1ecdd6e8f32931b7c1911f5cb0","modified":1717430093125},{"_id":"public/categories/测试/index.html","hash":"362148edc3a3adcaf8d77c8a306990c124ec1d3d","modified":1717430093125},{"_id":"public/categories/前端/index.html","hash":"1db056e543e3e77161687879c2fb31900e9c9d32","modified":1717430093125},{"_id":"public/categories/阅读笔记/index.html","hash":"dff6597460bab963ab3cac311b539b7553d012cf","modified":1717430093125},{"_id":"public/categories/算法/index.html","hash":"e6a93c7a8112a43576695b54df991afd3d3731b8","modified":1717430093125},{"_id":"public/categories/位运算/index.html","hash":"6ca303d26c38807534c1e26940af76765fb95728","modified":1717430093125},{"_id":"public/categories/鸿蒙开发/index.html","hash":"7362c39800fdfd5745bc866ae4a6cb1772d4ea02","modified":1717430093125},{"_id":"public/page/2/index.html","hash":"5f01515653a53fbc5fcb8837c4f4a24746e76bcf","modified":1717430093125},{"_id":"public/page/3/index.html","hash":"2fb10461367eabf5e3c0f397eb46cfac0acd40c4","modified":1717430093125},{"_id":"public/tags/Android/index.html","hash":"d0b493ef888abd4826256201c890e6c2a43bdc64","modified":1717430093125},{"_id":"public/index.html","hash":"19811d0c7dd0fad9d6b33adc4b3eb59f707c287a","modified":1717430093125},{"_id":"public/tags/Android/page/2/index.html","hash":"2242d5755b9279d6861630e899683983cddd0ecc","modified":1717430093125},{"_id":"public/tags/Lifecycle/index.html","hash":"59e5d58f03734dd37325db6d891b207b569dfaf6","modified":1717430093125},{"_id":"public/tags/Jetpack/index.html","hash":"5690a4badab2bbcf3eeec6de2bc5e1046bb58cbc","modified":1717430093125},{"_id":"public/tags/LiveData/index.html","hash":"d8bb568ea19aab090b7b79367b812d045ac93f64","modified":1717430093125},{"_id":"public/tags/ViewModel/index.html","hash":"0e3290b3efa746f48b723cc9071beab49838f165","modified":1717430093125},{"_id":"public/tags/WorkManager/index.html","hash":"3371383cf92210a319d47137816dfae10c9acca0","modified":1717430093125},{"_id":"public/tags/Android-Studio/index.html","hash":"32fdea61ea8ed0ba2fc5c8d8246cd0e666a1f040","modified":1717430093125},{"_id":"public/tags/Fragment/index.html","hash":"41ac30f6afd524a61aeb23c640243c0426c498fc","modified":1717430093125},{"_id":"public/tags/Activity/index.html","hash":"b8bccd51c33355d8b1b427e9c2117f53145f367d","modified":1717430093125},{"_id":"public/tags/工具/index.html","hash":"fa551c56f67d0436589650c81bc5aada78d1187a","modified":1717430093125},{"_id":"public/tags/Chrome/index.html","hash":"93c6806d044ac1f75fc4f242b99659de9fb1bd2d","modified":1717430093125},{"_id":"public/tags/调试/index.html","hash":"2f5da0612b2989b48447b8baf8460b448bf6aabf","modified":1717430093125},{"_id":"public/tags/Java/index.html","hash":"975c7f116797a0eec27df81782c43ecd6c0a3ab3","modified":1717430093125},{"_id":"public/tags/Dart/index.html","hash":"4457c66b869cf9f25350140ec0df62f8a847efa4","modified":1717430093125},{"_id":"public/tags/二进制/index.html","hash":"800700e960a51b32ee82e2b686f3eeb26d6fd12d","modified":1717430093125},{"_id":"public/tags/Kotlin/index.html","hash":"965d7f00db1968254285d11fa756de63e352815a","modified":1717430093125},{"_id":"public/tags/mock/index.html","hash":"e51df355768ed3e922dce13683f04fbf73b1bd74","modified":1717430093125},{"_id":"public/tags/WebStorm/index.html","hash":"6a779ee02edaf7f77eb954cbf42f533b053d6276","modified":1717430093125},{"_id":"public/tags/测试/index.html","hash":"edc80bfc3ab33813c3b843f1029975b715b763ef","modified":1717430093125},{"_id":"public/tags/localStorage/index.html","hash":"8f9b8e2c294de0df5af1da829d879d77ec2b484b","modified":1717430093125},{"_id":"public/tags/算法/index.html","hash":"4bc67db79384edb3d519d05b16f93d051950f3cf","modified":1717430093125},{"_id":"public/tags/鸿蒙开发/index.html","hash":"807a10738e3e4cc045ed4378ae8bc8cdef24f002","modified":1717430093125},{"_id":"public/tags/阅读笔记/index.html","hash":"8b351f2d13b0236953b695e55782f5ccbb7305f5","modified":1717430093125},{"_id":"public/tags/位运算/index.html","hash":"c7de0a748bcf94688bc22174f612ce54828ce62e","modified":1717430093125},{"_id":"public/tags/HarmonyOS/index.html","hash":"f68fa5ec579170c1e5b4d4e8e7b6e2ada77cd5f3","modified":1717430093125},{"_id":"public/images/avatar.jpg","hash":"766c61a4b06b3901453fb646f666a16182379f75","modified":1717429649286},{"_id":"public/robots.txt","hash":"c3e025f8c72743f9cde53fcd2fbbee70b0952a2f","modified":1717429649286},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1717429649286},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1717429649286},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1717429649286},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1717429649286},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1717429649286},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1717429649286},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1717429649286},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1717429649286},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1717429649286},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1717429649286},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1717429649286},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1717429649286},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1717429649286},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1717429649286},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1717429649286},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1717429649286},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1717429649286},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1717429649286},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1717429649286},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1717429649286},{"_id":"public/images/android.png","hash":"bafd89bad4f5aa860389354f20c050de2dc64c02","modified":1717429649286},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1717429649286},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1717429649286},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1717429649286},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1717429649286},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1717429649286},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1717429649286},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1717429649286},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1717429649286},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1717429649286},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1717429649286},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1717429649286},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1717429649286},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1717429649286},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1717429649286},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1717429649286},{"_id":"public/css/main.css","hash":"ca1c281beeb62ad87322ffbb34447e9895b8916c","modified":1717429649286},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1717429649286},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1717429649286},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1717429649286},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1717429649286},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1717429649286},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1717429649286},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1717429649286},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1717429649286},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1717429649286},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1717429649286},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1717429649286},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1717429649286},{"_id":"public/lib/fastclick/README.html","hash":"1c2cb1168e9df516e311177476e499990453965d","modified":1717429649286},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1717429649286},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1717429649286},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1717429649286},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1717429649286},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1717429649286},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1717429649286},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1717429649286},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1717429649286},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1717429649286},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1717429649286},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1717429649286},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1717429649286},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1717429649286},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1717429649286},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1717429649286},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1717429649286},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1717429649286},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1717429649286},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1717429649286},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1717429649286},{"_id":"public/images/kobe.png","hash":"f8534c83ddfd100d615d9fca3576c39d36479d43","modified":1717429649286},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1717429649286},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1717429649286},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1717429649286},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1717429649286},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1717429649286},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1717429649286},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1717429649286},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1717429649286},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1717429649286},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1717429649286},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1717429649286},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1717429649286},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1717429649286},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1717429649286},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1717429649286},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1717429649286},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1717429649286},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1717429649286},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1717429649286},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1717429649286},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1717429649286},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1717429649286},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1717429649286},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1717429649286},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1717429649286},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1717429649286},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1717429649286},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1717429649286}],"Category":[{"name":"Android","_id":"clwz59rco0004ncttdrivfwd6"},{"name":"工具","_id":"clwz59rd0000tncttdx5h1jdr"},{"name":"二进制","_id":"clwz59rd40018ncttckth6zml"},{"name":"Dart","_id":"clwz59rd6001gncttfq2e2ezk"},{"name":"Kotlin","_id":"clwz59rd8001mncttaz723a4m"},{"name":"Java","_id":"clwz59rda001sncttf0p3f2ja"},{"name":"测试","_id":"clwz59rde0027nctt07kw70ri"},{"name":"前端","_id":"clwz59rdg002onctt6wkhaze1"},{"name":"阅读笔记","_id":"clwz59rdh002unctt6p6uae51"},{"name":"算法","_id":"clwz59rdh002yncttggmld78z"},{"name":"位运算","_id":"clwz59rdi0031nctt8uiy6zdp"},{"name":"鸿蒙开发","_id":"clwz59rdi0036nctt2dxf08dc"}],"Data":[],"Page":[{"title":"标签","date":"2016-09-24T21:28:31.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2016-09-25 05:28:31\ntype: \"categories\"\ncomments: false\n---\n","updated":"2024-06-03T14:53:51.450Z","path":"categories/index.html","layout":"page","_id":"clwz59rcg0000nctth3aw0xgi","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-09-24T21:28:31.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-09-25 05:28:31\ntype: \"tags\"\ncomments: false\n---\n","updated":"2024-06-03T14:53:51.450Z","path":"tags/index.html","layout":"page","_id":"clwz59rcm0002nctt5ivzhlhi","content":"","excerpt":"","more":""}],"Post":[{"title":"Android Jetpack 之 Lifecycle","date":"2018-11-06T13:15:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 前言\n\n在日常的开发中，我们通常需要在 Activity / Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity / Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。\n\nLifecycle 是一个类，它持有 Activity / Fragment 生命周期状态的信息，并允许其它对象观察此状态。\n\n### Lifecycle 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\n场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。\n\n- Presenter 继承 LifecycleObserver 接口\n\n```Kotlin\ninterface IPresenter : LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)\n    fun onCreate(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)\n    fun onDestroy(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_ANY) // ON_ANY 注解能观察到其它所有的生命周期方法\n    fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event)\n}\n```\n\n```Kotlin\nclass MyPresenter : IPresenter {\n\n    override fun onCreate(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onCreate\")\n    }\n\n    override fun onDestroy(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n    }\n\n    override fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event) {\n//        Log.e(javaClass.simpleName, \"onLifecycleChanged\")\n    }\n}\n```\n\n- 在 Activity 中添加 LifecycleObserver\n\n```Kotlin\nclass MyLifecycleActivity : AppCompatActivity() {\n\n    private lateinit var myPresenter: MyPresenter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my_lifecycle)\n\n        Log.e(javaClass.simpleName, \"onCreate\")\n\n        myPresenter = MyPresenter()\n        lifecycle.addObserver(myPresenter) // 添加 LifecycleObserver\n    }\n\n    override fun onDestroy() {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n        super.onDestroy()\n    }\n}\n```\n\n启动 Activity 会打印：\n\n```Kotlin\nMyLifecycleActivity: onCreate\nMyPresenter: onCreate\n```\n\nfinish Activity 会打印：\n\n```Kotlin\nMyPresenter: onDestroy\nMyLifecycleActivity: onDestroy\n```\n\n以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。\n\n```Kotlin\nenum class Event {\n    /**\n     * Constant for onCreate event of the [LifecycleOwner].\n     */\n    ON_CREATE,\n    /**\n     * Constant for onStart event of the [LifecycleOwner].\n     */\n    ON_START,\n    /**\n     * Constant for onResume event of the [LifecycleOwner].\n     */\n    ON_RESUME,\n    /**\n     * Constant for onPause event of the [LifecycleOwner].\n     */\n    ON_PAUSE,\n    /**\n     * Constant for onStop event of the [LifecycleOwner].\n     */\n    ON_STOP,\n    /**\n     * Constant for onDestroy event of the [LifecycleOwner].\n     */\n    ON_DESTROY,\n    /**\n     * An [Event] constant that can be used to match all events.\n     */\n    ON_ANY\n}\n```\n\nLifecycle 内部还有代表了各个**生命周期所处状态**的枚举类 State\n\n```Kotlin\nenum class State {\n\n    /**\n     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch\n     * any more events. For instance, for an [android.app.Activity], this state is reached\n     * before Activity's [onDestroy] call.\n     */\n    DESTROYED,\n\n    /**\n     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is\n     * the state when it is constructed but has not received\n     * [onCreate] yet.\n     */\n    INITIALIZED,\n\n    /**\n     * Created state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onCreate] call;\n     * before [onStop] call.\n     */\n    CREATED,\n\n    /**\n     * Started state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onStart] call;\n     * before [onPause] call.\n     */\n    STARTED,\n\n    /**\n     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached after [onResume] is called.\n     */\n    RESUMED;\n\n    /**\n     * Compares if this State is greater or equal to the given `state`.\n     *\n     * @param state State to compare with\n     * @return true if this State is greater or equal to the given `state`\n     */\n    fun isAtLeast(state: State): Boolean {\n        return compareTo(state) >= 0\n    }\n}\n```\n\n在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：\n\n```Kotlin\noverride fun onStop() {\n    presenter1.onStop()\n    presenter2.onStop()\n    presenter3.onStop()\n    super.onStop()\n}\n\noverride fun onDestroy() {\n    presenter1.onDestroy()\n    presenter2.onDestroy()\n    presenter3.onDestroy()\n    super.onDestroy()\n}\n```\n\n这样会使 Activity 的代码变得很臃肿。\n\n如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。\n\n```Kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_my_lifecycle)\n    \n    lifecycle.addObserver(presenter1) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter2) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter3) // 添加 LifecycleObserver\n}\n```\n\n### 基本原理\n\n**几个概念**\n\n- **LifecycleObserver 接口**\n\n  Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。\n\n- **LifecycleOwner 接口**\n\n  Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。\n\n- **Lifecycle 类**\n\n  生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。\n\n- **State**\n  \n  当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .\n\n- **Event**\n\n  当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。\n\n**实现原理**\n\n#### LifecycleOwner\n\n  AppCompatActivity 的父类 `SupportActivity` 和 `Fragment` 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n   \n    // ... \n   \n    private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    public Lifecycle getLifecycle() {\n        return this.mLifecycleRegistry;\n    }\n    \n    // ...\n}\n```\n\n```Java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n```\n\n从源码可知 getLifecycle() 方法返回的是 `LifecycleRegistry` 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。\n\n#### LifecycleRegistry\n\n  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。\n\n```Java\npublic class LifecycleRegistry extends Lifecycle {\n\n    // LifecycleObserver Map , 每一个 Observer 都有一个 State\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n\n    // 当前的状态\n    private State mState;\n\n    // Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n   /**\n    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , \n    * 该 Observer 依然能收到 ON_CREATE 事件\n    */\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        // ...\n        // 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的\n        // 所有事件分发给 Observer\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n        // ...\n    }\n\n    /**\n     * 处理生命周期事件\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    /**\n     * 改变状态\n     */\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        // ...\n        sync();\n        // ...\n    }\n\n    /**\n     * 同步 Observer 状态，并分发事件\n     */\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大\n            // 如果当前状态值 < Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            // 如果当前状态值 > Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    /**\n     * 向前传递事件。\n     * 增加 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                // 分发状态改变事件\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    /**\n     * 向后传递事件。\n     * 减小 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n}\n```\n根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！\n\n接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ReportFragment.injectIfNeededIn(this);\n    }\n}\n```\n\n注意到 SupportActivity 的 onCreate() 方法里面有行 `ReportFragment.injectIfNeededIn(this)` 代码，再进入 ReportFragment 类分析。\n\n#### ReportFragment\n\n```Java\npublic class ReportFragment extends Fragment {\n\n    public static void injectIfNeededIn(Activity activity) {\n        android.app.FragmentManager manager = activity.getFragmentManager();\n        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n            manager.executePendingTransactions();\n        }\n    }\n\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        dispatchCreate(mProcessListener);\n        dispatch(Lifecycle.Event.ON_CREATE);\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        dispatchStart(mProcessListener);\n        dispatch(Lifecycle.Event.ON_START);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        dispatchResume(mProcessListener);\n        dispatch(Lifecycle.Event.ON_RESUME);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        dispatch(Lifecycle.Event.ON_PAUSE);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        dispatch(Lifecycle.Event.ON_STOP);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        dispatch(Lifecycle.Event.ON_DESTROY);\n        // just want to be sure that we won't leak reference to an activity\n        mProcessListener = null;\n    }\n\n    /**\n     * 分发事件\n     */\n    private void dispatch(Lifecycle.Event event) {\n        Activity activity = getActivity();\n        if (activity instanceof LifecycleRegistryOwner) {\n            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);\n            return;\n        }\n\n        if (activity instanceof LifecycleOwner) {\n            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();\n            if (lifecycle instanceof LifecycleRegistry) {\n                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);\n            }\n        }\n    }\n}\n```\n\n不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。\n\n**为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？**\n\n在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：\n\n```Java\npublic static void injectIfNeededIn(Activity activity) {\n    // ProcessLifecycleOwner should always correctly work and some activities may not extend\n    // FragmentActivity from support lib, so we use framework fragments for activities\n    android.app.FragmentManager manager = activity.getFragmentManager();\n    if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n        manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n        // Hopefully, we are the first to make a transaction.\n        manager.executePendingTransactions();\n    }\n}\n```\n\n有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。\n\n**另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？**\n\n鼠标停在 ReportFragment 类，同时按下 `Ctrl + Shift + Alt + F7` 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .\n\n#### LifecycleDispatcher\n\n生命周期分发者。\n\n```Java\nclass LifecycleDispatcher {\n\n    // ...\n\n    static void init(Context context) {\n        if (sInitialized.getAndSet(true)) {\n            return;\n        }\n        ((Application) context.getApplicationContext())\n                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());\n    }\n\n    // 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调\n    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {\n        private final FragmentCallback mFragmentCallback;\n\n        DispatcherActivityCallback() {\n            mFragmentCallback = new FragmentCallback();\n        }\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            if (activity instanceof FragmentActivity) {\n                ((FragmentActivity) activity).getSupportFragmentManager()\n                        .registerFragmentLifecycleCallbacks(mFragmentCallback, true);\n            }\n            // 给每个 Activity 添加 ReportFragment\n            ReportFragment.injectIfNeededIn(activity);\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n    }\n\n    /**\n     * 通过递归形式给所有子 Fragment 设置 State\n     */\n    private static void markState(FragmentManager manager, State state) {\n        Collection<Fragment> fragments = manager.getFragments();\n        if (fragments == null) {\n            return;\n        }\n        for (Fragment fragment : fragments) {\n            if (fragment == null) {\n                continue;\n            }\n            markStateIn(fragment, state);\n            if (fragment.isAdded()) {\n                // 递归\n                markState(fragment.getChildFragmentManager(), state);\n            }\n        }\n    }\n\n    private static void markStateIn(Object object, State state) {\n        if (object instanceof LifecycleRegistryOwner) {\n            LifecycleRegistry registry = ((LifecycleRegistryOwner) object).getLifecycle();\n            registry.markState(state);\n        }\n    }\n\n    /**\n     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 \n     */\n    private static void markState(FragmentActivity activity, State state) {\n        markStateIn(activity, state);\n        markState(activity.getSupportFragmentManager(), state);\n    }\n\n    // ...\n}\n```\n\n从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。\n\n- 在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;\n- 在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .\n\n#### ProcessLifecycleOwner\n\n为整个 App 进程提供生命周期的类。\n\n```Java\npublic class ProcessLifecycleOwner implements LifecycleOwner {\n\n    static final long TIMEOUT_MS = 700; //mls\n\n    // ...\n\n    static void init(Context context) {\n        sInstance.attach(context);\n    }\n\n    private ActivityInitializationListener mInitializationListener =\n            new ActivityInitializationListener() {\n                @Override\n                public void onCreate() {\n                }\n\n                @Override\n                public void onStart() {\n                    activityStarted();\n                }\n\n                @Override\n                public void onResume() {\n                    activityResumed();\n                }\n            };\n\n    void activityStarted() {\n        mStartedCounter++;\n        if (mStartedCounter == 1 && mStopSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            mStopSent = false;\n        }\n    }\n\n    void activityResumed() {\n        mResumedCounter++;\n        if (mResumedCounter == 1) {\n            if (mPauseSent) {\n                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n                mPauseSent = false;\n            } else {\n                mHandler.removeCallbacks(mDelayedPauseRunnable);\n            }\n        }\n    }\n\n    void activityPaused() {\n        mResumedCounter--;\n        if (mResumedCounter == 0) {\n            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);\n        }\n    }\n\n    void activityStopped() {\n        mStartedCounter--;\n        dispatchStopIfNeeded();\n    }\n\n    void attach(Context context) {\n        mHandler = new Handler();\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n        Application app = (Application) context.getApplicationContext();\n        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n                ReportFragment.get(activity).setProcessListener(mInitializationListener);\n            }\n\n            @Override\n            public void onActivityPaused(Activity activity) {\n                activityPaused();\n            }\n\n            @Override\n            public void onActivityStopped(Activity activity) {\n                activityStopped();\n            }\n        });\n    }\n}\n```\n\n从源码可知：\n\n- ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；\n- ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；\n- ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS = 700，因此这个判断不是即时的，有 700ms 的延迟；\n- ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。\n\n最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .\n\n```Java\npublic class ProcessLifecycleOwnerInitializer extends ContentProvider {\n    \n    @Override\n    public boolean onCreate() {\n        LifecycleDispatcher.init(getContext());\n        ProcessLifecycleOwner.init(getContext());\n        return true;\n    }\n\n    // ...\n}\n```\n\nLifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。\n\n```xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  // ...\n  <provider\n    android:name=\"android.arch.lifecycle.ProcessLifecycleOwnerInitializer\"\n    android:authorities=\"me.baron.achitecturelearning.lifecycle-trojan\"\n    android:exported=\"false\"\n    android:multiprocess=\"true\" />\n</manifest>\n```\n\n### Lifecycle 的最佳实践\n\n- 保持 Activity / Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；\n- 尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;\n- 将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；\n- 使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；\n- 如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；\n- 不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android-Lifecycle超能解析-生命周期的那些事儿](https://segmentfault.com/a/1190000016443108#articleHeader9)\n- [Android官方架构组件:Lifecycle详解&原理分析](https://blog.csdn.net/mq2553299/article/details/79029657)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)","source":"_posts/Android-Jetpack-之-LifeCycle.md","raw":"---\ntitle: Android Jetpack 之 Lifecycle\ndate: 2018-11-6 21:15:00\ncategories: \"Android\"\ntags:\n     - Android\n     - Lifecycle\n     - Jetpack\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 前言\n\n在日常的开发中，我们通常需要在 Activity / Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity / Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。\n\nLifecycle 是一个类，它持有 Activity / Fragment 生命周期状态的信息，并允许其它对象观察此状态。\n\n### Lifecycle 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\n场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。\n\n- Presenter 继承 LifecycleObserver 接口\n\n```Kotlin\ninterface IPresenter : LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)\n    fun onCreate(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)\n    fun onDestroy(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_ANY) // ON_ANY 注解能观察到其它所有的生命周期方法\n    fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event)\n}\n```\n\n```Kotlin\nclass MyPresenter : IPresenter {\n\n    override fun onCreate(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onCreate\")\n    }\n\n    override fun onDestroy(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n    }\n\n    override fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event) {\n//        Log.e(javaClass.simpleName, \"onLifecycleChanged\")\n    }\n}\n```\n\n- 在 Activity 中添加 LifecycleObserver\n\n```Kotlin\nclass MyLifecycleActivity : AppCompatActivity() {\n\n    private lateinit var myPresenter: MyPresenter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my_lifecycle)\n\n        Log.e(javaClass.simpleName, \"onCreate\")\n\n        myPresenter = MyPresenter()\n        lifecycle.addObserver(myPresenter) // 添加 LifecycleObserver\n    }\n\n    override fun onDestroy() {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n        super.onDestroy()\n    }\n}\n```\n\n启动 Activity 会打印：\n\n```Kotlin\nMyLifecycleActivity: onCreate\nMyPresenter: onCreate\n```\n\nfinish Activity 会打印：\n\n```Kotlin\nMyPresenter: onDestroy\nMyLifecycleActivity: onDestroy\n```\n\n以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。\n\n```Kotlin\nenum class Event {\n    /**\n     * Constant for onCreate event of the [LifecycleOwner].\n     */\n    ON_CREATE,\n    /**\n     * Constant for onStart event of the [LifecycleOwner].\n     */\n    ON_START,\n    /**\n     * Constant for onResume event of the [LifecycleOwner].\n     */\n    ON_RESUME,\n    /**\n     * Constant for onPause event of the [LifecycleOwner].\n     */\n    ON_PAUSE,\n    /**\n     * Constant for onStop event of the [LifecycleOwner].\n     */\n    ON_STOP,\n    /**\n     * Constant for onDestroy event of the [LifecycleOwner].\n     */\n    ON_DESTROY,\n    /**\n     * An [Event] constant that can be used to match all events.\n     */\n    ON_ANY\n}\n```\n\nLifecycle 内部还有代表了各个**生命周期所处状态**的枚举类 State\n\n```Kotlin\nenum class State {\n\n    /**\n     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch\n     * any more events. For instance, for an [android.app.Activity], this state is reached\n     * before Activity's [onDestroy] call.\n     */\n    DESTROYED,\n\n    /**\n     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is\n     * the state when it is constructed but has not received\n     * [onCreate] yet.\n     */\n    INITIALIZED,\n\n    /**\n     * Created state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onCreate] call;\n     * before [onStop] call.\n     */\n    CREATED,\n\n    /**\n     * Started state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onStart] call;\n     * before [onPause] call.\n     */\n    STARTED,\n\n    /**\n     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached after [onResume] is called.\n     */\n    RESUMED;\n\n    /**\n     * Compares if this State is greater or equal to the given `state`.\n     *\n     * @param state State to compare with\n     * @return true if this State is greater or equal to the given `state`\n     */\n    fun isAtLeast(state: State): Boolean {\n        return compareTo(state) >= 0\n    }\n}\n```\n\n在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：\n\n```Kotlin\noverride fun onStop() {\n    presenter1.onStop()\n    presenter2.onStop()\n    presenter3.onStop()\n    super.onStop()\n}\n\noverride fun onDestroy() {\n    presenter1.onDestroy()\n    presenter2.onDestroy()\n    presenter3.onDestroy()\n    super.onDestroy()\n}\n```\n\n这样会使 Activity 的代码变得很臃肿。\n\n如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。\n\n```Kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_my_lifecycle)\n    \n    lifecycle.addObserver(presenter1) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter2) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter3) // 添加 LifecycleObserver\n}\n```\n\n### 基本原理\n\n**几个概念**\n\n- **LifecycleObserver 接口**\n\n  Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。\n\n- **LifecycleOwner 接口**\n\n  Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。\n\n- **Lifecycle 类**\n\n  生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。\n\n- **State**\n  \n  当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .\n\n- **Event**\n\n  当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。\n\n**实现原理**\n\n#### LifecycleOwner\n\n  AppCompatActivity 的父类 `SupportActivity` 和 `Fragment` 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n   \n    // ... \n   \n    private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    public Lifecycle getLifecycle() {\n        return this.mLifecycleRegistry;\n    }\n    \n    // ...\n}\n```\n\n```Java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n```\n\n从源码可知 getLifecycle() 方法返回的是 `LifecycleRegistry` 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。\n\n#### LifecycleRegistry\n\n  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。\n\n```Java\npublic class LifecycleRegistry extends Lifecycle {\n\n    // LifecycleObserver Map , 每一个 Observer 都有一个 State\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n\n    // 当前的状态\n    private State mState;\n\n    // Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n   /**\n    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , \n    * 该 Observer 依然能收到 ON_CREATE 事件\n    */\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        // ...\n        // 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的\n        // 所有事件分发给 Observer\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n        // ...\n    }\n\n    /**\n     * 处理生命周期事件\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    /**\n     * 改变状态\n     */\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        // ...\n        sync();\n        // ...\n    }\n\n    /**\n     * 同步 Observer 状态，并分发事件\n     */\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大\n            // 如果当前状态值 < Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            // 如果当前状态值 > Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    /**\n     * 向前传递事件。\n     * 增加 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                // 分发状态改变事件\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    /**\n     * 向后传递事件。\n     * 减小 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n}\n```\n根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！\n\n接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ReportFragment.injectIfNeededIn(this);\n    }\n}\n```\n\n注意到 SupportActivity 的 onCreate() 方法里面有行 `ReportFragment.injectIfNeededIn(this)` 代码，再进入 ReportFragment 类分析。\n\n#### ReportFragment\n\n```Java\npublic class ReportFragment extends Fragment {\n\n    public static void injectIfNeededIn(Activity activity) {\n        android.app.FragmentManager manager = activity.getFragmentManager();\n        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n            manager.executePendingTransactions();\n        }\n    }\n\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        dispatchCreate(mProcessListener);\n        dispatch(Lifecycle.Event.ON_CREATE);\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        dispatchStart(mProcessListener);\n        dispatch(Lifecycle.Event.ON_START);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        dispatchResume(mProcessListener);\n        dispatch(Lifecycle.Event.ON_RESUME);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        dispatch(Lifecycle.Event.ON_PAUSE);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        dispatch(Lifecycle.Event.ON_STOP);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        dispatch(Lifecycle.Event.ON_DESTROY);\n        // just want to be sure that we won't leak reference to an activity\n        mProcessListener = null;\n    }\n\n    /**\n     * 分发事件\n     */\n    private void dispatch(Lifecycle.Event event) {\n        Activity activity = getActivity();\n        if (activity instanceof LifecycleRegistryOwner) {\n            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);\n            return;\n        }\n\n        if (activity instanceof LifecycleOwner) {\n            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();\n            if (lifecycle instanceof LifecycleRegistry) {\n                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);\n            }\n        }\n    }\n}\n```\n\n不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。\n\n**为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？**\n\n在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：\n\n```Java\npublic static void injectIfNeededIn(Activity activity) {\n    // ProcessLifecycleOwner should always correctly work and some activities may not extend\n    // FragmentActivity from support lib, so we use framework fragments for activities\n    android.app.FragmentManager manager = activity.getFragmentManager();\n    if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n        manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n        // Hopefully, we are the first to make a transaction.\n        manager.executePendingTransactions();\n    }\n}\n```\n\n有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。\n\n**另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？**\n\n鼠标停在 ReportFragment 类，同时按下 `Ctrl + Shift + Alt + F7` 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .\n\n#### LifecycleDispatcher\n\n生命周期分发者。\n\n```Java\nclass LifecycleDispatcher {\n\n    // ...\n\n    static void init(Context context) {\n        if (sInitialized.getAndSet(true)) {\n            return;\n        }\n        ((Application) context.getApplicationContext())\n                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());\n    }\n\n    // 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调\n    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {\n        private final FragmentCallback mFragmentCallback;\n\n        DispatcherActivityCallback() {\n            mFragmentCallback = new FragmentCallback();\n        }\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            if (activity instanceof FragmentActivity) {\n                ((FragmentActivity) activity).getSupportFragmentManager()\n                        .registerFragmentLifecycleCallbacks(mFragmentCallback, true);\n            }\n            // 给每个 Activity 添加 ReportFragment\n            ReportFragment.injectIfNeededIn(activity);\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n    }\n\n    /**\n     * 通过递归形式给所有子 Fragment 设置 State\n     */\n    private static void markState(FragmentManager manager, State state) {\n        Collection<Fragment> fragments = manager.getFragments();\n        if (fragments == null) {\n            return;\n        }\n        for (Fragment fragment : fragments) {\n            if (fragment == null) {\n                continue;\n            }\n            markStateIn(fragment, state);\n            if (fragment.isAdded()) {\n                // 递归\n                markState(fragment.getChildFragmentManager(), state);\n            }\n        }\n    }\n\n    private static void markStateIn(Object object, State state) {\n        if (object instanceof LifecycleRegistryOwner) {\n            LifecycleRegistry registry = ((LifecycleRegistryOwner) object).getLifecycle();\n            registry.markState(state);\n        }\n    }\n\n    /**\n     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 \n     */\n    private static void markState(FragmentActivity activity, State state) {\n        markStateIn(activity, state);\n        markState(activity.getSupportFragmentManager(), state);\n    }\n\n    // ...\n}\n```\n\n从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。\n\n- 在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;\n- 在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .\n\n#### ProcessLifecycleOwner\n\n为整个 App 进程提供生命周期的类。\n\n```Java\npublic class ProcessLifecycleOwner implements LifecycleOwner {\n\n    static final long TIMEOUT_MS = 700; //mls\n\n    // ...\n\n    static void init(Context context) {\n        sInstance.attach(context);\n    }\n\n    private ActivityInitializationListener mInitializationListener =\n            new ActivityInitializationListener() {\n                @Override\n                public void onCreate() {\n                }\n\n                @Override\n                public void onStart() {\n                    activityStarted();\n                }\n\n                @Override\n                public void onResume() {\n                    activityResumed();\n                }\n            };\n\n    void activityStarted() {\n        mStartedCounter++;\n        if (mStartedCounter == 1 && mStopSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            mStopSent = false;\n        }\n    }\n\n    void activityResumed() {\n        mResumedCounter++;\n        if (mResumedCounter == 1) {\n            if (mPauseSent) {\n                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n                mPauseSent = false;\n            } else {\n                mHandler.removeCallbacks(mDelayedPauseRunnable);\n            }\n        }\n    }\n\n    void activityPaused() {\n        mResumedCounter--;\n        if (mResumedCounter == 0) {\n            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);\n        }\n    }\n\n    void activityStopped() {\n        mStartedCounter--;\n        dispatchStopIfNeeded();\n    }\n\n    void attach(Context context) {\n        mHandler = new Handler();\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n        Application app = (Application) context.getApplicationContext();\n        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n                ReportFragment.get(activity).setProcessListener(mInitializationListener);\n            }\n\n            @Override\n            public void onActivityPaused(Activity activity) {\n                activityPaused();\n            }\n\n            @Override\n            public void onActivityStopped(Activity activity) {\n                activityStopped();\n            }\n        });\n    }\n}\n```\n\n从源码可知：\n\n- ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；\n- ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；\n- ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS = 700，因此这个判断不是即时的，有 700ms 的延迟；\n- ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。\n\n最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .\n\n```Java\npublic class ProcessLifecycleOwnerInitializer extends ContentProvider {\n    \n    @Override\n    public boolean onCreate() {\n        LifecycleDispatcher.init(getContext());\n        ProcessLifecycleOwner.init(getContext());\n        return true;\n    }\n\n    // ...\n}\n```\n\nLifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。\n\n```xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  // ...\n  <provider\n    android:name=\"android.arch.lifecycle.ProcessLifecycleOwnerInitializer\"\n    android:authorities=\"me.baron.achitecturelearning.lifecycle-trojan\"\n    android:exported=\"false\"\n    android:multiprocess=\"true\" />\n</manifest>\n```\n\n### Lifecycle 的最佳实践\n\n- 保持 Activity / Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；\n- 尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;\n- 将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；\n- 使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；\n- 如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；\n- 不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android-Lifecycle超能解析-生命周期的那些事儿](https://segmentfault.com/a/1190000016443108#articleHeader9)\n- [Android官方架构组件:Lifecycle详解&原理分析](https://blog.csdn.net/mq2553299/article/details/79029657)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)","slug":"Android-Jetpack-之-LifeCycle","published":1,"updated":"2024-06-03T14:53:51.419Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcj0001nctt1svm50m2","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在日常的开发中，我们通常需要在 Activity &#x2F; Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity &#x2F; Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。</p>\n<p>Lifecycle 是一个类，它持有 Activity &#x2F; Fragment 生命周期状态的信息，并允许其它对象观察此状态。</p>\n<h3 id=\"Lifecycle-使用\"><a href=\"#Lifecycle-使用\" class=\"headerlink\" title=\"Lifecycle 使用\"></a>Lifecycle 使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\">添加相关依赖</a></p>\n<p>场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。</p>\n<ul>\n<li>Presenter 继承 LifecycleObserver 接口</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPresenter</span> : <span class=\"type\">LifecycleObserver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_ANY)</span> <span class=\"comment\">// ON_ANY 注解能观察到其它所有的生命周期方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPresenter</span> : <span class=\"type\">IPresenter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onCreate&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onDestroy&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Log.e(javaClass.simpleName, &quot;onLifecycleChanged&quot;)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 Activity 中添加 LifecycleObserver</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLifecycleActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myPresenter: MyPresenter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onCreate&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        myPresenter = MyPresenter()</span><br><span class=\"line\">        lifecycle.addObserver(myPresenter) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onDestroy&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动 Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLifecycleActivity: onCreate</span><br><span class=\"line\">MyPresenter: onCreate</span><br></pre></td></tr></table></figure>\n\n<p>finish Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPresenter: onDestroy</span><br><span class=\"line\">MyLifecycleActivity: onDestroy</span><br></pre></td></tr></table></figure>\n\n<p>以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onCreate event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_CREATE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStart event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_START,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onResume event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_RESUME,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onPause event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_PAUSE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStop event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_STOP,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onDestroy event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_DESTROY,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An [Event] constant that can be used to match all events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_ANY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lifecycle 内部还有代表了各个<strong>生命周期所处状态</strong>的枚举类 State</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch</span></span><br><span class=\"line\"><span class=\"comment\">     * any more events. For instance, for an [android.app.Activity], this state is reached</span></span><br><span class=\"line\"><span class=\"comment\">     * before Activity&#x27;s [onDestroy] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DESTROYED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is</span></span><br><span class=\"line\"><span class=\"comment\">     * the state when it is constructed but has not received</span></span><br><span class=\"line\"><span class=\"comment\">     * [onCreate] yet.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    INITIALIZED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Created state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onCreate] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onStop] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CREATED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Started state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onStart] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onPause] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    STARTED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached after [onResume] is called.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RESUMED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Compares if this State is greater or equal to the given `state`.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state State to compare with</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this State is greater or equal to the given `state`</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isAtLeast</span><span class=\"params\">(state: <span class=\"type\">State</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compareTo(state) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onStop()</span><br><span class=\"line\">    presenter2.onStop()</span><br><span class=\"line\">    presenter3.onStop()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onDestroy()</span><br><span class=\"line\">    presenter2.onDestroy()</span><br><span class=\"line\">    presenter3.onDestroy()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样会使 Activity 的代码变得很臃肿。</p>\n<p>如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\">    </span><br><span class=\"line\">    lifecycle.addObserver(presenter1) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter2) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter3) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3><p><strong>几个概念</strong></p>\n<ul>\n<li><p><strong>LifecycleObserver 接口</strong></p>\n<p>Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。</p>\n</li>\n<li><p><strong>LifecycleOwner 接口</strong></p>\n<p>Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。</p>\n</li>\n<li><p><strong>Lifecycle 类</strong></p>\n<p>生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。</p>\n</li>\n<li><p><strong>State</strong></p>\n<p>当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .</p>\n</li>\n<li><p><strong>Event</strong></p>\n<p>当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。</p>\n</li>\n</ul>\n<p><strong>实现原理</strong></p>\n<h4 id=\"LifecycleOwner\"><a href=\"#LifecycleOwner\" class=\"headerlink\" title=\"LifecycleOwner\"></a>LifecycleOwner</h4><p>  AppCompatActivity 的父类 <code>SupportActivity</code> 和 <code>Fragment</code> 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleOwner</span>, Component &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">LifecycleRegistry</span> <span class=\"variable\">mLifecycleRegistry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleRegistry</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Lifecycle <span class=\"title function_\">getLifecycle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">LifecycleOwner</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    Lifecycle <span class=\"title function_\">getLifecycle</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可知 getLifecycle() 方法返回的是 <code>LifecycleRegistry</code> 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。</p>\n<h4 id=\"LifecycleRegistry\"><a href=\"#LifecycleRegistry\" class=\"headerlink\" title=\"LifecycleRegistry\"></a>LifecycleRegistry</h4><p>  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Lifecycle</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleObserver Map , 每一个 Observer 都有一个 State</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">FastSafeIterableMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LifecycleRegistry</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner provider)</span> &#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , </span></span><br><span class=\"line\"><span class=\"comment\">    * 该 Observer 依然能收到 ON_CREATE 事件</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleObserver observer)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的</span></span><br><span class=\"line\">        <span class=\"comment\">// 所有事件分发给 Observer</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理生命周期事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleLifecycleEvent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">State</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 改变状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveToState</span><span class=\"params\">(State next)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步 Observer 状态，并分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sync</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LifecycleOwner</span> <span class=\"variable\">lifecycleOwner</span> <span class=\"operator\">=</span> mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">&quot;LifecycleOwner is garbage collected, you shouldn&#x27;t try dispatch &quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;new events from it.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &lt; Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &gt; Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"literal\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向前传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> &#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            <span class=\"type\">ObserverWithState</span> <span class=\"variable\">observer</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                <span class=\"comment\">// 分发状态改变事件</span></span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向后传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 减小 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> &#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            <span class=\"type\">ObserverWithState</span> <span class=\"variable\">observer</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                <span class=\"type\">Event</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！</p>\n<p>接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleOwner</span>, Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ReportFragment.injectIfNeededIn(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意到 SupportActivity 的 onCreate() 方法里面有行 <code>ReportFragment.injectIfNeededIn(this)</code> 代码，再进入 ReportFragment 类分析。</p>\n<h4 id=\"ReportFragment\"><a href=\"#ReportFragment\" class=\"headerlink\" title=\"ReportFragment\"></a>ReportFragment</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReportFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">        android.app.<span class=\"type\">FragmentManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            manager.beginTransaction().add(<span class=\"keyword\">new</span> <span class=\"title class_\">ReportFragment</span>(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">            manager.executePendingTransactions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        dispatchCreate(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        dispatchStart(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onResume();</span><br><span class=\"line\">        dispatchResume(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onPause();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        <span class=\"comment\">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class=\"line\">        mProcessListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispatch</span><span class=\"params\">(Lifecycle.Event event)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Activity</span> <span class=\"variable\">activity</span> <span class=\"operator\">=</span> getActivity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            <span class=\"type\">Lifecycle</span> <span class=\"variable\">lifecycle</span> <span class=\"operator\">=</span> ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。</p>\n<p><strong>为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？</strong></p>\n<p>在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class=\"line\">    <span class=\"comment\">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class=\"line\">    android.app.<span class=\"type\">FragmentManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> activity.getFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        manager.beginTransaction().add(<span class=\"keyword\">new</span> <span class=\"title class_\">ReportFragment</span>(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">        <span class=\"comment\">// Hopefully, we are the first to make a transaction.</span></span><br><span class=\"line\">        manager.executePendingTransactions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。</p>\n<p><strong>另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？</strong></p>\n<p>鼠标停在 ReportFragment 类，同时按下 <code>Ctrl + Shift + Alt + F7</code> 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .</p>\n<h4 id=\"LifecycleDispatcher\"><a href=\"#LifecycleDispatcher\" class=\"headerlink\" title=\"LifecycleDispatcher\"></a>LifecycleDispatcher</h4><p>生命周期分发者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleDispatcher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sInitialized.getAndSet(<span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ((Application) context.getApplicationContext())</span><br><span class=\"line\">                .registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherActivityCallback</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DispatcherActivityCallback</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">EmptyActivityLifecycleCallbacks</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FragmentCallback mFragmentCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">        DispatcherActivityCallback() &#123;</span><br><span class=\"line\">            mFragmentCallback = <span class=\"keyword\">new</span> <span class=\"title class_\">FragmentCallback</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                ((FragmentActivity) activity).getSupportFragmentManager()</span><br><span class=\"line\">                        .registerFragmentLifecycleCallbacks(mFragmentCallback, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 给每个 Activity 添加 ReportFragment</span></span><br><span class=\"line\">            ReportFragment.injectIfNeededIn(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivitySaveInstanceState</span><span class=\"params\">(Activity activity, Bundle outState)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过递归形式给所有子 Fragment 设置 State</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">markState</span><span class=\"params\">(FragmentManager manager, State state)</span> &#123;</span><br><span class=\"line\">        Collection&lt;Fragment&gt; fragments = manager.getFragments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fragments == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Fragment fragment : fragments) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            markStateIn(fragment, state);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment.isAdded()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 递归</span></span><br><span class=\"line\">                markState(fragment.getChildFragmentManager(), state);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">markStateIn</span><span class=\"params\">(Object object, State state)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            <span class=\"type\">LifecycleRegistry</span> <span class=\"variable\">registry</span> <span class=\"operator\">=</span> ((LifecycleRegistryOwner) object).getLifecycle();</span><br><span class=\"line\">            registry.markState(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">markState</span><span class=\"params\">(FragmentActivity activity, State state)</span> &#123;</span><br><span class=\"line\">        markStateIn(activity, state);</span><br><span class=\"line\">        markState(activity.getSupportFragmentManager(), state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。</p>\n<ul>\n<li>在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;</li>\n<li>在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .</li>\n</ul>\n<h4 id=\"ProcessLifecycleOwner\"><a href=\"#ProcessLifecycleOwner\" class=\"headerlink\" title=\"ProcessLifecycleOwner\"></a>ProcessLifecycleOwner</h4><p>为整个 App 进程提供生命周期的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProcessLifecycleOwner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleOwner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">TIMEOUT_MS</span> <span class=\"operator\">=</span> <span class=\"number\">700</span>; <span class=\"comment\">//mls</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        sInstance.attach(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ActivityInitializationListener</span> <span class=\"variable\">mInitializationListener</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ActivityInitializationListener</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    activityStarted();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    activityResumed();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityStarted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mStartedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStartedCounter == <span class=\"number\">1</span> &amp;&amp; mStopSent) &#123;</span><br><span class=\"line\">            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">            mStopSent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityResumed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mResumedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPauseSent) &#123;</span><br><span class=\"line\">                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">                mPauseSent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mHandler.removeCallbacks(mDelayedPauseRunnable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityPaused</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mResumedCounter--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityStopped</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mStartedCounter--;</span><br><span class=\"line\">        dispatchStopIfNeeded();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">attach</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        mHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>();</span><br><span class=\"line\">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">        <span class=\"type\">Application</span> <span class=\"variable\">app</span> <span class=\"operator\">=</span> (Application) context.getApplicationContext();</span><br><span class=\"line\">        app.registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> <span class=\"title class_\">EmptyActivityLifecycleCallbacks</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">                ReportFragment.get(activity).setProcessListener(mInitializationListener);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityPaused</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">                activityPaused();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">                activityStopped();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可知：</p>\n<ul>\n<li>ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；</li>\n<li>ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；</li>\n<li>ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS &#x3D; 700，因此这个判断不是即时的，有 700ms 的延迟；</li>\n<li>ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。</li>\n</ul>\n<p>最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProcessLifecycleOwnerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ContentProvider</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        LifecycleDispatcher.init(getContext());</span><br><span class=\"line\">        ProcessLifecycleOwner.init(getContext());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.arch.lifecycle.ProcessLifecycleOwnerInitializer&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">&quot;me.baron.achitecturelearning.lifecycle-trojan&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:multiprocess</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lifecycle-的最佳实践\"><a href=\"#Lifecycle-的最佳实践\" class=\"headerlink\" title=\"Lifecycle 的最佳实践\"></a>Lifecycle 的最佳实践</h3><ul>\n<li>保持 Activity &#x2F; Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；</li>\n<li>尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;</li>\n<li>将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；</li>\n<li>使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；</li>\n<li>如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；</li>\n<li>不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016443108#articleHeader9\">Android-Lifecycle超能解析-生命周期的那些事儿</a></li>\n<li><a href=\"https://blog.csdn.net/mq2553299/article/details/79029657\">Android官方架构组件:Lifecycle详解&amp;原理分析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\">Android Developers</a></li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在日常的开发中，我们通常需要在 Activity &#x2F; Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity &#x2F; Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。</p>\n<p>Lifecycle 是一个类，它持有 Activity &#x2F; Fragment 生命周期状态的信息，并允许其它对象观察此状态。</p>\n<h3 id=\"Lifecycle-使用\"><a href=\"#Lifecycle-使用\" class=\"headerlink\" title=\"Lifecycle 使用\"></a>Lifecycle 使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\">添加相关依赖</a></p>\n<p>场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。</p>\n<ul>\n<li>Presenter 继承 LifecycleObserver 接口</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPresenter</span> : <span class=\"type\">LifecycleObserver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_ANY)</span> <span class=\"comment\">// ON_ANY 注解能观察到其它所有的生命周期方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPresenter</span> : <span class=\"type\">IPresenter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onCreate&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onDestroy&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Log.e(javaClass.simpleName, &quot;onLifecycleChanged&quot;)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 Activity 中添加 LifecycleObserver</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLifecycleActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myPresenter: MyPresenter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onCreate&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        myPresenter = MyPresenter()</span><br><span class=\"line\">        lifecycle.addObserver(myPresenter) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">&quot;onDestroy&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动 Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLifecycleActivity: onCreate</span><br><span class=\"line\">MyPresenter: onCreate</span><br></pre></td></tr></table></figure>\n\n<p>finish Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPresenter: onDestroy</span><br><span class=\"line\">MyLifecycleActivity: onDestroy</span><br></pre></td></tr></table></figure>\n\n<p>以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onCreate event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_CREATE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStart event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_START,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onResume event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_RESUME,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onPause event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_PAUSE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStop event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_STOP,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onDestroy event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_DESTROY,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An [Event] constant that can be used to match all events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_ANY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lifecycle 内部还有代表了各个<strong>生命周期所处状态</strong>的枚举类 State</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch</span></span><br><span class=\"line\"><span class=\"comment\">     * any more events. For instance, for an [android.app.Activity], this state is reached</span></span><br><span class=\"line\"><span class=\"comment\">     * before Activity&#x27;s [onDestroy] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DESTROYED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is</span></span><br><span class=\"line\"><span class=\"comment\">     * the state when it is constructed but has not received</span></span><br><span class=\"line\"><span class=\"comment\">     * [onCreate] yet.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    INITIALIZED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Created state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onCreate] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onStop] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CREATED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Started state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onStart] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onPause] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    STARTED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached after [onResume] is called.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RESUMED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Compares if this State is greater or equal to the given `state`.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state State to compare with</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this State is greater or equal to the given `state`</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isAtLeast</span><span class=\"params\">(state: <span class=\"type\">State</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compareTo(state) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onStop()</span><br><span class=\"line\">    presenter2.onStop()</span><br><span class=\"line\">    presenter3.onStop()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onDestroy()</span><br><span class=\"line\">    presenter2.onDestroy()</span><br><span class=\"line\">    presenter3.onDestroy()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样会使 Activity 的代码变得很臃肿。</p>\n<p>如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\">    </span><br><span class=\"line\">    lifecycle.addObserver(presenter1) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter2) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter3) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3><p><strong>几个概念</strong></p>\n<ul>\n<li><p><strong>LifecycleObserver 接口</strong></p>\n<p>Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。</p>\n</li>\n<li><p><strong>LifecycleOwner 接口</strong></p>\n<p>Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。</p>\n</li>\n<li><p><strong>Lifecycle 类</strong></p>\n<p>生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。</p>\n</li>\n<li><p><strong>State</strong></p>\n<p>当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .</p>\n</li>\n<li><p><strong>Event</strong></p>\n<p>当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。</p>\n</li>\n</ul>\n<p><strong>实现原理</strong></p>\n<h4 id=\"LifecycleOwner\"><a href=\"#LifecycleOwner\" class=\"headerlink\" title=\"LifecycleOwner\"></a>LifecycleOwner</h4><p>  AppCompatActivity 的父类 <code>SupportActivity</code> 和 <code>Fragment</code> 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleOwner</span>, Component &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">LifecycleRegistry</span> <span class=\"variable\">mLifecycleRegistry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleRegistry</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Lifecycle <span class=\"title function_\">getLifecycle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">LifecycleOwner</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    Lifecycle <span class=\"title function_\">getLifecycle</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可知 getLifecycle() 方法返回的是 <code>LifecycleRegistry</code> 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。</p>\n<h4 id=\"LifecycleRegistry\"><a href=\"#LifecycleRegistry\" class=\"headerlink\" title=\"LifecycleRegistry\"></a>LifecycleRegistry</h4><p>  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Lifecycle</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleObserver Map , 每一个 Observer 都有一个 State</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">FastSafeIterableMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LifecycleRegistry</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner provider)</span> &#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , </span></span><br><span class=\"line\"><span class=\"comment\">    * 该 Observer 依然能收到 ON_CREATE 事件</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleObserver observer)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的</span></span><br><span class=\"line\">        <span class=\"comment\">// 所有事件分发给 Observer</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理生命周期事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleLifecycleEvent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">State</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 改变状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveToState</span><span class=\"params\">(State next)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步 Observer 状态，并分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sync</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LifecycleOwner</span> <span class=\"variable\">lifecycleOwner</span> <span class=\"operator\">=</span> mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">&quot;LifecycleOwner is garbage collected, you shouldn&#x27;t try dispatch &quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;new events from it.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &lt; Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &gt; Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"literal\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向前传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> &#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            <span class=\"type\">ObserverWithState</span> <span class=\"variable\">observer</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                <span class=\"comment\">// 分发状态改变事件</span></span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向后传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 减小 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> &#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            <span class=\"type\">ObserverWithState</span> <span class=\"variable\">observer</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                <span class=\"type\">Event</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！</p>\n<p>接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleOwner</span>, Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ReportFragment.injectIfNeededIn(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意到 SupportActivity 的 onCreate() 方法里面有行 <code>ReportFragment.injectIfNeededIn(this)</code> 代码，再进入 ReportFragment 类分析。</p>\n<h4 id=\"ReportFragment\"><a href=\"#ReportFragment\" class=\"headerlink\" title=\"ReportFragment\"></a>ReportFragment</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReportFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">        android.app.<span class=\"type\">FragmentManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            manager.beginTransaction().add(<span class=\"keyword\">new</span> <span class=\"title class_\">ReportFragment</span>(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">            manager.executePendingTransactions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        dispatchCreate(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        dispatchStart(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onResume();</span><br><span class=\"line\">        dispatchResume(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onPause();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        <span class=\"comment\">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class=\"line\">        mProcessListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispatch</span><span class=\"params\">(Lifecycle.Event event)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Activity</span> <span class=\"variable\">activity</span> <span class=\"operator\">=</span> getActivity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            <span class=\"type\">Lifecycle</span> <span class=\"variable\">lifecycle</span> <span class=\"operator\">=</span> ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。</p>\n<p><strong>为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？</strong></p>\n<p>在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class=\"line\">    <span class=\"comment\">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class=\"line\">    android.app.<span class=\"type\">FragmentManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> activity.getFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        manager.beginTransaction().add(<span class=\"keyword\">new</span> <span class=\"title class_\">ReportFragment</span>(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">        <span class=\"comment\">// Hopefully, we are the first to make a transaction.</span></span><br><span class=\"line\">        manager.executePendingTransactions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。</p>\n<p><strong>另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？</strong></p>\n<p>鼠标停在 ReportFragment 类，同时按下 <code>Ctrl + Shift + Alt + F7</code> 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .</p>\n<h4 id=\"LifecycleDispatcher\"><a href=\"#LifecycleDispatcher\" class=\"headerlink\" title=\"LifecycleDispatcher\"></a>LifecycleDispatcher</h4><p>生命周期分发者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleDispatcher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sInitialized.getAndSet(<span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ((Application) context.getApplicationContext())</span><br><span class=\"line\">                .registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherActivityCallback</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DispatcherActivityCallback</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">EmptyActivityLifecycleCallbacks</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FragmentCallback mFragmentCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">        DispatcherActivityCallback() &#123;</span><br><span class=\"line\">            mFragmentCallback = <span class=\"keyword\">new</span> <span class=\"title class_\">FragmentCallback</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                ((FragmentActivity) activity).getSupportFragmentManager()</span><br><span class=\"line\">                        .registerFragmentLifecycleCallbacks(mFragmentCallback, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 给每个 Activity 添加 ReportFragment</span></span><br><span class=\"line\">            ReportFragment.injectIfNeededIn(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivitySaveInstanceState</span><span class=\"params\">(Activity activity, Bundle outState)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过递归形式给所有子 Fragment 设置 State</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">markState</span><span class=\"params\">(FragmentManager manager, State state)</span> &#123;</span><br><span class=\"line\">        Collection&lt;Fragment&gt; fragments = manager.getFragments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fragments == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Fragment fragment : fragments) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            markStateIn(fragment, state);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment.isAdded()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 递归</span></span><br><span class=\"line\">                markState(fragment.getChildFragmentManager(), state);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">markStateIn</span><span class=\"params\">(Object object, State state)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            <span class=\"type\">LifecycleRegistry</span> <span class=\"variable\">registry</span> <span class=\"operator\">=</span> ((LifecycleRegistryOwner) object).getLifecycle();</span><br><span class=\"line\">            registry.markState(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">markState</span><span class=\"params\">(FragmentActivity activity, State state)</span> &#123;</span><br><span class=\"line\">        markStateIn(activity, state);</span><br><span class=\"line\">        markState(activity.getSupportFragmentManager(), state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。</p>\n<ul>\n<li>在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;</li>\n<li>在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .</li>\n</ul>\n<h4 id=\"ProcessLifecycleOwner\"><a href=\"#ProcessLifecycleOwner\" class=\"headerlink\" title=\"ProcessLifecycleOwner\"></a>ProcessLifecycleOwner</h4><p>为整个 App 进程提供生命周期的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProcessLifecycleOwner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleOwner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">TIMEOUT_MS</span> <span class=\"operator\">=</span> <span class=\"number\">700</span>; <span class=\"comment\">//mls</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        sInstance.attach(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ActivityInitializationListener</span> <span class=\"variable\">mInitializationListener</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ActivityInitializationListener</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    activityStarted();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    activityResumed();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityStarted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mStartedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStartedCounter == <span class=\"number\">1</span> &amp;&amp; mStopSent) &#123;</span><br><span class=\"line\">            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">            mStopSent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityResumed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mResumedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPauseSent) &#123;</span><br><span class=\"line\">                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">                mPauseSent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mHandler.removeCallbacks(mDelayedPauseRunnable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityPaused</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mResumedCounter--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">activityStopped</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mStartedCounter--;</span><br><span class=\"line\">        dispatchStopIfNeeded();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">attach</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        mHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>();</span><br><span class=\"line\">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">        <span class=\"type\">Application</span> <span class=\"variable\">app</span> <span class=\"operator\">=</span> (Application) context.getApplicationContext();</span><br><span class=\"line\">        app.registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> <span class=\"title class_\">EmptyActivityLifecycleCallbacks</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">                ReportFragment.get(activity).setProcessListener(mInitializationListener);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityPaused</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">                activityPaused();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">                activityStopped();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可知：</p>\n<ul>\n<li>ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；</li>\n<li>ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；</li>\n<li>ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS &#x3D; 700，因此这个判断不是即时的，有 700ms 的延迟；</li>\n<li>ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。</li>\n</ul>\n<p>最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProcessLifecycleOwnerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ContentProvider</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        LifecycleDispatcher.init(getContext());</span><br><span class=\"line\">        ProcessLifecycleOwner.init(getContext());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.arch.lifecycle.ProcessLifecycleOwnerInitializer&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">&quot;me.baron.achitecturelearning.lifecycle-trojan&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:multiprocess</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lifecycle-的最佳实践\"><a href=\"#Lifecycle-的最佳实践\" class=\"headerlink\" title=\"Lifecycle 的最佳实践\"></a>Lifecycle 的最佳实践</h3><ul>\n<li>保持 Activity &#x2F; Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；</li>\n<li>尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;</li>\n<li>将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；</li>\n<li>使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；</li>\n<li>如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；</li>\n<li>不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016443108#articleHeader9\">Android-Lifecycle超能解析-生命周期的那些事儿</a></li>\n<li><a href=\"https://blog.csdn.net/mq2553299/article/details/79029657\">Android官方架构组件:Lifecycle详解&amp;原理分析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\">Android Developers</a></li>\n</ul>\n"},{"title":"Android Jetpack 之 LiveData","date":"2018-11-22T00:28:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 概述\n\n- LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。\n- LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。\n- 使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。\n\n### 优点\n\n- 确保 UI 界面始终和数据状态保持一致。\n- 没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。\n- 不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。\n- UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。\n- 在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。\n- 当配置发生更改（如屏幕旋转）而重建 Activity / Fragment，它会立即收到最新的可用数据。\n-  LiveData 很适合用于组件（Activity / Fragment）之间的通信。\n\n### 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\nLiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。\n\n**结合 ViewModel 使用**\n\n以下代码场景：点击按钮提示一个名字。\n\n```Kotlin\nclass MyViewModel : ViewModel() {\n\n    // 创建一个 String 类型的 LiveData\n    // MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData\n    private lateinit var name: MutableLiveData<String>\n\n    fun getName(): MutableLiveData<String> {\n        if (!::name.isInitialized) {\n            name = MutableLiveData()\n        }\n        return name\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    private lateinit var myViewModel: MyViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        // 创建并注册观察者\n        myViewModel = ViewModelProviders.of(this).get(MyViewModel::class.java)\n        myViewModel.getName().observe(this, Observer {\n            // LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name\n            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()\n        })\n\n        btnSetName.setOnClickListener {\n            // 使用 setValue 的方式更新 LiveData 数据\n            myViewModel.getName().value = \"张三\"\n        }\n    }\n}\n```\n\n> 让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。\n\n**直接继承 LiveData 类**\n\n以下代码场景：在 Activity 中监听 Wifi 信号强度。\n\n```Kotlin\nclass WifiLiveData private constructor(context: Context) : LiveData<Int>() {\n\n    private var mContext: WeakReference<Context> = WeakReference(context)\n\n    companion object {\n\n        private var instance: WifiLiveData? = null\n\n        fun getInstance(context: Context): WifiLiveData {\n            if (instance == null) {\n                instance = WifiLiveData(context)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onActive() {\n        super.onActive()\n        registerReceiver()\n    }\n\n    override fun onInactive() {\n        super.onInactive()\n        unregisterReceiver()\n    }\n\n    /**\n     * 注册广播，监听 Wifi 信号强度\n     */\n    private fun registerReceiver() {\n        val intentFilter = IntentFilter()\n        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)\n        mContext.get()!!.registerReceiver(mReceiver, intentFilter)\n    }\n\n    /**\n     * 注销广播\n     */\n    private fun unregisterReceiver() {\n        mContext.get()!!.unregisterReceiver(mReceiver)\n    }\n\n    private val mReceiver = object : BroadcastReceiver() {\n\n        override fun onReceive(context: Context?, intent: Intent) {\n            when (intent.action) {\n                WifiManager.RSSI_CHANGED_ACTION -> getWifiLevel()\n            }\n        }\n    }\n\n    private fun getWifiLevel() {\n        val wifiManager = mContext.get()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) as WifiManager\n        val wifiInfo = wifiManager.connectionInfo\n        val level = wifiInfo.rssi\n\n        instance!!.value = level // 发送 Wifi 的信号强度给观察者\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        withExtendsLiveDataTest()\n    }\n\n    /**\n     * 直接继承 LiveData 类\n     */\n    private fun withExtendsLiveDataTest() {\n        WifiLiveData.getInstance(this).observe(this, Observer {\n            Log.e(\"LiveDataActivity\", it.toString()) // 观察者收到数据更新的通知，打印 Wifi 信号强度\n        })\n    }\n}\n```\n\n> 当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。\n\n### 源码解析\n\n#### observe 注册流程\n\nLiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity / Fragment) 和观察者 Observer 关联起来。\n\n```Java\nLiveData.observe(LifecycleOwner owner , Observer<T> observer)\n```\n\n进入 LiveData 的 observe() 方法中\n\n```Java\npublic void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n    if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n        // 若 LifecycleOwner 处于 DESTROYED 状态，则返回\n        return;\n    }\n\n    // LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起\n    LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n\n    // mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）\n    // 是否已有 wrapper（value）与之关联\n    // 若已关联则直接返回关联值，否则关联后再返回 wrapper\n    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n\n    if (existing != null && !existing.isAttachedTo(owner)) {\n        throw new IllegalArgumentException(\"Cannot add the same observer\"\n                + \" with different lifecycles\");\n    }\n    if (existing != null) {\n        return;\n    }\n\n    // 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又\n    // 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver\n    // 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver\n    owner.getLifecycle().addObserver(wrapper);\n}\n```\n\n从上面的代码可知，observe() 方法最终是会调用：\n\n```Java\nLifecycleOwner.getLifecycle().addObserver(LifecycleObserver)\n```\n\n因此 LiveData 是能够感知观察者的生命周期变化的。\n\n#### 感知生命周期变化\n\n通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。\n\n```Java\nclass LifecycleBoundObserver extends ObserverWrapper implements GenericLifecycleObserver {\n    @NonNull final LifecycleOwner mOwner;\n\n    LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<T> observer) {\n        super(observer); // 保存 Observer\n        mOwner = owner;  // 保存 LifecycleOwner\n    }\n\n    @Override\n    boolean shouldBeActive() {\n        // 判断是否处于激活状态\n        return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n    }\n\n\n    @Override\n    public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n        // 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象\n        if (mOwner.getLifecycle().getCurrentState() == DESTROYED) {\n            // 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法\n            removeObserver(mObserver);\n            return;\n        }\n        // 若处于激活状态，则调用 activeStateChanged() 方法\n        activeStateChanged(shouldBeActive());\n    }\n\n    @Override\n    boolean isAttachedTo(LifecycleOwner owner) {\n        return mOwner == owner;\n    }\n\n    @Override\n    void detachObserver() {\n        mOwner.getLifecycle().removeObserver(this);\n    }\n}\n```\n\n当组件（Activity / Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。\n\n```Java\nvoid activeStateChanged(boolean newActive) {\n    // 若新旧状态一致，则返回\n    if (newActive == mActive) {\n        return;\n    }\n    // immediately set active state, so we'd never dispatch anything to inactive owner\n    mActive = newActive;\n    boolean wasInactive = LiveData.this.mActiveCount == 0;\n    LiveData.this.mActiveCount += mActive ? 1 : -1;\n    if (wasInactive && mActive) { // 激活状态的 observer 个数从 0 到 1\n        onActive(); // 空实现，一般让子类去重写\n    }\n    if (LiveData.this.mActiveCount == 0 && !mActive) { // 激活状态的 observer 个数从 1 到 0\n        onInactive();  // 空实现，一般让子类去重写\n    }\n    if (mActive) { // 激活状态，向观察者发送 LiveData 的值\n        dispatchingValue(this);\n    }\n}\n```\n\n再看看最终调用的 dispatchingValue() 方法。\n\n```Java\nprivate void dispatchingValue(@Nullable ObserverWrapper initiator) {\n    // ...\n    do {\n        mDispatchInvalidated = false;\n        if (initiator != null) {\n            considerNotify(initiator);\n            initiator = null;\n        } else {\n            // 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据\n            for (Iterator<Map.Entry<Observer<T>, ObserverWrapper>> iterator =\n                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                considerNotify(iterator.next().getValue());\n                if (mDispatchInvalidated) {\n                    break;\n                }\n            }\n        }\n    } while (mDispatchInvalidated);\n    // ...\n}\n```\n\n可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。\n\n```Java\nprivate void considerNotify(ObserverWrapper observer) {\n    // ...\n    observer.mObserver.onChanged((T) mData);\n}\n```\n\n上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。\n\n总结上面的分析就是：**调用 LiveData.observe(LifecycleOwner owner , Observer<T> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。**\n\n#### 通知观察者更新数据的方式\n\nLiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（**必须在主线程调用**），另一个是 postValue() 方法（**必须在子线程调用**）。\n\n**setValue() 方法**\n\n```Java\n@MainThread\nprotected void setValue(T value) {\n    assertMainThread(\"setValue\");\n    mVersion++;\n    mData = value;\n    dispatchingValue(null);\n}\n```\n\ndispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。\n\n**postValue() 方法**\n\n```Java\nprotected void postValue(T value) {\n    boolean postTask;\n    synchronized (mDataLock) {\n        postTask = mPendingData == NOT_SET;\n        mPendingData = value;\n    }\n    if (!postTask) {\n        return;\n    }\n    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n}\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n    @Override\n    public void run() {\n        Object newValue;\n        synchronized (mDataLock) {\n            newValue = mPendingData;\n            mPendingData = NOT_SET;\n        }\n        //noinspection unchecked\n        setValue((T) newValue);\n    }\n};\n```\n\n可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android开发——架构组件LiveData源码解析](https://blog.csdn.net/SEU_Calvin/article/details/82256693)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)\n","source":"_posts/Android-Jetpack-之-LiveData.md","raw":"---\ntitle: Android Jetpack 之 LiveData\ndate: 2018-11-22 8:28:00\ncategories: \"Android\"\ntags:\n     - Android\n     - LiveData\n     - Jetpack\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 概述\n\n- LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。\n- LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。\n- 使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。\n\n### 优点\n\n- 确保 UI 界面始终和数据状态保持一致。\n- 没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。\n- 不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。\n- UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。\n- 在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。\n- 当配置发生更改（如屏幕旋转）而重建 Activity / Fragment，它会立即收到最新的可用数据。\n-  LiveData 很适合用于组件（Activity / Fragment）之间的通信。\n\n### 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\nLiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。\n\n**结合 ViewModel 使用**\n\n以下代码场景：点击按钮提示一个名字。\n\n```Kotlin\nclass MyViewModel : ViewModel() {\n\n    // 创建一个 String 类型的 LiveData\n    // MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData\n    private lateinit var name: MutableLiveData<String>\n\n    fun getName(): MutableLiveData<String> {\n        if (!::name.isInitialized) {\n            name = MutableLiveData()\n        }\n        return name\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    private lateinit var myViewModel: MyViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        // 创建并注册观察者\n        myViewModel = ViewModelProviders.of(this).get(MyViewModel::class.java)\n        myViewModel.getName().observe(this, Observer {\n            // LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name\n            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()\n        })\n\n        btnSetName.setOnClickListener {\n            // 使用 setValue 的方式更新 LiveData 数据\n            myViewModel.getName().value = \"张三\"\n        }\n    }\n}\n```\n\n> 让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。\n\n**直接继承 LiveData 类**\n\n以下代码场景：在 Activity 中监听 Wifi 信号强度。\n\n```Kotlin\nclass WifiLiveData private constructor(context: Context) : LiveData<Int>() {\n\n    private var mContext: WeakReference<Context> = WeakReference(context)\n\n    companion object {\n\n        private var instance: WifiLiveData? = null\n\n        fun getInstance(context: Context): WifiLiveData {\n            if (instance == null) {\n                instance = WifiLiveData(context)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onActive() {\n        super.onActive()\n        registerReceiver()\n    }\n\n    override fun onInactive() {\n        super.onInactive()\n        unregisterReceiver()\n    }\n\n    /**\n     * 注册广播，监听 Wifi 信号强度\n     */\n    private fun registerReceiver() {\n        val intentFilter = IntentFilter()\n        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)\n        mContext.get()!!.registerReceiver(mReceiver, intentFilter)\n    }\n\n    /**\n     * 注销广播\n     */\n    private fun unregisterReceiver() {\n        mContext.get()!!.unregisterReceiver(mReceiver)\n    }\n\n    private val mReceiver = object : BroadcastReceiver() {\n\n        override fun onReceive(context: Context?, intent: Intent) {\n            when (intent.action) {\n                WifiManager.RSSI_CHANGED_ACTION -> getWifiLevel()\n            }\n        }\n    }\n\n    private fun getWifiLevel() {\n        val wifiManager = mContext.get()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) as WifiManager\n        val wifiInfo = wifiManager.connectionInfo\n        val level = wifiInfo.rssi\n\n        instance!!.value = level // 发送 Wifi 的信号强度给观察者\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        withExtendsLiveDataTest()\n    }\n\n    /**\n     * 直接继承 LiveData 类\n     */\n    private fun withExtendsLiveDataTest() {\n        WifiLiveData.getInstance(this).observe(this, Observer {\n            Log.e(\"LiveDataActivity\", it.toString()) // 观察者收到数据更新的通知，打印 Wifi 信号强度\n        })\n    }\n}\n```\n\n> 当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。\n\n### 源码解析\n\n#### observe 注册流程\n\nLiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity / Fragment) 和观察者 Observer 关联起来。\n\n```Java\nLiveData.observe(LifecycleOwner owner , Observer<T> observer)\n```\n\n进入 LiveData 的 observe() 方法中\n\n```Java\npublic void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n    if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n        // 若 LifecycleOwner 处于 DESTROYED 状态，则返回\n        return;\n    }\n\n    // LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起\n    LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n\n    // mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）\n    // 是否已有 wrapper（value）与之关联\n    // 若已关联则直接返回关联值，否则关联后再返回 wrapper\n    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n\n    if (existing != null && !existing.isAttachedTo(owner)) {\n        throw new IllegalArgumentException(\"Cannot add the same observer\"\n                + \" with different lifecycles\");\n    }\n    if (existing != null) {\n        return;\n    }\n\n    // 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又\n    // 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver\n    // 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver\n    owner.getLifecycle().addObserver(wrapper);\n}\n```\n\n从上面的代码可知，observe() 方法最终是会调用：\n\n```Java\nLifecycleOwner.getLifecycle().addObserver(LifecycleObserver)\n```\n\n因此 LiveData 是能够感知观察者的生命周期变化的。\n\n#### 感知生命周期变化\n\n通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。\n\n```Java\nclass LifecycleBoundObserver extends ObserverWrapper implements GenericLifecycleObserver {\n    @NonNull final LifecycleOwner mOwner;\n\n    LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<T> observer) {\n        super(observer); // 保存 Observer\n        mOwner = owner;  // 保存 LifecycleOwner\n    }\n\n    @Override\n    boolean shouldBeActive() {\n        // 判断是否处于激活状态\n        return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n    }\n\n\n    @Override\n    public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n        // 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象\n        if (mOwner.getLifecycle().getCurrentState() == DESTROYED) {\n            // 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法\n            removeObserver(mObserver);\n            return;\n        }\n        // 若处于激活状态，则调用 activeStateChanged() 方法\n        activeStateChanged(shouldBeActive());\n    }\n\n    @Override\n    boolean isAttachedTo(LifecycleOwner owner) {\n        return mOwner == owner;\n    }\n\n    @Override\n    void detachObserver() {\n        mOwner.getLifecycle().removeObserver(this);\n    }\n}\n```\n\n当组件（Activity / Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。\n\n```Java\nvoid activeStateChanged(boolean newActive) {\n    // 若新旧状态一致，则返回\n    if (newActive == mActive) {\n        return;\n    }\n    // immediately set active state, so we'd never dispatch anything to inactive owner\n    mActive = newActive;\n    boolean wasInactive = LiveData.this.mActiveCount == 0;\n    LiveData.this.mActiveCount += mActive ? 1 : -1;\n    if (wasInactive && mActive) { // 激活状态的 observer 个数从 0 到 1\n        onActive(); // 空实现，一般让子类去重写\n    }\n    if (LiveData.this.mActiveCount == 0 && !mActive) { // 激活状态的 observer 个数从 1 到 0\n        onInactive();  // 空实现，一般让子类去重写\n    }\n    if (mActive) { // 激活状态，向观察者发送 LiveData 的值\n        dispatchingValue(this);\n    }\n}\n```\n\n再看看最终调用的 dispatchingValue() 方法。\n\n```Java\nprivate void dispatchingValue(@Nullable ObserverWrapper initiator) {\n    // ...\n    do {\n        mDispatchInvalidated = false;\n        if (initiator != null) {\n            considerNotify(initiator);\n            initiator = null;\n        } else {\n            // 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据\n            for (Iterator<Map.Entry<Observer<T>, ObserverWrapper>> iterator =\n                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                considerNotify(iterator.next().getValue());\n                if (mDispatchInvalidated) {\n                    break;\n                }\n            }\n        }\n    } while (mDispatchInvalidated);\n    // ...\n}\n```\n\n可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。\n\n```Java\nprivate void considerNotify(ObserverWrapper observer) {\n    // ...\n    observer.mObserver.onChanged((T) mData);\n}\n```\n\n上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。\n\n总结上面的分析就是：**调用 LiveData.observe(LifecycleOwner owner , Observer<T> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。**\n\n#### 通知观察者更新数据的方式\n\nLiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（**必须在主线程调用**），另一个是 postValue() 方法（**必须在子线程调用**）。\n\n**setValue() 方法**\n\n```Java\n@MainThread\nprotected void setValue(T value) {\n    assertMainThread(\"setValue\");\n    mVersion++;\n    mData = value;\n    dispatchingValue(null);\n}\n```\n\ndispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。\n\n**postValue() 方法**\n\n```Java\nprotected void postValue(T value) {\n    boolean postTask;\n    synchronized (mDataLock) {\n        postTask = mPendingData == NOT_SET;\n        mPendingData = value;\n    }\n    if (!postTask) {\n        return;\n    }\n    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n}\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n    @Override\n    public void run() {\n        Object newValue;\n        synchronized (mDataLock) {\n            newValue = mPendingData;\n            mPendingData = NOT_SET;\n        }\n        //noinspection unchecked\n        setValue((T) newValue);\n    }\n};\n```\n\n可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android开发——架构组件LiveData源码解析](https://blog.csdn.net/SEU_Calvin/article/details/82256693)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)\n","slug":"Android-Jetpack-之-LiveData","published":1,"updated":"2024-06-03T14:53:51.419Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcm0003nctt5liddmek","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。</li>\n<li>LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。</li>\n<li>使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>确保 UI 界面始终和数据状态保持一致。</li>\n<li>没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。</li>\n<li>不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。</li>\n<li>UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。</li>\n<li>在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。</li>\n<li>当配置发生更改（如屏幕旋转）而重建 Activity &#x2F; Fragment，它会立即收到最新的可用数据。</li>\n<li>LiveData 很适合用于组件（Activity &#x2F; Fragment）之间的通信。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\">添加相关依赖</a></p>\n<p>LiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。</p>\n<p><strong>结合 ViewModel 使用</strong></p>\n<p>以下代码场景：点击按钮提示一个名字。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 String 类型的 LiveData</span></span><br><span class=\"line\">    <span class=\"comment\">// MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> name: MutableLiveData&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>: MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::name.isInitialized) &#123;</span><br><span class=\"line\">            name = MutableLiveData()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myViewModel: MyViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建并注册观察者</span></span><br><span class=\"line\">        myViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        myViewModel.getName().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"comment\">// LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name</span></span><br><span class=\"line\">            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        btnSetName.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用 setValue 的方式更新 LiveData 数据</span></span><br><span class=\"line\">            myViewModel.getName().value = <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。</p>\n</blockquote>\n<p><strong>直接继承 LiveData 类</strong></p>\n<p>以下代码场景：在 Activity 中监听 Wifi 信号强度。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WifiLiveData</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span>(context: Context) : LiveData&lt;<span class=\"built_in\">Int</span>&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mContext: WeakReference&lt;Context&gt; = WeakReference(context)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: WifiLiveData? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: WifiLiveData &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                instance = WifiLiveData(context)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance!!</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActive()</span><br><span class=\"line\">        registerReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onInactive()</span><br><span class=\"line\">        unregisterReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册广播，监听 Wifi 信号强度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intentFilter = IntentFilter()</span><br><span class=\"line\">        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.registerReceiver(mReceiver, intentFilter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注销广播</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">unregisterReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.unregisterReceiver(mReceiver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mReceiver = <span class=\"keyword\">object</span> : BroadcastReceiver() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>?, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (intent.action) &#123;</span><br><span class=\"line\">                WifiManager.RSSI_CHANGED_ACTION -&gt; getWifiLevel()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getWifiLevel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiManager = mContext.<span class=\"keyword\">get</span>()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) <span class=\"keyword\">as</span> WifiManager</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiInfo = wifiManager.connectionInfo</span><br><span class=\"line\">        <span class=\"keyword\">val</span> level = wifiInfo.rssi</span><br><span class=\"line\"></span><br><span class=\"line\">        instance!!.value = level <span class=\"comment\">// 发送 Wifi 的信号强度给观察者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        withExtendsLiveDataTest()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 直接继承 LiveData 类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">withExtendsLiveDataTest</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        WifiLiveData.getInstance(<span class=\"keyword\">this</span>).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">&quot;LiveDataActivity&quot;</span>, it.toString()) <span class=\"comment\">// 观察者收到数据更新的通知，打印 Wifi 信号强度</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。</p>\n</blockquote>\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"observe-注册流程\"><a href=\"#observe-注册流程\" class=\"headerlink\" title=\"observe 注册流程\"></a>observe 注册流程</h4><p>LiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity &#x2F; Fragment) 和观察者 Observer 关联起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData.observe(LifecycleOwner owner , Observer&lt;T&gt; observer)</span><br></pre></td></tr></table></figure>\n\n<p>进入 LiveData 的 observe() 方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;T&gt; observer)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 LifecycleOwner 处于 DESTROYED 状态，则返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起</span></span><br><span class=\"line\">    <span class=\"type\">LifecycleBoundObserver</span> <span class=\"variable\">wrapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleBoundObserver</span>(owner, observer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否已有 wrapper（value）与之关联</span></span><br><span class=\"line\">    <span class=\"comment\">// 若已关联则直接返回关联值，否则关联后再返回 wrapper</span></span><br><span class=\"line\">    <span class=\"type\">ObserverWrapper</span> <span class=\"variable\">existing</span> <span class=\"operator\">=</span> mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"literal\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又</span></span><br><span class=\"line\">    <span class=\"comment\">// 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver</span></span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可知，observe() 方法最终是会调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LifecycleOwner.getLifecycle().addObserver(LifecycleObserver)</span><br></pre></td></tr></table></figure>\n\n<p>因此 LiveData 是能够感知观察者的生命周期变化的。</p>\n<h4 id=\"感知生命周期变化\"><a href=\"#感知生命周期变化\" class=\"headerlink\" title=\"感知生命周期变化\"></a>感知生命周期变化</h4><p>通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GenericLifecycleObserver</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(observer); <span class=\"comment\">// 保存 Observer</span></span><br><span class=\"line\">        mOwner = owner;  <span class=\"comment\">// 保存 LifecycleOwner</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">shouldBeActive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否处于激活状态</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法</span></span><br><span class=\"line\">            removeObserver(mObserver);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若处于激活状态，则调用 activeStateChanged() 方法</span></span><br><span class=\"line\">        activeStateChanged(shouldBeActive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">detachObserver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mOwner.getLifecycle().removeObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当组件（Activity &#x2F; Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">activeStateChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> newActive)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若新旧状态一致，则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// immediately set active state, so we&#x27;d never dispatch anything to inactive owner</span></span><br><span class=\"line\">    mActive = newActive;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">wasInactive</span> <span class=\"operator\">=</span> LiveData.<span class=\"built_in\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">    LiveData.<span class=\"built_in\">this</span>.mActiveCount += mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wasInactive &amp;&amp; mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 0 到 1</span></span><br><span class=\"line\">        onActive(); <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LiveData.<span class=\"built_in\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 1 到 0</span></span><br><span class=\"line\">        onInactive();  <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mActive) &#123; <span class=\"comment\">// 激活状态，向观察者发送 LiveData 的值</span></span><br><span class=\"line\">        dispatchingValue(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看看最终调用的 dispatchingValue() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        mDispatchInvalidated = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initiator != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            considerNotify(initiator);</span><br><span class=\"line\">            initiator = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。</p>\n<p>总结上面的分析就是：<strong>调用 LiveData.observe(LifecycleOwner owner , Observer<T> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。</strong></p>\n<h4 id=\"通知观察者更新数据的方式\"><a href=\"#通知观察者更新数据的方式\" class=\"headerlink\" title=\"通知观察者更新数据的方式\"></a>通知观察者更新数据的方式</h4><p>LiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（<strong>必须在主线程调用</strong>），另一个是 postValue() 方法（<strong>必须在子线程调用</strong>）。</p>\n<p><strong>setValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setValue</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">    assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">    mVersion++;</span><br><span class=\"line\">    mData = value;</span><br><span class=\"line\">    dispatchingValue(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。</p>\n<p><strong>postValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postValue</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> postTask;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">        postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">        mPendingData = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Runnable</span> <span class=\"variable\">mPostValueRunnable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Object newValue;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            newValue = mPendingData;</span><br><span class=\"line\">            mPendingData = NOT_SET;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        setValue((T) newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。</p>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/SEU_Calvin/article/details/82256693\">Android开发——架构组件LiveData源码解析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\">Android Developers</a></li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。</li>\n<li>LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。</li>\n<li>使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>确保 UI 界面始终和数据状态保持一致。</li>\n<li>没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。</li>\n<li>不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。</li>\n<li>UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。</li>\n<li>在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。</li>\n<li>当配置发生更改（如屏幕旋转）而重建 Activity &#x2F; Fragment，它会立即收到最新的可用数据。</li>\n<li>LiveData 很适合用于组件（Activity &#x2F; Fragment）之间的通信。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\">添加相关依赖</a></p>\n<p>LiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。</p>\n<p><strong>结合 ViewModel 使用</strong></p>\n<p>以下代码场景：点击按钮提示一个名字。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 String 类型的 LiveData</span></span><br><span class=\"line\">    <span class=\"comment\">// MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> name: MutableLiveData&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>: MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::name.isInitialized) &#123;</span><br><span class=\"line\">            name = MutableLiveData()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myViewModel: MyViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建并注册观察者</span></span><br><span class=\"line\">        myViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        myViewModel.getName().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"comment\">// LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name</span></span><br><span class=\"line\">            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        btnSetName.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用 setValue 的方式更新 LiveData 数据</span></span><br><span class=\"line\">            myViewModel.getName().value = <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。</p>\n</blockquote>\n<p><strong>直接继承 LiveData 类</strong></p>\n<p>以下代码场景：在 Activity 中监听 Wifi 信号强度。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WifiLiveData</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span>(context: Context) : LiveData&lt;<span class=\"built_in\">Int</span>&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mContext: WeakReference&lt;Context&gt; = WeakReference(context)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: WifiLiveData? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: WifiLiveData &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                instance = WifiLiveData(context)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance!!</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActive()</span><br><span class=\"line\">        registerReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onInactive()</span><br><span class=\"line\">        unregisterReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册广播，监听 Wifi 信号强度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intentFilter = IntentFilter()</span><br><span class=\"line\">        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.registerReceiver(mReceiver, intentFilter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注销广播</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">unregisterReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.unregisterReceiver(mReceiver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mReceiver = <span class=\"keyword\">object</span> : BroadcastReceiver() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>?, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (intent.action) &#123;</span><br><span class=\"line\">                WifiManager.RSSI_CHANGED_ACTION -&gt; getWifiLevel()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getWifiLevel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiManager = mContext.<span class=\"keyword\">get</span>()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) <span class=\"keyword\">as</span> WifiManager</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiInfo = wifiManager.connectionInfo</span><br><span class=\"line\">        <span class=\"keyword\">val</span> level = wifiInfo.rssi</span><br><span class=\"line\"></span><br><span class=\"line\">        instance!!.value = level <span class=\"comment\">// 发送 Wifi 的信号强度给观察者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        withExtendsLiveDataTest()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 直接继承 LiveData 类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">withExtendsLiveDataTest</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        WifiLiveData.getInstance(<span class=\"keyword\">this</span>).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">&quot;LiveDataActivity&quot;</span>, it.toString()) <span class=\"comment\">// 观察者收到数据更新的通知，打印 Wifi 信号强度</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。</p>\n</blockquote>\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"observe-注册流程\"><a href=\"#observe-注册流程\" class=\"headerlink\" title=\"observe 注册流程\"></a>observe 注册流程</h4><p>LiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity &#x2F; Fragment) 和观察者 Observer 关联起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData.observe(LifecycleOwner owner , Observer&lt;T&gt; observer)</span><br></pre></td></tr></table></figure>\n\n<p>进入 LiveData 的 observe() 方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;T&gt; observer)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 LifecycleOwner 处于 DESTROYED 状态，则返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起</span></span><br><span class=\"line\">    <span class=\"type\">LifecycleBoundObserver</span> <span class=\"variable\">wrapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleBoundObserver</span>(owner, observer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否已有 wrapper（value）与之关联</span></span><br><span class=\"line\">    <span class=\"comment\">// 若已关联则直接返回关联值，否则关联后再返回 wrapper</span></span><br><span class=\"line\">    <span class=\"type\">ObserverWrapper</span> <span class=\"variable\">existing</span> <span class=\"operator\">=</span> mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"literal\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又</span></span><br><span class=\"line\">    <span class=\"comment\">// 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver</span></span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可知，observe() 方法最终是会调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LifecycleOwner.getLifecycle().addObserver(LifecycleObserver)</span><br></pre></td></tr></table></figure>\n\n<p>因此 LiveData 是能够感知观察者的生命周期变化的。</p>\n<h4 id=\"感知生命周期变化\"><a href=\"#感知生命周期变化\" class=\"headerlink\" title=\"感知生命周期变化\"></a>感知生命周期变化</h4><p>通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GenericLifecycleObserver</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(observer); <span class=\"comment\">// 保存 Observer</span></span><br><span class=\"line\">        mOwner = owner;  <span class=\"comment\">// 保存 LifecycleOwner</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">shouldBeActive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否处于激活状态</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法</span></span><br><span class=\"line\">            removeObserver(mObserver);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若处于激活状态，则调用 activeStateChanged() 方法</span></span><br><span class=\"line\">        activeStateChanged(shouldBeActive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">detachObserver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mOwner.getLifecycle().removeObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当组件（Activity &#x2F; Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">activeStateChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> newActive)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若新旧状态一致，则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// immediately set active state, so we&#x27;d never dispatch anything to inactive owner</span></span><br><span class=\"line\">    mActive = newActive;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">wasInactive</span> <span class=\"operator\">=</span> LiveData.<span class=\"built_in\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">    LiveData.<span class=\"built_in\">this</span>.mActiveCount += mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wasInactive &amp;&amp; mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 0 到 1</span></span><br><span class=\"line\">        onActive(); <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LiveData.<span class=\"built_in\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 1 到 0</span></span><br><span class=\"line\">        onInactive();  <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mActive) &#123; <span class=\"comment\">// 激活状态，向观察者发送 LiveData 的值</span></span><br><span class=\"line\">        dispatchingValue(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看看最终调用的 dispatchingValue() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        mDispatchInvalidated = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initiator != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            considerNotify(initiator);</span><br><span class=\"line\">            initiator = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。</p>\n<p>总结上面的分析就是：<strong>调用 LiveData.observe(LifecycleOwner owner , Observer<T> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。</strong></p>\n<h4 id=\"通知观察者更新数据的方式\"><a href=\"#通知观察者更新数据的方式\" class=\"headerlink\" title=\"通知观察者更新数据的方式\"></a>通知观察者更新数据的方式</h4><p>LiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（<strong>必须在主线程调用</strong>），另一个是 postValue() 方法（<strong>必须在子线程调用</strong>）。</p>\n<p><strong>setValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setValue</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">    assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">    mVersion++;</span><br><span class=\"line\">    mData = value;</span><br><span class=\"line\">    dispatchingValue(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。</p>\n<p><strong>postValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postValue</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> postTask;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">        postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">        mPendingData = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Runnable</span> <span class=\"variable\">mPostValueRunnable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Object newValue;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            newValue = mPendingData;</span><br><span class=\"line\">            mPendingData = NOT_SET;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        setValue((T) newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。</p>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/SEU_Calvin/article/details/82256693\">Android开发——架构组件LiveData源码解析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\">Android Developers</a></li>\n</ul>\n"},{"title":"Android Jetpack 之 ViewModel","date":"2018-10-27T00:38:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 前言\n\n在 Android 中，ViewModel 的作用就是在 **UI 控制器**（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。\n\n在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 `onSaveInstanceState()` 方法中通过 bundle 保存数据，然后在 `onCreate()` 或 `onRestoreInstanceState()` 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于**可序列化然后反序列化**的少量数据，对于 Bitmap 等比较大的数据就不适用了。\n\n另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。\n\nUI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，**将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。**\n\n### ViewModel 使用\n\n比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。\n\n```Kotlin\nclass UserViewModel : ViewModel() {\n\n    private lateinit var users: MutableLiveData<List<User>>\n\n    fun getUsers(): LiveData<List<User>> {\n        if (!::users.isInitialized) {\n            users = MutableLiveData()\n            loadUsers()\n        }\n        return users\n    }\n\n    private fun loadUsers() {\n        // Do an asynchronous operation to fetch users .\n        Thread(Runnable {\n            Thread.sleep(3000)\n            // 在子线程发送值用 postValue , 否则用 setValue .\n            users.postValue(listOf(User(\"1\", \"AA\"), User(\"2\", \"BB\")))\n        }).start()\n    }\n}\n```\n\n```Kotlin\nclass ViewModelActivity : AppCompatActivity() {\n\n    private val TAG = \"ViewModelActivity\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_view_model)\n\n        // 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象\n        val userViewModel = ViewModelProviders.of(this).get(UserViewModel::class.java)\n\n        // 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity\n        userViewModel.getUsers().observe(this, Observer {\n            Log.e(TAG, it.toString())\n            // 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]\n        })\n    }\n}\n```\n\n查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，\n\n```Kotlin\npublic static ViewModelProvider of(@NonNull FragmentActivity activity,\n            @Nullable Factory factory) {\n        Application application = checkApplication(activity);\n        if (factory == null) {\n            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);\n        }\n        return new ViewModelProvider(ViewModelStores.of(activity), factory);\n    }\n```\n\nViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . \n\n```Kotlin\nViewModel viewModel = mViewModelStore.get(key);\n```\n\n获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .\n\n当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。\n\n> ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。\n\n当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 **AndroidViewModel** 类。 \n\n```Kotlin\nclass MyAndroidViewModel(application: Application) : AndroidViewModel(application) {\n\n    private val app\n        get() = getApplication<Application>()\n\n    fun getStatus(code: Int): String {\n        return when (code) {\n            1 -> app.resources.getString(R.string.be_late) // 迟到\n            2 -> app.resources.getString(R.string.leave_early) // 早退\n            else -> app.resources.getString(R.string.absenteeism) // 旷工\n        }\n    }\n}\n```\n\n```Kotlin\nval myAndroidViewModel = ViewModelProviders.of(this).get(MyAndroidViewModel::class.java)\nLog.e(TAG, myAndroidViewModel.getStatus(2))\n// 打印结果：早退\n```\n\n### ViewModel 的生命周期\n\nViewModel 会一直保留在内存中，直到 Activity / Fragment 在以下情况下才会销毁：\n\n- 宿主 Activity 被 finish 后调用 onDestroy 方法。\n- 宿主 Fragment 被 detached 后调用 onDetach 方法。\n\n下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）\n\n![](https://gitee.com/zch0304/images/raw/master/note/viewmodel-lifecycle.png) \n\n### Fragment 之间共享数据\n\n假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。\n\n我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。\n\n为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。\n\n```Kotlin\nclass SharedViewModel : ViewModel() {\n\n    val selected = MutableLiveData<User>()\n\n    fun select(user: User) {\n        selected.value = user\n    }\n}\n```\n\n```Kotlin\nclass MasterFragment : Fragment() {\n\n    private val dataList = listOf(User(\"1\", \"张三\"), User(\"2\", \"李四\"), User(\"3\", \"王五\"))\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_master, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n\n        lvMaster.adapter = ArrayAdapter<User>(\n                activity,\n                android.R.layout.simple_expandable_list_item_1,\n                dataList)\n\n        lvMaster.setOnItemClickListener { _, _, position, _ ->\n            model.select(dataList[position])\n        }\n    }\n}\n```\n\n```Kotlin\nclass DetailFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_detail, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model: SharedViewModel = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n        \n        model.selected.observe(this, Observer<User> { item ->\n            tvDetail.setText(\"${item?.id} : ${item?.name}\")\n        })\n    }\n}\n```\n\n> 需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。\n\n这种数据通信的方式有以下几个好处：\n\n- 宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；\n- 一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；\n- 每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)","source":"_posts/Android-Jetpack-之-ViewModel.md","raw":"---\ntitle: Android Jetpack 之 ViewModel\ndate: 2018-10-27 8:38:00\ncategories: \"Android\"\ntags:\n     - Android\n     - ViewModel\n     - Jetpack\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 前言\n\n在 Android 中，ViewModel 的作用就是在 **UI 控制器**（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。\n\n在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 `onSaveInstanceState()` 方法中通过 bundle 保存数据，然后在 `onCreate()` 或 `onRestoreInstanceState()` 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于**可序列化然后反序列化**的少量数据，对于 Bitmap 等比较大的数据就不适用了。\n\n另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。\n\nUI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，**将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。**\n\n### ViewModel 使用\n\n比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。\n\n```Kotlin\nclass UserViewModel : ViewModel() {\n\n    private lateinit var users: MutableLiveData<List<User>>\n\n    fun getUsers(): LiveData<List<User>> {\n        if (!::users.isInitialized) {\n            users = MutableLiveData()\n            loadUsers()\n        }\n        return users\n    }\n\n    private fun loadUsers() {\n        // Do an asynchronous operation to fetch users .\n        Thread(Runnable {\n            Thread.sleep(3000)\n            // 在子线程发送值用 postValue , 否则用 setValue .\n            users.postValue(listOf(User(\"1\", \"AA\"), User(\"2\", \"BB\")))\n        }).start()\n    }\n}\n```\n\n```Kotlin\nclass ViewModelActivity : AppCompatActivity() {\n\n    private val TAG = \"ViewModelActivity\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_view_model)\n\n        // 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象\n        val userViewModel = ViewModelProviders.of(this).get(UserViewModel::class.java)\n\n        // 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity\n        userViewModel.getUsers().observe(this, Observer {\n            Log.e(TAG, it.toString())\n            // 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]\n        })\n    }\n}\n```\n\n查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，\n\n```Kotlin\npublic static ViewModelProvider of(@NonNull FragmentActivity activity,\n            @Nullable Factory factory) {\n        Application application = checkApplication(activity);\n        if (factory == null) {\n            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);\n        }\n        return new ViewModelProvider(ViewModelStores.of(activity), factory);\n    }\n```\n\nViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . \n\n```Kotlin\nViewModel viewModel = mViewModelStore.get(key);\n```\n\n获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .\n\n当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。\n\n> ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。\n\n当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 **AndroidViewModel** 类。 \n\n```Kotlin\nclass MyAndroidViewModel(application: Application) : AndroidViewModel(application) {\n\n    private val app\n        get() = getApplication<Application>()\n\n    fun getStatus(code: Int): String {\n        return when (code) {\n            1 -> app.resources.getString(R.string.be_late) // 迟到\n            2 -> app.resources.getString(R.string.leave_early) // 早退\n            else -> app.resources.getString(R.string.absenteeism) // 旷工\n        }\n    }\n}\n```\n\n```Kotlin\nval myAndroidViewModel = ViewModelProviders.of(this).get(MyAndroidViewModel::class.java)\nLog.e(TAG, myAndroidViewModel.getStatus(2))\n// 打印结果：早退\n```\n\n### ViewModel 的生命周期\n\nViewModel 会一直保留在内存中，直到 Activity / Fragment 在以下情况下才会销毁：\n\n- 宿主 Activity 被 finish 后调用 onDestroy 方法。\n- 宿主 Fragment 被 detached 后调用 onDetach 方法。\n\n下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）\n\n![](https://gitee.com/zch0304/images/raw/master/note/viewmodel-lifecycle.png) \n\n### Fragment 之间共享数据\n\n假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。\n\n我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。\n\n为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。\n\n```Kotlin\nclass SharedViewModel : ViewModel() {\n\n    val selected = MutableLiveData<User>()\n\n    fun select(user: User) {\n        selected.value = user\n    }\n}\n```\n\n```Kotlin\nclass MasterFragment : Fragment() {\n\n    private val dataList = listOf(User(\"1\", \"张三\"), User(\"2\", \"李四\"), User(\"3\", \"王五\"))\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_master, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n\n        lvMaster.adapter = ArrayAdapter<User>(\n                activity,\n                android.R.layout.simple_expandable_list_item_1,\n                dataList)\n\n        lvMaster.setOnItemClickListener { _, _, position, _ ->\n            model.select(dataList[position])\n        }\n    }\n}\n```\n\n```Kotlin\nclass DetailFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_detail, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model: SharedViewModel = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n        \n        model.selected.observe(this, Observer<User> { item ->\n            tvDetail.setText(\"${item?.id} : ${item?.name}\")\n        })\n    }\n}\n```\n\n> 需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。\n\n这种数据通信的方式有以下几个好处：\n\n- 宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；\n- 一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；\n- 每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)","slug":"Android-Jetpack-之-ViewModel","published":1,"updated":"2024-06-03T14:53:51.419Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcq0006nctt9hnlbo62","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 中，ViewModel 的作用就是在 <strong>UI 控制器</strong>（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。</p>\n<p>在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 <code>onSaveInstanceState()</code> 方法中通过 bundle 保存数据，然后在 <code>onCreate()</code> 或 <code>onRestoreInstanceState()</code> 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于<strong>可序列化然后反序列化</strong>的少量数据，对于 Bitmap 等比较大的数据就不适用了。</p>\n<p>另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。</p>\n<p>UI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，<strong>将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。</strong></p>\n<h3 id=\"ViewModel-使用\"><a href=\"#ViewModel-使用\" class=\"headerlink\" title=\"ViewModel 使用\"></a>ViewModel 使用</h3><p>比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> users: MutableLiveData&lt;List&lt;User&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>: LiveData&lt;List&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::users.isInitialized) &#123;</span><br><span class=\"line\">            users = MutableLiveData()</span><br><span class=\"line\">            loadUsers()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> users</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadUsers</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do an asynchronous operation to fetch users .</span></span><br><span class=\"line\">        Thread(Runnable &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 在子线程发送值用 postValue , 否则用 setValue .</span></span><br><span class=\"line\">            users.postValue(listOf(User(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;AA&quot;</span>), User(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;BB&quot;</span>)))</span><br><span class=\"line\">        &#125;).start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewModelActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">&quot;ViewModelActivity&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_view_model)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(UserViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity</span></span><br><span class=\"line\">        userViewModel.getUsers().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(TAG, it.toString())</span><br><span class=\"line\">            <span class=\"comment\">// 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> static ViewModelProvider of(<span class=\"meta\">@NonNull</span> FragmentActivity activity,</span><br><span class=\"line\">            <span class=\"meta\">@Nullable</span> Factory factory) &#123;</span><br><span class=\"line\">        Application application = checkApplication(activity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new ViewModelProvider(ViewModelStores.of(activity), factory);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>ViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel viewModel = mViewModelStore.<span class=\"keyword\">get</span>(key);</span><br></pre></td></tr></table></figure>\n\n<p>获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .</p>\n<p>当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。</p>\n<blockquote>\n<p>ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。</p>\n</blockquote>\n<p>当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 <strong>AndroidViewModel</strong> 类。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAndroidViewModel</span>(application: Application) : AndroidViewModel(application) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> app</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = getApplication&lt;Application&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStatus</span><span class=\"params\">(code: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (code) &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span> -&gt; app.resources.getString(R.string.be_late) <span class=\"comment\">// 迟到</span></span><br><span class=\"line\">            <span class=\"number\">2</span> -&gt; app.resources.getString(R.string.leave_early) <span class=\"comment\">// 早退</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; app.resources.getString(R.string.absenteeism) <span class=\"comment\">// 旷工</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myAndroidViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyAndroidViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">Log.e(TAG, myAndroidViewModel.getStatus(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 打印结果：早退</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ViewModel-的生命周期\"><a href=\"#ViewModel-的生命周期\" class=\"headerlink\" title=\"ViewModel 的生命周期\"></a>ViewModel 的生命周期</h3><p>ViewModel 会一直保留在内存中，直到 Activity &#x2F; Fragment 在以下情况下才会销毁：</p>\n<ul>\n<li>宿主 Activity 被 finish 后调用 onDestroy 方法。</li>\n<li>宿主 Fragment 被 detached 后调用 onDetach 方法。</li>\n</ul>\n<p>下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/viewmodel-lifecycle.png\"> </p>\n<h3 id=\"Fragment-之间共享数据\"><a href=\"#Fragment-之间共享数据\" class=\"headerlink\" title=\"Fragment 之间共享数据\"></a>Fragment 之间共享数据</h3><p>假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。</p>\n<p>我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。</p>\n<p>为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SharedViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> selected = MutableLiveData&lt;User&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">select</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\">        selected.value = user</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MasterFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> dataList = listOf(User(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>), User(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>), User(<span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;王五&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_master, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">&quot;Invalid Activity&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.adapter = ArrayAdapter&lt;User&gt;(</span><br><span class=\"line\">                activity,</span><br><span class=\"line\">                android.R.layout.simple_expandable_list_item_1,</span><br><span class=\"line\">                dataList)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.setOnItemClickListener &#123; _, _, position, _ -&gt;</span><br><span class=\"line\">            model.select(dataList[position])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DetailFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model: SharedViewModel = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">&quot;Invalid Activity&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        model.selected.observe(<span class=\"keyword\">this</span>, Observer&lt;User&gt; &#123; item -&gt;</span><br><span class=\"line\">            tvDetail.setText(<span class=\"string\">&quot;<span class=\"subst\">$&#123;item?.id&#125;</span> : <span class=\"subst\">$&#123;item?.name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。</p>\n</blockquote>\n<p>这种数据通信的方式有以下几个好处：</p>\n<ul>\n<li>宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；</li>\n<li>一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；</li>\n<li>每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 中，ViewModel 的作用就是在 <strong>UI 控制器</strong>（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。</p>\n<p>在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 <code>onSaveInstanceState()</code> 方法中通过 bundle 保存数据，然后在 <code>onCreate()</code> 或 <code>onRestoreInstanceState()</code> 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于<strong>可序列化然后反序列化</strong>的少量数据，对于 Bitmap 等比较大的数据就不适用了。</p>\n<p>另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。</p>\n<p>UI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，<strong>将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。</strong></p>\n<h3 id=\"ViewModel-使用\"><a href=\"#ViewModel-使用\" class=\"headerlink\" title=\"ViewModel 使用\"></a>ViewModel 使用</h3><p>比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> users: MutableLiveData&lt;List&lt;User&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>: LiveData&lt;List&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::users.isInitialized) &#123;</span><br><span class=\"line\">            users = MutableLiveData()</span><br><span class=\"line\">            loadUsers()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> users</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadUsers</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do an asynchronous operation to fetch users .</span></span><br><span class=\"line\">        Thread(Runnable &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 在子线程发送值用 postValue , 否则用 setValue .</span></span><br><span class=\"line\">            users.postValue(listOf(User(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;AA&quot;</span>), User(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;BB&quot;</span>)))</span><br><span class=\"line\">        &#125;).start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewModelActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">&quot;ViewModelActivity&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_view_model)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(UserViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity</span></span><br><span class=\"line\">        userViewModel.getUsers().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(TAG, it.toString())</span><br><span class=\"line\">            <span class=\"comment\">// 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> static ViewModelProvider of(<span class=\"meta\">@NonNull</span> FragmentActivity activity,</span><br><span class=\"line\">            <span class=\"meta\">@Nullable</span> Factory factory) &#123;</span><br><span class=\"line\">        Application application = checkApplication(activity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new ViewModelProvider(ViewModelStores.of(activity), factory);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>ViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel viewModel = mViewModelStore.<span class=\"keyword\">get</span>(key);</span><br></pre></td></tr></table></figure>\n\n<p>获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .</p>\n<p>当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。</p>\n<blockquote>\n<p>ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。</p>\n</blockquote>\n<p>当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 <strong>AndroidViewModel</strong> 类。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAndroidViewModel</span>(application: Application) : AndroidViewModel(application) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> app</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = getApplication&lt;Application&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStatus</span><span class=\"params\">(code: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (code) &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span> -&gt; app.resources.getString(R.string.be_late) <span class=\"comment\">// 迟到</span></span><br><span class=\"line\">            <span class=\"number\">2</span> -&gt; app.resources.getString(R.string.leave_early) <span class=\"comment\">// 早退</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; app.resources.getString(R.string.absenteeism) <span class=\"comment\">// 旷工</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myAndroidViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyAndroidViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">Log.e(TAG, myAndroidViewModel.getStatus(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 打印结果：早退</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ViewModel-的生命周期\"><a href=\"#ViewModel-的生命周期\" class=\"headerlink\" title=\"ViewModel 的生命周期\"></a>ViewModel 的生命周期</h3><p>ViewModel 会一直保留在内存中，直到 Activity &#x2F; Fragment 在以下情况下才会销毁：</p>\n<ul>\n<li>宿主 Activity 被 finish 后调用 onDestroy 方法。</li>\n<li>宿主 Fragment 被 detached 后调用 onDetach 方法。</li>\n</ul>\n<p>下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/viewmodel-lifecycle.png\"> </p>\n<h3 id=\"Fragment-之间共享数据\"><a href=\"#Fragment-之间共享数据\" class=\"headerlink\" title=\"Fragment 之间共享数据\"></a>Fragment 之间共享数据</h3><p>假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。</p>\n<p>我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。</p>\n<p>为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SharedViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> selected = MutableLiveData&lt;User&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">select</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\">        selected.value = user</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MasterFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> dataList = listOf(User(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>), User(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>), User(<span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;王五&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_master, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">&quot;Invalid Activity&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.adapter = ArrayAdapter&lt;User&gt;(</span><br><span class=\"line\">                activity,</span><br><span class=\"line\">                android.R.layout.simple_expandable_list_item_1,</span><br><span class=\"line\">                dataList)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.setOnItemClickListener &#123; _, _, position, _ -&gt;</span><br><span class=\"line\">            model.select(dataList[position])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DetailFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model: SharedViewModel = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">&quot;Invalid Activity&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        model.selected.observe(<span class=\"keyword\">this</span>, Observer&lt;User&gt; &#123; item -&gt;</span><br><span class=\"line\">            tvDetail.setText(<span class=\"string\">&quot;<span class=\"subst\">$&#123;item?.id&#125;</span> : <span class=\"subst\">$&#123;item?.name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。</p>\n</blockquote>\n<p>这种数据通信的方式有以下几个好处：</p>\n<ul>\n<li>宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；</li>\n<li>一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；</li>\n<li>每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n"},{"title":"Android Jetpack 之 WorkManager","date":"2020-04-12T08:13:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 概述\n\nAndroid 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。\n\nWorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。\n\n### 主要功能\n\n- 最高向后兼容到 API 14\n  - 在运行 API 23 及以上级别的设备上使用 JobScheduler\n  - 在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager\n- 添加网络可用性或充电状态等工作约束\n- 调度一次性或周期性异步任务\n- 监控和管理计划任务\n- 将任务链接起来\n- 确保任务执行，即使应用或设备重启也同样执行任务\n- 遵循低电耗模式等省电功能\n\n### 重要特点\n\n- **针对不需要立即执行的任务**：比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。\n- **保证任务一定会被执行**：即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。\n\nWorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看[后台处理指南](https://developer.android.com/guide/background?hl=zh-cn)，了解哪种解决方案符合您的需求。\n\n### 使用\n\n#### 添加相关依赖\n\n使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。[依赖链接](https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies)\n\n```Kotlin\ndependencies {\n   def work_version = \"2.3.1\"\n\n   // (Java only)\n   implementation \"androidx.work:work-runtime:$work_version\"\n\n   // Kotlin + coroutines\n   implementation \"androidx.work:work-runtime-ktx:$work_version\"\n}\n```\n\n#### 使用 Worker 定义任务\n\nWorker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。\n\n```Kotlin\nclass UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n\n    override fun doWork(): Result {\n        LogUtil.d(\"UploadLogWorker\", \"doWork()\")\n        return Result.success()\n    }\n\n    override fun onStopped() {\n        super.onStopped()\n        // 当任务结束时会回调这里\n    }\n}\n```\n\ndoWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：\n\n- **Result.success()** 任务成功。\n- **Result.Failure()** 任务失败。\n- **Result.Retry()** 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。\n\n#### 使用 WorkRequest 配置任务\n\n通过 WorkRequest 配置我们的任务**何时运行**以及**如何运行**。\n\n- **设置任务触发条件** 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 [Constraints.Builder 参考文档](https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn)）。\n\n  ```kotlin\n  val constraints = Constraints.Builder()\n        .setRequiresCharging(true) // 充电中\n        .setRequiredNetworkType(NetworkType.CONNECTED) // 网络已连接\n        .setRequiresBatteryNotLow(true) // 电量充足\n        .build()\n  ```\n\n- **将 constraints 设置到 WorkRequest 中**。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。\n\n  ```kotlin\n  val oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n          .setConstraints(constraints) // 设置触发条件\n          .build()\n  ```\n\n- **设置延迟执行任务**。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，**至少**经过 5 分钟后再执行。\n\n  ```Kotlin\n  val oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setConstraints(constraints)\n        .setInitialDelay(5, TimeUnit.MINUTES) // 符合触发条件后，至少经过 5 分钟后再执行\n        .build()\n  ```\n\n    > 任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。\n\n- **设置指数退避策略**。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。\n\n  ```Kotlin\n  val oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)\n        .build()\n  ```\n\n  > 比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。\n\n- **任务的输入/输出**。输入和输出值以键值对的形式存储在 Data 对象中。\n\n  在 WorkRequest 中设置输入数据。\n\n  ```Kotlin\n  val inputData = workDataOf(\"name\" to \"张三\", \"id\" to 112134)\n  val uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setInputData(inputData)\n        .build()\n  ```\n\n  在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。\n\n  ```kotlin\n  class UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n  \n      override fun doWork(): Result {\n          val name = inputData.getString(\"name\")\n          val id = inputData.getInt(\"id\", 0)\n          LogUtil.d(\"name-->$name, id--->$id\")\n  \n          val outputData = workDataOf(\"name\" to name, \"id\" to id)\n          return Result.success(outputData)\n      }\n  }\n  ```\n\n  > 按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。\n\n- **为任务设置标签**。\n\n  设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。\n\n  ```Kotlin\n  val oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\n  val oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\n  ```\n\n  > 以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。\n\n#### 将 WorkRequest 提交给系统\n\n```Kotlin\nWorkManager.getInstance(applicationContext).enqueue(uploadLogRequest)\n```\n\n#### 观察任务的状态\n\n将任务提交给系统后，可通过 `WorkInfo` 获知任务的状态，WorkInfo 包含了任务的 id、tag、Worker 对象传递过来的 outputData，以及当前的状态。以下三种方式可以得到 WorkInfo 对象。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).getWorkInfosByTag()\nWorkManager.getInstance(applicationContext).getWorkInfoById()\nWorkManager.getInstance(applicationContext).getWorkInfosForUniqueWork()\n```\n\n如果希望实时获知任务的状态，上面三个方法还有对于的 LiveData 方法。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).getWorkInfosByTagLiveData()\nWorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData()\nWorkManager.getInstance(applicationContext).getWorkInfosForUniqueWorkLiveData()\n```\n\n通过 LiveData，我们便可在任务状态发生变化的时候收到通知。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData(uploadLogRequest.id).observe(this, Observer { workInfo ->\n    if (workInfo != null && workInfo.state == WorkInfo.State.SUCCEEDED) {\n        val name = workInfo.outputData.getString(\"name\")\n        val id = workInfo.outputData.getInt(\"id\", 0)\n        LogUtil.d(\"name-->$name, id-->$id\")\n    }\n})\n```\n\n#### 取消任务\n\n可根据 tag、id 取消任务，也可以取消全部任务。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).cancelAllWorkByTag()\nWorkManager.getInstance(applicationContext).cancelWorkById()\nWorkManager.getInstance(applicationContext).cancelUniqueWork()\nWorkManager.getInstance(applicationContext).cancelAllWork()\n```\n\n#### 周期任务 PeriodicWorkRequest\n\nWorkRequest 有两种实现，OneTimeWorkRequest（一次性任务）和 PeriodicWorkRequest（周期性任务）。OneTimeWorkRequest 在任务成功完成后就结束了，而 PeriodicWorkRequest 会按设定的时间周期执行。二者使用起来无太大差别。\n\n```Kotlin\nval uploadWorkRequest = PeriodicWorkRequest.Builder(UploadLogWorker::class.java, 15, TimeUnit.MINUTES)\n        .setConstraints(constraints)\n        .build()\n```\n\n> 周期性任务的时间间隔不能少于 **15 分钟**。\n\n#### 任务链\n\n\n- **并发任务**。使用 **WorkManager.getInstance().beginWith(...).enqueue()**。\n\n  ```Kotlin\n  // request1，request2 同时执行\n  WorkManager.getInstance(applicationContext).beginWith(request1,request2).enqueue()\n  ```\n\n- **串发任务**。使用 **WorkManager.getInstance().beginWith().then().then()...enqueue()**。\n\n  ```kotlin\n  // 先执行 request1，然后执行 request2\n  WorkManager.getInstance(applicationContext).beginWith(request1).then(request2).enqueue()\n  ```\n\n- **组合任务**。使用 **WorkContinuation.combine()** 方法。\n\n  ```Kotlin\n  // AB 串发，CD 串发，这两个串之间并发执行后，把汇总结果给到 E\n  val chuan1 = WorkManager.getInstance(applicationContext)\n        .beginWith(A)\n        .then(B)\n  val chuan2 = WorkManager.getInstance(applicationContext)\n        .beginWith(C)\n        .then(D)\n  WorkContinuation.combine(listOf(chuan1, chuan2))\n        .then(E)\n        .enqueue()\n  \n  \n  ```\n\n### 注意点\n\n- WorkManager 是根据系统版本决定用 JobScheduler 或者 BroadcastReceiver + AlarmManager 的组合，如果某个系统不允许 AlarmManager 自动唤起，那么 WorkManager 就可能无法正常工作。\n- 实际操作中，周期任务的执行与所设定的时间可能有差别，执行时间可能也没有太明显的规律。\n\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/workmanager?hl=zh-cn)\n- [WorkManager的基本使用](https://zhuanlan.zhihu.com/p/78599394)","source":"_posts/Android-Jetpack-之-WorkManager.md","raw":"---\n\ntitle: Android Jetpack 之 WorkManager\ndate: 2020-04-12 16:13:00\ncategories: \"Android\"\ntags:\n     - Android\n     - WorkManager\n     - Jetpack\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### 概述\n\nAndroid 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。\n\nWorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。\n\n### 主要功能\n\n- 最高向后兼容到 API 14\n  - 在运行 API 23 及以上级别的设备上使用 JobScheduler\n  - 在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager\n- 添加网络可用性或充电状态等工作约束\n- 调度一次性或周期性异步任务\n- 监控和管理计划任务\n- 将任务链接起来\n- 确保任务执行，即使应用或设备重启也同样执行任务\n- 遵循低电耗模式等省电功能\n\n### 重要特点\n\n- **针对不需要立即执行的任务**：比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。\n- **保证任务一定会被执行**：即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。\n\nWorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看[后台处理指南](https://developer.android.com/guide/background?hl=zh-cn)，了解哪种解决方案符合您的需求。\n\n### 使用\n\n#### 添加相关依赖\n\n使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。[依赖链接](https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies)\n\n```Kotlin\ndependencies {\n   def work_version = \"2.3.1\"\n\n   // (Java only)\n   implementation \"androidx.work:work-runtime:$work_version\"\n\n   // Kotlin + coroutines\n   implementation \"androidx.work:work-runtime-ktx:$work_version\"\n}\n```\n\n#### 使用 Worker 定义任务\n\nWorker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。\n\n```Kotlin\nclass UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n\n    override fun doWork(): Result {\n        LogUtil.d(\"UploadLogWorker\", \"doWork()\")\n        return Result.success()\n    }\n\n    override fun onStopped() {\n        super.onStopped()\n        // 当任务结束时会回调这里\n    }\n}\n```\n\ndoWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：\n\n- **Result.success()** 任务成功。\n- **Result.Failure()** 任务失败。\n- **Result.Retry()** 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。\n\n#### 使用 WorkRequest 配置任务\n\n通过 WorkRequest 配置我们的任务**何时运行**以及**如何运行**。\n\n- **设置任务触发条件** 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 [Constraints.Builder 参考文档](https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn)）。\n\n  ```kotlin\n  val constraints = Constraints.Builder()\n        .setRequiresCharging(true) // 充电中\n        .setRequiredNetworkType(NetworkType.CONNECTED) // 网络已连接\n        .setRequiresBatteryNotLow(true) // 电量充足\n        .build()\n  ```\n\n- **将 constraints 设置到 WorkRequest 中**。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。\n\n  ```kotlin\n  val oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n          .setConstraints(constraints) // 设置触发条件\n          .build()\n  ```\n\n- **设置延迟执行任务**。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，**至少**经过 5 分钟后再执行。\n\n  ```Kotlin\n  val oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setConstraints(constraints)\n        .setInitialDelay(5, TimeUnit.MINUTES) // 符合触发条件后，至少经过 5 分钟后再执行\n        .build()\n  ```\n\n    > 任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。\n\n- **设置指数退避策略**。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。\n\n  ```Kotlin\n  val oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)\n        .build()\n  ```\n\n  > 比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。\n\n- **任务的输入/输出**。输入和输出值以键值对的形式存储在 Data 对象中。\n\n  在 WorkRequest 中设置输入数据。\n\n  ```Kotlin\n  val inputData = workDataOf(\"name\" to \"张三\", \"id\" to 112134)\n  val uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setInputData(inputData)\n        .build()\n  ```\n\n  在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。\n\n  ```kotlin\n  class UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n  \n      override fun doWork(): Result {\n          val name = inputData.getString(\"name\")\n          val id = inputData.getInt(\"id\", 0)\n          LogUtil.d(\"name-->$name, id--->$id\")\n  \n          val outputData = workDataOf(\"name\" to name, \"id\" to id)\n          return Result.success(outputData)\n      }\n  }\n  ```\n\n  > 按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。\n\n- **为任务设置标签**。\n\n  设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。\n\n  ```Kotlin\n  val oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\n  val oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\n  ```\n\n  > 以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。\n\n#### 将 WorkRequest 提交给系统\n\n```Kotlin\nWorkManager.getInstance(applicationContext).enqueue(uploadLogRequest)\n```\n\n#### 观察任务的状态\n\n将任务提交给系统后，可通过 `WorkInfo` 获知任务的状态，WorkInfo 包含了任务的 id、tag、Worker 对象传递过来的 outputData，以及当前的状态。以下三种方式可以得到 WorkInfo 对象。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).getWorkInfosByTag()\nWorkManager.getInstance(applicationContext).getWorkInfoById()\nWorkManager.getInstance(applicationContext).getWorkInfosForUniqueWork()\n```\n\n如果希望实时获知任务的状态，上面三个方法还有对于的 LiveData 方法。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).getWorkInfosByTagLiveData()\nWorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData()\nWorkManager.getInstance(applicationContext).getWorkInfosForUniqueWorkLiveData()\n```\n\n通过 LiveData，我们便可在任务状态发生变化的时候收到通知。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData(uploadLogRequest.id).observe(this, Observer { workInfo ->\n    if (workInfo != null && workInfo.state == WorkInfo.State.SUCCEEDED) {\n        val name = workInfo.outputData.getString(\"name\")\n        val id = workInfo.outputData.getInt(\"id\", 0)\n        LogUtil.d(\"name-->$name, id-->$id\")\n    }\n})\n```\n\n#### 取消任务\n\n可根据 tag、id 取消任务，也可以取消全部任务。\n\n```Kotlin\nWorkManager.getInstance(applicationContext).cancelAllWorkByTag()\nWorkManager.getInstance(applicationContext).cancelWorkById()\nWorkManager.getInstance(applicationContext).cancelUniqueWork()\nWorkManager.getInstance(applicationContext).cancelAllWork()\n```\n\n#### 周期任务 PeriodicWorkRequest\n\nWorkRequest 有两种实现，OneTimeWorkRequest（一次性任务）和 PeriodicWorkRequest（周期性任务）。OneTimeWorkRequest 在任务成功完成后就结束了，而 PeriodicWorkRequest 会按设定的时间周期执行。二者使用起来无太大差别。\n\n```Kotlin\nval uploadWorkRequest = PeriodicWorkRequest.Builder(UploadLogWorker::class.java, 15, TimeUnit.MINUTES)\n        .setConstraints(constraints)\n        .build()\n```\n\n> 周期性任务的时间间隔不能少于 **15 分钟**。\n\n#### 任务链\n\n\n- **并发任务**。使用 **WorkManager.getInstance().beginWith(...).enqueue()**。\n\n  ```Kotlin\n  // request1，request2 同时执行\n  WorkManager.getInstance(applicationContext).beginWith(request1,request2).enqueue()\n  ```\n\n- **串发任务**。使用 **WorkManager.getInstance().beginWith().then().then()...enqueue()**。\n\n  ```kotlin\n  // 先执行 request1，然后执行 request2\n  WorkManager.getInstance(applicationContext).beginWith(request1).then(request2).enqueue()\n  ```\n\n- **组合任务**。使用 **WorkContinuation.combine()** 方法。\n\n  ```Kotlin\n  // AB 串发，CD 串发，这两个串之间并发执行后，把汇总结果给到 E\n  val chuan1 = WorkManager.getInstance(applicationContext)\n        .beginWith(A)\n        .then(B)\n  val chuan2 = WorkManager.getInstance(applicationContext)\n        .beginWith(C)\n        .then(D)\n  WorkContinuation.combine(listOf(chuan1, chuan2))\n        .then(E)\n        .enqueue()\n  \n  \n  ```\n\n### 注意点\n\n- WorkManager 是根据系统版本决定用 JobScheduler 或者 BroadcastReceiver + AlarmManager 的组合，如果某个系统不允许 AlarmManager 自动唤起，那么 WorkManager 就可能无法正常工作。\n- 实际操作中，周期任务的执行与所设定的时间可能有差别，执行时间可能也没有太明显的规律。\n\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/workmanager?hl=zh-cn)\n- [WorkManager的基本使用](https://zhuanlan.zhihu.com/p/78599394)","slug":"Android-Jetpack-之-WorkManager","published":1,"updated":"2024-06-03T14:53:51.419Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcr0007nctthep30l23","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Android 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。</p>\n<p>WorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。</p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><ul>\n<li>最高向后兼容到 API 14<ul>\n<li>在运行 API 23 及以上级别的设备上使用 JobScheduler</li>\n<li>在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager</li>\n</ul>\n</li>\n<li>添加网络可用性或充电状态等工作约束</li>\n<li>调度一次性或周期性异步任务</li>\n<li>监控和管理计划任务</li>\n<li>将任务链接起来</li>\n<li>确保任务执行，即使应用或设备重启也同样执行任务</li>\n<li>遵循低电耗模式等省电功能</li>\n</ul>\n<h3 id=\"重要特点\"><a href=\"#重要特点\" class=\"headerlink\" title=\"重要特点\"></a>重要特点</h3><ul>\n<li><strong>针对不需要立即执行的任务</strong>：比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。</li>\n<li><strong>保证任务一定会被执行</strong>：即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。</li>\n</ul>\n<p>WorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看<a href=\"https://developer.android.com/guide/background?hl=zh-cn\">后台处理指南</a>，了解哪种解决方案符合您的需求。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h4><p>使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。<a href=\"https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies\">依赖链接</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   def work_version = <span class=\"string\">&quot;2.3.1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// (Java only)</span></span><br><span class=\"line\">   implementation <span class=\"string\">&quot;androidx.work:work-runtime:<span class=\"variable\">$work_version</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Kotlin + coroutines</span></span><br><span class=\"line\">   implementation <span class=\"string\">&quot;androidx.work:work-runtime-ktx:<span class=\"variable\">$work_version</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-Worker-定义任务\"><a href=\"#使用-Worker-定义任务\" class=\"headerlink\" title=\"使用 Worker 定义任务\"></a>使用 Worker 定义任务</h4><p>Worker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadLogWorker</span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">&quot;UploadLogWorker&quot;</span>, <span class=\"string\">&quot;doWork()&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStopped</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStopped()</span><br><span class=\"line\">        <span class=\"comment\">// 当任务结束时会回调这里</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>doWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：</p>\n<ul>\n<li><strong>Result.success()</strong> 任务成功。</li>\n<li><strong>Result.Failure()</strong> 任务失败。</li>\n<li><strong>Result.Retry()</strong> 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。</li>\n</ul>\n<h4 id=\"使用-WorkRequest-配置任务\"><a href=\"#使用-WorkRequest-配置任务\" class=\"headerlink\" title=\"使用 WorkRequest 配置任务\"></a>使用 WorkRequest 配置任务</h4><p>通过 WorkRequest 配置我们的任务<strong>何时运行</strong>以及<strong>如何运行</strong>。</p>\n<ul>\n<li><p><strong>设置任务触发条件</strong> 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 <a href=\"https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn\">Constraints.Builder 参考文档</a>）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">      .setRequiresCharging(<span class=\"literal\">true</span>) <span class=\"comment\">// 充电中</span></span><br><span class=\"line\">      .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 网络已连接</span></span><br><span class=\"line\">      .setRequiresBatteryNotLow(<span class=\"literal\">true</span>) <span class=\"comment\">// 电量充足</span></span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>将 constraints 设置到 WorkRequest 中</strong>。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        .setConstraints(constraints) <span class=\"comment\">// 设置触发条件</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置延迟执行任务</strong>。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，<strong>至少</strong>经过 5 分钟后再执行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .setConstraints(constraints)</span><br><span class=\"line\">      .setInitialDelay(<span class=\"number\">5</span>, TimeUnit.MINUTES) <span class=\"comment\">// 符合触发条件后，至少经过 5 分钟后再执行</span></span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。</p>\n</blockquote>\n</li>\n<li><p><strong>设置指数退避策略</strong>。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。</p>\n</blockquote>\n</li>\n<li><p><strong>任务的输入&#x2F;输出</strong>。输入和输出值以键值对的形式存储在 Data 对象中。</p>\n<p>在 WorkRequest 中设置输入数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> inputData = workDataOf(<span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;id&quot;</span> to <span class=\"number\">112134</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .setInputData(inputData)</span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<p>在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadLogWorker</span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = inputData.getString(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = inputData.getInt(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">&quot;name--&gt;<span class=\"variable\">$name</span>, id---&gt;<span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> outputData = workDataOf(<span class=\"string\">&quot;name&quot;</span> to name, <span class=\"string\">&quot;id&quot;</span> to id)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(outputData)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。</p>\n</blockquote>\n</li>\n<li><p><strong>为任务设置标签</strong>。</p>\n<p>设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .addTag(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .build()</span><br><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .addTag(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"将-WorkRequest-提交给系统\"><a href=\"#将-WorkRequest-提交给系统\" class=\"headerlink\" title=\"将 WorkRequest 提交给系统\"></a>将 WorkRequest 提交给系统</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).enqueue(uploadLogRequest)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"观察任务的状态\"><a href=\"#观察任务的状态\" class=\"headerlink\" title=\"观察任务的状态\"></a>观察任务的状态</h4><p>将任务提交给系统后，可通过 <code>WorkInfo</code> 获知任务的状态，WorkInfo 包含了任务的 id、tag、Worker 对象传递过来的 outputData，以及当前的状态。以下三种方式可以得到 WorkInfo 对象。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosByTag()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfoById()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosForUniqueWork()</span><br></pre></td></tr></table></figure>\n\n<p>如果希望实时获知任务的状态，上面三个方法还有对于的 LiveData 方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosByTagLiveData()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosForUniqueWorkLiveData()</span><br></pre></td></tr></table></figure>\n\n<p>通过 LiveData，我们便可在任务状态发生变化的时候收到通知。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData(uploadLogRequest.id).observe(<span class=\"keyword\">this</span>, Observer &#123; workInfo -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInfo != <span class=\"literal\">null</span> &amp;&amp; workInfo.state == WorkInfo.State.SUCCEEDED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = workInfo.outputData.getString(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = workInfo.outputData.getInt(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">&quot;name--&gt;<span class=\"variable\">$name</span>, id--&gt;<span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取消任务\"><a href=\"#取消任务\" class=\"headerlink\" title=\"取消任务\"></a>取消任务</h4><p>可根据 tag、id 取消任务，也可以取消全部任务。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelAllWorkByTag()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).cancelWorkById()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).cancelUniqueWork()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).cancelAllWork()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"周期任务-PeriodicWorkRequest\"><a href=\"#周期任务-PeriodicWorkRequest\" class=\"headerlink\" title=\"周期任务 PeriodicWorkRequest\"></a>周期任务 PeriodicWorkRequest</h4><p>WorkRequest 有两种实现，OneTimeWorkRequest（一次性任务）和 PeriodicWorkRequest（周期性任务）。OneTimeWorkRequest 在任务成功完成后就结束了，而 PeriodicWorkRequest 会按设定的时间周期执行。二者使用起来无太大差别。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uploadWorkRequest = PeriodicWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java, <span class=\"number\">15</span>, TimeUnit.MINUTES)</span><br><span class=\"line\">        .setConstraints(constraints)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>周期性任务的时间间隔不能少于 <strong>15 分钟</strong>。</p>\n</blockquote>\n<h4 id=\"任务链\"><a href=\"#任务链\" class=\"headerlink\" title=\"任务链\"></a>任务链</h4><ul>\n<li><p><strong>并发任务</strong>。使用 **WorkManager.getInstance().beginWith(…).enqueue()**。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// request1，request2 同时执行</span></span><br><span class=\"line\">WorkManager.getInstance(applicationContext).beginWith(request1,request2).enqueue()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>串发任务</strong>。使用 **WorkManager.getInstance().beginWith().then().then()…enqueue()**。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先执行 request1，然后执行 request2</span></span><br><span class=\"line\">WorkManager.getInstance(applicationContext).beginWith(request1).then(request2).enqueue()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>组合任务</strong>。使用 <strong>WorkContinuation.combine()</strong> 方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AB 串发，CD 串发，这两个串之间并发执行后，把汇总结果给到 E</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> chuan1 = WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">      .beginWith(A)</span><br><span class=\"line\">      .then(B)</span><br><span class=\"line\"><span class=\"keyword\">val</span> chuan2 = WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">      .beginWith(C)</span><br><span class=\"line\">      .then(D)</span><br><span class=\"line\">WorkContinuation.combine(listOf(chuan1, chuan2))</span><br><span class=\"line\">      .then(E)</span><br><span class=\"line\">      .enqueue()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>WorkManager 是根据系统版本决定用 JobScheduler 或者 BroadcastReceiver + AlarmManager 的组合，如果某个系统不允许 AlarmManager 自动唤起，那么 WorkManager 就可能无法正常工作。</li>\n<li>实际操作中，周期任务的执行与所设定的时间可能有差别，执行时间可能也没有太明显的规律。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/workmanager?hl=zh-cn\">Android Developers</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/78599394\">WorkManager的基本使用</a></li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Android 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。</p>\n<p>WorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。</p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><ul>\n<li>最高向后兼容到 API 14<ul>\n<li>在运行 API 23 及以上级别的设备上使用 JobScheduler</li>\n<li>在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager</li>\n</ul>\n</li>\n<li>添加网络可用性或充电状态等工作约束</li>\n<li>调度一次性或周期性异步任务</li>\n<li>监控和管理计划任务</li>\n<li>将任务链接起来</li>\n<li>确保任务执行，即使应用或设备重启也同样执行任务</li>\n<li>遵循低电耗模式等省电功能</li>\n</ul>\n<h3 id=\"重要特点\"><a href=\"#重要特点\" class=\"headerlink\" title=\"重要特点\"></a>重要特点</h3><ul>\n<li><strong>针对不需要立即执行的任务</strong>：比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。</li>\n<li><strong>保证任务一定会被执行</strong>：即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。</li>\n</ul>\n<p>WorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看<a href=\"https://developer.android.com/guide/background?hl=zh-cn\">后台处理指南</a>，了解哪种解决方案符合您的需求。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h4><p>使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。<a href=\"https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies\">依赖链接</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   def work_version = <span class=\"string\">&quot;2.3.1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// (Java only)</span></span><br><span class=\"line\">   implementation <span class=\"string\">&quot;androidx.work:work-runtime:<span class=\"variable\">$work_version</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Kotlin + coroutines</span></span><br><span class=\"line\">   implementation <span class=\"string\">&quot;androidx.work:work-runtime-ktx:<span class=\"variable\">$work_version</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-Worker-定义任务\"><a href=\"#使用-Worker-定义任务\" class=\"headerlink\" title=\"使用 Worker 定义任务\"></a>使用 Worker 定义任务</h4><p>Worker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadLogWorker</span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">&quot;UploadLogWorker&quot;</span>, <span class=\"string\">&quot;doWork()&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStopped</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStopped()</span><br><span class=\"line\">        <span class=\"comment\">// 当任务结束时会回调这里</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>doWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：</p>\n<ul>\n<li><strong>Result.success()</strong> 任务成功。</li>\n<li><strong>Result.Failure()</strong> 任务失败。</li>\n<li><strong>Result.Retry()</strong> 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。</li>\n</ul>\n<h4 id=\"使用-WorkRequest-配置任务\"><a href=\"#使用-WorkRequest-配置任务\" class=\"headerlink\" title=\"使用 WorkRequest 配置任务\"></a>使用 WorkRequest 配置任务</h4><p>通过 WorkRequest 配置我们的任务<strong>何时运行</strong>以及<strong>如何运行</strong>。</p>\n<ul>\n<li><p><strong>设置任务触发条件</strong> 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 <a href=\"https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn\">Constraints.Builder 参考文档</a>）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">      .setRequiresCharging(<span class=\"literal\">true</span>) <span class=\"comment\">// 充电中</span></span><br><span class=\"line\">      .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 网络已连接</span></span><br><span class=\"line\">      .setRequiresBatteryNotLow(<span class=\"literal\">true</span>) <span class=\"comment\">// 电量充足</span></span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>将 constraints 设置到 WorkRequest 中</strong>。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        .setConstraints(constraints) <span class=\"comment\">// 设置触发条件</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置延迟执行任务</strong>。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，<strong>至少</strong>经过 5 分钟后再执行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .setConstraints(constraints)</span><br><span class=\"line\">      .setInitialDelay(<span class=\"number\">5</span>, TimeUnit.MINUTES) <span class=\"comment\">// 符合触发条件后，至少经过 5 分钟后再执行</span></span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。</p>\n</blockquote>\n</li>\n<li><p><strong>设置指数退避策略</strong>。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。</p>\n</blockquote>\n</li>\n<li><p><strong>任务的输入&#x2F;输出</strong>。输入和输出值以键值对的形式存储在 Data 对象中。</p>\n<p>在 WorkRequest 中设置输入数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> inputData = workDataOf(<span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;id&quot;</span> to <span class=\"number\">112134</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .setInputData(inputData)</span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<p>在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadLogWorker</span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = inputData.getString(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = inputData.getInt(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">&quot;name--&gt;<span class=\"variable\">$name</span>, id---&gt;<span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> outputData = workDataOf(<span class=\"string\">&quot;name&quot;</span> to name, <span class=\"string\">&quot;id&quot;</span> to id)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(outputData)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。</p>\n</blockquote>\n</li>\n<li><p><strong>为任务设置标签</strong>。</p>\n<p>设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .addTag(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .build()</span><br><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">      .addTag(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"将-WorkRequest-提交给系统\"><a href=\"#将-WorkRequest-提交给系统\" class=\"headerlink\" title=\"将 WorkRequest 提交给系统\"></a>将 WorkRequest 提交给系统</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).enqueue(uploadLogRequest)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"观察任务的状态\"><a href=\"#观察任务的状态\" class=\"headerlink\" title=\"观察任务的状态\"></a>观察任务的状态</h4><p>将任务提交给系统后，可通过 <code>WorkInfo</code> 获知任务的状态，WorkInfo 包含了任务的 id、tag、Worker 对象传递过来的 outputData，以及当前的状态。以下三种方式可以得到 WorkInfo 对象。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosByTag()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfoById()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosForUniqueWork()</span><br></pre></td></tr></table></figure>\n\n<p>如果希望实时获知任务的状态，上面三个方法还有对于的 LiveData 方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosByTagLiveData()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfosForUniqueWorkLiveData()</span><br></pre></td></tr></table></figure>\n\n<p>通过 LiveData，我们便可在任务状态发生变化的时候收到通知。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).getWorkInfoByIdLiveData(uploadLogRequest.id).observe(<span class=\"keyword\">this</span>, Observer &#123; workInfo -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInfo != <span class=\"literal\">null</span> &amp;&amp; workInfo.state == WorkInfo.State.SUCCEEDED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = workInfo.outputData.getString(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = workInfo.outputData.getInt(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">&quot;name--&gt;<span class=\"variable\">$name</span>, id--&gt;<span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取消任务\"><a href=\"#取消任务\" class=\"headerlink\" title=\"取消任务\"></a>取消任务</h4><p>可根据 tag、id 取消任务，也可以取消全部任务。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelAllWorkByTag()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).cancelWorkById()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).cancelUniqueWork()</span><br><span class=\"line\">WorkManager.getInstance(applicationContext).cancelAllWork()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"周期任务-PeriodicWorkRequest\"><a href=\"#周期任务-PeriodicWorkRequest\" class=\"headerlink\" title=\"周期任务 PeriodicWorkRequest\"></a>周期任务 PeriodicWorkRequest</h4><p>WorkRequest 有两种实现，OneTimeWorkRequest（一次性任务）和 PeriodicWorkRequest（周期性任务）。OneTimeWorkRequest 在任务成功完成后就结束了，而 PeriodicWorkRequest 会按设定的时间周期执行。二者使用起来无太大差别。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uploadWorkRequest = PeriodicWorkRequest.Builder(UploadLogWorker::<span class=\"keyword\">class</span>.java, <span class=\"number\">15</span>, TimeUnit.MINUTES)</span><br><span class=\"line\">        .setConstraints(constraints)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>周期性任务的时间间隔不能少于 <strong>15 分钟</strong>。</p>\n</blockquote>\n<h4 id=\"任务链\"><a href=\"#任务链\" class=\"headerlink\" title=\"任务链\"></a>任务链</h4><ul>\n<li><p><strong>并发任务</strong>。使用 **WorkManager.getInstance().beginWith(…).enqueue()**。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// request1，request2 同时执行</span></span><br><span class=\"line\">WorkManager.getInstance(applicationContext).beginWith(request1,request2).enqueue()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>串发任务</strong>。使用 **WorkManager.getInstance().beginWith().then().then()…enqueue()**。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先执行 request1，然后执行 request2</span></span><br><span class=\"line\">WorkManager.getInstance(applicationContext).beginWith(request1).then(request2).enqueue()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>组合任务</strong>。使用 <strong>WorkContinuation.combine()</strong> 方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AB 串发，CD 串发，这两个串之间并发执行后，把汇总结果给到 E</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> chuan1 = WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">      .beginWith(A)</span><br><span class=\"line\">      .then(B)</span><br><span class=\"line\"><span class=\"keyword\">val</span> chuan2 = WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">      .beginWith(C)</span><br><span class=\"line\">      .then(D)</span><br><span class=\"line\">WorkContinuation.combine(listOf(chuan1, chuan2))</span><br><span class=\"line\">      .then(E)</span><br><span class=\"line\">      .enqueue()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>WorkManager 是根据系统版本决定用 JobScheduler 或者 BroadcastReceiver + AlarmManager 的组合，如果某个系统不允许 AlarmManager 自动唤起，那么 WorkManager 就可能无法正常工作。</li>\n<li>实际操作中，周期任务的执行与所设定的时间可能有差别，执行时间可能也没有太明显的规律。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/workmanager?hl=zh-cn\">Android Developers</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/78599394\">WorkManager的基本使用</a></li>\n</ul>\n"},{"title":"Android Studio 的一些技巧","date":"2016-09-25T04:28:31.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n## 技巧\n### 快速查找\n`双击 Shift 键`。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。\n\n### Search Action\n`Ctrl + Shift + A`。类似搜索指令的入口。如输入 \"Open Recent\" 可以查找最近的工程；输入 \"hier\" 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。\n\n### 演示模式\n在菜单栏 `View 选项` 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。\n\n### 显示最近操作、修改\n`Ctrl + E` 和 `Ctrl + Shift + E` 快速显示最近文件操作和文件修改。同时可用 `Ctrl + Tab` 进行各个界面的切换。\n\n### 操作记录前进和回退\n`Ctrl + Alt + Left/Right`。\n\n### 移动行\n`Alt + Shift + 方向键上/方向键下`。整体移动也是类似的方法。\n\n### 交换行\n`Ctrl + Shift + 方向键上/方向键下`。\n\n### Log 快捷模板\n在 onCreate 中输入 `logi` ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。\n```Java\nLog.i(TAG, \"onCreate: \");\n```\n\n### 查看大纲\n`(Fn) + Ctrl + F12 `。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。\n\n### 附加调试\n在 ADB 连接手机情况下，点击 `attach to debugger` 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。\n\n### 代码折叠\n全局折叠、展开：`Ctrl + Shift + -` 、`Ctrl + Shift + +` \n局部折叠、展开：`Ctrl  + -` 、`Ctrl  + +` \n\n### 在文件系统中打开文件\n按住 Ctrl 键并点击打开的代码的 Tab 页。\n\n### 预览方法定义\n`Ctrl + Shift + i (mac 为 Command + Y)`。在本页面预览方法的定义，无需跳转到方法定义的地方去。\n\n### 拆分窗口\n在编辑区域显示多个编辑界面：Window --> Editor Tabs --> Split vertical \\ horizontal\n\n### Extract 的妙用\n**Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。**\n在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。\n\n### 方法调用栈\n`Ctrl + Alt + H` 可以快速找到该方法的调用栈。\n\n### Surround With\n`Ctrl + Alt + T`。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。\n\n### Image Asset && Vector Asset\n可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。\n\n### 断点\n  - 条件断点\n     满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。\n  - 临时断点\n    执行一次断点后该断点就会消失。在当前行使用快捷键 `(Fn) + Ctrl + Alt + F8`，即可生成一个临时断点，临时断点上有一个数字“1”。\n  - 异常断点\n    在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。\n  - 日志断点\n    当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。\n\n### 代码模板\n#### 内置模板\n`Ctrl + J` 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。\n\n#### 后缀模板\n`Ctrl + J` 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。\n\n#### 自定义模板\n\n**方法注释**\n\n ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。\n\n```java\n   /**\n      * $desc$\n      *\n      * @author zch\n      * create at $date$\n      */\n```\n\n**文件、类注释**  \n\n①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。\n\n\n\nClassHeader 模板：\n\n```java\n/**\n * class description here\n * @author ${USER}\n * @version 1.0.0\n * @since ${YEAR}-${MONTH}-${DAY}\n */\n```\n\nFileHeader模板：\n\n```java\n/*\n * ${NAME}      ${YEAR}-${MONTH}-${DAY}\n * Copyright (c) ${YEAR} jufuns. All right reserved.\n *\n */\n#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != \"\")package ${PACKAGE_NAME};#end\n```\n\nMyActivity模板：\n\n```java\n#parse(\"FileHeader.java\")\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n#parse(\"ClassHeader.java\")\npublic class ${NAME} extends Activity{\n\n   @Override\n    public void onCreate(Bundle savedInstanceState){\n           super.onCreate(savedInstanceState);\n    }\n\n}\n```\n\n用 MyActivity 模板新建的 LoginActivity：\n\n```java\n/*\n * LoginActivity      2016-10-07\n * Copyright (c) 2016 jufuns. All right reserved.\n *\n */\npackage com.jiejue.catwalk.ui.ac;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n/**\n * class description here\n *\n * @author zch\n * @version 1.0.0\n * @since 2016-10-07\n */\npublic class LoginActivity extends Activity {\n\n    @Override\n   \tpublic void onCreate(Bundle savedInstanceState) {\n       \tsuper.onCreate(savedInstanceState);\n       \t\n   \t}\n   \t\n}\n```\n\n>  类似地，我们也可以建立 Adapter、单例等等的模板代码。\n\n### 立即停止 AndroidStudio 编译\n\n  一个命令就可以停止它！\n\n  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。\n\n  ```Java\n  mac\n  ./gradlew --stop\n\n  window\n  gradlew --stop\n  ```\n\n  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。\n\n## 插件\n### .ignore\n给 Git 项目生成最合适的 ignore 文件。\n\n### ButterKnife Zelezny\n在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。\n\n### SelectorChapek\n可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。\n\n### GsonFormat\n可将一段 Json 生成所需的 Gson 实体。\n\n### Android Parcelable code generator\n可自动生成 Parcelable 接口所需的代码。\n\n### AndroidCodeGenerator\n可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。\n\n### Prettify\n可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。\n\n### Exynap\n[Exynap](http://exynap.com/) 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。\n\n### Android Methods Count\n高效统计 Android 开源库的方法数。\n\n### AndroidLocalizationer\n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。\n\n### Key Promoter\n当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。\n\n### FindBugs-IDEA\n一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .\n\n### ADB Idea\n[ADB Idea](https://github.com/pbreault/adb-idea) 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。\n\n### Codota\n[Codota](https://www.codota.com/) 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。\n\n## 工具\n### Stetho\nStetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。\n\n### Gradle, please\n[Gradle, please](http://gradleplease.appspot.com/) 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。\n\n### LeakCanary\nLeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。\n\n### Android Debug Database\nAndroid Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。\n\n### Android WiFi ADB\n[Android WiFi ADB](https://github.com/pedrovgs/AndroidWiFiADB) 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。\n\n### drawable-optimizer\n[drawable-optimizer](https://github.com/fabiomsr/drawable-optimizer) 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。\n\n### DevKnox\napp 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。**使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -> Devknox Scan 就会开始扫描。**\n\n### ClassyShark\n[ClassyShark](https://github.com/google/android-classyshark) 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。\n\n","source":"_posts/Android-Studio-的一些技巧.md","raw":"---\ntitle: Android Studio 的一些技巧\ndate: 2016-09-25 12:28:31\ncategories: \"Android\"\ntags:\n     - Android\n     - Android Studio\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n## 技巧\n### 快速查找\n`双击 Shift 键`。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。\n\n### Search Action\n`Ctrl + Shift + A`。类似搜索指令的入口。如输入 \"Open Recent\" 可以查找最近的工程；输入 \"hier\" 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。\n\n### 演示模式\n在菜单栏 `View 选项` 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。\n\n### 显示最近操作、修改\n`Ctrl + E` 和 `Ctrl + Shift + E` 快速显示最近文件操作和文件修改。同时可用 `Ctrl + Tab` 进行各个界面的切换。\n\n### 操作记录前进和回退\n`Ctrl + Alt + Left/Right`。\n\n### 移动行\n`Alt + Shift + 方向键上/方向键下`。整体移动也是类似的方法。\n\n### 交换行\n`Ctrl + Shift + 方向键上/方向键下`。\n\n### Log 快捷模板\n在 onCreate 中输入 `logi` ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。\n```Java\nLog.i(TAG, \"onCreate: \");\n```\n\n### 查看大纲\n`(Fn) + Ctrl + F12 `。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。\n\n### 附加调试\n在 ADB 连接手机情况下，点击 `attach to debugger` 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。\n\n### 代码折叠\n全局折叠、展开：`Ctrl + Shift + -` 、`Ctrl + Shift + +` \n局部折叠、展开：`Ctrl  + -` 、`Ctrl  + +` \n\n### 在文件系统中打开文件\n按住 Ctrl 键并点击打开的代码的 Tab 页。\n\n### 预览方法定义\n`Ctrl + Shift + i (mac 为 Command + Y)`。在本页面预览方法的定义，无需跳转到方法定义的地方去。\n\n### 拆分窗口\n在编辑区域显示多个编辑界面：Window --> Editor Tabs --> Split vertical \\ horizontal\n\n### Extract 的妙用\n**Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。**\n在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。\n\n### 方法调用栈\n`Ctrl + Alt + H` 可以快速找到该方法的调用栈。\n\n### Surround With\n`Ctrl + Alt + T`。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。\n\n### Image Asset && Vector Asset\n可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。\n\n### 断点\n  - 条件断点\n     满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。\n  - 临时断点\n    执行一次断点后该断点就会消失。在当前行使用快捷键 `(Fn) + Ctrl + Alt + F8`，即可生成一个临时断点，临时断点上有一个数字“1”。\n  - 异常断点\n    在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。\n  - 日志断点\n    当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。\n\n### 代码模板\n#### 内置模板\n`Ctrl + J` 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。\n\n#### 后缀模板\n`Ctrl + J` 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。\n\n#### 自定义模板\n\n**方法注释**\n\n ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。\n\n```java\n   /**\n      * $desc$\n      *\n      * @author zch\n      * create at $date$\n      */\n```\n\n**文件、类注释**  \n\n①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。\n\n\n\nClassHeader 模板：\n\n```java\n/**\n * class description here\n * @author ${USER}\n * @version 1.0.0\n * @since ${YEAR}-${MONTH}-${DAY}\n */\n```\n\nFileHeader模板：\n\n```java\n/*\n * ${NAME}      ${YEAR}-${MONTH}-${DAY}\n * Copyright (c) ${YEAR} jufuns. All right reserved.\n *\n */\n#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != \"\")package ${PACKAGE_NAME};#end\n```\n\nMyActivity模板：\n\n```java\n#parse(\"FileHeader.java\")\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n#parse(\"ClassHeader.java\")\npublic class ${NAME} extends Activity{\n\n   @Override\n    public void onCreate(Bundle savedInstanceState){\n           super.onCreate(savedInstanceState);\n    }\n\n}\n```\n\n用 MyActivity 模板新建的 LoginActivity：\n\n```java\n/*\n * LoginActivity      2016-10-07\n * Copyright (c) 2016 jufuns. All right reserved.\n *\n */\npackage com.jiejue.catwalk.ui.ac;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n/**\n * class description here\n *\n * @author zch\n * @version 1.0.0\n * @since 2016-10-07\n */\npublic class LoginActivity extends Activity {\n\n    @Override\n   \tpublic void onCreate(Bundle savedInstanceState) {\n       \tsuper.onCreate(savedInstanceState);\n       \t\n   \t}\n   \t\n}\n```\n\n>  类似地，我们也可以建立 Adapter、单例等等的模板代码。\n\n### 立即停止 AndroidStudio 编译\n\n  一个命令就可以停止它！\n\n  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。\n\n  ```Java\n  mac\n  ./gradlew --stop\n\n  window\n  gradlew --stop\n  ```\n\n  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。\n\n## 插件\n### .ignore\n给 Git 项目生成最合适的 ignore 文件。\n\n### ButterKnife Zelezny\n在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。\n\n### SelectorChapek\n可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。\n\n### GsonFormat\n可将一段 Json 生成所需的 Gson 实体。\n\n### Android Parcelable code generator\n可自动生成 Parcelable 接口所需的代码。\n\n### AndroidCodeGenerator\n可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。\n\n### Prettify\n可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。\n\n### Exynap\n[Exynap](http://exynap.com/) 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。\n\n### Android Methods Count\n高效统计 Android 开源库的方法数。\n\n### AndroidLocalizationer\n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。\n\n### Key Promoter\n当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。\n\n### FindBugs-IDEA\n一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .\n\n### ADB Idea\n[ADB Idea](https://github.com/pbreault/adb-idea) 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。\n\n### Codota\n[Codota](https://www.codota.com/) 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。\n\n## 工具\n### Stetho\nStetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。\n\n### Gradle, please\n[Gradle, please](http://gradleplease.appspot.com/) 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。\n\n### LeakCanary\nLeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。\n\n### Android Debug Database\nAndroid Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。\n\n### Android WiFi ADB\n[Android WiFi ADB](https://github.com/pedrovgs/AndroidWiFiADB) 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。\n\n### drawable-optimizer\n[drawable-optimizer](https://github.com/fabiomsr/drawable-optimizer) 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。\n\n### DevKnox\napp 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。**使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -> Devknox Scan 就会开始扫描。**\n\n### ClassyShark\n[ClassyShark](https://github.com/google/android-classyshark) 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。\n\n","slug":"Android-Studio-的一些技巧","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcs0008ncttcy6mcri8","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p><code>双击 Shift 键</code>。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。</p>\n<h3 id=\"Search-Action\"><a href=\"#Search-Action\" class=\"headerlink\" title=\"Search Action\"></a>Search Action</h3><p><code>Ctrl + Shift + A</code>。类似搜索指令的入口。如输入 “Open Recent” 可以查找最近的工程；输入 “hier” 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。</p>\n<h3 id=\"演示模式\"><a href=\"#演示模式\" class=\"headerlink\" title=\"演示模式\"></a>演示模式</h3><p>在菜单栏 <code>View 选项</code> 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。</p>\n<h3 id=\"显示最近操作、修改\"><a href=\"#显示最近操作、修改\" class=\"headerlink\" title=\"显示最近操作、修改\"></a>显示最近操作、修改</h3><p><code>Ctrl + E</code> 和 <code>Ctrl + Shift + E</code> 快速显示最近文件操作和文件修改。同时可用 <code>Ctrl + Tab</code> 进行各个界面的切换。</p>\n<h3 id=\"操作记录前进和回退\"><a href=\"#操作记录前进和回退\" class=\"headerlink\" title=\"操作记录前进和回退\"></a>操作记录前进和回退</h3><p><code>Ctrl + Alt + Left/Right</code>。</p>\n<h3 id=\"移动行\"><a href=\"#移动行\" class=\"headerlink\" title=\"移动行\"></a>移动行</h3><p><code>Alt + Shift + 方向键上/方向键下</code>。整体移动也是类似的方法。</p>\n<h3 id=\"交换行\"><a href=\"#交换行\" class=\"headerlink\" title=\"交换行\"></a>交换行</h3><p><code>Ctrl + Shift + 方向键上/方向键下</code>。</p>\n<h3 id=\"Log-快捷模板\"><a href=\"#Log-快捷模板\" class=\"headerlink\" title=\"Log 快捷模板\"></a>Log 快捷模板</h3><p>在 onCreate 中输入 <code>logi</code> ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.i(TAG, <span class=\"string\">&quot;onCreate: &quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看大纲\"><a href=\"#查看大纲\" class=\"headerlink\" title=\"查看大纲\"></a>查看大纲</h3><p><code>(Fn) + Ctrl + F12 </code>。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。</p>\n<h3 id=\"附加调试\"><a href=\"#附加调试\" class=\"headerlink\" title=\"附加调试\"></a>附加调试</h3><p>在 ADB 连接手机情况下，点击 <code>attach to debugger</code> 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>全局折叠、展开：<code>Ctrl + Shift + -</code> 、<code>Ctrl + Shift + +</code><br>局部折叠、展开：<code>Ctrl  + -</code> 、<code>Ctrl  + +</code> </p>\n<h3 id=\"在文件系统中打开文件\"><a href=\"#在文件系统中打开文件\" class=\"headerlink\" title=\"在文件系统中打开文件\"></a>在文件系统中打开文件</h3><p>按住 Ctrl 键并点击打开的代码的 Tab 页。</p>\n<h3 id=\"预览方法定义\"><a href=\"#预览方法定义\" class=\"headerlink\" title=\"预览方法定义\"></a>预览方法定义</h3><p><code>Ctrl + Shift + i (mac 为 Command + Y)</code>。在本页面预览方法的定义，无需跳转到方法定义的地方去。</p>\n<h3 id=\"拆分窗口\"><a href=\"#拆分窗口\" class=\"headerlink\" title=\"拆分窗口\"></a>拆分窗口</h3><p>在编辑区域显示多个编辑界面：Window –&gt; Editor Tabs –&gt; Split vertical \\ horizontal</p>\n<h3 id=\"Extract-的妙用\"><a href=\"#Extract-的妙用\" class=\"headerlink\" title=\"Extract 的妙用\"></a>Extract 的妙用</h3><p><strong>Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。</strong><br>在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。</p>\n<h3 id=\"方法调用栈\"><a href=\"#方法调用栈\" class=\"headerlink\" title=\"方法调用栈\"></a>方法调用栈</h3><p><code>Ctrl + Alt + H</code> 可以快速找到该方法的调用栈。</p>\n<h3 id=\"Surround-With\"><a href=\"#Surround-With\" class=\"headerlink\" title=\"Surround With\"></a>Surround With</h3><p><code>Ctrl + Alt + T</code>。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。</p>\n<h3 id=\"Image-Asset-Vector-Asset\"><a href=\"#Image-Asset-Vector-Asset\" class=\"headerlink\" title=\"Image Asset &amp;&amp; Vector Asset\"></a>Image Asset &amp;&amp; Vector Asset</h3><p>可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><ul>\n<li>条件断点<br> 满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i &#x3D;&#x3D; 5 时使用断点，则在 Condition 输入 i &#x3D;&#x3D; 5。</li>\n<li>临时断点<br>执行一次断点后该断点就会消失。在当前行使用快捷键 <code>(Fn) + Ctrl + Alt + F8</code>，即可生成一个临时断点，临时断点上有一个数字“1”。</li>\n<li>异常断点<br>在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。</li>\n<li>日志断点<br>当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。</li>\n</ul>\n<h3 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h3><h4 id=\"内置模板\"><a href=\"#内置模板\" class=\"headerlink\" title=\"内置模板\"></a>内置模板</h4><p><code>Ctrl + J</code> 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。</p>\n<h4 id=\"后缀模板\"><a href=\"#后缀模板\" class=\"headerlink\" title=\"后缀模板\"></a>后缀模板</h4><p><code>Ctrl + J</code> 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。</p>\n<h4 id=\"自定义模板\"><a href=\"#自定义模板\" class=\"headerlink\" title=\"自定义模板\"></a>自定义模板</h4><p><strong>方法注释</strong></p>\n<p> ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * $desc$</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\">   * create at $date$</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>文件、类注释</strong>  </p>\n<p>①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。</p>\n<p>ClassHeader 模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> $&#123;USER&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>FileHeader模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * $&#123;NAME&#125;      $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) $&#123;YEAR&#125; jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">#<span class=\"keyword\">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class=\"string\">&quot;&quot;</span>)<span class=\"keyword\">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br></pre></td></tr></table></figure>\n\n<p>MyActivity模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parse(<span class=\"string\">&quot;FileHeader.java&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(<span class=\"string\">&quot;ClassHeader.java&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">$</span>&#123;NAME&#125; <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 MyActivity 模板新建的 LoginActivity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * LoginActivity      2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2016 jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.jiejue.catwalk.ui.ac;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       \t<span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       \t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 类似地，我们也可以建立 Adapter、单例等等的模板代码。</p>\n</blockquote>\n<h3 id=\"立即停止-AndroidStudio-编译\"><a href=\"#立即停止-AndroidStudio-编译\" class=\"headerlink\" title=\"立即停止 AndroidStudio 编译\"></a>立即停止 AndroidStudio 编译</h3><p>  一个命令就可以停止它！</p>\n<p>  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac</span><br><span class=\"line\">./gradlew --stop</span><br><span class=\"line\"></span><br><span class=\"line\">window</span><br><span class=\"line\">gradlew --stop</span><br></pre></td></tr></table></figure>\n\n<p>  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\".ignore\"></a>.ignore</h3><p>给 Git 项目生成最合适的 ignore 文件。</p>\n<h3 id=\"ButterKnife-Zelezny\"><a href=\"#ButterKnife-Zelezny\" class=\"headerlink\" title=\"ButterKnife Zelezny\"></a>ButterKnife Zelezny</h3><p>在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。</p>\n<h3 id=\"SelectorChapek\"><a href=\"#SelectorChapek\" class=\"headerlink\" title=\"SelectorChapek\"></a>SelectorChapek</h3><p>可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。</p>\n<h3 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h3><p>可将一段 Json 生成所需的 Gson 实体。</p>\n<h3 id=\"Android-Parcelable-code-generator\"><a href=\"#Android-Parcelable-code-generator\" class=\"headerlink\" title=\"Android Parcelable code generator\"></a>Android Parcelable code generator</h3><p>可自动生成 Parcelable 接口所需的代码。</p>\n<h3 id=\"AndroidCodeGenerator\"><a href=\"#AndroidCodeGenerator\" class=\"headerlink\" title=\"AndroidCodeGenerator\"></a>AndroidCodeGenerator</h3><p>可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。</p>\n<h3 id=\"Prettify\"><a href=\"#Prettify\" class=\"headerlink\" title=\"Prettify\"></a>Prettify</h3><p>可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。</p>\n<h3 id=\"Exynap\"><a href=\"#Exynap\" class=\"headerlink\" title=\"Exynap\"></a>Exynap</h3><p><a href=\"http://exynap.com/\">Exynap</a> 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。</p>\n<h3 id=\"Android-Methods-Count\"><a href=\"#Android-Methods-Count\" class=\"headerlink\" title=\"Android Methods Count\"></a>Android Methods Count</h3><p>高效统计 Android 开源库的方法数。</p>\n<h3 id=\"AndroidLocalizationer\"><a href=\"#AndroidLocalizationer\" class=\"headerlink\" title=\"AndroidLocalizationer\"></a>AndroidLocalizationer</h3><p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio&#x2F;IntelliJ IDEA 插件。</p>\n<h3 id=\"Key-Promoter\"><a href=\"#Key-Promoter\" class=\"headerlink\" title=\"Key Promoter\"></a>Key Promoter</h3><p>当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。</p>\n<h3 id=\"FindBugs-IDEA\"><a href=\"#FindBugs-IDEA\" class=\"headerlink\" title=\"FindBugs-IDEA\"></a>FindBugs-IDEA</h3><p>一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .</p>\n<h3 id=\"ADB-Idea\"><a href=\"#ADB-Idea\" class=\"headerlink\" title=\"ADB Idea\"></a>ADB Idea</h3><p><a href=\"https://github.com/pbreault/adb-idea\">ADB Idea</a> 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。</p>\n<h3 id=\"Codota\"><a href=\"#Codota\" class=\"headerlink\" title=\"Codota\"></a>Codota</h3><p><a href=\"https://www.codota.com/\">Codota</a> 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h3><p>Stetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。</p>\n<h3 id=\"Gradle-please\"><a href=\"#Gradle-please\" class=\"headerlink\" title=\"Gradle, please\"></a>Gradle, please</h3><p><a href=\"http://gradleplease.appspot.com/\">Gradle, please</a> 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。</p>\n<h3 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h3><p>LeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。</p>\n<h3 id=\"Android-Debug-Database\"><a href=\"#Android-Debug-Database\" class=\"headerlink\" title=\"Android Debug Database\"></a>Android Debug Database</h3><p>Android Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。</p>\n<h3 id=\"Android-WiFi-ADB\"><a href=\"#Android-WiFi-ADB\" class=\"headerlink\" title=\"Android WiFi ADB\"></a>Android WiFi ADB</h3><p><a href=\"https://github.com/pedrovgs/AndroidWiFiADB\">Android WiFi ADB</a> 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。</p>\n<h3 id=\"drawable-optimizer\"><a href=\"#drawable-optimizer\" class=\"headerlink\" title=\"drawable-optimizer\"></a>drawable-optimizer</h3><p><a href=\"https://github.com/fabiomsr/drawable-optimizer\">drawable-optimizer</a> 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。</p>\n<h3 id=\"DevKnox\"><a href=\"#DevKnox\" class=\"headerlink\" title=\"DevKnox\"></a>DevKnox</h3><p>app 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。<strong>使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -&gt; Devknox Scan 就会开始扫描。</strong></p>\n<h3 id=\"ClassyShark\"><a href=\"#ClassyShark\" class=\"headerlink\" title=\"ClassyShark\"></a>ClassyShark</h3><p><a href=\"https://github.com/google/android-classyshark\">ClassyShark</a> 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。</p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p><code>双击 Shift 键</code>。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。</p>\n<h3 id=\"Search-Action\"><a href=\"#Search-Action\" class=\"headerlink\" title=\"Search Action\"></a>Search Action</h3><p><code>Ctrl + Shift + A</code>。类似搜索指令的入口。如输入 “Open Recent” 可以查找最近的工程；输入 “hier” 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。</p>\n<h3 id=\"演示模式\"><a href=\"#演示模式\" class=\"headerlink\" title=\"演示模式\"></a>演示模式</h3><p>在菜单栏 <code>View 选项</code> 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。</p>\n<h3 id=\"显示最近操作、修改\"><a href=\"#显示最近操作、修改\" class=\"headerlink\" title=\"显示最近操作、修改\"></a>显示最近操作、修改</h3><p><code>Ctrl + E</code> 和 <code>Ctrl + Shift + E</code> 快速显示最近文件操作和文件修改。同时可用 <code>Ctrl + Tab</code> 进行各个界面的切换。</p>\n<h3 id=\"操作记录前进和回退\"><a href=\"#操作记录前进和回退\" class=\"headerlink\" title=\"操作记录前进和回退\"></a>操作记录前进和回退</h3><p><code>Ctrl + Alt + Left/Right</code>。</p>\n<h3 id=\"移动行\"><a href=\"#移动行\" class=\"headerlink\" title=\"移动行\"></a>移动行</h3><p><code>Alt + Shift + 方向键上/方向键下</code>。整体移动也是类似的方法。</p>\n<h3 id=\"交换行\"><a href=\"#交换行\" class=\"headerlink\" title=\"交换行\"></a>交换行</h3><p><code>Ctrl + Shift + 方向键上/方向键下</code>。</p>\n<h3 id=\"Log-快捷模板\"><a href=\"#Log-快捷模板\" class=\"headerlink\" title=\"Log 快捷模板\"></a>Log 快捷模板</h3><p>在 onCreate 中输入 <code>logi</code> ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.i(TAG, <span class=\"string\">&quot;onCreate: &quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看大纲\"><a href=\"#查看大纲\" class=\"headerlink\" title=\"查看大纲\"></a>查看大纲</h3><p><code>(Fn) + Ctrl + F12 </code>。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。</p>\n<h3 id=\"附加调试\"><a href=\"#附加调试\" class=\"headerlink\" title=\"附加调试\"></a>附加调试</h3><p>在 ADB 连接手机情况下，点击 <code>attach to debugger</code> 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>全局折叠、展开：<code>Ctrl + Shift + -</code> 、<code>Ctrl + Shift + +</code><br>局部折叠、展开：<code>Ctrl  + -</code> 、<code>Ctrl  + +</code> </p>\n<h3 id=\"在文件系统中打开文件\"><a href=\"#在文件系统中打开文件\" class=\"headerlink\" title=\"在文件系统中打开文件\"></a>在文件系统中打开文件</h3><p>按住 Ctrl 键并点击打开的代码的 Tab 页。</p>\n<h3 id=\"预览方法定义\"><a href=\"#预览方法定义\" class=\"headerlink\" title=\"预览方法定义\"></a>预览方法定义</h3><p><code>Ctrl + Shift + i (mac 为 Command + Y)</code>。在本页面预览方法的定义，无需跳转到方法定义的地方去。</p>\n<h3 id=\"拆分窗口\"><a href=\"#拆分窗口\" class=\"headerlink\" title=\"拆分窗口\"></a>拆分窗口</h3><p>在编辑区域显示多个编辑界面：Window –&gt; Editor Tabs –&gt; Split vertical \\ horizontal</p>\n<h3 id=\"Extract-的妙用\"><a href=\"#Extract-的妙用\" class=\"headerlink\" title=\"Extract 的妙用\"></a>Extract 的妙用</h3><p><strong>Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。</strong><br>在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。</p>\n<h3 id=\"方法调用栈\"><a href=\"#方法调用栈\" class=\"headerlink\" title=\"方法调用栈\"></a>方法调用栈</h3><p><code>Ctrl + Alt + H</code> 可以快速找到该方法的调用栈。</p>\n<h3 id=\"Surround-With\"><a href=\"#Surround-With\" class=\"headerlink\" title=\"Surround With\"></a>Surround With</h3><p><code>Ctrl + Alt + T</code>。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。</p>\n<h3 id=\"Image-Asset-Vector-Asset\"><a href=\"#Image-Asset-Vector-Asset\" class=\"headerlink\" title=\"Image Asset &amp;&amp; Vector Asset\"></a>Image Asset &amp;&amp; Vector Asset</h3><p>可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><ul>\n<li>条件断点<br> 满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i &#x3D;&#x3D; 5 时使用断点，则在 Condition 输入 i &#x3D;&#x3D; 5。</li>\n<li>临时断点<br>执行一次断点后该断点就会消失。在当前行使用快捷键 <code>(Fn) + Ctrl + Alt + F8</code>，即可生成一个临时断点，临时断点上有一个数字“1”。</li>\n<li>异常断点<br>在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。</li>\n<li>日志断点<br>当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。</li>\n</ul>\n<h3 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h3><h4 id=\"内置模板\"><a href=\"#内置模板\" class=\"headerlink\" title=\"内置模板\"></a>内置模板</h4><p><code>Ctrl + J</code> 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。</p>\n<h4 id=\"后缀模板\"><a href=\"#后缀模板\" class=\"headerlink\" title=\"后缀模板\"></a>后缀模板</h4><p><code>Ctrl + J</code> 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。</p>\n<h4 id=\"自定义模板\"><a href=\"#自定义模板\" class=\"headerlink\" title=\"自定义模板\"></a>自定义模板</h4><p><strong>方法注释</strong></p>\n<p> ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * $desc$</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\">   * create at $date$</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>文件、类注释</strong>  </p>\n<p>①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。</p>\n<p>ClassHeader 模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> $&#123;USER&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>FileHeader模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * $&#123;NAME&#125;      $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) $&#123;YEAR&#125; jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">#<span class=\"keyword\">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class=\"string\">&quot;&quot;</span>)<span class=\"keyword\">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br></pre></td></tr></table></figure>\n\n<p>MyActivity模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parse(<span class=\"string\">&quot;FileHeader.java&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(<span class=\"string\">&quot;ClassHeader.java&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">$</span>&#123;NAME&#125; <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 MyActivity 模板新建的 LoginActivity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * LoginActivity      2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2016 jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.jiejue.catwalk.ui.ac;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       \t<span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       \t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 类似地，我们也可以建立 Adapter、单例等等的模板代码。</p>\n</blockquote>\n<h3 id=\"立即停止-AndroidStudio-编译\"><a href=\"#立即停止-AndroidStudio-编译\" class=\"headerlink\" title=\"立即停止 AndroidStudio 编译\"></a>立即停止 AndroidStudio 编译</h3><p>  一个命令就可以停止它！</p>\n<p>  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac</span><br><span class=\"line\">./gradlew --stop</span><br><span class=\"line\"></span><br><span class=\"line\">window</span><br><span class=\"line\">gradlew --stop</span><br></pre></td></tr></table></figure>\n\n<p>  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\".ignore\"></a>.ignore</h3><p>给 Git 项目生成最合适的 ignore 文件。</p>\n<h3 id=\"ButterKnife-Zelezny\"><a href=\"#ButterKnife-Zelezny\" class=\"headerlink\" title=\"ButterKnife Zelezny\"></a>ButterKnife Zelezny</h3><p>在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。</p>\n<h3 id=\"SelectorChapek\"><a href=\"#SelectorChapek\" class=\"headerlink\" title=\"SelectorChapek\"></a>SelectorChapek</h3><p>可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。</p>\n<h3 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h3><p>可将一段 Json 生成所需的 Gson 实体。</p>\n<h3 id=\"Android-Parcelable-code-generator\"><a href=\"#Android-Parcelable-code-generator\" class=\"headerlink\" title=\"Android Parcelable code generator\"></a>Android Parcelable code generator</h3><p>可自动生成 Parcelable 接口所需的代码。</p>\n<h3 id=\"AndroidCodeGenerator\"><a href=\"#AndroidCodeGenerator\" class=\"headerlink\" title=\"AndroidCodeGenerator\"></a>AndroidCodeGenerator</h3><p>可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。</p>\n<h3 id=\"Prettify\"><a href=\"#Prettify\" class=\"headerlink\" title=\"Prettify\"></a>Prettify</h3><p>可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。</p>\n<h3 id=\"Exynap\"><a href=\"#Exynap\" class=\"headerlink\" title=\"Exynap\"></a>Exynap</h3><p><a href=\"http://exynap.com/\">Exynap</a> 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。</p>\n<h3 id=\"Android-Methods-Count\"><a href=\"#Android-Methods-Count\" class=\"headerlink\" title=\"Android Methods Count\"></a>Android Methods Count</h3><p>高效统计 Android 开源库的方法数。</p>\n<h3 id=\"AndroidLocalizationer\"><a href=\"#AndroidLocalizationer\" class=\"headerlink\" title=\"AndroidLocalizationer\"></a>AndroidLocalizationer</h3><p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio&#x2F;IntelliJ IDEA 插件。</p>\n<h3 id=\"Key-Promoter\"><a href=\"#Key-Promoter\" class=\"headerlink\" title=\"Key Promoter\"></a>Key Promoter</h3><p>当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。</p>\n<h3 id=\"FindBugs-IDEA\"><a href=\"#FindBugs-IDEA\" class=\"headerlink\" title=\"FindBugs-IDEA\"></a>FindBugs-IDEA</h3><p>一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .</p>\n<h3 id=\"ADB-Idea\"><a href=\"#ADB-Idea\" class=\"headerlink\" title=\"ADB Idea\"></a>ADB Idea</h3><p><a href=\"https://github.com/pbreault/adb-idea\">ADB Idea</a> 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。</p>\n<h3 id=\"Codota\"><a href=\"#Codota\" class=\"headerlink\" title=\"Codota\"></a>Codota</h3><p><a href=\"https://www.codota.com/\">Codota</a> 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h3><p>Stetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。</p>\n<h3 id=\"Gradle-please\"><a href=\"#Gradle-please\" class=\"headerlink\" title=\"Gradle, please\"></a>Gradle, please</h3><p><a href=\"http://gradleplease.appspot.com/\">Gradle, please</a> 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。</p>\n<h3 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h3><p>LeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。</p>\n<h3 id=\"Android-Debug-Database\"><a href=\"#Android-Debug-Database\" class=\"headerlink\" title=\"Android Debug Database\"></a>Android Debug Database</h3><p>Android Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。</p>\n<h3 id=\"Android-WiFi-ADB\"><a href=\"#Android-WiFi-ADB\" class=\"headerlink\" title=\"Android WiFi ADB\"></a>Android WiFi ADB</h3><p><a href=\"https://github.com/pedrovgs/AndroidWiFiADB\">Android WiFi ADB</a> 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。</p>\n<h3 id=\"drawable-optimizer\"><a href=\"#drawable-optimizer\" class=\"headerlink\" title=\"drawable-optimizer\"></a>drawable-optimizer</h3><p><a href=\"https://github.com/fabiomsr/drawable-optimizer\">drawable-optimizer</a> 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。</p>\n<h3 id=\"DevKnox\"><a href=\"#DevKnox\" class=\"headerlink\" title=\"DevKnox\"></a>DevKnox</h3><p>app 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。<strong>使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -&gt; Devknox Scan 就会开始扫描。</strong></p>\n<h3 id=\"ClassyShark\"><a href=\"#ClassyShark\" class=\"headerlink\" title=\"ClassyShark\"></a>ClassyShark</h3><p><a href=\"https://github.com/google/android-classyshark\">ClassyShark</a> 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。</p>\n"},{"title":"Android 一个应用多个数据库","date":"2018-01-05T16:42:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。\n\n以存储用户信息为例：\n\n- 先贴出使用代码：\n\n```Java\nmUserDAO = new UserDAO(this, account); // 此处的 account 就是要操作的数据库名称\nmUserDAO.insert(new User(account, userName));\n```\n\n- 以下为三个关键类\n\n```Java\n/**\n * 数据库帮助类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class DBHelper extends SQLiteOpenHelper {\n\n    private static final int DB_VERSION = 1;\n    public static final String TABLE_NAME = \"user\";\n\n    public DBHelper(Context context, String dbName) {\n        super(context, dbName, null, DB_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        String sql = \"create table if not exists \" + TABLE_NAME + \" (account text primary key , userName text)\";\n        db.execSQL(sql);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        String sql = \"drop table if exists \" + TABLE_NAME;\n        db.execSQL(sql);\n        onCreate(db);\n    }\n}\n```\n\n```Java\n/**\n * 用户实体类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class User {\n\n    public String account; // 用户账号，假设唯一，用它作为数据库名称（dbName）\n    public String userName;\n\n    public User(String account, String userName) {\n        this.account = account;\n        this.userName = userName;\n    }\n}\n```\n\n```Java\n/**\n * 用户数据表相关操作\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class UserDAO {\n\n    private DBHelper mDBHelper;\n\n    public UserDAO(Context context, String dbName) {\n        mDBHelper = new DBHelper(context, dbName);\n    }\n\n    /**\n     * 插入一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean insert(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            ContentValues values = new ContentValues();\n            values.put(\"account\", user.account);\n            values.put(\"userName\", user.userName);\n            db.insertOrThrow(DBHelper.TABLE_NAME, null, values);\n            db.setTransactionSuccessful();\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 删除一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean delete(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            db.delete(DBHelper.TABLE_NAME, \"account = ?\", new String[]{user.account});\n            db.setTransactionSuccessful();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取所有数据\n     *\n     * @return\n     */\n    public List<User> getUserList() {\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n\n        try {\n            db = mDBHelper.getReadableDatabase();\n            cursor = db.query(DBHelper.TABLE_NAME,\n                    new String[]{\"account\", \"userName\"},\n                    null,\n                    null,\n                    null, null, null);\n\n            if (cursor.getCount() > 0) {\n                List<User> userList = new ArrayList<>();\n                while (cursor.moveToNext()) {\n                    User user = new User(cursor.getString(cursor.getColumnIndex(\"account\")), cursor.getString(cursor.getColumnIndex(\"userName\")));\n                    userList.add(user);\n                }\n                return userList;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != cursor) {\n                try {\n                    cursor.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (null != db) {\n                try {\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n}\n```","source":"_posts/Android-一个应用多个数据库.md","raw":"---\ntitle: Android 一个应用多个数据库\ndate: 2018-1-6 00:42:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。\n\n以存储用户信息为例：\n\n- 先贴出使用代码：\n\n```Java\nmUserDAO = new UserDAO(this, account); // 此处的 account 就是要操作的数据库名称\nmUserDAO.insert(new User(account, userName));\n```\n\n- 以下为三个关键类\n\n```Java\n/**\n * 数据库帮助类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class DBHelper extends SQLiteOpenHelper {\n\n    private static final int DB_VERSION = 1;\n    public static final String TABLE_NAME = \"user\";\n\n    public DBHelper(Context context, String dbName) {\n        super(context, dbName, null, DB_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        String sql = \"create table if not exists \" + TABLE_NAME + \" (account text primary key , userName text)\";\n        db.execSQL(sql);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        String sql = \"drop table if exists \" + TABLE_NAME;\n        db.execSQL(sql);\n        onCreate(db);\n    }\n}\n```\n\n```Java\n/**\n * 用户实体类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class User {\n\n    public String account; // 用户账号，假设唯一，用它作为数据库名称（dbName）\n    public String userName;\n\n    public User(String account, String userName) {\n        this.account = account;\n        this.userName = userName;\n    }\n}\n```\n\n```Java\n/**\n * 用户数据表相关操作\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class UserDAO {\n\n    private DBHelper mDBHelper;\n\n    public UserDAO(Context context, String dbName) {\n        mDBHelper = new DBHelper(context, dbName);\n    }\n\n    /**\n     * 插入一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean insert(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            ContentValues values = new ContentValues();\n            values.put(\"account\", user.account);\n            values.put(\"userName\", user.userName);\n            db.insertOrThrow(DBHelper.TABLE_NAME, null, values);\n            db.setTransactionSuccessful();\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 删除一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean delete(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            db.delete(DBHelper.TABLE_NAME, \"account = ?\", new String[]{user.account});\n            db.setTransactionSuccessful();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取所有数据\n     *\n     * @return\n     */\n    public List<User> getUserList() {\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n\n        try {\n            db = mDBHelper.getReadableDatabase();\n            cursor = db.query(DBHelper.TABLE_NAME,\n                    new String[]{\"account\", \"userName\"},\n                    null,\n                    null,\n                    null, null, null);\n\n            if (cursor.getCount() > 0) {\n                List<User> userList = new ArrayList<>();\n                while (cursor.moveToNext()) {\n                    User user = new User(cursor.getString(cursor.getColumnIndex(\"account\")), cursor.getString(cursor.getColumnIndex(\"userName\")));\n                    userList.add(user);\n                }\n                return userList;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != cursor) {\n                try {\n                    cursor.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (null != db) {\n                try {\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n}\n```","slug":"Android-一个应用多个数据库","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcu000bncttcfk17n1h","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<p>最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。</p>\n<p>以存储用户信息为例：</p>\n<ul>\n<li>先贴出使用代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mUserDAO = <span class=\"keyword\">new</span> <span class=\"title class_\">UserDAO</span>(<span class=\"built_in\">this</span>, account); <span class=\"comment\">// 此处的 account 就是要操作的数据库名称</span></span><br><span class=\"line\">mUserDAO.insert(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(account, userName));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下为三个关键类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库帮助类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DBHelper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SQLiteOpenHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DB_VERSION</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TABLE_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;user&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DBHelper</span><span class=\"params\">(Context context, String dbName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, dbName, <span class=\"literal\">null</span>, DB_VERSION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;create table if not exists &quot;</span> + TABLE_NAME + <span class=\"string\">&quot; (account text primary key , userName text)&quot;</span>;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"type\">int</span> oldVersion, <span class=\"type\">int</span> newVersion)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;drop table if exists &quot;</span> + TABLE_NAME;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String account; <span class=\"comment\">// 用户账号，假设唯一，用它作为数据库名称（dbName）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String account, String userName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.account = account;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户数据表相关操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDAO</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBHelper mDBHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserDAO</span><span class=\"params\">(Context context, String dbName)</span> &#123;</span><br><span class=\"line\">        mDBHelper = <span class=\"keyword\">new</span> <span class=\"title class_\">DBHelper</span>(context, dbName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">insert</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            <span class=\"type\">ContentValues</span> <span class=\"variable\">values</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">            values.put(<span class=\"string\">&quot;account&quot;</span>, user.account);</span><br><span class=\"line\">            values.put(<span class=\"string\">&quot;userName&quot;</span>, user.userName);</span><br><span class=\"line\">            db.insertOrThrow(DBHelper.TABLE_NAME, <span class=\"literal\">null</span>, values);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">delete</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            db.delete(DBHelper.TABLE_NAME, <span class=\"string\">&quot;account = ?&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;user.account&#125;);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUserList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Cursor</span> <span class=\"variable\">cursor</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getReadableDatabase();</span><br><span class=\"line\">            cursor = db.query(DBHelper.TABLE_NAME,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;account&quot;</span>, <span class=\"string\">&quot;userName&quot;</span>&#125;,</span><br><span class=\"line\">                    <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cursor.getCount() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                List&lt;User&gt; userList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">                    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;account&quot;</span>)), cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;userName&quot;</span>)));</span><br><span class=\"line\">                    userList.add(user);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != cursor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cursor.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<p>最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。</p>\n<p>以存储用户信息为例：</p>\n<ul>\n<li>先贴出使用代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mUserDAO = <span class=\"keyword\">new</span> <span class=\"title class_\">UserDAO</span>(<span class=\"built_in\">this</span>, account); <span class=\"comment\">// 此处的 account 就是要操作的数据库名称</span></span><br><span class=\"line\">mUserDAO.insert(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(account, userName));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下为三个关键类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库帮助类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DBHelper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SQLiteOpenHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DB_VERSION</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TABLE_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;user&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DBHelper</span><span class=\"params\">(Context context, String dbName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, dbName, <span class=\"literal\">null</span>, DB_VERSION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;create table if not exists &quot;</span> + TABLE_NAME + <span class=\"string\">&quot; (account text primary key , userName text)&quot;</span>;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"type\">int</span> oldVersion, <span class=\"type\">int</span> newVersion)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;drop table if exists &quot;</span> + TABLE_NAME;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String account; <span class=\"comment\">// 用户账号，假设唯一，用它作为数据库名称（dbName）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String account, String userName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.account = account;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户数据表相关操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDAO</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBHelper mDBHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserDAO</span><span class=\"params\">(Context context, String dbName)</span> &#123;</span><br><span class=\"line\">        mDBHelper = <span class=\"keyword\">new</span> <span class=\"title class_\">DBHelper</span>(context, dbName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">insert</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            <span class=\"type\">ContentValues</span> <span class=\"variable\">values</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">            values.put(<span class=\"string\">&quot;account&quot;</span>, user.account);</span><br><span class=\"line\">            values.put(<span class=\"string\">&quot;userName&quot;</span>, user.userName);</span><br><span class=\"line\">            db.insertOrThrow(DBHelper.TABLE_NAME, <span class=\"literal\">null</span>, values);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">delete</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            db.delete(DBHelper.TABLE_NAME, <span class=\"string\">&quot;account = ?&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;user.account&#125;);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUserList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Cursor</span> <span class=\"variable\">cursor</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getReadableDatabase();</span><br><span class=\"line\">            cursor = db.query(DBHelper.TABLE_NAME,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;account&quot;</span>, <span class=\"string\">&quot;userName&quot;</span>&#125;,</span><br><span class=\"line\">                    <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cursor.getCount() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                List&lt;User&gt; userList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">                    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;account&quot;</span>)), cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;userName&quot;</span>)));</span><br><span class=\"line\">                    userList.add(user);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != cursor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cursor.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Android 之 Fragment","date":"2018-07-23T07:56:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n### 产生原因\n\nAndroid 在 Android 3.0（API 级别 11）中引入了 Fragment（**片段**），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。\n\n\n### 简述\n\nFragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。\n\n每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .\n\n当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 `Activity 管理的返回栈` — **Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录**。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。\n\n\n### 创建Fragment\n\n要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。\n\n- DialogFragment\n\n  显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。\n\n- ListFragment\n\n  显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。\n\n- PreferenceFragment\n\n  以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。\n\n\n#### 添加用户界面\n\nFragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。\n\n> 如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。\n\n#### 创建布局\n\n```Java\npublic static class ExampleFragment extends Fragment {\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.example_fragment, container, false);\n    }\n}\n```\n\n传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .\n\ninflate() 方法带有三个参数：\n\n- 您想要扩展的布局的资源 ID\n- 将作为扩展布局父项的 ViewGroup\n- 指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）\n\n#### 向Activity添加片段\n\n##### 在Activity的布局文件内声明Fragment\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\">\n\n    <fragment\n        android:id=\"@+id/list\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleListFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n    <fragment\n        android:id=\"@+id/detail\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleDetailFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"2\" />\n</LinearLayout>\n```\n\n- <fragment\\> 中的 android:name 属性指定要在布局中实例化的 Fragment 类。\n- 当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 <fragment\\> 元素。\n\n> 每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。\n\n**可以通过三种方式为 Fragment 提供唯一的标识符：**\n\n- 为 android:id 属性提供唯一 ID\n- 为 android:tag 属性提供唯一字符串\n- 如果未给以上两个属性提供值，系统会使用容器视图的 ID\n\n##### 或者通过编程方式将Fragment添加到某个现有ViewGroup\n\n```Java\nFragmentManager fragmentManager = getFragmentManager();\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nArticleListFragment fragment = new ArticleListFragment();\nfragmentTransaction.add(R.id.fragment_container, fragment);\nfragmentTransaction.commit();\n```\n\n可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。\n\n##### 添加没有UI的Fragment\n\n还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 `add (Fragment fragment,  String tag)` 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 `findFragmentByTag()` . 由于它并不与 Activity 布局中的视图关联，因此**不会收到对 onCreateView() 的调用**。因此，不需要实现该方法。\n\n将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 <sdk_root>/APIDemos/app/src/main/java/com/example/android/apis/app/FragmentRetainInstance.java 形式位于您的系统中。\n\n### 管理Fragment\n\n要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：\n\n- 通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .\n- 通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。\n- 通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。\n\n### 管理Fragment回退栈\n\n- 跟踪回退栈状态\n\n  ```Java\n  public class MyClass implements FragmentManager.OnBackStackChangedListener\n    \n    @Override\n    public void onBackStackChanged() {\n    \n    }\n    // ...\n    // 添加回退栈监听接口\n    getSupportFragmentManager().addOnBackStackChangedListener(this);\n    // ...\n  }\n  ```\n\n- 管理回退栈\n\n  - FragmentTransaction.addToBackStack(String) // 将一个刚刚添加的 Fragment 加入到回退栈中\n  - getSupportFragmentManager().getBackStackEntryCount() // 获取回退栈中实体数量\n  - getSupportFragmentManager().popBackStack(String name, int flags) // 根据 name 立刻弹出栈顶的 Fragment\n  - getSupportFragmentManager().popBackStack(int id, int flags) // 根据 id 立刻弹出栈顶的 Fragment\n\n### Fragment常用的API\n\n- android.support.v4.app.Fragment 主要用于定义 Fragment\n- android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment\n- android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性\n- 主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）\n\n  ```Java\n  getFragmentManager() // Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替\n  ```\n- FragmentTransaction 的一些操作方法\n\n### 执行Fragment事务\n\n在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以**将每个事务**保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。\n\n```Java\n\nFragment newFragment = new ArticleListFragment();\nFragmentTransaction transaction = getFragmentManager().beginTransaction();\n\n// 往 Activity 中添加一个 Fragment\ntransaction.add();\n\n// 从 Activity 中移除一个 Fragment\ntransaction.remove();\n\n// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体\ntransaction.replace();\n\n// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁\ntransaction.hide();\n\n// 显示之前隐藏的 Fragment\ntransaction.show();\n\n// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment\ntransaction.addToBackStack(null);\n\ntransaction.commit(); //提交一个事务\n```\n\n**说明**\n\n- 每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .\n- 调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。\n- 如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。\n- 如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。\n- 如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。\n- 对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。\n- 调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。\n- 只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .\n\n\n### Fragment生命周期\n\n**1、Fragment必须依存于Activity**\n\n![](https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle_0.png) \n\n**2、Fragment依附于Activity的生命状态**\n\n![](https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle.png)\n\n**3、Fragment生命周期回调方法含义**\n\n- public void onAttach(Context context)\n\n  在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。\n\n- public void onCreate(Bundle savedInstanceState)\n\n  onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。\n\n- public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)\n\n  在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 <fragment\\> 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。\n\n- public void onViewCreated(View view,Bundle savedInstanceState)\n\n  创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。\n\n- public void onActivityCreated(Bundle savedInstanceState)\n\n  该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。\n\n- public void onStart()\n\n  调用该方法时，Fragment 已经可见了，但还无法与用户交互。\n\n- public void onResume()\n\n  调用该方法时，Fragment 已经可以与用户交互了。\n\n- public void onPause()\n\n  Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。\n\n- public void onStop()\n  \n  Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。\n\n- public void onDestoryView()\n\n  移除在 onCreateView 方法中创建的 View 时调用。\n\n- public void onDestroy()\n\n  做一些最后清理 Fragment 的状态。\n\n- public void onDetach()\n\n  取消 Fragment 与 Activity 的关联时调用。\n\n### 与Activity通信\n\nFragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。\n\n```Java\nView listView = getActivity().findViewById(R.id.list);\n```\n\nActivity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。\n\n```Java\nExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);\n```\n\n> Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。\n\n**创建对 Activity 的事件回调**\n\n在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。\n\n例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。\n\n```Java\npublic static class FragmentA extends ListFragment {\n\n    OnArticleSelectedListener mListener;\n    ...\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        try {\n            mListener = (OnArticleSelectedListener) activity;\n        } catch (ClassCastException e) {\n            throw new ClassCastException(activity.toString() + \" must implement OnArticleSelectedListener\");\n        }\n    }\n    ...\n\n    // Container Activity must implement this interface\n    public interface OnArticleSelectedListener {\n        public void onArticleSelected(Uri articleUri);\n    }\n    ...\n}\n```\n\n宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .\n\n实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。\n\n### Fragment状态的持久化\n\n由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。\n\n1. 通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。\n\n2. 让 Android 自动帮我们保存 Fragment 状态。\n\n   在 Activity 中保存 Fragment 的方法：**FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)** ; 在 Activity 中获取所保存的 Fragment 的方法：**FragmentManager.getFragment(Bundle bundle, String key)** .\n\n   这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。\n\n以下为状态持久化的事例代码：\n\n**Activity 代码**\n\n```Java\n     FragmentA fragmentA;\n\n     @Override\n     protected void onCreate(@Nullable Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.fragment_activity);\n\n         if( savedInstanceState != null ){\n             fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,\"fragmentA\");\n         }\n         ...\n     }\n\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         if( fragmentA != null ){\n             getSupportFragmentManager().putFragment(outState,\"fragmentA\",fragmentA);\n         }\n\n         super.onSaveInstanceState(outState);\n     }\n```\n\n**FragmentA 代码**\n\n```Java\n     @Nullable\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         if ( null != savedInstanceState ){\n             String savedString = savedInstanceState.getString(\"string\");\n         }\n         View root = inflater.inflate(R.layout.fragment_a,null);\n         return root;\n     }\n\n \t@Override\n     public void onSaveInstanceState(Bundle outState) {\n         outState.putString(\"string\",\"anAngryAnt\");\n         super.onSaveInstanceState(outState);\n     }\n```\n\n\n\n\n**参考资料**\n\n- [Android Developers](https://developer.android.com/guide/components/fragments)\n- [LearningNotes](https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md)\n\n\n\n\n\n","source":"_posts/Android-之-Fragment.md","raw":"---\ntitle: Android 之 Fragment\ndate: 2018-07-23 15:56:00\ncategories: \"Android\"\ntags:\n     - Android\n     - Fragment\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n### 产生原因\n\nAndroid 在 Android 3.0（API 级别 11）中引入了 Fragment（**片段**），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。\n\n\n### 简述\n\nFragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。\n\n每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .\n\n当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 `Activity 管理的返回栈` — **Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录**。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。\n\n\n### 创建Fragment\n\n要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。\n\n- DialogFragment\n\n  显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。\n\n- ListFragment\n\n  显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。\n\n- PreferenceFragment\n\n  以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。\n\n\n#### 添加用户界面\n\nFragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。\n\n> 如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。\n\n#### 创建布局\n\n```Java\npublic static class ExampleFragment extends Fragment {\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.example_fragment, container, false);\n    }\n}\n```\n\n传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .\n\ninflate() 方法带有三个参数：\n\n- 您想要扩展的布局的资源 ID\n- 将作为扩展布局父项的 ViewGroup\n- 指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）\n\n#### 向Activity添加片段\n\n##### 在Activity的布局文件内声明Fragment\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\">\n\n    <fragment\n        android:id=\"@+id/list\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleListFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n    <fragment\n        android:id=\"@+id/detail\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleDetailFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"2\" />\n</LinearLayout>\n```\n\n- <fragment\\> 中的 android:name 属性指定要在布局中实例化的 Fragment 类。\n- 当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 <fragment\\> 元素。\n\n> 每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。\n\n**可以通过三种方式为 Fragment 提供唯一的标识符：**\n\n- 为 android:id 属性提供唯一 ID\n- 为 android:tag 属性提供唯一字符串\n- 如果未给以上两个属性提供值，系统会使用容器视图的 ID\n\n##### 或者通过编程方式将Fragment添加到某个现有ViewGroup\n\n```Java\nFragmentManager fragmentManager = getFragmentManager();\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nArticleListFragment fragment = new ArticleListFragment();\nfragmentTransaction.add(R.id.fragment_container, fragment);\nfragmentTransaction.commit();\n```\n\n可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。\n\n##### 添加没有UI的Fragment\n\n还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 `add (Fragment fragment,  String tag)` 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 `findFragmentByTag()` . 由于它并不与 Activity 布局中的视图关联，因此**不会收到对 onCreateView() 的调用**。因此，不需要实现该方法。\n\n将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 <sdk_root>/APIDemos/app/src/main/java/com/example/android/apis/app/FragmentRetainInstance.java 形式位于您的系统中。\n\n### 管理Fragment\n\n要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：\n\n- 通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .\n- 通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。\n- 通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。\n\n### 管理Fragment回退栈\n\n- 跟踪回退栈状态\n\n  ```Java\n  public class MyClass implements FragmentManager.OnBackStackChangedListener\n    \n    @Override\n    public void onBackStackChanged() {\n    \n    }\n    // ...\n    // 添加回退栈监听接口\n    getSupportFragmentManager().addOnBackStackChangedListener(this);\n    // ...\n  }\n  ```\n\n- 管理回退栈\n\n  - FragmentTransaction.addToBackStack(String) // 将一个刚刚添加的 Fragment 加入到回退栈中\n  - getSupportFragmentManager().getBackStackEntryCount() // 获取回退栈中实体数量\n  - getSupportFragmentManager().popBackStack(String name, int flags) // 根据 name 立刻弹出栈顶的 Fragment\n  - getSupportFragmentManager().popBackStack(int id, int flags) // 根据 id 立刻弹出栈顶的 Fragment\n\n### Fragment常用的API\n\n- android.support.v4.app.Fragment 主要用于定义 Fragment\n- android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment\n- android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性\n- 主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）\n\n  ```Java\n  getFragmentManager() // Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替\n  ```\n- FragmentTransaction 的一些操作方法\n\n### 执行Fragment事务\n\n在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以**将每个事务**保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。\n\n```Java\n\nFragment newFragment = new ArticleListFragment();\nFragmentTransaction transaction = getFragmentManager().beginTransaction();\n\n// 往 Activity 中添加一个 Fragment\ntransaction.add();\n\n// 从 Activity 中移除一个 Fragment\ntransaction.remove();\n\n// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体\ntransaction.replace();\n\n// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁\ntransaction.hide();\n\n// 显示之前隐藏的 Fragment\ntransaction.show();\n\n// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment\ntransaction.addToBackStack(null);\n\ntransaction.commit(); //提交一个事务\n```\n\n**说明**\n\n- 每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .\n- 调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。\n- 如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。\n- 如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。\n- 如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。\n- 对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。\n- 调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。\n- 只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .\n\n\n### Fragment生命周期\n\n**1、Fragment必须依存于Activity**\n\n![](https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle_0.png) \n\n**2、Fragment依附于Activity的生命状态**\n\n![](https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle.png)\n\n**3、Fragment生命周期回调方法含义**\n\n- public void onAttach(Context context)\n\n  在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。\n\n- public void onCreate(Bundle savedInstanceState)\n\n  onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。\n\n- public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)\n\n  在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 <fragment\\> 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。\n\n- public void onViewCreated(View view,Bundle savedInstanceState)\n\n  创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。\n\n- public void onActivityCreated(Bundle savedInstanceState)\n\n  该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。\n\n- public void onStart()\n\n  调用该方法时，Fragment 已经可见了，但还无法与用户交互。\n\n- public void onResume()\n\n  调用该方法时，Fragment 已经可以与用户交互了。\n\n- public void onPause()\n\n  Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。\n\n- public void onStop()\n  \n  Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。\n\n- public void onDestoryView()\n\n  移除在 onCreateView 方法中创建的 View 时调用。\n\n- public void onDestroy()\n\n  做一些最后清理 Fragment 的状态。\n\n- public void onDetach()\n\n  取消 Fragment 与 Activity 的关联时调用。\n\n### 与Activity通信\n\nFragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。\n\n```Java\nView listView = getActivity().findViewById(R.id.list);\n```\n\nActivity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。\n\n```Java\nExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);\n```\n\n> Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。\n\n**创建对 Activity 的事件回调**\n\n在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。\n\n例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。\n\n```Java\npublic static class FragmentA extends ListFragment {\n\n    OnArticleSelectedListener mListener;\n    ...\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        try {\n            mListener = (OnArticleSelectedListener) activity;\n        } catch (ClassCastException e) {\n            throw new ClassCastException(activity.toString() + \" must implement OnArticleSelectedListener\");\n        }\n    }\n    ...\n\n    // Container Activity must implement this interface\n    public interface OnArticleSelectedListener {\n        public void onArticleSelected(Uri articleUri);\n    }\n    ...\n}\n```\n\n宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .\n\n实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。\n\n### Fragment状态的持久化\n\n由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。\n\n1. 通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。\n\n2. 让 Android 自动帮我们保存 Fragment 状态。\n\n   在 Activity 中保存 Fragment 的方法：**FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)** ; 在 Activity 中获取所保存的 Fragment 的方法：**FragmentManager.getFragment(Bundle bundle, String key)** .\n\n   这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。\n\n以下为状态持久化的事例代码：\n\n**Activity 代码**\n\n```Java\n     FragmentA fragmentA;\n\n     @Override\n     protected void onCreate(@Nullable Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.fragment_activity);\n\n         if( savedInstanceState != null ){\n             fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,\"fragmentA\");\n         }\n         ...\n     }\n\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         if( fragmentA != null ){\n             getSupportFragmentManager().putFragment(outState,\"fragmentA\",fragmentA);\n         }\n\n         super.onSaveInstanceState(outState);\n     }\n```\n\n**FragmentA 代码**\n\n```Java\n     @Nullable\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         if ( null != savedInstanceState ){\n             String savedString = savedInstanceState.getString(\"string\");\n         }\n         View root = inflater.inflate(R.layout.fragment_a,null);\n         return root;\n     }\n\n \t@Override\n     public void onSaveInstanceState(Bundle outState) {\n         outState.putString(\"string\",\"anAngryAnt\");\n         super.onSaveInstanceState(outState);\n     }\n```\n\n\n\n\n**参考资料**\n\n- [Android Developers](https://developer.android.com/guide/components/fragments)\n- [LearningNotes](https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md)\n\n\n\n\n\n","slug":"Android-之-Fragment","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcv000cnctth5d45xtn","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h3><p>Android 在 Android 3.0（API 级别 11）中引入了 Fragment（<strong>片段</strong>），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。</p>\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>Fragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。</p>\n<p>每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .</p>\n<p>当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 <code>Activity 管理的返回栈</code> — <strong>Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录</strong>。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。</p>\n<h3 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h3><p>要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。</p>\n<ul>\n<li><p>DialogFragment</p>\n<p>显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。</p>\n</li>\n<li><p>ListFragment</p>\n<p>显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。</p>\n</li>\n<li><p>PreferenceFragment</p>\n<p>以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。</p>\n</li>\n</ul>\n<h4 id=\"添加用户界面\"><a href=\"#添加用户界面\" class=\"headerlink\" title=\"添加用户界面\"></a>添加用户界面</h4><p>Fragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。</p>\n<blockquote>\n<p>如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。</p>\n</blockquote>\n<h4 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.example_fragment, container, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .</p>\n<p>inflate() 方法带有三个参数：</p>\n<ul>\n<li>您想要扩展的布局的资源 ID</li>\n<li>将作为扩展布局父项的 ViewGroup</li>\n<li>指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）</li>\n</ul>\n<h4 id=\"向Activity添加片段\"><a href=\"#向Activity添加片段\" class=\"headerlink\" title=\"向Activity添加片段\"></a>向Activity添加片段</h4><h5 id=\"在Activity的布局文件内声明Fragment\"><a href=\"#在Activity的布局文件内声明Fragment\" class=\"headerlink\" title=\"在Activity的布局文件内声明Fragment\"></a>在Activity的布局文件内声明Fragment</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/list&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;com.zch.learnbase.modules.fragment.ArticleListFragment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/detail&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;com.zch.learnbase.modules.fragment.ArticleDetailFragment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;2&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>&lt;fragment&gt; 中的 android:name 属性指定要在布局中实例化的 Fragment 类。</li>\n<li>当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 &lt;fragment&gt; 元素。</li>\n</ul>\n<blockquote>\n<p>每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。</p>\n</blockquote>\n<p><strong>可以通过三种方式为 Fragment 提供唯一的标识符：</strong></p>\n<ul>\n<li>为 android:id 属性提供唯一 ID</li>\n<li>为 android:tag 属性提供唯一字符串</li>\n<li>如果未给以上两个属性提供值，系统会使用容器视图的 ID</li>\n</ul>\n<h5 id=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"><a href=\"#或者通过编程方式将Fragment添加到某个现有ViewGroup\" class=\"headerlink\" title=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"></a>或者通过编程方式将Fragment添加到某个现有ViewGroup</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">FragmentManager</span> <span class=\"variable\">fragmentManager</span> <span class=\"operator\">=</span> getFragmentManager();</span><br><span class=\"line\"><span class=\"type\">FragmentTransaction</span> <span class=\"variable\">fragmentTransaction</span> <span class=\"operator\">=</span> fragmentManager.beginTransaction();</span><br><span class=\"line\"><span class=\"type\">ArticleListFragment</span> <span class=\"variable\">fragment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArticleListFragment</span>();</span><br><span class=\"line\">fragmentTransaction.add(R.id.fragment_container, fragment);</span><br><span class=\"line\">fragmentTransaction.commit();</span><br></pre></td></tr></table></figure>\n\n<p>可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。</p>\n<h5 id=\"添加没有UI的Fragment\"><a href=\"#添加没有UI的Fragment\" class=\"headerlink\" title=\"添加没有UI的Fragment\"></a>添加没有UI的Fragment</h5><p>还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 <code>add (Fragment fragment,  String tag)</code> 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 <code>findFragmentByTag()</code> . 由于它并不与 Activity 布局中的视图关联，因此<strong>不会收到对 onCreateView() 的调用</strong>。因此，不需要实现该方法。</p>\n<p>将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 <sdk_root>&#x2F;APIDemos&#x2F;app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;android&#x2F;apis&#x2F;app&#x2F;FragmentRetainInstance.java 形式位于您的系统中。</p>\n<h3 id=\"管理Fragment\"><a href=\"#管理Fragment\" class=\"headerlink\" title=\"管理Fragment\"></a>管理Fragment</h3><p>要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：</p>\n<ul>\n<li>通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .</li>\n<li>通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。</li>\n<li>通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。</li>\n</ul>\n<h3 id=\"管理Fragment回退栈\"><a href=\"#管理Fragment回退栈\" class=\"headerlink\" title=\"管理Fragment回退栈\"></a>管理Fragment回退栈</h3><ul>\n<li><p>跟踪回退栈状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FragmentManager</span>.OnBackStackChangedListener</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBackStackChanged</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 添加回退栈监听接口</span></span><br><span class=\"line\">  getSupportFragmentManager().addOnBackStackChangedListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管理回退栈</p>\n<ul>\n<li>FragmentTransaction.addToBackStack(String) &#x2F;&#x2F; 将一个刚刚添加的 Fragment 加入到回退栈中</li>\n<li>getSupportFragmentManager().getBackStackEntryCount() &#x2F;&#x2F; 获取回退栈中实体数量</li>\n<li>getSupportFragmentManager().popBackStack(String name, int flags) &#x2F;&#x2F; 根据 name 立刻弹出栈顶的 Fragment</li>\n<li>getSupportFragmentManager().popBackStack(int id, int flags) &#x2F;&#x2F; 根据 id 立刻弹出栈顶的 Fragment</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Fragment常用的API\"><a href=\"#Fragment常用的API\" class=\"headerlink\" title=\"Fragment常用的API\"></a>Fragment常用的API</h3><ul>\n<li><p>android.support.v4.app.Fragment 主要用于定义 Fragment</p>\n</li>\n<li><p>android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment</p>\n</li>\n<li><p>android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性</p>\n</li>\n<li><p>主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getFragmentManager() <span class=\"comment\">// Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替</span></span><br></pre></td></tr></table></figure></li>\n<li><p>FragmentTransaction 的一些操作方法</p>\n</li>\n</ul>\n<h3 id=\"执行Fragment事务\"><a href=\"#执行Fragment事务\" class=\"headerlink\" title=\"执行Fragment事务\"></a>执行Fragment事务</h3><p>在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以<strong>将每个事务</strong>保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Fragment</span> <span class=\"variable\">newFragment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArticleListFragment</span>();</span><br><span class=\"line\"><span class=\"type\">FragmentTransaction</span> <span class=\"variable\">transaction</span> <span class=\"operator\">=</span> getFragmentManager().beginTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 往 Activity 中添加一个 Fragment</span></span><br><span class=\"line\">transaction.add();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 Activity 中移除一个 Fragment</span></span><br><span class=\"line\">transaction.remove();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体</span></span><br><span class=\"line\">transaction.replace();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁</span></span><br><span class=\"line\">transaction.hide();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示之前隐藏的 Fragment</span></span><br><span class=\"line\">transaction.show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment</span></span><br><span class=\"line\">transaction.addToBackStack(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">transaction.commit(); <span class=\"comment\">//提交一个事务</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<ul>\n<li>每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .</li>\n<li>调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。</li>\n<li>如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。</li>\n<li>如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。</li>\n<li>如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。</li>\n<li>对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。</li>\n<li>调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。</li>\n<li>只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .</li>\n</ul>\n<h3 id=\"Fragment生命周期\"><a href=\"#Fragment生命周期\" class=\"headerlink\" title=\"Fragment生命周期\"></a>Fragment生命周期</h3><p><strong>1、Fragment必须依存于Activity</strong></p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle_0.png\"> </p>\n<p><strong>2、Fragment依附于Activity的生命状态</strong></p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle.png\"></p>\n<p><strong>3、Fragment生命周期回调方法含义</strong></p>\n<ul>\n<li><p>public void onAttach(Context context)</p>\n<p>在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。</p>\n</li>\n<li><p>public void onCreate(Bundle savedInstanceState)</p>\n<p>onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。</p>\n</li>\n<li><p>public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)</p>\n<p>在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 &lt;fragment&gt; 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。</p>\n</li>\n<li><p>public void onViewCreated(View view,Bundle savedInstanceState)</p>\n<p>创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。</p>\n</li>\n<li><p>public void onActivityCreated(Bundle savedInstanceState)</p>\n<p>该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。</p>\n</li>\n<li><p>public void onStart()</p>\n<p>调用该方法时，Fragment 已经可见了，但还无法与用户交互。</p>\n</li>\n<li><p>public void onResume()</p>\n<p>调用该方法时，Fragment 已经可以与用户交互了。</p>\n</li>\n<li><p>public void onPause()</p>\n<p>Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。</p>\n</li>\n<li><p>public void onStop()</p>\n<p>Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。</p>\n</li>\n<li><p>public void onDestoryView()</p>\n<p>移除在 onCreateView 方法中创建的 View 时调用。</p>\n</li>\n<li><p>public void onDestroy()</p>\n<p>做一些最后清理 Fragment 的状态。</p>\n</li>\n<li><p>public void onDetach()</p>\n<p>取消 Fragment 与 Activity 的关联时调用。</p>\n</li>\n</ul>\n<h3 id=\"与Activity通信\"><a href=\"#与Activity通信\" class=\"headerlink\" title=\"与Activity通信\"></a>与Activity通信</h3><p>Fragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">View</span> <span class=\"variable\">listView</span> <span class=\"operator\">=</span> getActivity().findViewById(R.id.list);</span><br></pre></td></tr></table></figure>\n\n<p>Activity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExampleFragment</span> <span class=\"variable\">fragment</span> <span class=\"operator\">=</span> (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。</p>\n</blockquote>\n<p><strong>创建对 Activity 的事件回调</strong></p>\n<p>在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。</p>\n<p>例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FragmentA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ListFragment</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    OnArticleSelectedListener mListener;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAttach</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onAttach(activity);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mListener = (OnArticleSelectedListener) activity;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassCastException</span>(activity.toString() + <span class=\"string\">&quot; must implement OnArticleSelectedListener&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Container Activity must implement this interface</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnArticleSelectedListener</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onArticleSelected</span><span class=\"params\">(Uri articleUri)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .</p>\n<p>实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。</p>\n<h3 id=\"Fragment状态的持久化\"><a href=\"#Fragment状态的持久化\" class=\"headerlink\" title=\"Fragment状态的持久化\"></a>Fragment状态的持久化</h3><p>由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。</p>\n<ol>\n<li><p>通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。</p>\n</li>\n<li><p>让 Android 自动帮我们保存 Fragment 状态。</p>\n<p>在 Activity 中保存 Fragment 的方法：<strong>FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)</strong> ; 在 Activity 中获取所保存的 Fragment 的方法：<strong>FragmentManager.getFragment(Bundle bundle, String key)</strong> .</p>\n<p>这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。</p>\n</li>\n</ol>\n<p>以下为状态持久化的事例代码：</p>\n<p><strong>Activity 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentA fragmentA;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.fragment_activity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( savedInstanceState != <span class=\"literal\">null</span> )&#123;</span><br><span class=\"line\">        fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,<span class=\"string\">&quot;fragmentA&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( fragmentA != <span class=\"literal\">null</span> )&#123;</span><br><span class=\"line\">        getSupportFragmentManager().putFragment(outState,<span class=\"string\">&quot;fragmentA&quot;</span>,fragmentA);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FragmentA 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( <span class=\"literal\">null</span> != savedInstanceState )&#123;</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">savedString</span> <span class=\"operator\">=</span> savedInstanceState.getString(<span class=\"string\">&quot;string&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">View</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> inflater.inflate(R.layout.fragment_a,<span class=\"literal\">null</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> &#123;</span><br><span class=\"line\">       outState.putString(<span class=\"string\">&quot;string&quot;</span>,<span class=\"string\">&quot;anAngryAnt&quot;</span>);</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>参考资料</strong></p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/fragments\">Android Developers</a></li>\n<li><a href=\"https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md\">LearningNotes</a></li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h3><p>Android 在 Android 3.0（API 级别 11）中引入了 Fragment（<strong>片段</strong>），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。</p>\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>Fragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。</p>\n<p>每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .</p>\n<p>当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 <code>Activity 管理的返回栈</code> — <strong>Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录</strong>。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。</p>\n<h3 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h3><p>要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。</p>\n<ul>\n<li><p>DialogFragment</p>\n<p>显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。</p>\n</li>\n<li><p>ListFragment</p>\n<p>显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。</p>\n</li>\n<li><p>PreferenceFragment</p>\n<p>以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。</p>\n</li>\n</ul>\n<h4 id=\"添加用户界面\"><a href=\"#添加用户界面\" class=\"headerlink\" title=\"添加用户界面\"></a>添加用户界面</h4><p>Fragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。</p>\n<blockquote>\n<p>如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。</p>\n</blockquote>\n<h4 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.example_fragment, container, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .</p>\n<p>inflate() 方法带有三个参数：</p>\n<ul>\n<li>您想要扩展的布局的资源 ID</li>\n<li>将作为扩展布局父项的 ViewGroup</li>\n<li>指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）</li>\n</ul>\n<h4 id=\"向Activity添加片段\"><a href=\"#向Activity添加片段\" class=\"headerlink\" title=\"向Activity添加片段\"></a>向Activity添加片段</h4><h5 id=\"在Activity的布局文件内声明Fragment\"><a href=\"#在Activity的布局文件内声明Fragment\" class=\"headerlink\" title=\"在Activity的布局文件内声明Fragment\"></a>在Activity的布局文件内声明Fragment</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/list&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;com.zch.learnbase.modules.fragment.ArticleListFragment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/detail&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;com.zch.learnbase.modules.fragment.ArticleDetailFragment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;2&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>&lt;fragment&gt; 中的 android:name 属性指定要在布局中实例化的 Fragment 类。</li>\n<li>当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 &lt;fragment&gt; 元素。</li>\n</ul>\n<blockquote>\n<p>每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。</p>\n</blockquote>\n<p><strong>可以通过三种方式为 Fragment 提供唯一的标识符：</strong></p>\n<ul>\n<li>为 android:id 属性提供唯一 ID</li>\n<li>为 android:tag 属性提供唯一字符串</li>\n<li>如果未给以上两个属性提供值，系统会使用容器视图的 ID</li>\n</ul>\n<h5 id=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"><a href=\"#或者通过编程方式将Fragment添加到某个现有ViewGroup\" class=\"headerlink\" title=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"></a>或者通过编程方式将Fragment添加到某个现有ViewGroup</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">FragmentManager</span> <span class=\"variable\">fragmentManager</span> <span class=\"operator\">=</span> getFragmentManager();</span><br><span class=\"line\"><span class=\"type\">FragmentTransaction</span> <span class=\"variable\">fragmentTransaction</span> <span class=\"operator\">=</span> fragmentManager.beginTransaction();</span><br><span class=\"line\"><span class=\"type\">ArticleListFragment</span> <span class=\"variable\">fragment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArticleListFragment</span>();</span><br><span class=\"line\">fragmentTransaction.add(R.id.fragment_container, fragment);</span><br><span class=\"line\">fragmentTransaction.commit();</span><br></pre></td></tr></table></figure>\n\n<p>可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。</p>\n<h5 id=\"添加没有UI的Fragment\"><a href=\"#添加没有UI的Fragment\" class=\"headerlink\" title=\"添加没有UI的Fragment\"></a>添加没有UI的Fragment</h5><p>还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 <code>add (Fragment fragment,  String tag)</code> 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 <code>findFragmentByTag()</code> . 由于它并不与 Activity 布局中的视图关联，因此<strong>不会收到对 onCreateView() 的调用</strong>。因此，不需要实现该方法。</p>\n<p>将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 <sdk_root>&#x2F;APIDemos&#x2F;app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;android&#x2F;apis&#x2F;app&#x2F;FragmentRetainInstance.java 形式位于您的系统中。</p>\n<h3 id=\"管理Fragment\"><a href=\"#管理Fragment\" class=\"headerlink\" title=\"管理Fragment\"></a>管理Fragment</h3><p>要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：</p>\n<ul>\n<li>通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .</li>\n<li>通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。</li>\n<li>通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。</li>\n</ul>\n<h3 id=\"管理Fragment回退栈\"><a href=\"#管理Fragment回退栈\" class=\"headerlink\" title=\"管理Fragment回退栈\"></a>管理Fragment回退栈</h3><ul>\n<li><p>跟踪回退栈状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FragmentManager</span>.OnBackStackChangedListener</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBackStackChanged</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 添加回退栈监听接口</span></span><br><span class=\"line\">  getSupportFragmentManager().addOnBackStackChangedListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管理回退栈</p>\n<ul>\n<li>FragmentTransaction.addToBackStack(String) &#x2F;&#x2F; 将一个刚刚添加的 Fragment 加入到回退栈中</li>\n<li>getSupportFragmentManager().getBackStackEntryCount() &#x2F;&#x2F; 获取回退栈中实体数量</li>\n<li>getSupportFragmentManager().popBackStack(String name, int flags) &#x2F;&#x2F; 根据 name 立刻弹出栈顶的 Fragment</li>\n<li>getSupportFragmentManager().popBackStack(int id, int flags) &#x2F;&#x2F; 根据 id 立刻弹出栈顶的 Fragment</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Fragment常用的API\"><a href=\"#Fragment常用的API\" class=\"headerlink\" title=\"Fragment常用的API\"></a>Fragment常用的API</h3><ul>\n<li><p>android.support.v4.app.Fragment 主要用于定义 Fragment</p>\n</li>\n<li><p>android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment</p>\n</li>\n<li><p>android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性</p>\n</li>\n<li><p>主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getFragmentManager() <span class=\"comment\">// Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替</span></span><br></pre></td></tr></table></figure></li>\n<li><p>FragmentTransaction 的一些操作方法</p>\n</li>\n</ul>\n<h3 id=\"执行Fragment事务\"><a href=\"#执行Fragment事务\" class=\"headerlink\" title=\"执行Fragment事务\"></a>执行Fragment事务</h3><p>在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以<strong>将每个事务</strong>保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Fragment</span> <span class=\"variable\">newFragment</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArticleListFragment</span>();</span><br><span class=\"line\"><span class=\"type\">FragmentTransaction</span> <span class=\"variable\">transaction</span> <span class=\"operator\">=</span> getFragmentManager().beginTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 往 Activity 中添加一个 Fragment</span></span><br><span class=\"line\">transaction.add();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 Activity 中移除一个 Fragment</span></span><br><span class=\"line\">transaction.remove();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体</span></span><br><span class=\"line\">transaction.replace();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁</span></span><br><span class=\"line\">transaction.hide();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示之前隐藏的 Fragment</span></span><br><span class=\"line\">transaction.show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment</span></span><br><span class=\"line\">transaction.addToBackStack(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">transaction.commit(); <span class=\"comment\">//提交一个事务</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<ul>\n<li>每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .</li>\n<li>调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。</li>\n<li>如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。</li>\n<li>如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。</li>\n<li>如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。</li>\n<li>对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。</li>\n<li>调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。</li>\n<li>只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .</li>\n</ul>\n<h3 id=\"Fragment生命周期\"><a href=\"#Fragment生命周期\" class=\"headerlink\" title=\"Fragment生命周期\"></a>Fragment生命周期</h3><p><strong>1、Fragment必须依存于Activity</strong></p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle_0.png\"> </p>\n<p><strong>2、Fragment依附于Activity的生命状态</strong></p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/activity_fragment_lifecycle.png\"></p>\n<p><strong>3、Fragment生命周期回调方法含义</strong></p>\n<ul>\n<li><p>public void onAttach(Context context)</p>\n<p>在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。</p>\n</li>\n<li><p>public void onCreate(Bundle savedInstanceState)</p>\n<p>onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。</p>\n</li>\n<li><p>public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)</p>\n<p>在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 &lt;fragment&gt; 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。</p>\n</li>\n<li><p>public void onViewCreated(View view,Bundle savedInstanceState)</p>\n<p>创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。</p>\n</li>\n<li><p>public void onActivityCreated(Bundle savedInstanceState)</p>\n<p>该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。</p>\n</li>\n<li><p>public void onStart()</p>\n<p>调用该方法时，Fragment 已经可见了，但还无法与用户交互。</p>\n</li>\n<li><p>public void onResume()</p>\n<p>调用该方法时，Fragment 已经可以与用户交互了。</p>\n</li>\n<li><p>public void onPause()</p>\n<p>Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。</p>\n</li>\n<li><p>public void onStop()</p>\n<p>Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。</p>\n</li>\n<li><p>public void onDestoryView()</p>\n<p>移除在 onCreateView 方法中创建的 View 时调用。</p>\n</li>\n<li><p>public void onDestroy()</p>\n<p>做一些最后清理 Fragment 的状态。</p>\n</li>\n<li><p>public void onDetach()</p>\n<p>取消 Fragment 与 Activity 的关联时调用。</p>\n</li>\n</ul>\n<h3 id=\"与Activity通信\"><a href=\"#与Activity通信\" class=\"headerlink\" title=\"与Activity通信\"></a>与Activity通信</h3><p>Fragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">View</span> <span class=\"variable\">listView</span> <span class=\"operator\">=</span> getActivity().findViewById(R.id.list);</span><br></pre></td></tr></table></figure>\n\n<p>Activity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExampleFragment</span> <span class=\"variable\">fragment</span> <span class=\"operator\">=</span> (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。</p>\n</blockquote>\n<p><strong>创建对 Activity 的事件回调</strong></p>\n<p>在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。</p>\n<p>例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FragmentA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ListFragment</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    OnArticleSelectedListener mListener;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAttach</span><span class=\"params\">(Activity activity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onAttach(activity);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mListener = (OnArticleSelectedListener) activity;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassCastException</span>(activity.toString() + <span class=\"string\">&quot; must implement OnArticleSelectedListener&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Container Activity must implement this interface</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnArticleSelectedListener</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onArticleSelected</span><span class=\"params\">(Uri articleUri)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .</p>\n<p>实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。</p>\n<h3 id=\"Fragment状态的持久化\"><a href=\"#Fragment状态的持久化\" class=\"headerlink\" title=\"Fragment状态的持久化\"></a>Fragment状态的持久化</h3><p>由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。</p>\n<ol>\n<li><p>通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。</p>\n</li>\n<li><p>让 Android 自动帮我们保存 Fragment 状态。</p>\n<p>在 Activity 中保存 Fragment 的方法：<strong>FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)</strong> ; 在 Activity 中获取所保存的 Fragment 的方法：<strong>FragmentManager.getFragment(Bundle bundle, String key)</strong> .</p>\n<p>这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。</p>\n</li>\n</ol>\n<p>以下为状态持久化的事例代码：</p>\n<p><strong>Activity 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentA fragmentA;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.fragment_activity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( savedInstanceState != <span class=\"literal\">null</span> )&#123;</span><br><span class=\"line\">        fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,<span class=\"string\">&quot;fragmentA&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( fragmentA != <span class=\"literal\">null</span> )&#123;</span><br><span class=\"line\">        getSupportFragmentManager().putFragment(outState,<span class=\"string\">&quot;fragmentA&quot;</span>,fragmentA);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FragmentA 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( <span class=\"literal\">null</span> != savedInstanceState )&#123;</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">savedString</span> <span class=\"operator\">=</span> savedInstanceState.getString(<span class=\"string\">&quot;string&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">View</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> inflater.inflate(R.layout.fragment_a,<span class=\"literal\">null</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> &#123;</span><br><span class=\"line\">       outState.putString(<span class=\"string\">&quot;string&quot;</span>,<span class=\"string\">&quot;anAngryAnt&quot;</span>);</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>参考资料</strong></p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/fragments\">Android Developers</a></li>\n<li><a href=\"https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md\">LearningNotes</a></li>\n</ul>\n"},{"title":"Android 之 Activity","date":"2018-07-05T07:56:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### Activity正常生命周期流程\n\nActivity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . \n\n- onCreate()\n\n  Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .\n\n- onStart()\n\n  Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。\n\n- onResume()\n\n  Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。\n\n- onPause()\n\n  Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。\n\n- onStop()\n\n  Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。\n\n- onRestart()\n\n  Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。\n\n- onDestroy\n\n  Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。\n\n> 通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。\n\n![](https://gitee.com/zch0304/images/raw/master/note/activity_lifecycle.png) \n\n### Activity异常情况生命周期分析\n\n- 系统资源配置发生改变导致 Activity 被杀死并重新创建\n\n  当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 **onSaveInstanceState** 来保存当前 Activity 的状态。**onSaveInstanceState 方法的调用时机是在 onStop 之前**，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 **onRestoreInstanceState** , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，**onRestoreInstanceState 的调用时机在 onStart 之后。**\n\n  系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。\n\n  在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。\n\n  **在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是**：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。\n\n- 资源内存不足导致低优先级的 Activity 被杀死\n\n  Activity 按优先级从高到低如下：\n\n  - **前台 Activity** , 正在与用户交互的 Activity，优先级最高。\n  - **可见但非前台 Activity** , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。\n  - **后台 Activity** , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。\n\n  当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，**一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死**。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。\n\n### Activity生命周期附加说明\n\n1. 当用户打开新的 Activity 或切换到桌面时，回调如下：onPause --> onStop . 但是有一种情况，如果新 Activity 采用了**透明主题**，那么当前 Activity 不会调用 onStop .\n\n2. 不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .\n\n### configChanges属性的应用\n\n1. 防止屏幕旋转时 Activity 重启\n\n```xml\nandroid:configChanges=\"orientation | screenSize\"\n```\n\n有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。\n\n### Activity启动模式\n\n我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。\n\n#### 四种加载模式\n\n- standard 模式\n\n  **标准模式**。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。**启动的生命周期为：onCreate() -> onStart() -> onResume()** .\n\n- singleTop 模式\n\n  **栈顶复用模式**。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 **onNewIntent** 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的**生命周期顺序为：onPause() ->onNewIntent()->onResume()** , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时**生命周期顺序为：onCreate()->onStart()->onResume()** .\n\n\n- singleTask 模式\n\n  **栈内复用模式**。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 **onNewIntent()**）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。\n\n- singleInstance 模式\n\n  **单实例模式**。这是一种加强的 singleTask 模式，**它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中**。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 **onNewIntent()**）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。\n\n> 设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。\n\n#### LaunchMode附加说明\n\n1. 使用 **TaskAffinity** 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为**应用的包名**。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。\n\n2. 任务栈分为**前台任务栈**和**后台任务栈**，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。\n\n#### Activity的Flags\n\n除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。\n\n常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP\n\n- FLAG_ACTIVITY_NEW_TASK\n\n  相当于 **singleTask** 启动模式。\n\n- FLAG_ACTIVITY_SINGLE_TOP\n\n  相当于 **singleTop** 启动模式。\n\n- FLAG_ACTIVITY_CLEAR_TOP\n\n  设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。\n\n### IntentFilter的匹配规则\n\n启动 Activity 分为**显示**和**隐式**调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。**当显示和隐式调用共存时以显示调用为主**。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .\n\n一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。**只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity** . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .\n\n#### action的匹配规则\n\naction 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . **action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功**，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。\n\n#### category的匹配规则\n\ncategory 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . **category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category** , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 **android.intent.category.DEFAULT** 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .\n\n#### data的匹配规则\n\ndata 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指**过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中**。\n\n\n\n\n**参考资料**\n\n- Android开发艺术探索\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android-之-Activity.md","raw":"---\ntitle: Android 之 Activity\ndate: 2018-07-5 15:56:00\ncategories: \"Android\"\ntags:\n     - Android\n     - Activity\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### Activity正常生命周期流程\n\nActivity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . \n\n- onCreate()\n\n  Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .\n\n- onStart()\n\n  Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。\n\n- onResume()\n\n  Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。\n\n- onPause()\n\n  Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。\n\n- onStop()\n\n  Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。\n\n- onRestart()\n\n  Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。\n\n- onDestroy\n\n  Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。\n\n> 通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。\n\n![](https://gitee.com/zch0304/images/raw/master/note/activity_lifecycle.png) \n\n### Activity异常情况生命周期分析\n\n- 系统资源配置发生改变导致 Activity 被杀死并重新创建\n\n  当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 **onSaveInstanceState** 来保存当前 Activity 的状态。**onSaveInstanceState 方法的调用时机是在 onStop 之前**，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 **onRestoreInstanceState** , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，**onRestoreInstanceState 的调用时机在 onStart 之后。**\n\n  系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。\n\n  在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。\n\n  **在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是**：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。\n\n- 资源内存不足导致低优先级的 Activity 被杀死\n\n  Activity 按优先级从高到低如下：\n\n  - **前台 Activity** , 正在与用户交互的 Activity，优先级最高。\n  - **可见但非前台 Activity** , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。\n  - **后台 Activity** , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。\n\n  当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，**一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死**。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。\n\n### Activity生命周期附加说明\n\n1. 当用户打开新的 Activity 或切换到桌面时，回调如下：onPause --> onStop . 但是有一种情况，如果新 Activity 采用了**透明主题**，那么当前 Activity 不会调用 onStop .\n\n2. 不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .\n\n### configChanges属性的应用\n\n1. 防止屏幕旋转时 Activity 重启\n\n```xml\nandroid:configChanges=\"orientation | screenSize\"\n```\n\n有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。\n\n### Activity启动模式\n\n我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。\n\n#### 四种加载模式\n\n- standard 模式\n\n  **标准模式**。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。**启动的生命周期为：onCreate() -> onStart() -> onResume()** .\n\n- singleTop 模式\n\n  **栈顶复用模式**。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 **onNewIntent** 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的**生命周期顺序为：onPause() ->onNewIntent()->onResume()** , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时**生命周期顺序为：onCreate()->onStart()->onResume()** .\n\n\n- singleTask 模式\n\n  **栈内复用模式**。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 **onNewIntent()**）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。\n\n- singleInstance 模式\n\n  **单实例模式**。这是一种加强的 singleTask 模式，**它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中**。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 **onNewIntent()**）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。\n\n> 设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。\n\n#### LaunchMode附加说明\n\n1. 使用 **TaskAffinity** 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为**应用的包名**。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。\n\n2. 任务栈分为**前台任务栈**和**后台任务栈**，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。\n\n#### Activity的Flags\n\n除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。\n\n常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP\n\n- FLAG_ACTIVITY_NEW_TASK\n\n  相当于 **singleTask** 启动模式。\n\n- FLAG_ACTIVITY_SINGLE_TOP\n\n  相当于 **singleTop** 启动模式。\n\n- FLAG_ACTIVITY_CLEAR_TOP\n\n  设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。\n\n### IntentFilter的匹配规则\n\n启动 Activity 分为**显示**和**隐式**调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。**当显示和隐式调用共存时以显示调用为主**。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .\n\n一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。**只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity** . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .\n\n#### action的匹配规则\n\naction 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . **action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功**，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。\n\n#### category的匹配规则\n\ncategory 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . **category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category** , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 **android.intent.category.DEFAULT** 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .\n\n#### data的匹配规则\n\ndata 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指**过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中**。\n\n\n\n\n**参考资料**\n\n- Android开发艺术探索\n\n\n\n\n\n\n\n\n\n\n","slug":"Android-之-Activity","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcw000hnctt61d87ja5","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"Activity正常生命周期流程\"><a href=\"#Activity正常生命周期流程\" class=\"headerlink\" title=\"Activity正常生命周期流程\"></a>Activity正常生命周期流程</h3><p>Activity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . </p>\n<ul>\n<li><p>onCreate()</p>\n<p>Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .</p>\n</li>\n<li><p>onStart()</p>\n<p>Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。</p>\n</li>\n<li><p>onResume()</p>\n<p>Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。</p>\n</li>\n<li><p>onPause()</p>\n<p>Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。</p>\n</li>\n<li><p>onStop()</p>\n<p>Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。</p>\n</li>\n<li><p>onRestart()</p>\n<p>Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。</p>\n</li>\n<li><p>onDestroy</p>\n<p>Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。</p>\n</li>\n</ul>\n<blockquote>\n<p>通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/activity_lifecycle.png\"> </p>\n<h3 id=\"Activity异常情况生命周期分析\"><a href=\"#Activity异常情况生命周期分析\" class=\"headerlink\" title=\"Activity异常情况生命周期分析\"></a>Activity异常情况生命周期分析</h3><ul>\n<li><p>系统资源配置发生改变导致 Activity 被杀死并重新创建</p>\n<p>当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 <strong>onSaveInstanceState</strong> 来保存当前 Activity 的状态。<strong>onSaveInstanceState 方法的调用时机是在 onStop 之前</strong>，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 <strong>onRestoreInstanceState</strong> , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，<strong>onRestoreInstanceState 的调用时机在 onStart 之后。</strong></p>\n<p>系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。</p>\n<p>在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。</p>\n<p><strong>在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是</strong>：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。</p>\n</li>\n<li><p>资源内存不足导致低优先级的 Activity 被杀死</p>\n<p>Activity 按优先级从高到低如下：</p>\n<ul>\n<li><strong>前台 Activity</strong> , 正在与用户交互的 Activity，优先级最高。</li>\n<li><strong>可见但非前台 Activity</strong> , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。</li>\n<li><strong>后台 Activity</strong> , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。</li>\n</ul>\n<p>当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，<strong>一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死</strong>。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。</p>\n</li>\n</ul>\n<h3 id=\"Activity生命周期附加说明\"><a href=\"#Activity生命周期附加说明\" class=\"headerlink\" title=\"Activity生命周期附加说明\"></a>Activity生命周期附加说明</h3><ol>\n<li><p>当用户打开新的 Activity 或切换到桌面时，回调如下：onPause –&gt; onStop . 但是有一种情况，如果新 Activity 采用了<strong>透明主题</strong>，那么当前 Activity 不会调用 onStop .</p>\n</li>\n<li><p>不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .</p>\n</li>\n</ol>\n<h3 id=\"configChanges属性的应用\"><a href=\"#configChanges属性的应用\" class=\"headerlink\" title=\"configChanges属性的应用\"></a>configChanges属性的应用</h3><ol>\n<li>防止屏幕旋转时 Activity 重启</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:configChanges=&quot;orientation | screenSize&quot;</span><br></pre></td></tr></table></figure>\n\n<p>有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。</p>\n<h3 id=\"Activity启动模式\"><a href=\"#Activity启动模式\" class=\"headerlink\" title=\"Activity启动模式\"></a>Activity启动模式</h3><p>我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。</p>\n<h4 id=\"四种加载模式\"><a href=\"#四种加载模式\" class=\"headerlink\" title=\"四种加载模式\"></a>四种加载模式</h4><ul>\n<li><p>standard 模式</p>\n<p><strong>标准模式</strong>。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。<strong>启动的生命周期为：onCreate() -&gt; onStart() -&gt; onResume()</strong> .</p>\n</li>\n<li><p>singleTop 模式</p>\n<p><strong>栈顶复用模式</strong>。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 <strong>onNewIntent</strong> 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的<strong>生命周期顺序为：onPause() -&gt;onNewIntent()-&gt;onResume()</strong> , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时<strong>生命周期顺序为：onCreate()-&gt;onStart()-&gt;onResume()</strong> .</p>\n</li>\n<li><p>singleTask 模式</p>\n<p><strong>栈内复用模式</strong>。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 **onNewIntent()**）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。</p>\n</li>\n<li><p>singleInstance 模式</p>\n<p><strong>单实例模式</strong>。这是一种加强的 singleTask 模式，<strong>它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中</strong>。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 **onNewIntent()**）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。</p>\n</li>\n</ul>\n<blockquote>\n<p>设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。</p>\n</blockquote>\n<h4 id=\"LaunchMode附加说明\"><a href=\"#LaunchMode附加说明\" class=\"headerlink\" title=\"LaunchMode附加说明\"></a>LaunchMode附加说明</h4><ol>\n<li><p>使用 <strong>TaskAffinity</strong> 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为<strong>应用的包名</strong>。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。</p>\n</li>\n<li><p>任务栈分为<strong>前台任务栈</strong>和<strong>后台任务栈</strong>，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。</p>\n</li>\n</ol>\n<h4 id=\"Activity的Flags\"><a href=\"#Activity的Flags\" class=\"headerlink\" title=\"Activity的Flags\"></a>Activity的Flags</h4><p>除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。</p>\n<p>常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP</p>\n<ul>\n<li><p>FLAG_ACTIVITY_NEW_TASK</p>\n<p>相当于 <strong>singleTask</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_SINGLE_TOP</p>\n<p>相当于 <strong>singleTop</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_CLEAR_TOP</p>\n<p>设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。</p>\n</li>\n</ul>\n<h3 id=\"IntentFilter的匹配规则\"><a href=\"#IntentFilter的匹配规则\" class=\"headerlink\" title=\"IntentFilter的匹配规则\"></a>IntentFilter的匹配规则</h3><p>启动 Activity 分为<strong>显示</strong>和<strong>隐式</strong>调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。<strong>当显示和隐式调用共存时以显示调用为主</strong>。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .</p>\n<p>一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。<strong>只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity</strong> . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .</p>\n<h4 id=\"action的匹配规则\"><a href=\"#action的匹配规则\" class=\"headerlink\" title=\"action的匹配规则\"></a>action的匹配规则</h4><p>action 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . <strong>action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功</strong>，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。</p>\n<h4 id=\"category的匹配规则\"><a href=\"#category的匹配规则\" class=\"headerlink\" title=\"category的匹配规则\"></a>category的匹配规则</h4><p>category 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . <strong>category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category</strong> , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 <strong>android.intent.category.DEFAULT</strong> 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .</p>\n<h4 id=\"data的匹配规则\"><a href=\"#data的匹配规则\" class=\"headerlink\" title=\"data的匹配规则\"></a>data的匹配规则</h4><p>data 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指<strong>过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中</strong>。</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li>Android开发艺术探索</li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"Activity正常生命周期流程\"><a href=\"#Activity正常生命周期流程\" class=\"headerlink\" title=\"Activity正常生命周期流程\"></a>Activity正常生命周期流程</h3><p>Activity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . </p>\n<ul>\n<li><p>onCreate()</p>\n<p>Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .</p>\n</li>\n<li><p>onStart()</p>\n<p>Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。</p>\n</li>\n<li><p>onResume()</p>\n<p>Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。</p>\n</li>\n<li><p>onPause()</p>\n<p>Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。</p>\n</li>\n<li><p>onStop()</p>\n<p>Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。</p>\n</li>\n<li><p>onRestart()</p>\n<p>Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。</p>\n</li>\n<li><p>onDestroy</p>\n<p>Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。</p>\n</li>\n</ul>\n<blockquote>\n<p>通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/activity_lifecycle.png\"> </p>\n<h3 id=\"Activity异常情况生命周期分析\"><a href=\"#Activity异常情况生命周期分析\" class=\"headerlink\" title=\"Activity异常情况生命周期分析\"></a>Activity异常情况生命周期分析</h3><ul>\n<li><p>系统资源配置发生改变导致 Activity 被杀死并重新创建</p>\n<p>当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 <strong>onSaveInstanceState</strong> 来保存当前 Activity 的状态。<strong>onSaveInstanceState 方法的调用时机是在 onStop 之前</strong>，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 <strong>onRestoreInstanceState</strong> , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，<strong>onRestoreInstanceState 的调用时机在 onStart 之后。</strong></p>\n<p>系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。</p>\n<p>在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。</p>\n<p><strong>在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是</strong>：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。</p>\n</li>\n<li><p>资源内存不足导致低优先级的 Activity 被杀死</p>\n<p>Activity 按优先级从高到低如下：</p>\n<ul>\n<li><strong>前台 Activity</strong> , 正在与用户交互的 Activity，优先级最高。</li>\n<li><strong>可见但非前台 Activity</strong> , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。</li>\n<li><strong>后台 Activity</strong> , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。</li>\n</ul>\n<p>当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，<strong>一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死</strong>。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。</p>\n</li>\n</ul>\n<h3 id=\"Activity生命周期附加说明\"><a href=\"#Activity生命周期附加说明\" class=\"headerlink\" title=\"Activity生命周期附加说明\"></a>Activity生命周期附加说明</h3><ol>\n<li><p>当用户打开新的 Activity 或切换到桌面时，回调如下：onPause –&gt; onStop . 但是有一种情况，如果新 Activity 采用了<strong>透明主题</strong>，那么当前 Activity 不会调用 onStop .</p>\n</li>\n<li><p>不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .</p>\n</li>\n</ol>\n<h3 id=\"configChanges属性的应用\"><a href=\"#configChanges属性的应用\" class=\"headerlink\" title=\"configChanges属性的应用\"></a>configChanges属性的应用</h3><ol>\n<li>防止屏幕旋转时 Activity 重启</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:configChanges=&quot;orientation | screenSize&quot;</span><br></pre></td></tr></table></figure>\n\n<p>有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。</p>\n<h3 id=\"Activity启动模式\"><a href=\"#Activity启动模式\" class=\"headerlink\" title=\"Activity启动模式\"></a>Activity启动模式</h3><p>我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。</p>\n<h4 id=\"四种加载模式\"><a href=\"#四种加载模式\" class=\"headerlink\" title=\"四种加载模式\"></a>四种加载模式</h4><ul>\n<li><p>standard 模式</p>\n<p><strong>标准模式</strong>。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。<strong>启动的生命周期为：onCreate() -&gt; onStart() -&gt; onResume()</strong> .</p>\n</li>\n<li><p>singleTop 模式</p>\n<p><strong>栈顶复用模式</strong>。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 <strong>onNewIntent</strong> 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的<strong>生命周期顺序为：onPause() -&gt;onNewIntent()-&gt;onResume()</strong> , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时<strong>生命周期顺序为：onCreate()-&gt;onStart()-&gt;onResume()</strong> .</p>\n</li>\n<li><p>singleTask 模式</p>\n<p><strong>栈内复用模式</strong>。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 **onNewIntent()**）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。</p>\n</li>\n<li><p>singleInstance 模式</p>\n<p><strong>单实例模式</strong>。这是一种加强的 singleTask 模式，<strong>它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中</strong>。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 **onNewIntent()**）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。</p>\n</li>\n</ul>\n<blockquote>\n<p>设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。</p>\n</blockquote>\n<h4 id=\"LaunchMode附加说明\"><a href=\"#LaunchMode附加说明\" class=\"headerlink\" title=\"LaunchMode附加说明\"></a>LaunchMode附加说明</h4><ol>\n<li><p>使用 <strong>TaskAffinity</strong> 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为<strong>应用的包名</strong>。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。</p>\n</li>\n<li><p>任务栈分为<strong>前台任务栈</strong>和<strong>后台任务栈</strong>，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。</p>\n</li>\n</ol>\n<h4 id=\"Activity的Flags\"><a href=\"#Activity的Flags\" class=\"headerlink\" title=\"Activity的Flags\"></a>Activity的Flags</h4><p>除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。</p>\n<p>常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP</p>\n<ul>\n<li><p>FLAG_ACTIVITY_NEW_TASK</p>\n<p>相当于 <strong>singleTask</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_SINGLE_TOP</p>\n<p>相当于 <strong>singleTop</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_CLEAR_TOP</p>\n<p>设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。</p>\n</li>\n</ul>\n<h3 id=\"IntentFilter的匹配规则\"><a href=\"#IntentFilter的匹配规则\" class=\"headerlink\" title=\"IntentFilter的匹配规则\"></a>IntentFilter的匹配规则</h3><p>启动 Activity 分为<strong>显示</strong>和<strong>隐式</strong>调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。<strong>当显示和隐式调用共存时以显示调用为主</strong>。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .</p>\n<p>一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。<strong>只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity</strong> . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .</p>\n<h4 id=\"action的匹配规则\"><a href=\"#action的匹配规则\" class=\"headerlink\" title=\"action的匹配规则\"></a>action的匹配规则</h4><p>action 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . <strong>action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功</strong>，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。</p>\n<h4 id=\"category的匹配规则\"><a href=\"#category的匹配规则\" class=\"headerlink\" title=\"category的匹配规则\"></a>category的匹配规则</h4><p>category 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . <strong>category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category</strong> , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 <strong>android.intent.category.DEFAULT</strong> 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .</p>\n<h4 id=\"data的匹配规则\"><a href=\"#data的匹配规则\" class=\"headerlink\" title=\"data的匹配规则\"></a>data的匹配规则</h4><p>data 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指<strong>过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中</strong>。</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li>Android开发艺术探索</li>\n</ul>\n"},{"title":"Android 代码优化小提示","date":"2018-01-09T14:35:29.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n## 代码逻辑相关\n\n### 遍历一个List集合\n\nbad:\n\n```Java\nList<User> userList = new ArrayList<>();\nfor (int i = 0; i < userList.size(); i++) {\n    User user = new User();\n   \t //省略 n 行代码...\n    userList.add(user);\n}\n```\n\nbetter:\n\n```Java\nList<User> userList = new ArrayList<>();\nUser user = null;\nfor (int i = 0, size = userList.size(); i < size; i++) {\n    user = new User();\n    //省略 n 行代码...\n    userList.add(user);\n}\n```\n\n> ①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。\n\n### 遍历HashMap的最佳方法\n\n```Java\nMap<String, User> userMap = new HashMap<>();\nIterator it = userMap.entrySet().iterator();\nwhile (it.hasNext()) {\n    Map.Entry entry = (Map.Entry) it.next();\n    System.out.println(entry.getKey() + \" = \" + entry.getValue());\n    //迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素\n    it.remove(); // 避免抛 ConcurrentModificationException 异常\n}\n```\n\n### 字符串\n\n#### 判断字符串str是否为null或空串\n\nbad:\n\n```Java\nif (null == str || \"\".equals(str)) {\n}\n```\n\nbetter:\n\n```Java\nif (TextUtils.isEmpty(str)) {\n}\n```\n\n> TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。\n\n### 容易报空指针的情况\n\n#### 判断一个字符串的内容是否为某值\n\nbad:\n\n```Java\nif (str.equals(\"hello\")) {\n}\n```\n\nbetter:\n\n```Java\n// 避免空指针异常，应该把常量写在前面\nif (\"hello\".equals(str)) {\n}\n```\n\n#### 判断集合某个元素对象的某个字段是否为空\n\nbad:\n\n```Java\n// 如果元素对象为 null 这里就挂了吧\nif (null != userList.get(i).name) {\n}\n```\n\nbetter:\n\n```Java\n// 使用对象的方法或字段时，考虑下对象本身是否可能为 null\nif (null != userList.get(i) && null != userList.get(i).name) {\n}\n```\n\n### 常用资源释放\n\n#### Cursor\n\n```Java\ntry {\n    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), null, null, null, null);\n    //省略 n 行代码...\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    if(cursor != null){\n       try {\n            cursor.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n       }\n    }\n}\n```\n\n#### 流文件\n\n```Java\npublic class Test {\n\n    private static final int BUFFER_SIZE = 1024;\n\n    public static void main(String[] args) {\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            fr = new FileReader(\"origin.txt\");\n            fw = new FileWriter(\"destination.txt\");\n            char[] buf = new char[BUFFER_SIZE];\n            int len = 0;\n            while ((len = fr.read(buf)) != -1) {\n                fw.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"读写失败\");\n        } finally {\n            if (fw != null)\n                try {\n                    fw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (fr != null)\n                try {\n                    fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n}\n```\n\n#### WebView\n\n- 首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。\n\n```Java\nwebView =  new BridgeWebView(getContext().getApplicationContext());\nwebFrameLayout.addView(webView, 0);\n```\n\n> 在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。\n\n- 而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。\n\n```Java\npublic void onDetach() {\n    releaseWebViews();\n    super.onDetach();\n}\n\nprivate void releaseWebViews() {\n    if(webView != null) {\n        try {\n            if(webView.getParent() != null) {\n                ((ViewGroup) webView.getParent()).removeView(webView);\n            }\n            webView.destroy();\n        }catch (IllegalArgumentException e) {\n        }\n        RefWatcher refWatcher = FApplication.getRefWatcher();\n        refWatcher.watch(webView);\n        webView = null;\n    }\n}\n```\n\n参考文章：\n\n[Android WebView: 性能优化不得不说的事](https://www.jianshu.com/p/95d4d73be3d1)\n\n[android内存优化之webview](https://www.jianshu.com/p/c2412918b2b5#fn2)\n\n#### Handler\n\n- 使用弱引用\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private NoLeakHandler mNoLeakHandler;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mNoLeakHandler = new NoLeakHandler(this);\n        Message message = Message.obtain();\n        mNoLeakHandler.sendMessageDelayed(message, 2000);\n    }\n\n    private static class NoLeakHandler extends Handler {\n\n        private WeakReference<NoLeakActivity> mActivity;\n\n        public NoLeakHandler(NoLeakActivity activity) {\n            mActivity = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n        }\n    }\n}\n```\n\n- 及时清除消息\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private Handler mHandler = new Handler();\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n//                startMainActivity();\n            }\n        }, 2000);\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 把所有的消息和回调移除\n        mHandler.removeCallbacksAndMessages(null);\n        super.onDestroy();\n    }\n\n    @Override\n    public void onBackPressed() {\n        // 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）\n        mHandler.removeCallbacksAndMessages(null);\n        super.onBackPressed();\n    }\n}\n```\n\n### 其它\n\n#### 反面判断条件\n\nbad:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null != userList && userList.size() > 0) {\n\t\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\nbetter:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null == userList || userList.isEmpty()) {\n\t\treturn;\n\t}\n\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t// ...\n\t}\n}\n```\n\n> 很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。\n\n#### if与return搭配\n\nbad:\n\n```Java\npublic int testIfElse(String cmd) {\n    if (\"1\".equals(cmd)) {\n   \t return 1;\n    } else if (\"2\".equals(cmd)) {\n   \t return 2;\n    } else if (\"3\".equals(cmd)) {\n   \t return 3;\n    } else {\n   \t return 4;\n    }\n}\n```\n\nbetter:\n\n```Java\npublic int testIfElse(String cmd) {\n   if (\"1\".equals(cmd)) {\n       return 1;\n   }\n   if (\"2\".equals(cmd)) {\n       return 2;\n   }\n   if (\"3\".equals(cmd)) {\n       return 3;\n   }\n   return 4;\n}\n```\n\n#### 对象序列化\n\nAndroid 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .\n\n#### SharedPreferences\n\n`SharedPreferences.Editor.commit` 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level >= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  `SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)` 即可。\n\n#### 其它优化\n\n- 静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。\n\n- Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。\n\n- 不少人在子线程中更新 View 时喜欢使用 `Context.runOnUiThread` , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。\n\n- Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。\n\n- Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .\n\n- 如果使用 `Context.startActivity` 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。\n\n- 如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。\n\n- `transient` 关键字修饰变量可以限制序列化。\n\n- `View.getContext` 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .\n\n## UI相关\n\n### Space\n\nSpace 经常用于组件之间的缝隙，其 `draw()` 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。\n\n### tools标签\n\ntools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：\n\n```xml\n<TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:text=\"这段话只在预览时能看到,运行以后就看不到了\" />\n```\n\n### ContextCompat\n\nAndroid 6.0 之后 `getResources().getColor()` 被废弃了，可用 `ContextCompat.getColor(context, R.color.color_name)` 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 `getDrawable()` 等方法。\n\n\n\n","source":"_posts/Android-代码优化小提示.md","raw":"---\ntitle: Android 代码优化小提示\ndate: 2018-01-09 22:35:29\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n## 代码逻辑相关\n\n### 遍历一个List集合\n\nbad:\n\n```Java\nList<User> userList = new ArrayList<>();\nfor (int i = 0; i < userList.size(); i++) {\n    User user = new User();\n   \t //省略 n 行代码...\n    userList.add(user);\n}\n```\n\nbetter:\n\n```Java\nList<User> userList = new ArrayList<>();\nUser user = null;\nfor (int i = 0, size = userList.size(); i < size; i++) {\n    user = new User();\n    //省略 n 行代码...\n    userList.add(user);\n}\n```\n\n> ①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。\n\n### 遍历HashMap的最佳方法\n\n```Java\nMap<String, User> userMap = new HashMap<>();\nIterator it = userMap.entrySet().iterator();\nwhile (it.hasNext()) {\n    Map.Entry entry = (Map.Entry) it.next();\n    System.out.println(entry.getKey() + \" = \" + entry.getValue());\n    //迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素\n    it.remove(); // 避免抛 ConcurrentModificationException 异常\n}\n```\n\n### 字符串\n\n#### 判断字符串str是否为null或空串\n\nbad:\n\n```Java\nif (null == str || \"\".equals(str)) {\n}\n```\n\nbetter:\n\n```Java\nif (TextUtils.isEmpty(str)) {\n}\n```\n\n> TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。\n\n### 容易报空指针的情况\n\n#### 判断一个字符串的内容是否为某值\n\nbad:\n\n```Java\nif (str.equals(\"hello\")) {\n}\n```\n\nbetter:\n\n```Java\n// 避免空指针异常，应该把常量写在前面\nif (\"hello\".equals(str)) {\n}\n```\n\n#### 判断集合某个元素对象的某个字段是否为空\n\nbad:\n\n```Java\n// 如果元素对象为 null 这里就挂了吧\nif (null != userList.get(i).name) {\n}\n```\n\nbetter:\n\n```Java\n// 使用对象的方法或字段时，考虑下对象本身是否可能为 null\nif (null != userList.get(i) && null != userList.get(i).name) {\n}\n```\n\n### 常用资源释放\n\n#### Cursor\n\n```Java\ntry {\n    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), null, null, null, null);\n    //省略 n 行代码...\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    if(cursor != null){\n       try {\n            cursor.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n       }\n    }\n}\n```\n\n#### 流文件\n\n```Java\npublic class Test {\n\n    private static final int BUFFER_SIZE = 1024;\n\n    public static void main(String[] args) {\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            fr = new FileReader(\"origin.txt\");\n            fw = new FileWriter(\"destination.txt\");\n            char[] buf = new char[BUFFER_SIZE];\n            int len = 0;\n            while ((len = fr.read(buf)) != -1) {\n                fw.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"读写失败\");\n        } finally {\n            if (fw != null)\n                try {\n                    fw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (fr != null)\n                try {\n                    fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n}\n```\n\n#### WebView\n\n- 首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。\n\n```Java\nwebView =  new BridgeWebView(getContext().getApplicationContext());\nwebFrameLayout.addView(webView, 0);\n```\n\n> 在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。\n\n- 而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。\n\n```Java\npublic void onDetach() {\n    releaseWebViews();\n    super.onDetach();\n}\n\nprivate void releaseWebViews() {\n    if(webView != null) {\n        try {\n            if(webView.getParent() != null) {\n                ((ViewGroup) webView.getParent()).removeView(webView);\n            }\n            webView.destroy();\n        }catch (IllegalArgumentException e) {\n        }\n        RefWatcher refWatcher = FApplication.getRefWatcher();\n        refWatcher.watch(webView);\n        webView = null;\n    }\n}\n```\n\n参考文章：\n\n[Android WebView: 性能优化不得不说的事](https://www.jianshu.com/p/95d4d73be3d1)\n\n[android内存优化之webview](https://www.jianshu.com/p/c2412918b2b5#fn2)\n\n#### Handler\n\n- 使用弱引用\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private NoLeakHandler mNoLeakHandler;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mNoLeakHandler = new NoLeakHandler(this);\n        Message message = Message.obtain();\n        mNoLeakHandler.sendMessageDelayed(message, 2000);\n    }\n\n    private static class NoLeakHandler extends Handler {\n\n        private WeakReference<NoLeakActivity> mActivity;\n\n        public NoLeakHandler(NoLeakActivity activity) {\n            mActivity = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n        }\n    }\n}\n```\n\n- 及时清除消息\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private Handler mHandler = new Handler();\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n//                startMainActivity();\n            }\n        }, 2000);\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 把所有的消息和回调移除\n        mHandler.removeCallbacksAndMessages(null);\n        super.onDestroy();\n    }\n\n    @Override\n    public void onBackPressed() {\n        // 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）\n        mHandler.removeCallbacksAndMessages(null);\n        super.onBackPressed();\n    }\n}\n```\n\n### 其它\n\n#### 反面判断条件\n\nbad:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null != userList && userList.size() > 0) {\n\t\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\nbetter:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null == userList || userList.isEmpty()) {\n\t\treturn;\n\t}\n\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t// ...\n\t}\n}\n```\n\n> 很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。\n\n#### if与return搭配\n\nbad:\n\n```Java\npublic int testIfElse(String cmd) {\n    if (\"1\".equals(cmd)) {\n   \t return 1;\n    } else if (\"2\".equals(cmd)) {\n   \t return 2;\n    } else if (\"3\".equals(cmd)) {\n   \t return 3;\n    } else {\n   \t return 4;\n    }\n}\n```\n\nbetter:\n\n```Java\npublic int testIfElse(String cmd) {\n   if (\"1\".equals(cmd)) {\n       return 1;\n   }\n   if (\"2\".equals(cmd)) {\n       return 2;\n   }\n   if (\"3\".equals(cmd)) {\n       return 3;\n   }\n   return 4;\n}\n```\n\n#### 对象序列化\n\nAndroid 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .\n\n#### SharedPreferences\n\n`SharedPreferences.Editor.commit` 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level >= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  `SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)` 即可。\n\n#### 其它优化\n\n- 静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。\n\n- Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。\n\n- 不少人在子线程中更新 View 时喜欢使用 `Context.runOnUiThread` , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。\n\n- Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。\n\n- Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .\n\n- 如果使用 `Context.startActivity` 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。\n\n- 如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。\n\n- `transient` 关键字修饰变量可以限制序列化。\n\n- `View.getContext` 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .\n\n## UI相关\n\n### Space\n\nSpace 经常用于组件之间的缝隙，其 `draw()` 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。\n\n### tools标签\n\ntools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：\n\n```xml\n<TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:text=\"这段话只在预览时能看到,运行以后就看不到了\" />\n```\n\n### ContextCompat\n\nAndroid 6.0 之后 `getResources().getColor()` 被废弃了，可用 `ContextCompat.getColor(context, R.color.color_name)` 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 `getDrawable()` 等方法。\n\n\n\n","slug":"Android-代码优化小提示","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcx000jncttg61h7maw","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h2 id=\"代码逻辑相关\"><a href=\"#代码逻辑相关\" class=\"headerlink\" title=\"代码逻辑相关\"></a>代码逻辑相关</h2><h3 id=\"遍历一个List集合\"><a href=\"#遍历一个List集合\" class=\"headerlink\" title=\"遍历一个List集合\"></a>遍历一个List集合</h3><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">   \t <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">    user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count &#x3D; xxx.getCount() 缓存起来。</p>\n</blockquote>\n<h3 id=\"遍历HashMap的最佳方法\"><a href=\"#遍历HashMap的最佳方法\" class=\"headerlink\" title=\"遍历HashMap的最佳方法\"></a>遍历HashMap的最佳方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, User&gt; userMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">Iterator</span> <span class=\"variable\">it</span> <span class=\"operator\">=</span> userMap.entrySet().iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Map.<span class=\"type\">Entry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> (Map.Entry) it.next();</span><br><span class=\"line\">    System.out.println(entry.getKey() + <span class=\"string\">&quot; = &quot;</span> + entry.getValue());</span><br><span class=\"line\">    <span class=\"comment\">//迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素</span></span><br><span class=\"line\">    it.remove(); <span class=\"comment\">// 避免抛 ConcurrentModificationException 异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"判断字符串str是否为null或空串\"><a href=\"#判断字符串str是否为null或空串\" class=\"headerlink\" title=\"判断字符串str是否为null或空串\"></a>判断字符串str是否为null或空串</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == str || <span class=\"string\">&quot;&quot;</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。</p>\n</blockquote>\n<h3 id=\"容易报空指针的情况\"><a href=\"#容易报空指针的情况\" class=\"headerlink\" title=\"容易报空指针的情况\"></a>容易报空指针的情况</h3><h4 id=\"判断一个字符串的内容是否为某值\"><a href=\"#判断一个字符串的内容是否为某值\" class=\"headerlink\" title=\"判断一个字符串的内容是否为某值\"></a>判断一个字符串的内容是否为某值</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (str.equals(<span class=\"string\">&quot;hello&quot;</span>)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 避免空指针异常，应该把常量写在前面</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;hello&quot;</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断集合某个元素对象的某个字段是否为空\"><a href=\"#判断集合某个元素对象的某个字段是否为空\" class=\"headerlink\" title=\"判断集合某个元素对象的某个字段是否为空\"></a>判断集合某个元素对象的某个字段是否为空</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果元素对象为 null 这里就挂了吧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对象的方法或字段时，考虑下对象本身是否可能为 null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != userList.get(i) &amp;&amp; <span class=\"literal\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用资源释放\"><a href=\"#常用资源释放\" class=\"headerlink\" title=\"常用资源释放\"></a>常用资源释放</h3><h4 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cursor.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流文件\"><a href=\"#流文件\" class=\"headerlink\" title=\"流文件\"></a>流文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BUFFER_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;origin.txt&quot;</span>);</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;destination.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">char</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[BUFFER_SIZE];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fw.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;读写失败&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fw != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fr != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><ul>\n<li>首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView =  <span class=\"keyword\">new</span> <span class=\"title class_\">BridgeWebView</span>(getContext().getApplicationContext());</span><br><span class=\"line\">webFrameLayout.addView(webView, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。</p>\n</blockquote>\n<ul>\n<li>而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDetach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    releaseWebViews();</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onDetach();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseWebViews</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(webView != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(webView.getParent() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                ((ViewGroup) webView.getParent()).removeView(webView);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            webView.destroy();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">RefWatcher</span> <span class=\"variable\">refWatcher</span> <span class=\"operator\">=</span> FApplication.getRefWatcher();</span><br><span class=\"line\">        refWatcher.watch(webView);</span><br><span class=\"line\">        webView = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/95d4d73be3d1\">Android WebView: 性能优化不得不说的事</a></p>\n<p><a href=\"https://www.jianshu.com/p/c2412918b2b5#fn2\">android内存优化之webview</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><ul>\n<li>使用弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NoLeakHandler mNoLeakHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mNoLeakHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">NoLeakHandler</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> Message.obtain();</span><br><span class=\"line\">        mNoLeakHandler.sendMessageDelayed(message, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoLeakHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;NoLeakActivity&gt; mActivity;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">NoLeakHandler</span><span class=\"params\">(NoLeakActivity activity)</span> &#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>及时清除消息</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Handler</span> <span class=\"variable\">mHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mHandler.postDelayed(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                startMainActivity();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBackPressed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><h4 id=\"反面判断条件\"><a href=\"#反面判断条件\" class=\"headerlink\" title=\"反面判断条件\"></a>反面判断条件</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != userList &amp;&amp; userList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == userList || userList.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。</p>\n</blockquote>\n<h4 id=\"if与return搭配\"><a href=\"#if与return搭配\" class=\"headerlink\" title=\"if与return搭配\"></a>if与return搭配</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">testIfElse</span><span class=\"params\">(String cmd)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&quot;1&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;2&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;3&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">testIfElse</span><span class=\"params\">(String cmd)</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">&quot;1&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">&quot;2&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">&quot;3&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h4><p>Android 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .</p>\n<h4 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h4><p><code>SharedPreferences.Editor.commit</code> 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level &gt;&#x3D; 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  <code>SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)</code> 即可。</p>\n<h4 id=\"其它优化\"><a href=\"#其它优化\" class=\"headerlink\" title=\"其它优化\"></a>其它优化</h4><ul>\n<li><p>静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。</p>\n</li>\n<li><p>Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。</p>\n</li>\n<li><p>不少人在子线程中更新 View 时喜欢使用 <code>Context.runOnUiThread</code> , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。</p>\n</li>\n<li><p>Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。</p>\n</li>\n<li><p>Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .</p>\n</li>\n<li><p>如果使用 <code>Context.startActivity</code> 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。</p>\n</li>\n<li><p>如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。</p>\n</li>\n<li><p><code>transient</code> 关键字修饰变量可以限制序列化。</p>\n</li>\n<li><p><code>View.getContext</code> 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .</p>\n</li>\n</ul>\n<h2 id=\"UI相关\"><a href=\"#UI相关\" class=\"headerlink\" title=\"UI相关\"></a>UI相关</h2><h3 id=\"Space\"><a href=\"#Space\" class=\"headerlink\" title=\"Space\"></a>Space</h3><p>Space 经常用于组件之间的缝隙，其 <code>draw()</code> 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。</p>\n<h3 id=\"tools标签\"><a href=\"#tools标签\" class=\"headerlink\" title=\"tools标签\"></a>tools标签</h3><p>tools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">&quot;这段话只在预览时能看到,运行以后就看不到了&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ContextCompat\"><a href=\"#ContextCompat\" class=\"headerlink\" title=\"ContextCompat\"></a>ContextCompat</h3><p>Android 6.0 之后 <code>getResources().getColor()</code> 被废弃了，可用 <code>ContextCompat.getColor(context, R.color.color_name)</code> 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 <code>getDrawable()</code> 等方法。</p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h2 id=\"代码逻辑相关\"><a href=\"#代码逻辑相关\" class=\"headerlink\" title=\"代码逻辑相关\"></a>代码逻辑相关</h2><h3 id=\"遍历一个List集合\"><a href=\"#遍历一个List集合\" class=\"headerlink\" title=\"遍历一个List集合\"></a>遍历一个List集合</h3><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">   \t <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">    user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count &#x3D; xxx.getCount() 缓存起来。</p>\n</blockquote>\n<h3 id=\"遍历HashMap的最佳方法\"><a href=\"#遍历HashMap的最佳方法\" class=\"headerlink\" title=\"遍历HashMap的最佳方法\"></a>遍历HashMap的最佳方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, User&gt; userMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">Iterator</span> <span class=\"variable\">it</span> <span class=\"operator\">=</span> userMap.entrySet().iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Map.<span class=\"type\">Entry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> (Map.Entry) it.next();</span><br><span class=\"line\">    System.out.println(entry.getKey() + <span class=\"string\">&quot; = &quot;</span> + entry.getValue());</span><br><span class=\"line\">    <span class=\"comment\">//迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素</span></span><br><span class=\"line\">    it.remove(); <span class=\"comment\">// 避免抛 ConcurrentModificationException 异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"判断字符串str是否为null或空串\"><a href=\"#判断字符串str是否为null或空串\" class=\"headerlink\" title=\"判断字符串str是否为null或空串\"></a>判断字符串str是否为null或空串</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == str || <span class=\"string\">&quot;&quot;</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。</p>\n</blockquote>\n<h3 id=\"容易报空指针的情况\"><a href=\"#容易报空指针的情况\" class=\"headerlink\" title=\"容易报空指针的情况\"></a>容易报空指针的情况</h3><h4 id=\"判断一个字符串的内容是否为某值\"><a href=\"#判断一个字符串的内容是否为某值\" class=\"headerlink\" title=\"判断一个字符串的内容是否为某值\"></a>判断一个字符串的内容是否为某值</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (str.equals(<span class=\"string\">&quot;hello&quot;</span>)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 避免空指针异常，应该把常量写在前面</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;hello&quot;</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断集合某个元素对象的某个字段是否为空\"><a href=\"#判断集合某个元素对象的某个字段是否为空\" class=\"headerlink\" title=\"判断集合某个元素对象的某个字段是否为空\"></a>判断集合某个元素对象的某个字段是否为空</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果元素对象为 null 这里就挂了吧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对象的方法或字段时，考虑下对象本身是否可能为 null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != userList.get(i) &amp;&amp; <span class=\"literal\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用资源释放\"><a href=\"#常用资源释放\" class=\"headerlink\" title=\"常用资源释放\"></a>常用资源释放</h3><h4 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cursor.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流文件\"><a href=\"#流文件\" class=\"headerlink\" title=\"流文件\"></a>流文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BUFFER_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;origin.txt&quot;</span>);</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;destination.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">char</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[BUFFER_SIZE];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fw.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;读写失败&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fw != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fr != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><ul>\n<li>首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView =  <span class=\"keyword\">new</span> <span class=\"title class_\">BridgeWebView</span>(getContext().getApplicationContext());</span><br><span class=\"line\">webFrameLayout.addView(webView, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。</p>\n</blockquote>\n<ul>\n<li>而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDetach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    releaseWebViews();</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onDetach();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseWebViews</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(webView != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(webView.getParent() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                ((ViewGroup) webView.getParent()).removeView(webView);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            webView.destroy();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">RefWatcher</span> <span class=\"variable\">refWatcher</span> <span class=\"operator\">=</span> FApplication.getRefWatcher();</span><br><span class=\"line\">        refWatcher.watch(webView);</span><br><span class=\"line\">        webView = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/95d4d73be3d1\">Android WebView: 性能优化不得不说的事</a></p>\n<p><a href=\"https://www.jianshu.com/p/c2412918b2b5#fn2\">android内存优化之webview</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><ul>\n<li>使用弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NoLeakHandler mNoLeakHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mNoLeakHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">NoLeakHandler</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> Message.obtain();</span><br><span class=\"line\">        mNoLeakHandler.sendMessageDelayed(message, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoLeakHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;NoLeakActivity&gt; mActivity;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">NoLeakHandler</span><span class=\"params\">(NoLeakActivity activity)</span> &#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>及时清除消息</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Activity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Handler</span> <span class=\"variable\">mHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mHandler.postDelayed(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                startMainActivity();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBackPressed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><h4 id=\"反面判断条件\"><a href=\"#反面判断条件\" class=\"headerlink\" title=\"反面判断条件\"></a>反面判断条件</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != userList &amp;&amp; userList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == userList || userList.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。</p>\n</blockquote>\n<h4 id=\"if与return搭配\"><a href=\"#if与return搭配\" class=\"headerlink\" title=\"if与return搭配\"></a>if与return搭配</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">testIfElse</span><span class=\"params\">(String cmd)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&quot;1&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;2&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;3&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">testIfElse</span><span class=\"params\">(String cmd)</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">&quot;1&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">&quot;2&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">&quot;3&quot;</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h4><p>Android 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .</p>\n<h4 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h4><p><code>SharedPreferences.Editor.commit</code> 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level &gt;&#x3D; 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  <code>SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)</code> 即可。</p>\n<h4 id=\"其它优化\"><a href=\"#其它优化\" class=\"headerlink\" title=\"其它优化\"></a>其它优化</h4><ul>\n<li><p>静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。</p>\n</li>\n<li><p>Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。</p>\n</li>\n<li><p>不少人在子线程中更新 View 时喜欢使用 <code>Context.runOnUiThread</code> , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。</p>\n</li>\n<li><p>Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。</p>\n</li>\n<li><p>Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .</p>\n</li>\n<li><p>如果使用 <code>Context.startActivity</code> 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。</p>\n</li>\n<li><p>如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。</p>\n</li>\n<li><p><code>transient</code> 关键字修饰变量可以限制序列化。</p>\n</li>\n<li><p><code>View.getContext</code> 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .</p>\n</li>\n</ul>\n<h2 id=\"UI相关\"><a href=\"#UI相关\" class=\"headerlink\" title=\"UI相关\"></a>UI相关</h2><h3 id=\"Space\"><a href=\"#Space\" class=\"headerlink\" title=\"Space\"></a>Space</h3><p>Space 经常用于组件之间的缝隙，其 <code>draw()</code> 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。</p>\n<h3 id=\"tools标签\"><a href=\"#tools标签\" class=\"headerlink\" title=\"tools标签\"></a>tools标签</h3><p>tools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">&quot;这段话只在预览时能看到,运行以后就看不到了&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ContextCompat\"><a href=\"#ContextCompat\" class=\"headerlink\" title=\"ContextCompat\"></a>ContextCompat</h3><p>Android 6.0 之后 <code>getResources().getColor()</code> 被废弃了，可用 <code>ContextCompat.getColor(context, R.color.color_name)</code> 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 <code>getDrawable()</code> 等方法。</p>\n"},{"title":"Chrome 开发者工具调试","date":"2018-03-03T16:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### Chrome 开发者工具面板简介\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/3.png)\n\n- 箭头图标\n\n  用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。\n\n- 设备图标\n\n  可以选择不同的终端设备、不同的尺寸比例进行模拟开发。\n\n- Elements\n\n  查找网页源代码 HTML 中的任一元素，手动修改任一元素的**属性**和**样式**且能实时在浏览器里面得到反馈。\n\n- Console\n\n  记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .\n\n- Sources\n\n  用于**查看**和**调试**当前页面所加载的脚本的源文件。\n\n- Network\n\n  用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。\n\n- Performance\n\n- Memory\n\n- Application\n\n  记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。\n\n- Security\n\n  判断当前网站的安全性，查看有效证书等。\n\n- Audits\n\n  对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。\n\n### Elements\n\n可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。\n\n- 双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。\n\n- 点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/4.png)\n\n- 点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。\n\n> 注意：**以上对页面上的修改并不会作用到源码上**，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。\n\n### Console\n\n#### 在控制台输出日志\n**在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中**\n\n- console.log\n\n  打印一般的基础日志信息，当要打印的基础日志太多时可使用 `console.group` 将相关的日志进行分组。\n\n- console.warn\n\n  打印带有黄色小图标的警告信息。\n\n- console.error\n\n  打印带有红色小图标的错误信息。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/5.png)\n\n- console.assert\n\n  当第一个参数为 false 时，才会打印第二个参数的值。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/6.png)\n\n**可以根据 JS 条件判断输出不同的日志信息**\n\n> 当需要换到下一行而不是回车的时候，请按 `Shift + Enter`\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/7.png)\n\n#### 与控制台交互\n\n- JS 表达式计算\n\n  可以在控制台中输入 JS 表达式，然后点击 `Enter` 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 `Tab` 键补全命令。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/8.png)\n\n- 选择元素\n\n  **$(selector)**: 列出与 selector 匹配的所有元素。\n\n  **$$(selector)**: 列出与 selector 匹配的所有元素组成了数组。\n\n  **$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 \n\n另外还有两种方法与上面类似：\n\n**document.querySelector(\"img\")**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。\n\n**document.querySelectorAll(\"img\")**：等同于 $$(selector) 。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/9.png)\n\n> 点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。\n\n### Sources\n\n#### 格式化代码\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/10.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/11.png)\n\n以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 `{}` 即可将源代码格式化。\n\n#### Sinppets 代码片段\n\n我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。\n\n以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 `Save` 保存代码。在 sum.js 文件上右键选择 `Run` 即可运行代码，代码的运行结果会在底部的 Console 输出。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/12.png)\n\n此外，**如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。**\n\n比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/13.png)\n\n#### 断点调试\n\n#### 在代码中打断点\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/18.png)\n\n在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。\n\n> 在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。\n\n#### 快速进入调试的方法\n\n当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 `F11` 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 `F10` 或者点击右上角的第二个按钮即可直接进入此方法的断点处。\n\n##### 调试的功能区域介绍\n\n调试的功能区域在调试页面的**右侧**。下图为在某方法处打了一个断点。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/19.png)\n\n- watch\n\n  可以用来实时监视变量的值。\n\n- Call Stack\n\n  断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。\n\n  如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 **Restart Frame** ，那么断点就会跳转到该方法的开头处重新执行。 \n\n- Scope\n\n  可以查看此时局部变量和全局变量的值。\n\n- Breakpoints\n\n  展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。\n\n- XHR Breakpoints\n\n  点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。\n\n- DOM Breakpoints\n\n  当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。\n\n- Event listener Breakpoints \n\n  此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。\n\n\n\n\n\n\n\n\n参考资料：\n\n[Chrome开发者工具详解(1)-Elements、Console、Sources面板](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n[超完整的 Chrome 浏览器客户端调试大全](http://web.jobbole.com/89344/)","source":"_posts/Chrome-开发者工具调试.md","raw":"---\ntitle: Chrome 开发者工具调试\ndate: 2018-3-4\ncategories: \"工具\"\ntags:\n     - Chrome\n     - 工具\n     - 调试\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### Chrome 开发者工具面板简介\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/3.png)\n\n- 箭头图标\n\n  用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。\n\n- 设备图标\n\n  可以选择不同的终端设备、不同的尺寸比例进行模拟开发。\n\n- Elements\n\n  查找网页源代码 HTML 中的任一元素，手动修改任一元素的**属性**和**样式**且能实时在浏览器里面得到反馈。\n\n- Console\n\n  记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .\n\n- Sources\n\n  用于**查看**和**调试**当前页面所加载的脚本的源文件。\n\n- Network\n\n  用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。\n\n- Performance\n\n- Memory\n\n- Application\n\n  记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。\n\n- Security\n\n  判断当前网站的安全性，查看有效证书等。\n\n- Audits\n\n  对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。\n\n### Elements\n\n可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。\n\n- 双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。\n\n- 点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/4.png)\n\n- 点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。\n\n> 注意：**以上对页面上的修改并不会作用到源码上**，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。\n\n### Console\n\n#### 在控制台输出日志\n**在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中**\n\n- console.log\n\n  打印一般的基础日志信息，当要打印的基础日志太多时可使用 `console.group` 将相关的日志进行分组。\n\n- console.warn\n\n  打印带有黄色小图标的警告信息。\n\n- console.error\n\n  打印带有红色小图标的错误信息。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/5.png)\n\n- console.assert\n\n  当第一个参数为 false 时，才会打印第二个参数的值。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/6.png)\n\n**可以根据 JS 条件判断输出不同的日志信息**\n\n> 当需要换到下一行而不是回车的时候，请按 `Shift + Enter`\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/7.png)\n\n#### 与控制台交互\n\n- JS 表达式计算\n\n  可以在控制台中输入 JS 表达式，然后点击 `Enter` 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 `Tab` 键补全命令。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/8.png)\n\n- 选择元素\n\n  **$(selector)**: 列出与 selector 匹配的所有元素。\n\n  **$$(selector)**: 列出与 selector 匹配的所有元素组成了数组。\n\n  **$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 \n\n另外还有两种方法与上面类似：\n\n**document.querySelector(\"img\")**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。\n\n**document.querySelectorAll(\"img\")**：等同于 $$(selector) 。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/9.png)\n\n> 点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。\n\n### Sources\n\n#### 格式化代码\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/10.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/11.png)\n\n以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 `{}` 即可将源代码格式化。\n\n#### Sinppets 代码片段\n\n我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。\n\n以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 `Save` 保存代码。在 sum.js 文件上右键选择 `Run` 即可运行代码，代码的运行结果会在底部的 Console 输出。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/12.png)\n\n此外，**如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。**\n\n比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/13.png)\n\n#### 断点调试\n\n#### 在代码中打断点\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/18.png)\n\n在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。\n\n> 在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。\n\n#### 快速进入调试的方法\n\n当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 `F11` 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 `F10` 或者点击右上角的第二个按钮即可直接进入此方法的断点处。\n\n##### 调试的功能区域介绍\n\n调试的功能区域在调试页面的**右侧**。下图为在某方法处打了一个断点。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/19.png)\n\n- watch\n\n  可以用来实时监视变量的值。\n\n- Call Stack\n\n  断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。\n\n  如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 **Restart Frame** ，那么断点就会跳转到该方法的开头处重新执行。 \n\n- Scope\n\n  可以查看此时局部变量和全局变量的值。\n\n- Breakpoints\n\n  展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。\n\n- XHR Breakpoints\n\n  点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。\n\n- DOM Breakpoints\n\n  当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。\n\n- Event listener Breakpoints \n\n  此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。\n\n\n\n\n\n\n\n\n参考资料：\n\n[Chrome开发者工具详解(1)-Elements、Console、Sources面板](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n[超完整的 Chrome 浏览器客户端调试大全](http://web.jobbole.com/89344/)","slug":"Chrome-开发者工具调试","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcy000mncttc7if80r1","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"Chrome-开发者工具面板简介\"><a href=\"#Chrome-开发者工具面板简介\" class=\"headerlink\" title=\"Chrome 开发者工具面板简介\"></a>Chrome 开发者工具面板简介</h3><p><img src=\"http://pcckwdbix.bkt.clouddn.com/3.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>箭头图标</p>\n<p>用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。</p>\n</li>\n<li><p>设备图标</p>\n<p>可以选择不同的终端设备、不同的尺寸比例进行模拟开发。</p>\n</li>\n<li><p>Elements</p>\n<p>查找网页源代码 HTML 中的任一元素，手动修改任一元素的<strong>属性</strong>和<strong>样式</strong>且能实时在浏览器里面得到反馈。</p>\n</li>\n<li><p>Console</p>\n<p>记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .</p>\n</li>\n<li><p>Sources</p>\n<p>用于<strong>查看</strong>和<strong>调试</strong>当前页面所加载的脚本的源文件。</p>\n</li>\n<li><p>Network</p>\n<p>用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。</p>\n</li>\n<li><p>Performance</p>\n</li>\n<li><p>Memory</p>\n</li>\n<li><p>Application</p>\n<p>记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p>\n</li>\n<li><p>Security</p>\n<p>判断当前网站的安全性，查看有效证书等。</p>\n</li>\n<li><p>Audits</p>\n<p>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。</p>\n</li>\n</ul>\n<h3 id=\"Elements\"><a href=\"#Elements\" class=\"headerlink\" title=\"Elements\"></a>Elements</h3><p>可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。</p>\n<ul>\n<li><p>双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。</p>\n</li>\n<li><p>点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/4.png\" alt=\"Mou icon\"></p>\n<ul>\n<li>点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。</li>\n</ul>\n<blockquote>\n<p>注意：<strong>以上对页面上的修改并不会作用到源码上</strong>，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。</p>\n</blockquote>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><h4 id=\"在控制台输出日志\"><a href=\"#在控制台输出日志\" class=\"headerlink\" title=\"在控制台输出日志\"></a>在控制台输出日志</h4><p><strong>在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中</strong></p>\n<ul>\n<li><p>console.log</p>\n<p>打印一般的基础日志信息，当要打印的基础日志太多时可使用 <code>console.group</code> 将相关的日志进行分组。</p>\n</li>\n<li><p>console.warn</p>\n<p>打印带有黄色小图标的警告信息。</p>\n</li>\n<li><p>console.error</p>\n<p>打印带有红色小图标的错误信息。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/5.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>console.assert</p>\n<p>当第一个参数为 false 时，才会打印第二个参数的值。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/6.png\" alt=\"Mou icon\"></p>\n<p><strong>可以根据 JS 条件判断输出不同的日志信息</strong></p>\n<blockquote>\n<p>当需要换到下一行而不是回车的时候，请按 <code>Shift + Enter</code></p>\n</blockquote>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/7.png\" alt=\"Mou icon\"></p>\n<h4 id=\"与控制台交互\"><a href=\"#与控制台交互\" class=\"headerlink\" title=\"与控制台交互\"></a>与控制台交互</h4><ul>\n<li><p>JS 表达式计算</p>\n<p>可以在控制台中输入 JS 表达式，然后点击 <code>Enter</code> 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 <code>Tab</code> 键补全命令。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/8.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>选择元素</p>\n<p><strong>$(selector)</strong>: 列出与 selector 匹配的所有元素。</p>\n<p><strong>$$(selector)</strong>: 列出与 selector 匹配的所有元素组成了数组。</p>\n<p>**$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。</p>\n</li>\n</ul>\n<p>另外还有两种方法与上面类似：</p>\n<p>**document.querySelector(“img”)**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。</p>\n<p>**document.querySelectorAll(“img”)**：等同于 $$(selector) 。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/9.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。</p>\n</blockquote>\n<h3 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h3><h4 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/10.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/11.png\" alt=\"Mou icon\"></p>\n<p>以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 <code>&#123;&#125;</code> 即可将源代码格式化。</p>\n<h4 id=\"Sinppets-代码片段\"><a href=\"#Sinppets-代码片段\" class=\"headerlink\" title=\"Sinppets 代码片段\"></a>Sinppets 代码片段</h4><p>我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。</p>\n<p>以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 <code>Save</code> 保存代码。在 sum.js 文件上右键选择 <code>Run</code> 即可运行代码，代码的运行结果会在底部的 Console 输出。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/12.png\" alt=\"Mou icon\"></p>\n<p>此外，<strong>如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。</strong></p>\n<p>比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/13.png\" alt=\"Mou icon\"></p>\n<h4 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h4><h4 id=\"在代码中打断点\"><a href=\"#在代码中打断点\" class=\"headerlink\" title=\"在代码中打断点\"></a>在代码中打断点</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/18.png\" alt=\"Mou icon\"></p>\n<p>在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停&#x2F;继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用&#x2F;启用所有断点。</p>\n<blockquote>\n<p>在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。</p>\n</blockquote>\n<h4 id=\"快速进入调试的方法\"><a href=\"#快速进入调试的方法\" class=\"headerlink\" title=\"快速进入调试的方法\"></a>快速进入调试的方法</h4><p>当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 <code>F11</code> 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 <code>F10</code> 或者点击右上角的第二个按钮即可直接进入此方法的断点处。</p>\n<h5 id=\"调试的功能区域介绍\"><a href=\"#调试的功能区域介绍\" class=\"headerlink\" title=\"调试的功能区域介绍\"></a>调试的功能区域介绍</h5><p>调试的功能区域在调试页面的<strong>右侧</strong>。下图为在某方法处打了一个断点。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/19.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>watch</p>\n<p>可以用来实时监视变量的值。</p>\n</li>\n<li><p>Call Stack</p>\n<p>断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。</p>\n<p>如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 <strong>Restart Frame</strong> ，那么断点就会跳转到该方法的开头处重新执行。 </p>\n</li>\n<li><p>Scope</p>\n<p>可以查看此时局部变量和全局变量的值。</p>\n</li>\n<li><p>Breakpoints</p>\n<p>展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。</p>\n</li>\n<li><p>XHR Breakpoints</p>\n<p>点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。</p>\n</li>\n<li><p>DOM Breakpoints</p>\n<p>当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。</p>\n</li>\n<li><p>Event listener Breakpoints </p>\n<p>此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。</p>\n</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\">Chrome开发者工具详解(1)-Elements、Console、Sources面板</a></p>\n<p><a href=\"http://web.jobbole.com/89344/\">超完整的 Chrome 浏览器客户端调试大全</a></p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"Chrome-开发者工具面板简介\"><a href=\"#Chrome-开发者工具面板简介\" class=\"headerlink\" title=\"Chrome 开发者工具面板简介\"></a>Chrome 开发者工具面板简介</h3><p><img src=\"http://pcckwdbix.bkt.clouddn.com/3.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>箭头图标</p>\n<p>用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。</p>\n</li>\n<li><p>设备图标</p>\n<p>可以选择不同的终端设备、不同的尺寸比例进行模拟开发。</p>\n</li>\n<li><p>Elements</p>\n<p>查找网页源代码 HTML 中的任一元素，手动修改任一元素的<strong>属性</strong>和<strong>样式</strong>且能实时在浏览器里面得到反馈。</p>\n</li>\n<li><p>Console</p>\n<p>记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .</p>\n</li>\n<li><p>Sources</p>\n<p>用于<strong>查看</strong>和<strong>调试</strong>当前页面所加载的脚本的源文件。</p>\n</li>\n<li><p>Network</p>\n<p>用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。</p>\n</li>\n<li><p>Performance</p>\n</li>\n<li><p>Memory</p>\n</li>\n<li><p>Application</p>\n<p>记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p>\n</li>\n<li><p>Security</p>\n<p>判断当前网站的安全性，查看有效证书等。</p>\n</li>\n<li><p>Audits</p>\n<p>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。</p>\n</li>\n</ul>\n<h3 id=\"Elements\"><a href=\"#Elements\" class=\"headerlink\" title=\"Elements\"></a>Elements</h3><p>可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。</p>\n<ul>\n<li><p>双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。</p>\n</li>\n<li><p>点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/4.png\" alt=\"Mou icon\"></p>\n<ul>\n<li>点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。</li>\n</ul>\n<blockquote>\n<p>注意：<strong>以上对页面上的修改并不会作用到源码上</strong>，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。</p>\n</blockquote>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><h4 id=\"在控制台输出日志\"><a href=\"#在控制台输出日志\" class=\"headerlink\" title=\"在控制台输出日志\"></a>在控制台输出日志</h4><p><strong>在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中</strong></p>\n<ul>\n<li><p>console.log</p>\n<p>打印一般的基础日志信息，当要打印的基础日志太多时可使用 <code>console.group</code> 将相关的日志进行分组。</p>\n</li>\n<li><p>console.warn</p>\n<p>打印带有黄色小图标的警告信息。</p>\n</li>\n<li><p>console.error</p>\n<p>打印带有红色小图标的错误信息。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/5.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>console.assert</p>\n<p>当第一个参数为 false 时，才会打印第二个参数的值。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/6.png\" alt=\"Mou icon\"></p>\n<p><strong>可以根据 JS 条件判断输出不同的日志信息</strong></p>\n<blockquote>\n<p>当需要换到下一行而不是回车的时候，请按 <code>Shift + Enter</code></p>\n</blockquote>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/7.png\" alt=\"Mou icon\"></p>\n<h4 id=\"与控制台交互\"><a href=\"#与控制台交互\" class=\"headerlink\" title=\"与控制台交互\"></a>与控制台交互</h4><ul>\n<li><p>JS 表达式计算</p>\n<p>可以在控制台中输入 JS 表达式，然后点击 <code>Enter</code> 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 <code>Tab</code> 键补全命令。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/8.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>选择元素</p>\n<p><strong>$(selector)</strong>: 列出与 selector 匹配的所有元素。</p>\n<p><strong>$$(selector)</strong>: 列出与 selector 匹配的所有元素组成了数组。</p>\n<p>**$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。</p>\n</li>\n</ul>\n<p>另外还有两种方法与上面类似：</p>\n<p>**document.querySelector(“img”)**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。</p>\n<p>**document.querySelectorAll(“img”)**：等同于 $$(selector) 。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/9.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。</p>\n</blockquote>\n<h3 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h3><h4 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/10.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/11.png\" alt=\"Mou icon\"></p>\n<p>以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 <code>&#123;&#125;</code> 即可将源代码格式化。</p>\n<h4 id=\"Sinppets-代码片段\"><a href=\"#Sinppets-代码片段\" class=\"headerlink\" title=\"Sinppets 代码片段\"></a>Sinppets 代码片段</h4><p>我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。</p>\n<p>以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 <code>Save</code> 保存代码。在 sum.js 文件上右键选择 <code>Run</code> 即可运行代码，代码的运行结果会在底部的 Console 输出。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/12.png\" alt=\"Mou icon\"></p>\n<p>此外，<strong>如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。</strong></p>\n<p>比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/13.png\" alt=\"Mou icon\"></p>\n<h4 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h4><h4 id=\"在代码中打断点\"><a href=\"#在代码中打断点\" class=\"headerlink\" title=\"在代码中打断点\"></a>在代码中打断点</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/18.png\" alt=\"Mou icon\"></p>\n<p>在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停&#x2F;继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用&#x2F;启用所有断点。</p>\n<blockquote>\n<p>在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。</p>\n</blockquote>\n<h4 id=\"快速进入调试的方法\"><a href=\"#快速进入调试的方法\" class=\"headerlink\" title=\"快速进入调试的方法\"></a>快速进入调试的方法</h4><p>当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 <code>F11</code> 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 <code>F10</code> 或者点击右上角的第二个按钮即可直接进入此方法的断点处。</p>\n<h5 id=\"调试的功能区域介绍\"><a href=\"#调试的功能区域介绍\" class=\"headerlink\" title=\"调试的功能区域介绍\"></a>调试的功能区域介绍</h5><p>调试的功能区域在调试页面的<strong>右侧</strong>。下图为在某方法处打了一个断点。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/19.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>watch</p>\n<p>可以用来实时监视变量的值。</p>\n</li>\n<li><p>Call Stack</p>\n<p>断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。</p>\n<p>如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 <strong>Restart Frame</strong> ，那么断点就会跳转到该方法的开头处重新执行。 </p>\n</li>\n<li><p>Scope</p>\n<p>可以查看此时局部变量和全局变量的值。</p>\n</li>\n<li><p>Breakpoints</p>\n<p>展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。</p>\n</li>\n<li><p>XHR Breakpoints</p>\n<p>点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。</p>\n</li>\n<li><p>DOM Breakpoints</p>\n<p>当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。</p>\n</li>\n<li><p>Event listener Breakpoints </p>\n<p>此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。</p>\n</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\">Chrome开发者工具详解(1)-Elements、Console、Sources面板</a></p>\n<p><a href=\"http://web.jobbole.com/89344/\">超完整的 Chrome 浏览器客户端调试大全</a></p>\n"},{"title":"Chrome 插件","date":"2017-12-05T16:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### [Insight.io for Github](https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog)\n\nGitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。\n\n### [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog)\n\n可以在 GitHub 和 GitLab 左侧显示目录树结构。\n\n### [GitCodeTree](https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog)\n\n基于 octotree 的[码云](http://gitee.com)文件树插件。\n\n### [jsonView jsonViewer json formatter 格式化](https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog)\n\n格式化、着色、美观、易读 ... jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。\n\n### [Adblock](https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom)\n\n号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。\n\n### 广告终结者\n\n清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。\n\n### [Axure RP Extension for Chrome](https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp)\n\n原型设计工具。\n\n### [Google文档、表格及幻灯片的Office编辑扩展程序](https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog)\n\n使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。\n\n### [Clear Cache](https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon)\n\nClear your cache and browsing data with a single click of a button .\n\n### [Convertio : 文件格式转换不再是问题](https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon)\n\nConvertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！\n\n### [Infinity : 自定义新标签页，极速访问页面](https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon)\n\n使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。\n\n### [OneTab : 一键收纳N个标签页，还你一个清爽的浏览器](https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon)\n\n一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 `alt + shift + 1` 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。\n\n### [Kami : PDF 阅读、批注、OCR](https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon)\n\nPDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！\n\n### [Save to Pocket : 一键保存任何内容，以供离线查看](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon)\n\nPocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。\n\n### [Fireshot : 网页截图和另存为 PDF](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon)\n\n很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！\n\n### [Dark Reader - 护眼扩展程序](https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon)\n\n黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。\n\n### [LastPass：密码管理软件](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd)\nLastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。\n\n### [二维码（QR 码）生成器](https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg)\n\n在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！\n\n### [下载+](https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf)\nChrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。\n\n### [快捷扩展管理](https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon)\nChrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。\n\n### [购物党](https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah)\n在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。\n\n### [右键搜](https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn)\nChrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。\n\n### [Cloudbleed Bookmark Checker：检测书签是否有死链](https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en)\n对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。\n\n### [Imagus](https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog)\n鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。\n\n### [WhatRuns](https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip)\nWhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。\n\n### [Reader View：Chrome 也有 Safari 的阅读模式](https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl)\n将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。\n\n### [为什么你们就是不能加个空格呢](https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd)\n每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？\n你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。\n\n### [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)\n相信开发者朋友一定知道这款插件，这是一款强大的 API & HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。\n\n### [Picee（基于 Github API 的图床）](https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related)\n具体介绍可以参考[基于 Github API 的图床 Chrome 插件开发全纪录](https://juejin.im/post/5cd38990e51d453a543f9e3e)\n","source":"_posts/Chrome-插件.md","raw":"---\ntitle: Chrome 插件\ndate: 2017-12-6\ncategories: \"工具\"\ntags:\n     - Chrome\n     - 工具\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n### [Insight.io for Github](https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog)\n\nGitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。\n\n### [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog)\n\n可以在 GitHub 和 GitLab 左侧显示目录树结构。\n\n### [GitCodeTree](https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog)\n\n基于 octotree 的[码云](http://gitee.com)文件树插件。\n\n### [jsonView jsonViewer json formatter 格式化](https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog)\n\n格式化、着色、美观、易读 ... jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。\n\n### [Adblock](https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom)\n\n号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。\n\n### 广告终结者\n\n清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。\n\n### [Axure RP Extension for Chrome](https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp)\n\n原型设计工具。\n\n### [Google文档、表格及幻灯片的Office编辑扩展程序](https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog)\n\n使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。\n\n### [Clear Cache](https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon)\n\nClear your cache and browsing data with a single click of a button .\n\n### [Convertio : 文件格式转换不再是问题](https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon)\n\nConvertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！\n\n### [Infinity : 自定义新标签页，极速访问页面](https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon)\n\n使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。\n\n### [OneTab : 一键收纳N个标签页，还你一个清爽的浏览器](https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon)\n\n一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 `alt + shift + 1` 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。\n\n### [Kami : PDF 阅读、批注、OCR](https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon)\n\nPDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！\n\n### [Save to Pocket : 一键保存任何内容，以供离线查看](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon)\n\nPocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。\n\n### [Fireshot : 网页截图和另存为 PDF](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon)\n\n很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！\n\n### [Dark Reader - 护眼扩展程序](https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon)\n\n黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。\n\n### [LastPass：密码管理软件](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd)\nLastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。\n\n### [二维码（QR 码）生成器](https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg)\n\n在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！\n\n### [下载+](https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf)\nChrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。\n\n### [快捷扩展管理](https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon)\nChrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。\n\n### [购物党](https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah)\n在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。\n\n### [右键搜](https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn)\nChrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。\n\n### [Cloudbleed Bookmark Checker：检测书签是否有死链](https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en)\n对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。\n\n### [Imagus](https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog)\n鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。\n\n### [WhatRuns](https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip)\nWhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。\n\n### [Reader View：Chrome 也有 Safari 的阅读模式](https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl)\n将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。\n\n### [为什么你们就是不能加个空格呢](https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd)\n每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？\n你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。\n\n### [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)\n相信开发者朋友一定知道这款插件，这是一款强大的 API & HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。\n\n### [Picee（基于 Github API 的图床）](https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related)\n具体介绍可以参考[基于 Github API 的图床 Chrome 插件开发全纪录](https://juejin.im/post/5cd38990e51d453a543f9e3e)\n","slug":"Chrome-插件","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rcz000pnctt1ysn9vy1","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"Insight-io-for-Github\"><a href=\"#Insight-io-for-Github\" class=\"headerlink\" title=\"Insight.io for Github\"></a><a href=\"https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog\">Insight.io for Github</a></h3><p>GitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。</p>\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog\">Octotree</a></h3><p>可以在 GitHub 和 GitLab 左侧显示目录树结构。</p>\n<h3 id=\"GitCodeTree\"><a href=\"#GitCodeTree\" class=\"headerlink\" title=\"GitCodeTree\"></a><a href=\"https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog\">GitCodeTree</a></h3><p>基于 octotree 的<a href=\"http://gitee.com/\">码云</a>文件树插件。</p>\n<h3 id=\"jsonView-jsonViewer-json-formatter-格式化\"><a href=\"#jsonView-jsonViewer-json-formatter-格式化\" class=\"headerlink\" title=\"jsonView jsonViewer json formatter 格式化\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog\">jsonView jsonViewer json formatter 格式化</a></h3><p>格式化、着色、美观、易读 … jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。</p>\n<h3 id=\"Adblock\"><a href=\"#Adblock\" class=\"headerlink\" title=\"Adblock\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom\">Adblock</a></h3><p>号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。</p>\n<h3 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h3><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。</p>\n<h3 id=\"Axure-RP-Extension-for-Chrome\"><a href=\"#Axure-RP-Extension-for-Chrome\" class=\"headerlink\" title=\"Axure RP Extension for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp\">Axure RP Extension for Chrome</a></h3><p>原型设计工具。</p>\n<h3 id=\"Google文档、表格及幻灯片的Office编辑扩展程序\"><a href=\"#Google文档、表格及幻灯片的Office编辑扩展程序\" class=\"headerlink\" title=\"Google文档、表格及幻灯片的Office编辑扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog\">Google文档、表格及幻灯片的Office编辑扩展程序</a></h3><p>使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。</p>\n<h3 id=\"Clear-Cache\"><a href=\"#Clear-Cache\" class=\"headerlink\" title=\"Clear Cache\"></a><a href=\"https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon\">Clear Cache</a></h3><p>Clear your cache and browsing data with a single click of a button .</p>\n<h3 id=\"Convertio-文件格式转换不再是问题\"><a href=\"#Convertio-文件格式转换不再是问题\" class=\"headerlink\" title=\"Convertio : 文件格式转换不再是问题\"></a><a href=\"https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon\">Convertio : 文件格式转换不再是问题</a></h3><p>Convertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！</p>\n<h3 id=\"Infinity-自定义新标签页，极速访问页面\"><a href=\"#Infinity-自定义新标签页，极速访问页面\" class=\"headerlink\" title=\"Infinity : 自定义新标签页，极速访问页面\"></a><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon\">Infinity : 自定义新标签页，极速访问页面</a></h3><p>使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。</p>\n<h3 id=\"OneTab-一键收纳N个标签页，还你一个清爽的浏览器\"><a href=\"#OneTab-一键收纳N个标签页，还你一个清爽的浏览器\" class=\"headerlink\" title=\"OneTab : 一键收纳N个标签页，还你一个清爽的浏览器\"></a><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon\">OneTab : 一键收纳N个标签页，还你一个清爽的浏览器</a></h3><p>一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 <code>alt + shift + 1</code> 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。</p>\n<h3 id=\"Kami-PDF-阅读、批注、OCR\"><a href=\"#Kami-PDF-阅读、批注、OCR\" class=\"headerlink\" title=\"Kami : PDF 阅读、批注、OCR\"></a><a href=\"https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon\">Kami : PDF 阅读、批注、OCR</a></h3><p>PDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！</p>\n<h3 id=\"Save-to-Pocket-一键保存任何内容，以供离线查看\"><a href=\"#Save-to-Pocket-一键保存任何内容，以供离线查看\" class=\"headerlink\" title=\"Save to Pocket : 一键保存任何内容，以供离线查看\"></a><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon\">Save to Pocket : 一键保存任何内容，以供离线查看</a></h3><p>Pocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。</p>\n<h3 id=\"Fireshot-网页截图和另存为-PDF\"><a href=\"#Fireshot-网页截图和另存为-PDF\" class=\"headerlink\" title=\"Fireshot : 网页截图和另存为 PDF\"></a><a href=\"https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon\">Fireshot : 网页截图和另存为 PDF</a></h3><p>很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！</p>\n<h3 id=\"Dark-Reader-护眼扩展程序\"><a href=\"#Dark-Reader-护眼扩展程序\" class=\"headerlink\" title=\"Dark Reader - 护眼扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon\">Dark Reader - 护眼扩展程序</a></h3><p>黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。</p>\n<h3 id=\"LastPass：密码管理软件\"><a href=\"#LastPass：密码管理软件\" class=\"headerlink\" title=\"LastPass：密码管理软件\"></a><a href=\"https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd\">LastPass：密码管理软件</a></h3><p>LastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。</p>\n<h3 id=\"二维码（QR-码）生成器\"><a href=\"#二维码（QR-码）生成器\" class=\"headerlink\" title=\"二维码（QR 码）生成器\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg\">二维码（QR 码）生成器</a></h3><p>在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载+\"></a><a href=\"https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf\">下载+</a></h3><p>Chrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。</p>\n<h3 id=\"快捷扩展管理\"><a href=\"#快捷扩展管理\" class=\"headerlink\" title=\"快捷扩展管理\"></a><a href=\"https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon\">快捷扩展管理</a></h3><p>Chrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。</p>\n<h3 id=\"购物党\"><a href=\"#购物党\" class=\"headerlink\" title=\"购物党\"></a><a href=\"https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah\">购物党</a></h3><p>在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。</p>\n<h3 id=\"右键搜\"><a href=\"#右键搜\" class=\"headerlink\" title=\"右键搜\"></a><a href=\"https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn\">右键搜</a></h3><p>Chrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。</p>\n<h3 id=\"Cloudbleed-Bookmark-Checker：检测书签是否有死链\"><a href=\"#Cloudbleed-Bookmark-Checker：检测书签是否有死链\" class=\"headerlink\" title=\"Cloudbleed Bookmark Checker：检测书签是否有死链\"></a><a href=\"https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en\">Cloudbleed Bookmark Checker：检测书签是否有死链</a></h3><p>对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。</p>\n<h3 id=\"Imagus\"><a href=\"#Imagus\" class=\"headerlink\" title=\"Imagus\"></a><a href=\"https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog\">Imagus</a></h3><p>鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频&#x2F;音频和内容专辑。</p>\n<h3 id=\"WhatRuns\"><a href=\"#WhatRuns\" class=\"headerlink\" title=\"WhatRuns\"></a><a href=\"https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip\">WhatRuns</a></h3><p>WhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。</p>\n<h3 id=\"Reader-View：Chrome-也有-Safari-的阅读模式\"><a href=\"#Reader-View：Chrome-也有-Safari-的阅读模式\" class=\"headerlink\" title=\"Reader View：Chrome 也有 Safari 的阅读模式\"></a><a href=\"https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl\">Reader View：Chrome 也有 Safari 的阅读模式</a></h3><p>将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。</p>\n<h3 id=\"为什么你们就是不能加个空格呢\"><a href=\"#为什么你们就是不能加个空格呢\" class=\"headerlink\" title=\"为什么你们就是不能加个空格呢\"></a><a href=\"https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd\">为什么你们就是不能加个空格呢</a></h3><p>每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？<br>你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。</p>\n<h3 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a><a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop\">Postman</a></h3><p>相信开发者朋友一定知道这款插件，这是一款强大的 API &amp; HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。</p>\n<h3 id=\"Picee（基于-Github-API-的图床）\"><a href=\"#Picee（基于-Github-API-的图床）\" class=\"headerlink\" title=\"Picee（基于 Github API 的图床）\"></a><a href=\"https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related\">Picee（基于 Github API 的图床）</a></h3><p>具体介绍可以参考<a href=\"https://juejin.im/post/5cd38990e51d453a543f9e3e\">基于 Github API 的图床 Chrome 插件开发全纪录</a></p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n\n<h3 id=\"Insight-io-for-Github\"><a href=\"#Insight-io-for-Github\" class=\"headerlink\" title=\"Insight.io for Github\"></a><a href=\"https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog\">Insight.io for Github</a></h3><p>GitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。</p>\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog\">Octotree</a></h3><p>可以在 GitHub 和 GitLab 左侧显示目录树结构。</p>\n<h3 id=\"GitCodeTree\"><a href=\"#GitCodeTree\" class=\"headerlink\" title=\"GitCodeTree\"></a><a href=\"https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog\">GitCodeTree</a></h3><p>基于 octotree 的<a href=\"http://gitee.com/\">码云</a>文件树插件。</p>\n<h3 id=\"jsonView-jsonViewer-json-formatter-格式化\"><a href=\"#jsonView-jsonViewer-json-formatter-格式化\" class=\"headerlink\" title=\"jsonView jsonViewer json formatter 格式化\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog\">jsonView jsonViewer json formatter 格式化</a></h3><p>格式化、着色、美观、易读 … jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。</p>\n<h3 id=\"Adblock\"><a href=\"#Adblock\" class=\"headerlink\" title=\"Adblock\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom\">Adblock</a></h3><p>号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。</p>\n<h3 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h3><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。</p>\n<h3 id=\"Axure-RP-Extension-for-Chrome\"><a href=\"#Axure-RP-Extension-for-Chrome\" class=\"headerlink\" title=\"Axure RP Extension for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp\">Axure RP Extension for Chrome</a></h3><p>原型设计工具。</p>\n<h3 id=\"Google文档、表格及幻灯片的Office编辑扩展程序\"><a href=\"#Google文档、表格及幻灯片的Office编辑扩展程序\" class=\"headerlink\" title=\"Google文档、表格及幻灯片的Office编辑扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog\">Google文档、表格及幻灯片的Office编辑扩展程序</a></h3><p>使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。</p>\n<h3 id=\"Clear-Cache\"><a href=\"#Clear-Cache\" class=\"headerlink\" title=\"Clear Cache\"></a><a href=\"https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon\">Clear Cache</a></h3><p>Clear your cache and browsing data with a single click of a button .</p>\n<h3 id=\"Convertio-文件格式转换不再是问题\"><a href=\"#Convertio-文件格式转换不再是问题\" class=\"headerlink\" title=\"Convertio : 文件格式转换不再是问题\"></a><a href=\"https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon\">Convertio : 文件格式转换不再是问题</a></h3><p>Convertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！</p>\n<h3 id=\"Infinity-自定义新标签页，极速访问页面\"><a href=\"#Infinity-自定义新标签页，极速访问页面\" class=\"headerlink\" title=\"Infinity : 自定义新标签页，极速访问页面\"></a><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon\">Infinity : 自定义新标签页，极速访问页面</a></h3><p>使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。</p>\n<h3 id=\"OneTab-一键收纳N个标签页，还你一个清爽的浏览器\"><a href=\"#OneTab-一键收纳N个标签页，还你一个清爽的浏览器\" class=\"headerlink\" title=\"OneTab : 一键收纳N个标签页，还你一个清爽的浏览器\"></a><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon\">OneTab : 一键收纳N个标签页，还你一个清爽的浏览器</a></h3><p>一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 <code>alt + shift + 1</code> 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。</p>\n<h3 id=\"Kami-PDF-阅读、批注、OCR\"><a href=\"#Kami-PDF-阅读、批注、OCR\" class=\"headerlink\" title=\"Kami : PDF 阅读、批注、OCR\"></a><a href=\"https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon\">Kami : PDF 阅读、批注、OCR</a></h3><p>PDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！</p>\n<h3 id=\"Save-to-Pocket-一键保存任何内容，以供离线查看\"><a href=\"#Save-to-Pocket-一键保存任何内容，以供离线查看\" class=\"headerlink\" title=\"Save to Pocket : 一键保存任何内容，以供离线查看\"></a><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon\">Save to Pocket : 一键保存任何内容，以供离线查看</a></h3><p>Pocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。</p>\n<h3 id=\"Fireshot-网页截图和另存为-PDF\"><a href=\"#Fireshot-网页截图和另存为-PDF\" class=\"headerlink\" title=\"Fireshot : 网页截图和另存为 PDF\"></a><a href=\"https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon\">Fireshot : 网页截图和另存为 PDF</a></h3><p>很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！</p>\n<h3 id=\"Dark-Reader-护眼扩展程序\"><a href=\"#Dark-Reader-护眼扩展程序\" class=\"headerlink\" title=\"Dark Reader - 护眼扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon\">Dark Reader - 护眼扩展程序</a></h3><p>黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。</p>\n<h3 id=\"LastPass：密码管理软件\"><a href=\"#LastPass：密码管理软件\" class=\"headerlink\" title=\"LastPass：密码管理软件\"></a><a href=\"https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd\">LastPass：密码管理软件</a></h3><p>LastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。</p>\n<h3 id=\"二维码（QR-码）生成器\"><a href=\"#二维码（QR-码）生成器\" class=\"headerlink\" title=\"二维码（QR 码）生成器\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg\">二维码（QR 码）生成器</a></h3><p>在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载+\"></a><a href=\"https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf\">下载+</a></h3><p>Chrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。</p>\n<h3 id=\"快捷扩展管理\"><a href=\"#快捷扩展管理\" class=\"headerlink\" title=\"快捷扩展管理\"></a><a href=\"https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon\">快捷扩展管理</a></h3><p>Chrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。</p>\n<h3 id=\"购物党\"><a href=\"#购物党\" class=\"headerlink\" title=\"购物党\"></a><a href=\"https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah\">购物党</a></h3><p>在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。</p>\n<h3 id=\"右键搜\"><a href=\"#右键搜\" class=\"headerlink\" title=\"右键搜\"></a><a href=\"https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn\">右键搜</a></h3><p>Chrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。</p>\n<h3 id=\"Cloudbleed-Bookmark-Checker：检测书签是否有死链\"><a href=\"#Cloudbleed-Bookmark-Checker：检测书签是否有死链\" class=\"headerlink\" title=\"Cloudbleed Bookmark Checker：检测书签是否有死链\"></a><a href=\"https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en\">Cloudbleed Bookmark Checker：检测书签是否有死链</a></h3><p>对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。</p>\n<h3 id=\"Imagus\"><a href=\"#Imagus\" class=\"headerlink\" title=\"Imagus\"></a><a href=\"https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog\">Imagus</a></h3><p>鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频&#x2F;音频和内容专辑。</p>\n<h3 id=\"WhatRuns\"><a href=\"#WhatRuns\" class=\"headerlink\" title=\"WhatRuns\"></a><a href=\"https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip\">WhatRuns</a></h3><p>WhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。</p>\n<h3 id=\"Reader-View：Chrome-也有-Safari-的阅读模式\"><a href=\"#Reader-View：Chrome-也有-Safari-的阅读模式\" class=\"headerlink\" title=\"Reader View：Chrome 也有 Safari 的阅读模式\"></a><a href=\"https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl\">Reader View：Chrome 也有 Safari 的阅读模式</a></h3><p>将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。</p>\n<h3 id=\"为什么你们就是不能加个空格呢\"><a href=\"#为什么你们就是不能加个空格呢\" class=\"headerlink\" title=\"为什么你们就是不能加个空格呢\"></a><a href=\"https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd\">为什么你们就是不能加个空格呢</a></h3><p>每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？<br>你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。</p>\n<h3 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a><a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop\">Postman</a></h3><p>相信开发者朋友一定知道这款插件，这是一款强大的 API &amp; HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。</p>\n<h3 id=\"Picee（基于-Github-API-的图床）\"><a href=\"#Picee（基于-Github-API-的图床）\" class=\"headerlink\" title=\"Picee（基于 Github API 的图床）\"></a><a href=\"https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related\">Picee（基于 Github API 的图床）</a></h3><p>具体介绍可以参考<a href=\"https://juejin.im/post/5cd38990e51d453a543f9e3e\">基于 Github API 的图床 Chrome 插件开发全纪录</a></p>\n"},{"title":"Java 一个方法返回多个整型值","date":"2018-06-23T04:51:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n### 前言\n\n在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        return 0;\n    }\n```\n\ngetItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？\n\n### 场景\n\n当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        return 0;\n    }\n```\n\n### 解决方法\n\n一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        int result = (state & 0x7fff) << 16;\n        result |= (type & 0x7fff);\n\n        return result;\n    }\n```\n\n在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .\n\n```Java\n   @Override\n    public AbstractChatHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        ViewHolder viewHolder;\n\n        int type = viewType & 0x7fff;\n        int state = (viewType >> 16) & 0x7fff;\n\n        // 根据 state 和 type 创建各种 ViewHolder ......\n\n        // 省略其它代码 ......\n\n        return viewHolder;\n    }\n```\n\n### 注意点\n\n- state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位\n\n","source":"_posts/Java-一个方法返回多个整型值.md","raw":"---\ntitle: Java 一个方法返回多个整型值\ndate: 2018-6-23 12:51:00\ncategories: \"二进制\"\ntags:\n     - Java\n     - Android\n     - 二进制\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n### 前言\n\n在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        return 0;\n    }\n```\n\ngetItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？\n\n### 场景\n\n当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        return 0;\n    }\n```\n\n### 解决方法\n\n一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        int result = (state & 0x7fff) << 16;\n        result |= (type & 0x7fff);\n\n        return result;\n    }\n```\n\n在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .\n\n```Java\n   @Override\n    public AbstractChatHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        ViewHolder viewHolder;\n\n        int type = viewType & 0x7fff;\n        int state = (viewType >> 16) & 0x7fff;\n\n        // 根据 state 和 type 创建各种 ViewHolder ......\n\n        // 省略其它代码 ......\n\n        return viewHolder;\n    }\n```\n\n### 注意点\n\n- state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位\n\n","slug":"Java-一个方法返回多个整型值","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd0000uncttdxnn9t8s","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemViewType</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>getItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemViewType</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemViewType</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (state &amp; <span class=\"number\">0x7fff</span>) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    result |= (type &amp; <span class=\"number\">0x7fff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> AbstractChatHolder <span class=\"title function_\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"type\">int</span> viewType)</span> &#123;</span><br><span class=\"line\">     ViewHolder viewHolder;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> viewType &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> (viewType &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 根据 state 和 type 创建各种 ViewHolder ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 省略其它代码 ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> viewHolder;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位</li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemViewType</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>getItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemViewType</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemViewType</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (state &amp; <span class=\"number\">0x7fff</span>) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    result |= (type &amp; <span class=\"number\">0x7fff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> AbstractChatHolder <span class=\"title function_\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"type\">int</span> viewType)</span> &#123;</span><br><span class=\"line\">     ViewHolder viewHolder;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> viewType &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> (viewType &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 根据 state 和 type 创建各种 ViewHolder ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 省略其它代码 ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> viewHolder;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位</li>\n</ul>\n"},{"title":"Dart 学习笔记","date":"2020-12-30T07:56:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n> 本笔记整理自大地老师的 Dart 笔记，同时加入了自己写的一些测试例子。\n\n\n### 环境搭建\n\n要在我们本地开发 Dart 程序的话首先需要安装 Dart SDK\n\n官方文档：https://dart.dev/get-dart\n```dart\nwindows(推荐):\n\n  http://www.gekorm.com/dart-windows/\n\nmac：\n\n  如果 mac 电脑没有安装 brew 这个工具首先第一步需要安装它： https://brew.sh/\n\n  brew tap dart-lang/dart\n    \n  brew install dart\n```\n\n### 开发工具\n```dart\nDart 的开发工具有很多： IntelliJ IDEA  、 WebStorm、 Atom、Vscode 等\n\n这里我们主要给大家讲解的是如果在 vscode 中配置 Dart。\n    \n1、找到 vscode 插件安装 Dart\n\n2、找到 vscode 插件安装 code runner, Code Runner 可以运行我们的文件\n```\n\n### 变量\nDart 中定义变量可以使用具体的类型（int、double、String、bool 等）申明 ，也可以通过 var 关键字来申明变量。\n\n### 常量\n> final 和 const 修饰符都可以表示常量。\n\n- const 值不变，一开始就得赋值。\n- final 可以开始不赋值，只能赋一次。而 final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。\n- 注意：永远不改变的量，请使用 final 或 const 修饰它，而不是使用 var 或其他变量类型。\n```dart\nmain() {\n  const PI = 3.14159;\n  // PI = 3.14; // 报错\n  print(PI);\n\n  // const x = new DateTime.now(); // 报错\n\n  final a = 1;\n  // a = 2; // 报错\n  print(a);\n\n  final time = new DateTime.now();\n  print(time);\n}\n```\n\n### 常用数据类型\nDart 中支持以下常用数据类型：\n```dart\nNumbers（数值）\n    int\n    double\nStrings（字符串）\n    String\nBooleans(布尔)\n    bool\nList（数组）\n    在 Dart 中，数组是列表对象，所以大多数人只是称它们为列表\nMaps（字典）\n    通常来说，Map 是一个键值对相关的对象。键和值可以是任何类型的对象。每个键只出现一次，而一个值则可以出现多次\n```\n\n基本使用：\n```dart\nmain() {\n  /**\n   * 1、字符串类型（String）\n   */\n  var str1 = \"Hello\";\n  String str2 = \"World\";\n  print(\"$str1 $str2\"); // 字符串拼接\n  print(str1 + \" \" + str2); // 字符串拼接\n\n  // 三个单引号或三个双引号，让字符串原样输出\n  var str3 = '''Hello\n                World''';\n  print(str3);\n\n  /**\n   * 2、数值类型（int、double）\n   */\n  int x = 1; // 必须为整型\n  x = 20;\n  print(x);\n\n  double d = 99.9; // 整型或浮点型\n  d = 100;\n  print(d);\n\n  /**\n   * 3、布尔类型（bool）\n   */\n  bool flag = true;\n  if (flag) {\n    print('真');\n  } else {\n    print('假');\n  }\n\n  /**\n   * 4、List（数组/集合）\n   */\n  // 第一种定义方式\n  var list1 = ['a', 'b', 'c'];\n  print(list1);\n\n  // 第二种定义方式\n  var list2 = new List();\n  list2.add('a');\n  list2.add('b');\n  list2.add('c');\n  print(list2);\n\n  // 定义 List 时指定类型\n  var list3 = new List<String>();\n  // list3.add(1); // 错误\n  list3.add(\"Hello\");\n  print(list3);\n\n  /**\n   * 5、Maps（字典）\n   */\n  // 第一种定义方式\n  var person1 = {\n    \"name\": \"张三\",\n    \"age\": 20,\n    \"work\": [\"程序员\", \"送外卖\"]\n  };\n  print(person1);\n  print(person1[\"name\"]);\n  print(person1[\"work\"]);\n\n  // 第二种定义方式\n  var person2 = new Map();\n  person2[\"name\"] = \"李四\";\n  person2[\"age\"] = 21;\n  person2[\"work\"] = [\"程序员\", \"送外卖\"];\n  print(person2);\n}\n```\n使用 `is` 关键词来判断类型\n```dart\nmain() {\n  var x = 123;\n  if (x is String) {\n    print('是 String 类型');\n  } else if (x is int) {\n    print('是 int 类型'); // 执行这里\n  } else {\n    print('是其他类型');\n  }\n}\n```\n\n### 运算符\nDart 运算符\n```dart\n算术运算符\n\n    +    -    *    /     ~/ (取整)     %（取余）\n    \n关系运算符\n\n    ==    ！=   >    <    >=    <=\n\n逻辑运算符\n\n    !  &&   ||\n\n赋值运算符\n\n    基础赋值运算符   =   ??=\n    复合赋值运算符   +=  -=  *=   /=   %=  ~/=\n```\n\n基本使用：\n```dart\nmain() {\n  /**\n   * 1、算术运算符\n   */\n  var x = 10;\n  var y = 3;\n  print(x / y); // 3.3333333333333335\n  print(x ~/ y); // 3\n  print(x % y); // 1\n\n  /**\n   * 2、关系运算符\n   */\n  var a = 123;\n  var b = 123;\n  var c = \"123\";\n  var d = 123.0;\n  if (a == b) {\n    print('a 等于 b'); // 执行\n  }\n  if (a == c) {\n    print('a 等于 c'); // 不执行\n  }\n  if (a == d) {\n    print('a 等于 d'); // 执行\n  }\n\n  /**\n   * 3、逻辑运算符\n   */\n  bool flag = false;\n  print(!flag); // true（取反）\n\n  /**\n   * 4、基础赋值运算符（=   ??=）\n   */\n  int aa = 10;\n  int bb;\n  aa ??= 100;\n  bb ??= 200; // 因为 b 为空，所以重新赋值\n  print(aa); // 10\n  print(bb); // 200\n\n  /**\n   * 5、复合赋值运算符   +=  -=  *=   /=   %=  ~/=\n   */\n  int xx = 10;\n  xx += 10;\n  print(xx); // 20\n}\n```\n\n### 条件表达式\n```dart\nmain() {\n  /**\n   * 1、if else / switch case\n   */\n  bool flag = true;\n  if (flag) {\n    print(\"true\");\n  } else {\n    print(\"false\");\n  }\n\n  String sex = \"女\";\n  switch (sex) {\n    case \"男\":\n      print(\"男\");\n      break;\n    case \"女\":\n      print(\"女\");\n      break;\n    default:\n      print(\"不男不女\");\n      break;\n  }\n\n  /**\n   * 2、三目运算符\n   */\n  String s = flag ? \"我是 true\" : \"我是 false\";\n  print(s);\n\n  /**\n   * 3、?? 运算符\n   */\n  var a = 20;\n  var b = a ?? 30;\n  print(b); // 20\n}\n```\n\n### 类型转换\n```dart\nmain() {\n  /**\n   * 1、Number 与 String 类型之间的转换\n   */\n  int num = 20;\n  double d = 30.0;\n  String str = \"50\";\n  print(num.toString()); // 20\n  print(d.toString()); // 30.0\n  print(int.parse(str)); // 50\n  print(double.parse(str)); // 50.0\n  print(int.tryParse(\"100a\")); // null\n  // print(int.parse(\"100a\")); // 报错\n  try {\n    var myNum = double.parse(\"\");\n    print(myNum);\n  } catch (err) {\n    print(err); // FormatException: Invalid double\n  }\n\n  /**\n   * 2、其他类型转换成 Booleans 类型\n   */\n  var myStr = '';\n  if (myStr.isEmpty) {\n    print('myStr 为空'); // 执行\n  } else {\n    print('myStr 不为空');\n  }\n\n  var myStr2;\n  if (myStr2 == null) {\n    print('myStr2 为空'); // 执行\n  } else {\n    print('myStr2 不为空');\n  }\n\n  var x = 0 / 0;\n  print(x); // NaN\n  if (x.isNaN) {\n    print(\"x is NaN\"); // 执行\n  }\n}\n```\n\n### 循环语句\n```dart\nmain() {\n  /**\n   * 1、++  --   表示自增 自减 1\n   * 在赋值运算里面，如果 ++ -- 写在前面，先运算后赋值，如果 ++ -- 写在后面，先赋值后运算\n   */\n  var a = 10;\n  var b = a--;\n  print(a); // 9\n  print(b); // 10\n\n  var aa = 100;\n  var bb = --aa;\n  print(aa); // 99\n  print(bb); // 99\n\n  /**\n   * 2、for 语句\n   */\n  var list = ['新闻0', '新闻1', '新闻2', '新闻3', '新闻4'];\n  for (var i = 0; i < list.length; i++) {\n    if (i % 2 == 0) {\n      print(list[i]);\n    }\n  }\n\n  /**\n   * 3、while / do while\n   */\n  var i = 1;\n  var sum = 0;\n  while (i <= 100) {\n    sum += i;\n    i++;\n  }\n  print(sum); // 5050\n\n  i = 1;\n  sum = 0;\n  do {\n    sum += i;\n    i++;\n  } while (i <= 100);\n  print(sum); // 5050\n\n  /**\n   * 4、break / continue\n   */\n  sum = 0;\n  for (var i = 0; i < 5; i++) {\n    if (i > 3) {\n      break; // 结束当前循环体\n    }\n    sum += i;\n  }\n  print(sum); // 1 + 2 + 3 = 6\n\n  sum = 0;\n  for (var i = 0; i < 5; i++) {\n    if (i % 2 == 0) {\n      continue; // 本次循环跳过下面代码\n    }\n    sum += i;\n  }\n  print(sum); // 1 + 3 = 4\n}\n```\n\n### 集合类型\n\n#### List\n```dart\nmain() {\n  /*\n    List 里面常用的属性和方法：\n\n    常用属性：\n        length          长度\n        reversed        翻转\n        isEmpty         是否为空\n        isNotEmpty      是否不为空\n    常用方法：  \n        add         增加\n        addAll      拼接数组\n        indexOf     查找  传入具体值\n        remove      删除  传入具体值\n        removeAt    删除  传入索引值\n        fillRange   修改   \n        insert(index,value);            指定位置插入    \n        insertAll(index,list)           指定位置插入 List\n        toList()    其他类型转换成 List\n        join()      List 转换成字符串\n        split()     字符串转化成 List\n        forEach   \n        map\n        where\n        any\n        every\n  */\n  List myList = ['AA', 'BB', 'CC'];\n  myList.add('DD');\n  var newList = myList.reversed.toList();\n  print(newList); // [DD, CC, BB, AA]\n\n  // myList.fillRange(1, 3, 'aaa');\n  // print(myList); // [AA, aaa, aaa, DD]\n\n  var str = myList.join('-');\n  print(str); // AA-BB-CC-DD\n}\n```\n\n#### Set\n```dart\nmain() {\n  /**\n   * Set\n   * 1、用它最主要的功能就是去除数组重复内容；\n   * 2、Set 是没有顺序且不能重复的集合，所以不能通过索引去获取值；\n   */\n  var set = new Set();\n  set.add('AA');\n  set.add('BB');\n  set.add('AA');\n  print(set); // {AA, BB}\n  print(set.toList()); // [AA, BB]\n\n  var myList = ['AA', 'BB', 'AA', 'CC', 'AA', 'BB'];\n  var mySet = new Set();\n  mySet.addAll(myList);\n  print(mySet); // {AA, BB, CC}\n  print(mySet.toList()); // [AA, BB, CC]\n}\n```\n\n#### Map\n```dart\nmain() {\n  /*\n    映射（Maps）是无序的键值对：\n\n    常用属性：\n        keys            获取所有的 key 值\n        values          获取所有的 value 值\n        isEmpty         是否为空\n        isNotEmpty      是否不为空\n    常用方法:\n        remove(key)     删除指定 key 的数据\n        addAll({...})   合并映射  给映射内增加属性\n        containsValue   查看映射内的值  返回 true/false\n        forEach   \n        map\n        where\n        any\n        every\n  */\n  Map zhangSan = {\"name\": \"张三\", \"age\": 20};\n  var liSi = new Map();\n  liSi[\"name\"] = \"李四\";\n  liSi[\"age\"] = 21;\n\n  print(zhangSan.keys.toList()); // [name, age]\n  print(zhangSan.values.toList()); // [张三, 20]\n\n  zhangSan.addAll({\n    \"sex\": \"男\",\n    \"work\": ['敲代码', '送外卖']\n  });\n  print(zhangSan); // {name: 张三, age: 20, sex: 男, work: [敲代码, 送外卖]}\n\n  zhangSan.remove(\"sex\");\n  print(zhangSan); // {name: 张三, age: 20, work: [敲代码, 送外卖]}\n}\n```\n\n#### 集合的 forEach、map、where、any、every 方法使用\n```dart\nmain() {\n  /**\n   * List\n   */\n  var list = ['AA', 'BB', 'CC'];\n  for (var i = 0; i < list.length; i++) {\n    print(list[i]);\n  }\n\n  for (var item in list) {\n    print(item);\n  }\n\n  list.forEach((element) {\n    print(element);\n  });\n\n  var myList = [1, 3, 4];\n  var newList = myList.map((e) {\n    return e * 2;\n  });\n  print(newList.toList()); // [2, 6, 8]\n\n  var newList2 = myList.where((element) {\n    return element > 1;\n  });\n  print(newList2.toList()); // [3, 4]\n\n  var f = myList.any((element) {\n    // 只要集合里面有满足条件的就返回 true\n    return element > 3;\n  });\n  print(f); // true\n\n  var g = myList.every((element) {\n    // 每一个都满足条件返回 true, 否则返回 false\n    return element > 1;\n  });\n  print(g); // false\n\n  /**\n   * Set\n   */\n  var set = new Set();\n  set.addAll(['1', '2', '3']);\n  set.forEach((element) => print(element));\n\n  /**\n   * Map\n   */\n  var zhangSan = {\"name\": \"张三\", \"age\": 20};\n  zhangSan.forEach((key, value) {\n    print(\"$key---$value\");\n  });\n}\n```\n\n### 函数\n\n#### 函数定义、作用域\n```dart\nmain() {\n  /*\n  内置方法/函数：\n\n      print();\n\n  自定义方法：\n      自定义方法的基本格式：\n\n      返回类型  方法名称（参数1，参数2,...）{\n        方法体\n        return 返回值;\n      }\n  */\n  printInfo(\"Hello World\");\n  int sum = getSum(1, 2);\n  print(sum);\n\n  // 演示方法的作用域\n  void exec() {\n    void sayHello() {\n      print(\"Hello\");\n    }\n\n    sayHello();\n  }\n\n  exec(); // 调用方法\n  // sayHello(); // 错误写法\n}\n\nvoid printInfo(String info) {\n  print(info);\n}\n\nint getSum(int a, int b) {\n  return a + b;\n}\n```\n\n#### 函数传参、默认参数、可选参数、命名参数\n```dart\nmain() {\n  /**\n   * 1、基本传参\n   */\n  var sum = getSum(10);\n  print(sum); // 55\n\n  /**\n   * 2、可选参数\n   */\n  printUserInfo(\"张三\", 20);\n  printUserInfo(\"李四\");\n\n  /**\n   * 3、默认参数\n   */\n  printUserInfo2(\"张三\", \"女\", 20);\n  printUserInfo2(\"李四\");\n\n  /**\n   * 4、命名参数\n   */\n  printUserInfo3(\"王五\", sex: \"未知\", age: 22);\n\n  /**\n   * 5、把方法当参数的方法\n   */\n  fun2(fun1);\n}\n\nint getSum(int n) {\n  var sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n/**\n * 带可选参数\n */\nvoid printUserInfo(String name, [int age]) {\n  if (age == null) {\n    print(\"姓名：$name---年龄保密\");\n  } else {\n    print(\"姓名：$name---年龄：$age\");\n  }\n}\n\n/**\n * 带默认参数\n */\nvoid printUserInfo2(String name, [String sex = '男', int age]) {\n  if (age == null) {\n    print(\"姓名：$name---性别：$sex---年龄保密\");\n  } else {\n    print(\"姓名：$name---性别：$sex---年龄：$age\");\n  }\n}\n\n/**\n * 带命名参数\n */\nvoid printUserInfo3(String name, {String sex = '男', int age}) {\n  if (age == null) {\n    print(\"姓名：$name---性别：$sex---年龄保密\");\n  } else {\n    print(\"姓名：$name---性别：$sex---年龄：$age\");\n  }\n}\n\nfun1() {\n  print(\"fun1\");\n}\n\nfun2(fn) {\n  fn();\n}\n```\n\n#### 箭头函数、匿名函数、自执行方法、方法递归\n```dart\nmain() {\n  /**\n   * 1、箭头函数\n   * 只能写一行，不能多行。\n   */\n  List myList = [1, 3, 4];\n  myList.forEach((element) => print(element));\n\n  var newList = myList.map((e) => e > 2 ? e * 2 : e);\n  print(newList.toList()); // [1, 6, 8]\n\n  /**\n   * 2、匿名函数\n   */\n  var myNum = () {\n    return 10;\n  };\n  print(myNum()); // 10\n\n  /**\n   * 3、自执行方法\n   */\n  ((int n) {\n    print(\"我是自执行方法\");\n    print(n * 10); // 180\n  })(18);\n\n  /**\n   * 4、方法递归\n   */\n  var sum = fn(100);\n  print(sum); // 5050\n}\n\nint fn(int n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n + fn(n - 1);\n}\n```\n\n#### 闭包\n```dart\nmain() {\n  /**\n   * 全局变量特点：全局变量常驻内存、全局变量污染全局；\n   * 局部变量的特点：不常驻内存会被垃圾机制回收、不会污染全局；\n   * \n   * 闭包：\n   * 1、可以常驻内存，不污染全局；\n   * 2、函数嵌套函数，内部函数会调用外部函数的变量或参数，变量或参数不会被系统回收(不会释放内存)；\n   * 3、写法：函数嵌套函数，并 return 里面的函数，这样就形成了闭包；\n   */\n  var f = fn();\n  f(); // 2\n  f(); // 3\n  f(); // 4\n}\n\nfn() {\n  var x = 1;\n  return () {\n    x++;\n    print(x);\n  };\n}\n```\n\n### 类与对象\n\n#### 面向对象的介绍\n\n面向对象编程(OOP)的三个基本特征是：封装、继承、多态\n\n- **封装**：封装是对象和类概念的主要特性。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其他对象调用, 而一部分属性和方法则隐藏。\n- **继承**：面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。\n- **多态**：允许将子类类型的指针赋值给父类类型的指针, 同一个函数调用会有不同的执行效果 。\n\nDart 所有的东西都是对象，所有的对象都继承自 Object 类。\n\nDart 是一门使用类和**单继承**的面向对象语言，所有的对象都是类的实例，并且所有的类都是 Object 的子类\n\n一个类通常由属性和方法组成。\n\n> Dart 和其他面向对象语言不一样，Dart 中没有 public、private、protected 这些访问修饰符，但是我们可以使用 `_` 把一个属性或者方法定义成私有。\n\n#### 类与对象的基本使用\n```dart\nclass Person {\n  String _name; // 加了下划线表示私有属性\n  int age;\n\n  // 默认构造函数的简写\n  Person(this._name, this.age);\n\n  Person.now() {\n    print('我是命名构造函数');\n  }\n\n  Person.setInfo(String name, int age) {\n    this._name = name;\n    this.age = age;\n  }\n\n  void printInfo() {\n    print(\"${this._name}---${this.age}\");\n  }\n\n  void _sayHello() {\n    print(\"_sayHello 是一个私有方法\");\n  }\n\n  execRun() {\n    this._sayHello();\n  }\n}\n```\n\n```dart\nclass Rect {\n  int width;\n  int height;\n\n  Rect(this.width, this.height);\n\n  getArea() {\n    // 通过方法获取面积\n    return this.width * this.height;\n  }\n\n  get area {\n    // 通过属性获取面积\n    return this.width * this.height;\n  }\n\n  set areaHeight(height) {\n    this.height = height;\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\nimport 'Rect.dart';\n\nmain() {\n  Person p = new Person(\"张三\", 20);\n  p.printInfo();\n  p.execRun();\n\n  Person p2 = Person.now();\n\n  Person p3 = Person.setInfo(\"李四\", 21);\n  p3.printInfo();\n\n  var r = Rect(10, 5);\n  print(r.getArea()); // 50\n  print(r.area); // 50\n\n  r.areaHeight = 10;\n  print(r.area); // 100\n}\n```\n\n#### 类中的初始化列表\n```dart\nclass Rect {\n  int width;\n  int height;\n\n  // 在构造函数体运行之前初始化实例变量\n  Rect()\n      : width = 3,\n        height = 2 {\n    print(\"${this.width}---${this.height}\");\n  }\n\n  get area {\n    return this.width * this.height;\n  }\n}\n```\n\n```dart\nimport 'Rect.dart';\n\nmain() {\n  var r = Rect();\n  print(r.area); // 6\n}\n```\n\n#### 类的静态变量与静态函数\n\nDart 中的静态成员:\n\n1、使用 static 关键字来实现类级别的变量和函数；\n\n2、静态方法不能访问非静态成员，非静态方法可以访问静态成员；\n\n```dart\nclass Person {\n  static String name = '张三';\n  static void showName() {\n    print(name);\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\n\nmain() {\n  print(Person.name);\n  Person.showName();\n}\n```\n\n#### 对象操作符\n\nDart 中的对象操作符：\n\n- `?` 条件运算符\n- `as` 类型转换\n- `is` 类型判断\n- `..` 级联操作（连缀）\n\n```dart\nclass Person {\n  String name;\n  num age;\n  Person(this.name, this.age);\n\n  void printInfo() {\n    print(\"${this.name}---${this.age}\");\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\n\nmain() {\n  Person p = Person(\"张三\", 20);\n  p?.printInfo(); // 张三---20\n\n  Person p2;\n  p2?.printInfo(); // 无打印结果\n\n  if (p is Person) {\n    p.name = '李四';\n  }\n  p.printInfo(); // 李四---20\n\n  print(p is Object); // true\n\n  var p3;\n  p3 = '';\n  p3 = new Person(\"王五\", 22);\n  p3.printInfo(); // 王五---22\n  (p3 as Person).printInfo(); // 王五---22\n\n  Person p4 = new Person(\"AA\", 10);\n  p4.printInfo(); // AA---10\n\n  p4\n    ..name = \"BB\"\n    ..age = 11\n    ..printInfo(); // BB---11\n}\n```\n\n#### 类的继承\n\n> 面向对象的三大特性：封装 、继承、多态\n\nDart 中的类的继承：  \n- 子类使用 extends 关键词来继承父类；\n- 子类会继承父类里面可见的属性和方法，但是不会继承构造函数；\n- 子类能复写父类的方法；\n\n```dart\nclass Person {\n  String name;\n  num age;\n  Person(this.name, this.age);\n  Person.xxx(this.name, this.age);\n\n  void printInfo() {\n    print(\"${this.name}---${this.age}\");\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\n\nclass Teacher extends Person {\n  String sex;\n  Teacher(String name, num age, String sex) : super(name, age) {\n    this.sex = sex;\n  }\n  // Teacher(String name, num age, String sex) : super.xxx(name, age) {\n  //   this.sex = sex;\n  // }\n\n  @override\n  void printInfo() {\n    // super.printInfo(); //自类调用父类的方法\n    print(\"${this.name}---${this.age}---${this.sex}\");\n  }\n\n  run() {\n    print(\"${this.name}***${this.age}***${this.sex}\");\n  }\n}\n```\n\n```dart\nimport 'Teacher.dart';\n\nmain() {\n  Teacher t = new Teacher('张三', 20, '男');\n  t.printInfo(); // 张三---20---男\n  t.run(); // 张三***20***男\n}\n```\n\n#### 抽象类\n\nDart 抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。\n- 抽象类通过 abstract 关键字来定义；\n- 抽象方法不能用 abstract 声明，Dart 中没有方法体的方法我们称为抽象方法；\n- 如果子类继承抽象类必须得实现里面的抽象方法；\n- 如果把抽象类当做接口实现的话，必须得实现抽象类里面定义的所有属性和方法；\n- 抽象类不能被实例化，只有继承它的子类可以；\n\n**extends 抽象类和 implements 的区别：**\n- 如果要复用抽象类里面的方法，并且要用抽象方法约束自类的话，我们就用 extends 继承抽象类；\n- 如果只是把抽象类当做标准的话，我们就用 implements 实现抽象类；\n\n```dart\nabstract class Animal {\n  eat(); // 抽象方法\n  run(); // 抽象方法\n\n  printInfo() {\n    print('我是一个抽象类里面的普通方法');\n  }\n}\n```\n\n```dart\nimport 'Animal.dart';\n\nclass Dog extends Animal {\n  @override\n  eat() {\n    print(\"Dog eat ...\");\n  }\n\n  @override\n  run() {\n    print(\"Dog run ...\");\n  }\n}\n```\n\n```dart\nimport 'Animal.dart';\n\nclass Cat extends Animal {\n  @override\n  eat() {\n    print(\"Cat eat ...\");\n  }\n\n  @override\n  run() {\n    print(\"Cat run ...\");\n  }\n}\n```\n\n```dart\nimport 'Cat.dart';\nimport 'Dog.dart';\n\nmain() {\n  Dog d = new Dog();\n  d.eat(); // Dog eat ...\n  d.printInfo(); // 我是一个抽象类里面的普通方法\n\n  Cat c = new Cat();\n  c.eat(); // Cat eat ...\n  c.printInfo(); // 我是一个抽象类里面的普通方法\n}\n```\n\n#### 多态\n\n- 允许将子类类型的指针赋值给父类类型的指针，同一个函数调用会有不同的执行效果；\n- 子类的实例赋值给父类的引用；\n- 多态就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同的表现；\n\n```dart\nimport 'Animal.dart';\nimport 'Cat.dart';\nimport 'Dog.dart';\n\nmain() {\n  Animal d = new Dog();\n  d.eat(); // Dog eat ...\n\n  Animal c = new Cat();\n  c.eat(); // Cat eat ...\n}\n```\n\n### 接口\n\n和 Java 一样，Dart 也有接口，但是和 Java 还是有区别的：\n- Dart 的接口没有 interface 关键字定义接口，而是普通类或抽象类都可以作为接口被实现；\n- 同样使用 implements 关键字进行实现；\n- Dart 的接口有点奇怪，如果实现的类是普通类，需要将普通类中抽象的属性和方法全部覆写一遍；\n- 因为抽象类可以定义抽象方法，普通类不可以，所以一般如果要实现像 Java 接口那样的方式，一般会使用抽象类；\n- 建议使用抽象类定义接口；\n\n> 一个类可以实现多个接口。\n\n```dart\nabstract class DB {\n  // 当做接口   接口：就是约定 、规范\n  String uri;\n  insert(String data);\n  delete(String id);\n}\n```\n\n```dart\nimport 'DB.dart';\n\nclass MySQL implements DB {\n  @override\n  String uri;\n\n  @override\n  insert(String data) {\n    print(\"MySQL insert\");\n  }\n\n  @override\n  delete(String id) {\n    print(\"MySQL delete\");\n  }\n}\n```\n\n```dart\nimport 'DB.dart';\n\nclass MsSQL implements DB {\n  @override\n  String uri;\n\n  @override\n  insert(String data) {\n    print(\"MsSQL insert\");\n  }\n\n  @override\n  delete(String id) {\n    print(\"MsSQL delete\");\n  }\n}\n```\n\n```dart\nimport 'DB.dart';\nimport 'MySQL.dart';\n\nmain() {\n  DB db = new MySQL();\n  db.insert('123456');\n}\n```\n\n### mixins\n\nmixins 的中文意思是混入，就是在类中混入其他功能。\n\n在 Dart 中可以使用 mixins 实现类似**多继承**的功能。\n\n因为 mixins 使用的条件，随着 Dart 版本一直在变，这里讲的是 Dart 2.x 中使 用 mixins 的条件：\n- 作为 mixins 的类只能继承自 Object, 不能继承其他类；\n- 作为 mixins 的类不能有构造函数；\n- 一个类可以 mixins 多个 mixins 类；\n- mixins 绝不是继承，也不是接口，而是一种全新的特性；\n\nmixins 的实例类型就是其超类的子类型。mixins 使用 `with` 关键字实现其功能。\n\n```dart\nclass A {\n  String info = \"this is A\";\n  printA() {\n    print(\"A\");\n  }\n}\n```\n\n```dart\nclass B {\n  printB() {\n    print(\"B\");\n  }\n}\n```\n\n```dart\nimport 'A.dart';\nimport 'B.dart';\nimport 'Person.dart';\n\nclass C extends Person with A, B {\n  C(String name, num age) : super(name, age);\n}\n```\n\n```dart\nimport 'A.dart';\nimport 'B.dart';\nimport 'C.dart';\n\nmain() {\n  var c = new C(\"张三\", 20);\n  c.printA(); // A\n  c.printB(); // B\n  print(c.info); // this is A\n  c.printInfo(); // 张三---20\n\n  print(c is C); // true\n  print(c is A); // true\n  print(c is B); // true\n}\n```\n\n### 泛型\n\n通俗理解：泛型就是解决类、接口、方法的复用性、以及对不特定数据类型的支持（类型校验）。\n\n#### 泛型方法\n```dart\nmain() {\n  print(getData(1)); // A\n  print(getData2(2)); // 2\n}\n\ngetData<T>(T value) {\n  return \"A\";\n}\n\nT getData2<T>(T value) {\n  // return \"A\"; // 错误，只能返回 T 类型\n  return value;\n}\n```\n\n#### 泛型类\n```dart\nmain() {\n  PrintClass p = new PrintClass<int>();\n  p.add(1);\n  p.add(2);\n  p.add(3);\n  // p.add(\"A\"); // 报错\n  p.printInfo();\n}\n\nclass PrintClass<T> {\n  List list = new List<T>();\n  void add(T value) {\n    this.list.add(value);\n  }\n\n  void printInfo() {\n    for (var i = 0; i < this.list.length; i++) {\n      print(this.list[i]);\n    }\n  }\n}\n```\n\n### 泛型接口\n\n需求：实现数据缓存的功能。有文件缓存和内存缓存，内存缓存和文件缓存按照接口约束实现。\n\n1. 定义一个泛型接口，约束实现它的子类必须有 getByKey(key) 和 setByKey(key,value)；\n2. 要求 setByKey 的时候的 value 的类型和实例化子类的时候指定的类型一致；\n\n```dart\nmain() {\n  MemoryCache m = MemoryCache<Map>();\n  m.setByKey(\"index\", {\"name\": \"张三\", \"age\": 20}); // 我是内存缓存，把 key = index  value = {name: 张三, age: 20} 写入到了内存中\n}\n\nabstract class Cache<T> {\n  getByKey(String key);\n  void setByKey(String key, T value);\n}\n\nclass MemoryCache<T> implements Cache<T> {\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"我是内存缓存，把 key = ${key}  value = ${value} 写入到了内存中\");\n  }\n}\n\nclass FileCache<T> implements Cache<T> {\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"我是文件缓存，把 key = ${key}  value = ${value} 写入到了文件中\");\n  }\n}\n```\n\n### 库\n\n在 Dart 中，库的使用是通过 `import` 关键字引入的。library 指令可以创建一个库，每个 Dart 文件都是一个库，即使没有使用 library 指令来指定。\n\n```dart\nDart 中的库主要有三种：\n\n    1、我们自定义的库     \n          import 'lib/xxx.dart';\n    2、系统内置库       \n          import 'dart:math';    \n          import 'dart:io'; \n          import 'dart:convert';\n    3、pub 包管理系统中的库  \n        https://pub.dev/packages\n        https://pub.flutter-io.cn/packages\n        https://pub.dartlang.org/flutter/\n\n        1、需要在自己项目根目录新建一个 pubspec.yaml\n        2、在 pubspec.yaml 文件配置名称、描述、依赖等信息\n        3、然后运行 pub get 获取包下载到本地  \n        4、项目中引入库 import 'package:http/http.dart' as http; 看文档使用\n```\n\n#### 导入自己本地库\n\n```dart\nimport 'Person.dart';\n\nmain() {\n  var p = new Person(\"张三\", 20);\n  p.printInfo(); // 张三---20\n}\n```\n\n#### 导入系统内置库\n\n```dart\nimport 'dart:math';\n\nmain() {\n  print(max(10, 20)); // 20\n  print(min(-1, -2)); // -2\n}\n```\n\n#### 导入系统内置库实现请求数据\n\n```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nmain() async {\n  var result = await getDataFromZhihuAPI();\n  print(result);\n}\n\n// api 接口： http://news-at.zhihu.com/api/3/stories/latest\ngetDataFromZhihuAPI() async {\n  // 1、创建 HttpClient 对象\n  var httpClient = new HttpClient();\n  // 2、创建 Uri 对象\n  var uri = new Uri.http('news-at.zhihu.com', '/api/3/stories/latest');\n  // 3、发起请求，等待请求\n  var request = await httpClient.getUrl(uri);\n  // 4、关闭请求，等待响应\n  var response = await request.close();\n  // 5、解码响应的内容\n  return await response.transform(utf8.decoder).join();\n}\n```\n\n#### async 和 await\n\n这两个关键字的使用只需要记住两点：①、只有 async 方法才能使用 await 关键字调用方法；②、如果调用别的 async 方法必须使用 await 关键字；\n\nasync 是让方法变成异步，await 是等待异步方法执行完成。\n\n```dart\nmain() async {\n  var result = await testAsync();\n  print(result); // testAsync\n}\n\ntestAsync() async {\n  return \"testAsync\";\n}\n```\n\n#### 导入 pub 包管理系统中的库\n```dart\npub 包管理系统：\n\n1、从下面网址找到要用的库\n        https://pub.dev/packages\n        https://pub.flutter-io.cn/packages\n        https://pub.dartlang.org/flutter/\n\n2、创建一个 pubspec.yaml 文件，内容如下\n\n    name: xxx\n    description: A new flutter module project.\n    dependencies:  \n      date_format: ^1.0.9\n\n3、配置 dependencies\n\n4、运行 pub get 获取远程库\n\n5、看文档引入库使用\n```\n\n```dart\nimport 'package:date_format/date_format.dart';\n\nmain() {\n  print(formatDate(DateTime(1989, 02, 21), [yyyy, '-', mm, '-', dd])); // 1989-02-21\n}\n```\n\n#### 库重命名与冲突解决\n```dart\n当引入两个库中有相同名称标识符的时候，如果是 Java, 通常我们通过写上完整的包名路径来指定使用的具体标识符，甚至不用 import 都可以，\n但是 Dart 里面是必须 import 的。当冲突的时候，可以使用 as 关键字来指定库的前缀。如下例子所示：\n\nimport 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n\n\nElement element1 = new Element();           // Uses Element from lib1.\nlib2.Element element2 = new lib2.Element(); // Uses Element from lib2.\n```\n\n#### 部分导入\n```dart\n如果只需要导入库的一部分，有两种模式：\n\n模式一：只导入需要的部分，使用 show 关键字，如下例子所示：\n\nimport 'package:lib1/lib1.dart' show foo;\n\n模式二：隐藏不需要的部分，使用 hide 关键字，如下例子所示：\n\nimport 'package:lib2/lib2.dart' hide foo;    \n```\n\nMyMath.dart\n```dart\ngetOne() {\n  return \"one\";\n}\n\ngetTwo() {\n  return \"two\";\n}\n```\n\n```dart\nimport 'MyMath.dart' show getOne;\n\nmain() {\n  print(getOne());\n  // print(getTwo()); // 报错\n}\n```\n\n#### 延迟加载\n```dart\n延迟加载也称为懒加载，可以在需要的时候再进行加载。\n懒加载的最大好处是可以减少 APP 的启动时间。\n\n懒加载使用 deferred as 关键字来指定，如下例子所示：\n\nimport 'package:deferred/hello.dart' deferred as hello;\n\n当需要使用的时候，需要使用 loadLibrary() 方法来加载：\n\ngreet() async {\n    await hello.loadLibrary();\n    hello.printGreeting();\n}\n```\n\n### 2.13 之后的一些新特性\n\n#### Null safety\n\n```dart\n/**\n  Null safety 翻译成中文的意思是空安全。\n\n  null safety 可以帮助开发者避免一些日常开发中很难被发现的错误，并且额外的好处是可以改善性能。\n\n  Flutter2.2.0（2021 年 5 月 19 日发布）之后的版本都要求使用 null safety。\n\n  1、? 可空类型\n  2、! 类型断言\n*/\n\nString? getData(apiUrl) {\n  if (apiUrl != null) {\n    return \"this is server data\";\n  }\n  return null;\n}\n\nvoid printLength(String? str) {\n  try {\n    print(str!.length);\n  } catch (e) {\n    print(\"str is null\");\n  }\n}\n\nvoid main() {\n  // 1、? 可空类型\n  String? str = \"abc\"; // String?  表示 str 是一个可空类型\n  str = null; // 允许设置为 null\n  print(str);\n\n  print(getData(\"http://www.baidu.com\"));\n  print(getData(null));\n\n  // 2、! 类型断言\n  String? str2 = \"this is str\";\n  // str2 = null;\n  // 如果 str2 不等于 null 会打印 str2 的长度，如果等于 null 会抛出异常\n  print(str2!.length);\n\n  printLength(\"str\");\n  printLength(null);\n}\n```\n\n#### late 关键字\n\n```dart\n/**\n * late 关键字主要用于延迟初始化。\n */\nclass Person {\n  late String name;\n  late int age;\n  void setInfo(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  String getInfo() {\n    return \"${this.name}---${this.age}\";\n  }\n}\n\nvoid main(args) {\n  Person p = new Person();\n  p.setInfo(\"张三\", 20);\n  print(p.getInfo());\n}\n```\n\n#### required 关键字\n\n```dart\n/**\n * required 翻译成中文的意思是需要、依赖\n * \n * 最开始 @required 是注解，现在它已经作为内置修饰符，主要用于允许根据需要标记任何命名参数（函数或类），\n * 使得它们不为空。因为可选参数中必须有个 required 参数或者该参数有个默认值。\n */\nString printInfo(String username, {int age = 10, String sex = \"男\"}) {\n  return \"姓名:$username---性别:$sex--年龄:$age\";\n}\n\nString printInfo2(String username, {required int age, required String sex}) {\n  return \"姓名:$username---性别:$sex--年龄:$age\";\n}\n\nvoid main(args) {\n  print(printInfo('张三'));\n\n  print(printInfo('张三', age: 20, sex: \"女\"));\n\n  // age 和 sex 必须传入\n  print(printInfo2('张三', age: 22, sex: \"女\"));\n}\n```\n\n```dart\n/**\n * name 可以传入也可以不传入，age 必须传入\n */\nclass Person {\n  String? name; // 可空属性\n  int age;\n  Person({this.name, required this.age}); // age 必须传入\n\n  String getInfo() {\n    return \"${this.name}---${this.age}\";\n  }\n}\n\nvoid main(args) {\n  Person p = new Person(name: \"张三\", age: 20);\n  print(p.getInfo()); // 张三---20\n\n  Person p1 = new Person(age: 20);\n  print(p1.getInfo()); // null---20\n}\n```\n\n### 性能优化\n\n#### 回顾 Dart 常量\n\n```dart\n/**\nDart 常量: final 和 const 修饰符。\n  1、const 声明的常量是在编译时确定的，永远不会改变；\n  2、final 声明的常量允许声明后再赋值，赋值后不可改变，final 声明的变量是在运行时确定的；\n  3、final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。\n*/\n\nvoid main() {\n  // const 常量\n  // const PI = 3.14;\n  // PI = 3.14159; // const 定义的常量没法改变\n  // print(PI);\n\n  // final 常量\n  // final PI = 3.14;\n  // print(PI);\n\n  final a;\n  a = 13;\n  // a = 14;\n  print(a);\n\n  final d = new DateTime.now();\n}\n```\n\n#### const、identical 函数\n\n```dart\n/**\n dart:core 库中 identical 函数的用法介绍如下：\n\n用法:\nbool identical(\n   Object? a,    \n   Object? b   \n)\n检查两个引用是否指向同一个对象。\n */\n\nvoid main() {\n  // var o1 = new Object();\n  // var o2 = new Object();\n  // print(identical(o1, o2)); // false，不共享存储空间\n  // print(identical(o1, o1)); // true，共享存储空间\n\n  // var o1 = Object();\n  // var o2 = Object();\n  // print(identical(o1, o2)); // false\n  // print(identical(o1, o1)); // true\n\n  // 表示实例化常量构造函数\n  // o1 和 o2 共享了存储空间\n  // var o1 = const Object();\n  // var o2 = const Object();\n  // print(identical(o1, o2)); // true，共享存储空间\n  // print(identical(o1, o1)); // true，共享存储空间\n\n  // print(identical([2], [2])); // false\n\n  // var a = [2];\n  // var b = [2];\n  // print(identical(a, b)); // false，不共享存储空间\n\n  const c = [2];\n  const d = [3];\n  print(identical(c, d)); // false，不共享存储空间\n\n  // 发现：const 关键词在多个地方创建相同的对象的时候，内存中只保留了一个对象。\n  // 共享存储空间条件：1、常量   2、值相等。\n}\n```\n\n#### 普通构造函数\n\n```dart\nclass Container {\n  int width;\n  int height;\n  Container({required this.width, required this.height});\n}\n\nvoid main() {\n  var c1 = new Container(width: 100, height: 100);\n  var c2 = new Container(width: 100, height: 100);\n  print(identical(c1, c2)); // false，c1 和 c2 在内存中存储了 2 份\n}\n```\n\n#### 常量构造函数\n\n```dart\n/*\n常量构造函数总结如下几点：\n  1、常量构造函数需以 const 关键字修饰；\n  2、const 构造函数必须用于成员变量都是 final 的类；\n  3、如果实例化时不加 const 修饰符，即使调用的是常量构造函数，实例化的对象也不是常量实例；\n  4、实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象；\n  5、Flutter 中 const 修饰不仅仅是节省组件构建时的内存开销，Flutter 在需要重新构建组件的时候，由于这个组件是不应该改变的，重新构建没有任何意义，因此 Flutter 不会重新构建 const 组件。 \n*/\n\n// 常量构造函数\nclass Container {\n  final int width;\n  final int height;\n  const Container({required this.width, required this.height});\n}\n\nvoid main() {\n  var c1 = Container(width: 100, height: 100);\n  var c2 = Container(width: 100, height: 100);\n  print(identical(c1, c2)); // false\n\n  var c3 = const Container(width: 100, height: 100);\n  var c4 = const Container(width: 100, height: 100);\n  print(identical(c3, c4)); // true\n\n  var c5 = const Container(width: 100, height: 110);\n  var c6 = const Container(width: 120, height: 100);\n  print(identical(c5, c6)); // false\n}\n// 实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象。\n```\n\n","source":"_posts/Dart-学习笔记.md","raw":"---\ntitle: Dart 学习笔记\ndate: 2020-12-30 15:56:00\ncategories: \"Dart\"\ntags:\n     - Dart\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n> 本笔记整理自大地老师的 Dart 笔记，同时加入了自己写的一些测试例子。\n\n\n### 环境搭建\n\n要在我们本地开发 Dart 程序的话首先需要安装 Dart SDK\n\n官方文档：https://dart.dev/get-dart\n```dart\nwindows(推荐):\n\n  http://www.gekorm.com/dart-windows/\n\nmac：\n\n  如果 mac 电脑没有安装 brew 这个工具首先第一步需要安装它： https://brew.sh/\n\n  brew tap dart-lang/dart\n    \n  brew install dart\n```\n\n### 开发工具\n```dart\nDart 的开发工具有很多： IntelliJ IDEA  、 WebStorm、 Atom、Vscode 等\n\n这里我们主要给大家讲解的是如果在 vscode 中配置 Dart。\n    \n1、找到 vscode 插件安装 Dart\n\n2、找到 vscode 插件安装 code runner, Code Runner 可以运行我们的文件\n```\n\n### 变量\nDart 中定义变量可以使用具体的类型（int、double、String、bool 等）申明 ，也可以通过 var 关键字来申明变量。\n\n### 常量\n> final 和 const 修饰符都可以表示常量。\n\n- const 值不变，一开始就得赋值。\n- final 可以开始不赋值，只能赋一次。而 final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。\n- 注意：永远不改变的量，请使用 final 或 const 修饰它，而不是使用 var 或其他变量类型。\n```dart\nmain() {\n  const PI = 3.14159;\n  // PI = 3.14; // 报错\n  print(PI);\n\n  // const x = new DateTime.now(); // 报错\n\n  final a = 1;\n  // a = 2; // 报错\n  print(a);\n\n  final time = new DateTime.now();\n  print(time);\n}\n```\n\n### 常用数据类型\nDart 中支持以下常用数据类型：\n```dart\nNumbers（数值）\n    int\n    double\nStrings（字符串）\n    String\nBooleans(布尔)\n    bool\nList（数组）\n    在 Dart 中，数组是列表对象，所以大多数人只是称它们为列表\nMaps（字典）\n    通常来说，Map 是一个键值对相关的对象。键和值可以是任何类型的对象。每个键只出现一次，而一个值则可以出现多次\n```\n\n基本使用：\n```dart\nmain() {\n  /**\n   * 1、字符串类型（String）\n   */\n  var str1 = \"Hello\";\n  String str2 = \"World\";\n  print(\"$str1 $str2\"); // 字符串拼接\n  print(str1 + \" \" + str2); // 字符串拼接\n\n  // 三个单引号或三个双引号，让字符串原样输出\n  var str3 = '''Hello\n                World''';\n  print(str3);\n\n  /**\n   * 2、数值类型（int、double）\n   */\n  int x = 1; // 必须为整型\n  x = 20;\n  print(x);\n\n  double d = 99.9; // 整型或浮点型\n  d = 100;\n  print(d);\n\n  /**\n   * 3、布尔类型（bool）\n   */\n  bool flag = true;\n  if (flag) {\n    print('真');\n  } else {\n    print('假');\n  }\n\n  /**\n   * 4、List（数组/集合）\n   */\n  // 第一种定义方式\n  var list1 = ['a', 'b', 'c'];\n  print(list1);\n\n  // 第二种定义方式\n  var list2 = new List();\n  list2.add('a');\n  list2.add('b');\n  list2.add('c');\n  print(list2);\n\n  // 定义 List 时指定类型\n  var list3 = new List<String>();\n  // list3.add(1); // 错误\n  list3.add(\"Hello\");\n  print(list3);\n\n  /**\n   * 5、Maps（字典）\n   */\n  // 第一种定义方式\n  var person1 = {\n    \"name\": \"张三\",\n    \"age\": 20,\n    \"work\": [\"程序员\", \"送外卖\"]\n  };\n  print(person1);\n  print(person1[\"name\"]);\n  print(person1[\"work\"]);\n\n  // 第二种定义方式\n  var person2 = new Map();\n  person2[\"name\"] = \"李四\";\n  person2[\"age\"] = 21;\n  person2[\"work\"] = [\"程序员\", \"送外卖\"];\n  print(person2);\n}\n```\n使用 `is` 关键词来判断类型\n```dart\nmain() {\n  var x = 123;\n  if (x is String) {\n    print('是 String 类型');\n  } else if (x is int) {\n    print('是 int 类型'); // 执行这里\n  } else {\n    print('是其他类型');\n  }\n}\n```\n\n### 运算符\nDart 运算符\n```dart\n算术运算符\n\n    +    -    *    /     ~/ (取整)     %（取余）\n    \n关系运算符\n\n    ==    ！=   >    <    >=    <=\n\n逻辑运算符\n\n    !  &&   ||\n\n赋值运算符\n\n    基础赋值运算符   =   ??=\n    复合赋值运算符   +=  -=  *=   /=   %=  ~/=\n```\n\n基本使用：\n```dart\nmain() {\n  /**\n   * 1、算术运算符\n   */\n  var x = 10;\n  var y = 3;\n  print(x / y); // 3.3333333333333335\n  print(x ~/ y); // 3\n  print(x % y); // 1\n\n  /**\n   * 2、关系运算符\n   */\n  var a = 123;\n  var b = 123;\n  var c = \"123\";\n  var d = 123.0;\n  if (a == b) {\n    print('a 等于 b'); // 执行\n  }\n  if (a == c) {\n    print('a 等于 c'); // 不执行\n  }\n  if (a == d) {\n    print('a 等于 d'); // 执行\n  }\n\n  /**\n   * 3、逻辑运算符\n   */\n  bool flag = false;\n  print(!flag); // true（取反）\n\n  /**\n   * 4、基础赋值运算符（=   ??=）\n   */\n  int aa = 10;\n  int bb;\n  aa ??= 100;\n  bb ??= 200; // 因为 b 为空，所以重新赋值\n  print(aa); // 10\n  print(bb); // 200\n\n  /**\n   * 5、复合赋值运算符   +=  -=  *=   /=   %=  ~/=\n   */\n  int xx = 10;\n  xx += 10;\n  print(xx); // 20\n}\n```\n\n### 条件表达式\n```dart\nmain() {\n  /**\n   * 1、if else / switch case\n   */\n  bool flag = true;\n  if (flag) {\n    print(\"true\");\n  } else {\n    print(\"false\");\n  }\n\n  String sex = \"女\";\n  switch (sex) {\n    case \"男\":\n      print(\"男\");\n      break;\n    case \"女\":\n      print(\"女\");\n      break;\n    default:\n      print(\"不男不女\");\n      break;\n  }\n\n  /**\n   * 2、三目运算符\n   */\n  String s = flag ? \"我是 true\" : \"我是 false\";\n  print(s);\n\n  /**\n   * 3、?? 运算符\n   */\n  var a = 20;\n  var b = a ?? 30;\n  print(b); // 20\n}\n```\n\n### 类型转换\n```dart\nmain() {\n  /**\n   * 1、Number 与 String 类型之间的转换\n   */\n  int num = 20;\n  double d = 30.0;\n  String str = \"50\";\n  print(num.toString()); // 20\n  print(d.toString()); // 30.0\n  print(int.parse(str)); // 50\n  print(double.parse(str)); // 50.0\n  print(int.tryParse(\"100a\")); // null\n  // print(int.parse(\"100a\")); // 报错\n  try {\n    var myNum = double.parse(\"\");\n    print(myNum);\n  } catch (err) {\n    print(err); // FormatException: Invalid double\n  }\n\n  /**\n   * 2、其他类型转换成 Booleans 类型\n   */\n  var myStr = '';\n  if (myStr.isEmpty) {\n    print('myStr 为空'); // 执行\n  } else {\n    print('myStr 不为空');\n  }\n\n  var myStr2;\n  if (myStr2 == null) {\n    print('myStr2 为空'); // 执行\n  } else {\n    print('myStr2 不为空');\n  }\n\n  var x = 0 / 0;\n  print(x); // NaN\n  if (x.isNaN) {\n    print(\"x is NaN\"); // 执行\n  }\n}\n```\n\n### 循环语句\n```dart\nmain() {\n  /**\n   * 1、++  --   表示自增 自减 1\n   * 在赋值运算里面，如果 ++ -- 写在前面，先运算后赋值，如果 ++ -- 写在后面，先赋值后运算\n   */\n  var a = 10;\n  var b = a--;\n  print(a); // 9\n  print(b); // 10\n\n  var aa = 100;\n  var bb = --aa;\n  print(aa); // 99\n  print(bb); // 99\n\n  /**\n   * 2、for 语句\n   */\n  var list = ['新闻0', '新闻1', '新闻2', '新闻3', '新闻4'];\n  for (var i = 0; i < list.length; i++) {\n    if (i % 2 == 0) {\n      print(list[i]);\n    }\n  }\n\n  /**\n   * 3、while / do while\n   */\n  var i = 1;\n  var sum = 0;\n  while (i <= 100) {\n    sum += i;\n    i++;\n  }\n  print(sum); // 5050\n\n  i = 1;\n  sum = 0;\n  do {\n    sum += i;\n    i++;\n  } while (i <= 100);\n  print(sum); // 5050\n\n  /**\n   * 4、break / continue\n   */\n  sum = 0;\n  for (var i = 0; i < 5; i++) {\n    if (i > 3) {\n      break; // 结束当前循环体\n    }\n    sum += i;\n  }\n  print(sum); // 1 + 2 + 3 = 6\n\n  sum = 0;\n  for (var i = 0; i < 5; i++) {\n    if (i % 2 == 0) {\n      continue; // 本次循环跳过下面代码\n    }\n    sum += i;\n  }\n  print(sum); // 1 + 3 = 4\n}\n```\n\n### 集合类型\n\n#### List\n```dart\nmain() {\n  /*\n    List 里面常用的属性和方法：\n\n    常用属性：\n        length          长度\n        reversed        翻转\n        isEmpty         是否为空\n        isNotEmpty      是否不为空\n    常用方法：  \n        add         增加\n        addAll      拼接数组\n        indexOf     查找  传入具体值\n        remove      删除  传入具体值\n        removeAt    删除  传入索引值\n        fillRange   修改   \n        insert(index,value);            指定位置插入    \n        insertAll(index,list)           指定位置插入 List\n        toList()    其他类型转换成 List\n        join()      List 转换成字符串\n        split()     字符串转化成 List\n        forEach   \n        map\n        where\n        any\n        every\n  */\n  List myList = ['AA', 'BB', 'CC'];\n  myList.add('DD');\n  var newList = myList.reversed.toList();\n  print(newList); // [DD, CC, BB, AA]\n\n  // myList.fillRange(1, 3, 'aaa');\n  // print(myList); // [AA, aaa, aaa, DD]\n\n  var str = myList.join('-');\n  print(str); // AA-BB-CC-DD\n}\n```\n\n#### Set\n```dart\nmain() {\n  /**\n   * Set\n   * 1、用它最主要的功能就是去除数组重复内容；\n   * 2、Set 是没有顺序且不能重复的集合，所以不能通过索引去获取值；\n   */\n  var set = new Set();\n  set.add('AA');\n  set.add('BB');\n  set.add('AA');\n  print(set); // {AA, BB}\n  print(set.toList()); // [AA, BB]\n\n  var myList = ['AA', 'BB', 'AA', 'CC', 'AA', 'BB'];\n  var mySet = new Set();\n  mySet.addAll(myList);\n  print(mySet); // {AA, BB, CC}\n  print(mySet.toList()); // [AA, BB, CC]\n}\n```\n\n#### Map\n```dart\nmain() {\n  /*\n    映射（Maps）是无序的键值对：\n\n    常用属性：\n        keys            获取所有的 key 值\n        values          获取所有的 value 值\n        isEmpty         是否为空\n        isNotEmpty      是否不为空\n    常用方法:\n        remove(key)     删除指定 key 的数据\n        addAll({...})   合并映射  给映射内增加属性\n        containsValue   查看映射内的值  返回 true/false\n        forEach   \n        map\n        where\n        any\n        every\n  */\n  Map zhangSan = {\"name\": \"张三\", \"age\": 20};\n  var liSi = new Map();\n  liSi[\"name\"] = \"李四\";\n  liSi[\"age\"] = 21;\n\n  print(zhangSan.keys.toList()); // [name, age]\n  print(zhangSan.values.toList()); // [张三, 20]\n\n  zhangSan.addAll({\n    \"sex\": \"男\",\n    \"work\": ['敲代码', '送外卖']\n  });\n  print(zhangSan); // {name: 张三, age: 20, sex: 男, work: [敲代码, 送外卖]}\n\n  zhangSan.remove(\"sex\");\n  print(zhangSan); // {name: 张三, age: 20, work: [敲代码, 送外卖]}\n}\n```\n\n#### 集合的 forEach、map、where、any、every 方法使用\n```dart\nmain() {\n  /**\n   * List\n   */\n  var list = ['AA', 'BB', 'CC'];\n  for (var i = 0; i < list.length; i++) {\n    print(list[i]);\n  }\n\n  for (var item in list) {\n    print(item);\n  }\n\n  list.forEach((element) {\n    print(element);\n  });\n\n  var myList = [1, 3, 4];\n  var newList = myList.map((e) {\n    return e * 2;\n  });\n  print(newList.toList()); // [2, 6, 8]\n\n  var newList2 = myList.where((element) {\n    return element > 1;\n  });\n  print(newList2.toList()); // [3, 4]\n\n  var f = myList.any((element) {\n    // 只要集合里面有满足条件的就返回 true\n    return element > 3;\n  });\n  print(f); // true\n\n  var g = myList.every((element) {\n    // 每一个都满足条件返回 true, 否则返回 false\n    return element > 1;\n  });\n  print(g); // false\n\n  /**\n   * Set\n   */\n  var set = new Set();\n  set.addAll(['1', '2', '3']);\n  set.forEach((element) => print(element));\n\n  /**\n   * Map\n   */\n  var zhangSan = {\"name\": \"张三\", \"age\": 20};\n  zhangSan.forEach((key, value) {\n    print(\"$key---$value\");\n  });\n}\n```\n\n### 函数\n\n#### 函数定义、作用域\n```dart\nmain() {\n  /*\n  内置方法/函数：\n\n      print();\n\n  自定义方法：\n      自定义方法的基本格式：\n\n      返回类型  方法名称（参数1，参数2,...）{\n        方法体\n        return 返回值;\n      }\n  */\n  printInfo(\"Hello World\");\n  int sum = getSum(1, 2);\n  print(sum);\n\n  // 演示方法的作用域\n  void exec() {\n    void sayHello() {\n      print(\"Hello\");\n    }\n\n    sayHello();\n  }\n\n  exec(); // 调用方法\n  // sayHello(); // 错误写法\n}\n\nvoid printInfo(String info) {\n  print(info);\n}\n\nint getSum(int a, int b) {\n  return a + b;\n}\n```\n\n#### 函数传参、默认参数、可选参数、命名参数\n```dart\nmain() {\n  /**\n   * 1、基本传参\n   */\n  var sum = getSum(10);\n  print(sum); // 55\n\n  /**\n   * 2、可选参数\n   */\n  printUserInfo(\"张三\", 20);\n  printUserInfo(\"李四\");\n\n  /**\n   * 3、默认参数\n   */\n  printUserInfo2(\"张三\", \"女\", 20);\n  printUserInfo2(\"李四\");\n\n  /**\n   * 4、命名参数\n   */\n  printUserInfo3(\"王五\", sex: \"未知\", age: 22);\n\n  /**\n   * 5、把方法当参数的方法\n   */\n  fun2(fun1);\n}\n\nint getSum(int n) {\n  var sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n/**\n * 带可选参数\n */\nvoid printUserInfo(String name, [int age]) {\n  if (age == null) {\n    print(\"姓名：$name---年龄保密\");\n  } else {\n    print(\"姓名：$name---年龄：$age\");\n  }\n}\n\n/**\n * 带默认参数\n */\nvoid printUserInfo2(String name, [String sex = '男', int age]) {\n  if (age == null) {\n    print(\"姓名：$name---性别：$sex---年龄保密\");\n  } else {\n    print(\"姓名：$name---性别：$sex---年龄：$age\");\n  }\n}\n\n/**\n * 带命名参数\n */\nvoid printUserInfo3(String name, {String sex = '男', int age}) {\n  if (age == null) {\n    print(\"姓名：$name---性别：$sex---年龄保密\");\n  } else {\n    print(\"姓名：$name---性别：$sex---年龄：$age\");\n  }\n}\n\nfun1() {\n  print(\"fun1\");\n}\n\nfun2(fn) {\n  fn();\n}\n```\n\n#### 箭头函数、匿名函数、自执行方法、方法递归\n```dart\nmain() {\n  /**\n   * 1、箭头函数\n   * 只能写一行，不能多行。\n   */\n  List myList = [1, 3, 4];\n  myList.forEach((element) => print(element));\n\n  var newList = myList.map((e) => e > 2 ? e * 2 : e);\n  print(newList.toList()); // [1, 6, 8]\n\n  /**\n   * 2、匿名函数\n   */\n  var myNum = () {\n    return 10;\n  };\n  print(myNum()); // 10\n\n  /**\n   * 3、自执行方法\n   */\n  ((int n) {\n    print(\"我是自执行方法\");\n    print(n * 10); // 180\n  })(18);\n\n  /**\n   * 4、方法递归\n   */\n  var sum = fn(100);\n  print(sum); // 5050\n}\n\nint fn(int n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n + fn(n - 1);\n}\n```\n\n#### 闭包\n```dart\nmain() {\n  /**\n   * 全局变量特点：全局变量常驻内存、全局变量污染全局；\n   * 局部变量的特点：不常驻内存会被垃圾机制回收、不会污染全局；\n   * \n   * 闭包：\n   * 1、可以常驻内存，不污染全局；\n   * 2、函数嵌套函数，内部函数会调用外部函数的变量或参数，变量或参数不会被系统回收(不会释放内存)；\n   * 3、写法：函数嵌套函数，并 return 里面的函数，这样就形成了闭包；\n   */\n  var f = fn();\n  f(); // 2\n  f(); // 3\n  f(); // 4\n}\n\nfn() {\n  var x = 1;\n  return () {\n    x++;\n    print(x);\n  };\n}\n```\n\n### 类与对象\n\n#### 面向对象的介绍\n\n面向对象编程(OOP)的三个基本特征是：封装、继承、多态\n\n- **封装**：封装是对象和类概念的主要特性。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其他对象调用, 而一部分属性和方法则隐藏。\n- **继承**：面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。\n- **多态**：允许将子类类型的指针赋值给父类类型的指针, 同一个函数调用会有不同的执行效果 。\n\nDart 所有的东西都是对象，所有的对象都继承自 Object 类。\n\nDart 是一门使用类和**单继承**的面向对象语言，所有的对象都是类的实例，并且所有的类都是 Object 的子类\n\n一个类通常由属性和方法组成。\n\n> Dart 和其他面向对象语言不一样，Dart 中没有 public、private、protected 这些访问修饰符，但是我们可以使用 `_` 把一个属性或者方法定义成私有。\n\n#### 类与对象的基本使用\n```dart\nclass Person {\n  String _name; // 加了下划线表示私有属性\n  int age;\n\n  // 默认构造函数的简写\n  Person(this._name, this.age);\n\n  Person.now() {\n    print('我是命名构造函数');\n  }\n\n  Person.setInfo(String name, int age) {\n    this._name = name;\n    this.age = age;\n  }\n\n  void printInfo() {\n    print(\"${this._name}---${this.age}\");\n  }\n\n  void _sayHello() {\n    print(\"_sayHello 是一个私有方法\");\n  }\n\n  execRun() {\n    this._sayHello();\n  }\n}\n```\n\n```dart\nclass Rect {\n  int width;\n  int height;\n\n  Rect(this.width, this.height);\n\n  getArea() {\n    // 通过方法获取面积\n    return this.width * this.height;\n  }\n\n  get area {\n    // 通过属性获取面积\n    return this.width * this.height;\n  }\n\n  set areaHeight(height) {\n    this.height = height;\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\nimport 'Rect.dart';\n\nmain() {\n  Person p = new Person(\"张三\", 20);\n  p.printInfo();\n  p.execRun();\n\n  Person p2 = Person.now();\n\n  Person p3 = Person.setInfo(\"李四\", 21);\n  p3.printInfo();\n\n  var r = Rect(10, 5);\n  print(r.getArea()); // 50\n  print(r.area); // 50\n\n  r.areaHeight = 10;\n  print(r.area); // 100\n}\n```\n\n#### 类中的初始化列表\n```dart\nclass Rect {\n  int width;\n  int height;\n\n  // 在构造函数体运行之前初始化实例变量\n  Rect()\n      : width = 3,\n        height = 2 {\n    print(\"${this.width}---${this.height}\");\n  }\n\n  get area {\n    return this.width * this.height;\n  }\n}\n```\n\n```dart\nimport 'Rect.dart';\n\nmain() {\n  var r = Rect();\n  print(r.area); // 6\n}\n```\n\n#### 类的静态变量与静态函数\n\nDart 中的静态成员:\n\n1、使用 static 关键字来实现类级别的变量和函数；\n\n2、静态方法不能访问非静态成员，非静态方法可以访问静态成员；\n\n```dart\nclass Person {\n  static String name = '张三';\n  static void showName() {\n    print(name);\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\n\nmain() {\n  print(Person.name);\n  Person.showName();\n}\n```\n\n#### 对象操作符\n\nDart 中的对象操作符：\n\n- `?` 条件运算符\n- `as` 类型转换\n- `is` 类型判断\n- `..` 级联操作（连缀）\n\n```dart\nclass Person {\n  String name;\n  num age;\n  Person(this.name, this.age);\n\n  void printInfo() {\n    print(\"${this.name}---${this.age}\");\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\n\nmain() {\n  Person p = Person(\"张三\", 20);\n  p?.printInfo(); // 张三---20\n\n  Person p2;\n  p2?.printInfo(); // 无打印结果\n\n  if (p is Person) {\n    p.name = '李四';\n  }\n  p.printInfo(); // 李四---20\n\n  print(p is Object); // true\n\n  var p3;\n  p3 = '';\n  p3 = new Person(\"王五\", 22);\n  p3.printInfo(); // 王五---22\n  (p3 as Person).printInfo(); // 王五---22\n\n  Person p4 = new Person(\"AA\", 10);\n  p4.printInfo(); // AA---10\n\n  p4\n    ..name = \"BB\"\n    ..age = 11\n    ..printInfo(); // BB---11\n}\n```\n\n#### 类的继承\n\n> 面向对象的三大特性：封装 、继承、多态\n\nDart 中的类的继承：  \n- 子类使用 extends 关键词来继承父类；\n- 子类会继承父类里面可见的属性和方法，但是不会继承构造函数；\n- 子类能复写父类的方法；\n\n```dart\nclass Person {\n  String name;\n  num age;\n  Person(this.name, this.age);\n  Person.xxx(this.name, this.age);\n\n  void printInfo() {\n    print(\"${this.name}---${this.age}\");\n  }\n}\n```\n\n```dart\nimport 'Person.dart';\n\nclass Teacher extends Person {\n  String sex;\n  Teacher(String name, num age, String sex) : super(name, age) {\n    this.sex = sex;\n  }\n  // Teacher(String name, num age, String sex) : super.xxx(name, age) {\n  //   this.sex = sex;\n  // }\n\n  @override\n  void printInfo() {\n    // super.printInfo(); //自类调用父类的方法\n    print(\"${this.name}---${this.age}---${this.sex}\");\n  }\n\n  run() {\n    print(\"${this.name}***${this.age}***${this.sex}\");\n  }\n}\n```\n\n```dart\nimport 'Teacher.dart';\n\nmain() {\n  Teacher t = new Teacher('张三', 20, '男');\n  t.printInfo(); // 张三---20---男\n  t.run(); // 张三***20***男\n}\n```\n\n#### 抽象类\n\nDart 抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。\n- 抽象类通过 abstract 关键字来定义；\n- 抽象方法不能用 abstract 声明，Dart 中没有方法体的方法我们称为抽象方法；\n- 如果子类继承抽象类必须得实现里面的抽象方法；\n- 如果把抽象类当做接口实现的话，必须得实现抽象类里面定义的所有属性和方法；\n- 抽象类不能被实例化，只有继承它的子类可以；\n\n**extends 抽象类和 implements 的区别：**\n- 如果要复用抽象类里面的方法，并且要用抽象方法约束自类的话，我们就用 extends 继承抽象类；\n- 如果只是把抽象类当做标准的话，我们就用 implements 实现抽象类；\n\n```dart\nabstract class Animal {\n  eat(); // 抽象方法\n  run(); // 抽象方法\n\n  printInfo() {\n    print('我是一个抽象类里面的普通方法');\n  }\n}\n```\n\n```dart\nimport 'Animal.dart';\n\nclass Dog extends Animal {\n  @override\n  eat() {\n    print(\"Dog eat ...\");\n  }\n\n  @override\n  run() {\n    print(\"Dog run ...\");\n  }\n}\n```\n\n```dart\nimport 'Animal.dart';\n\nclass Cat extends Animal {\n  @override\n  eat() {\n    print(\"Cat eat ...\");\n  }\n\n  @override\n  run() {\n    print(\"Cat run ...\");\n  }\n}\n```\n\n```dart\nimport 'Cat.dart';\nimport 'Dog.dart';\n\nmain() {\n  Dog d = new Dog();\n  d.eat(); // Dog eat ...\n  d.printInfo(); // 我是一个抽象类里面的普通方法\n\n  Cat c = new Cat();\n  c.eat(); // Cat eat ...\n  c.printInfo(); // 我是一个抽象类里面的普通方法\n}\n```\n\n#### 多态\n\n- 允许将子类类型的指针赋值给父类类型的指针，同一个函数调用会有不同的执行效果；\n- 子类的实例赋值给父类的引用；\n- 多态就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同的表现；\n\n```dart\nimport 'Animal.dart';\nimport 'Cat.dart';\nimport 'Dog.dart';\n\nmain() {\n  Animal d = new Dog();\n  d.eat(); // Dog eat ...\n\n  Animal c = new Cat();\n  c.eat(); // Cat eat ...\n}\n```\n\n### 接口\n\n和 Java 一样，Dart 也有接口，但是和 Java 还是有区别的：\n- Dart 的接口没有 interface 关键字定义接口，而是普通类或抽象类都可以作为接口被实现；\n- 同样使用 implements 关键字进行实现；\n- Dart 的接口有点奇怪，如果实现的类是普通类，需要将普通类中抽象的属性和方法全部覆写一遍；\n- 因为抽象类可以定义抽象方法，普通类不可以，所以一般如果要实现像 Java 接口那样的方式，一般会使用抽象类；\n- 建议使用抽象类定义接口；\n\n> 一个类可以实现多个接口。\n\n```dart\nabstract class DB {\n  // 当做接口   接口：就是约定 、规范\n  String uri;\n  insert(String data);\n  delete(String id);\n}\n```\n\n```dart\nimport 'DB.dart';\n\nclass MySQL implements DB {\n  @override\n  String uri;\n\n  @override\n  insert(String data) {\n    print(\"MySQL insert\");\n  }\n\n  @override\n  delete(String id) {\n    print(\"MySQL delete\");\n  }\n}\n```\n\n```dart\nimport 'DB.dart';\n\nclass MsSQL implements DB {\n  @override\n  String uri;\n\n  @override\n  insert(String data) {\n    print(\"MsSQL insert\");\n  }\n\n  @override\n  delete(String id) {\n    print(\"MsSQL delete\");\n  }\n}\n```\n\n```dart\nimport 'DB.dart';\nimport 'MySQL.dart';\n\nmain() {\n  DB db = new MySQL();\n  db.insert('123456');\n}\n```\n\n### mixins\n\nmixins 的中文意思是混入，就是在类中混入其他功能。\n\n在 Dart 中可以使用 mixins 实现类似**多继承**的功能。\n\n因为 mixins 使用的条件，随着 Dart 版本一直在变，这里讲的是 Dart 2.x 中使 用 mixins 的条件：\n- 作为 mixins 的类只能继承自 Object, 不能继承其他类；\n- 作为 mixins 的类不能有构造函数；\n- 一个类可以 mixins 多个 mixins 类；\n- mixins 绝不是继承，也不是接口，而是一种全新的特性；\n\nmixins 的实例类型就是其超类的子类型。mixins 使用 `with` 关键字实现其功能。\n\n```dart\nclass A {\n  String info = \"this is A\";\n  printA() {\n    print(\"A\");\n  }\n}\n```\n\n```dart\nclass B {\n  printB() {\n    print(\"B\");\n  }\n}\n```\n\n```dart\nimport 'A.dart';\nimport 'B.dart';\nimport 'Person.dart';\n\nclass C extends Person with A, B {\n  C(String name, num age) : super(name, age);\n}\n```\n\n```dart\nimport 'A.dart';\nimport 'B.dart';\nimport 'C.dart';\n\nmain() {\n  var c = new C(\"张三\", 20);\n  c.printA(); // A\n  c.printB(); // B\n  print(c.info); // this is A\n  c.printInfo(); // 张三---20\n\n  print(c is C); // true\n  print(c is A); // true\n  print(c is B); // true\n}\n```\n\n### 泛型\n\n通俗理解：泛型就是解决类、接口、方法的复用性、以及对不特定数据类型的支持（类型校验）。\n\n#### 泛型方法\n```dart\nmain() {\n  print(getData(1)); // A\n  print(getData2(2)); // 2\n}\n\ngetData<T>(T value) {\n  return \"A\";\n}\n\nT getData2<T>(T value) {\n  // return \"A\"; // 错误，只能返回 T 类型\n  return value;\n}\n```\n\n#### 泛型类\n```dart\nmain() {\n  PrintClass p = new PrintClass<int>();\n  p.add(1);\n  p.add(2);\n  p.add(3);\n  // p.add(\"A\"); // 报错\n  p.printInfo();\n}\n\nclass PrintClass<T> {\n  List list = new List<T>();\n  void add(T value) {\n    this.list.add(value);\n  }\n\n  void printInfo() {\n    for (var i = 0; i < this.list.length; i++) {\n      print(this.list[i]);\n    }\n  }\n}\n```\n\n### 泛型接口\n\n需求：实现数据缓存的功能。有文件缓存和内存缓存，内存缓存和文件缓存按照接口约束实现。\n\n1. 定义一个泛型接口，约束实现它的子类必须有 getByKey(key) 和 setByKey(key,value)；\n2. 要求 setByKey 的时候的 value 的类型和实例化子类的时候指定的类型一致；\n\n```dart\nmain() {\n  MemoryCache m = MemoryCache<Map>();\n  m.setByKey(\"index\", {\"name\": \"张三\", \"age\": 20}); // 我是内存缓存，把 key = index  value = {name: 张三, age: 20} 写入到了内存中\n}\n\nabstract class Cache<T> {\n  getByKey(String key);\n  void setByKey(String key, T value);\n}\n\nclass MemoryCache<T> implements Cache<T> {\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"我是内存缓存，把 key = ${key}  value = ${value} 写入到了内存中\");\n  }\n}\n\nclass FileCache<T> implements Cache<T> {\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"我是文件缓存，把 key = ${key}  value = ${value} 写入到了文件中\");\n  }\n}\n```\n\n### 库\n\n在 Dart 中，库的使用是通过 `import` 关键字引入的。library 指令可以创建一个库，每个 Dart 文件都是一个库，即使没有使用 library 指令来指定。\n\n```dart\nDart 中的库主要有三种：\n\n    1、我们自定义的库     \n          import 'lib/xxx.dart';\n    2、系统内置库       \n          import 'dart:math';    \n          import 'dart:io'; \n          import 'dart:convert';\n    3、pub 包管理系统中的库  \n        https://pub.dev/packages\n        https://pub.flutter-io.cn/packages\n        https://pub.dartlang.org/flutter/\n\n        1、需要在自己项目根目录新建一个 pubspec.yaml\n        2、在 pubspec.yaml 文件配置名称、描述、依赖等信息\n        3、然后运行 pub get 获取包下载到本地  \n        4、项目中引入库 import 'package:http/http.dart' as http; 看文档使用\n```\n\n#### 导入自己本地库\n\n```dart\nimport 'Person.dart';\n\nmain() {\n  var p = new Person(\"张三\", 20);\n  p.printInfo(); // 张三---20\n}\n```\n\n#### 导入系统内置库\n\n```dart\nimport 'dart:math';\n\nmain() {\n  print(max(10, 20)); // 20\n  print(min(-1, -2)); // -2\n}\n```\n\n#### 导入系统内置库实现请求数据\n\n```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nmain() async {\n  var result = await getDataFromZhihuAPI();\n  print(result);\n}\n\n// api 接口： http://news-at.zhihu.com/api/3/stories/latest\ngetDataFromZhihuAPI() async {\n  // 1、创建 HttpClient 对象\n  var httpClient = new HttpClient();\n  // 2、创建 Uri 对象\n  var uri = new Uri.http('news-at.zhihu.com', '/api/3/stories/latest');\n  // 3、发起请求，等待请求\n  var request = await httpClient.getUrl(uri);\n  // 4、关闭请求，等待响应\n  var response = await request.close();\n  // 5、解码响应的内容\n  return await response.transform(utf8.decoder).join();\n}\n```\n\n#### async 和 await\n\n这两个关键字的使用只需要记住两点：①、只有 async 方法才能使用 await 关键字调用方法；②、如果调用别的 async 方法必须使用 await 关键字；\n\nasync 是让方法变成异步，await 是等待异步方法执行完成。\n\n```dart\nmain() async {\n  var result = await testAsync();\n  print(result); // testAsync\n}\n\ntestAsync() async {\n  return \"testAsync\";\n}\n```\n\n#### 导入 pub 包管理系统中的库\n```dart\npub 包管理系统：\n\n1、从下面网址找到要用的库\n        https://pub.dev/packages\n        https://pub.flutter-io.cn/packages\n        https://pub.dartlang.org/flutter/\n\n2、创建一个 pubspec.yaml 文件，内容如下\n\n    name: xxx\n    description: A new flutter module project.\n    dependencies:  \n      date_format: ^1.0.9\n\n3、配置 dependencies\n\n4、运行 pub get 获取远程库\n\n5、看文档引入库使用\n```\n\n```dart\nimport 'package:date_format/date_format.dart';\n\nmain() {\n  print(formatDate(DateTime(1989, 02, 21), [yyyy, '-', mm, '-', dd])); // 1989-02-21\n}\n```\n\n#### 库重命名与冲突解决\n```dart\n当引入两个库中有相同名称标识符的时候，如果是 Java, 通常我们通过写上完整的包名路径来指定使用的具体标识符，甚至不用 import 都可以，\n但是 Dart 里面是必须 import 的。当冲突的时候，可以使用 as 关键字来指定库的前缀。如下例子所示：\n\nimport 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n\n\nElement element1 = new Element();           // Uses Element from lib1.\nlib2.Element element2 = new lib2.Element(); // Uses Element from lib2.\n```\n\n#### 部分导入\n```dart\n如果只需要导入库的一部分，有两种模式：\n\n模式一：只导入需要的部分，使用 show 关键字，如下例子所示：\n\nimport 'package:lib1/lib1.dart' show foo;\n\n模式二：隐藏不需要的部分，使用 hide 关键字，如下例子所示：\n\nimport 'package:lib2/lib2.dart' hide foo;    \n```\n\nMyMath.dart\n```dart\ngetOne() {\n  return \"one\";\n}\n\ngetTwo() {\n  return \"two\";\n}\n```\n\n```dart\nimport 'MyMath.dart' show getOne;\n\nmain() {\n  print(getOne());\n  // print(getTwo()); // 报错\n}\n```\n\n#### 延迟加载\n```dart\n延迟加载也称为懒加载，可以在需要的时候再进行加载。\n懒加载的最大好处是可以减少 APP 的启动时间。\n\n懒加载使用 deferred as 关键字来指定，如下例子所示：\n\nimport 'package:deferred/hello.dart' deferred as hello;\n\n当需要使用的时候，需要使用 loadLibrary() 方法来加载：\n\ngreet() async {\n    await hello.loadLibrary();\n    hello.printGreeting();\n}\n```\n\n### 2.13 之后的一些新特性\n\n#### Null safety\n\n```dart\n/**\n  Null safety 翻译成中文的意思是空安全。\n\n  null safety 可以帮助开发者避免一些日常开发中很难被发现的错误，并且额外的好处是可以改善性能。\n\n  Flutter2.2.0（2021 年 5 月 19 日发布）之后的版本都要求使用 null safety。\n\n  1、? 可空类型\n  2、! 类型断言\n*/\n\nString? getData(apiUrl) {\n  if (apiUrl != null) {\n    return \"this is server data\";\n  }\n  return null;\n}\n\nvoid printLength(String? str) {\n  try {\n    print(str!.length);\n  } catch (e) {\n    print(\"str is null\");\n  }\n}\n\nvoid main() {\n  // 1、? 可空类型\n  String? str = \"abc\"; // String?  表示 str 是一个可空类型\n  str = null; // 允许设置为 null\n  print(str);\n\n  print(getData(\"http://www.baidu.com\"));\n  print(getData(null));\n\n  // 2、! 类型断言\n  String? str2 = \"this is str\";\n  // str2 = null;\n  // 如果 str2 不等于 null 会打印 str2 的长度，如果等于 null 会抛出异常\n  print(str2!.length);\n\n  printLength(\"str\");\n  printLength(null);\n}\n```\n\n#### late 关键字\n\n```dart\n/**\n * late 关键字主要用于延迟初始化。\n */\nclass Person {\n  late String name;\n  late int age;\n  void setInfo(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  String getInfo() {\n    return \"${this.name}---${this.age}\";\n  }\n}\n\nvoid main(args) {\n  Person p = new Person();\n  p.setInfo(\"张三\", 20);\n  print(p.getInfo());\n}\n```\n\n#### required 关键字\n\n```dart\n/**\n * required 翻译成中文的意思是需要、依赖\n * \n * 最开始 @required 是注解，现在它已经作为内置修饰符，主要用于允许根据需要标记任何命名参数（函数或类），\n * 使得它们不为空。因为可选参数中必须有个 required 参数或者该参数有个默认值。\n */\nString printInfo(String username, {int age = 10, String sex = \"男\"}) {\n  return \"姓名:$username---性别:$sex--年龄:$age\";\n}\n\nString printInfo2(String username, {required int age, required String sex}) {\n  return \"姓名:$username---性别:$sex--年龄:$age\";\n}\n\nvoid main(args) {\n  print(printInfo('张三'));\n\n  print(printInfo('张三', age: 20, sex: \"女\"));\n\n  // age 和 sex 必须传入\n  print(printInfo2('张三', age: 22, sex: \"女\"));\n}\n```\n\n```dart\n/**\n * name 可以传入也可以不传入，age 必须传入\n */\nclass Person {\n  String? name; // 可空属性\n  int age;\n  Person({this.name, required this.age}); // age 必须传入\n\n  String getInfo() {\n    return \"${this.name}---${this.age}\";\n  }\n}\n\nvoid main(args) {\n  Person p = new Person(name: \"张三\", age: 20);\n  print(p.getInfo()); // 张三---20\n\n  Person p1 = new Person(age: 20);\n  print(p1.getInfo()); // null---20\n}\n```\n\n### 性能优化\n\n#### 回顾 Dart 常量\n\n```dart\n/**\nDart 常量: final 和 const 修饰符。\n  1、const 声明的常量是在编译时确定的，永远不会改变；\n  2、final 声明的常量允许声明后再赋值，赋值后不可改变，final 声明的变量是在运行时确定的；\n  3、final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。\n*/\n\nvoid main() {\n  // const 常量\n  // const PI = 3.14;\n  // PI = 3.14159; // const 定义的常量没法改变\n  // print(PI);\n\n  // final 常量\n  // final PI = 3.14;\n  // print(PI);\n\n  final a;\n  a = 13;\n  // a = 14;\n  print(a);\n\n  final d = new DateTime.now();\n}\n```\n\n#### const、identical 函数\n\n```dart\n/**\n dart:core 库中 identical 函数的用法介绍如下：\n\n用法:\nbool identical(\n   Object? a,    \n   Object? b   \n)\n检查两个引用是否指向同一个对象。\n */\n\nvoid main() {\n  // var o1 = new Object();\n  // var o2 = new Object();\n  // print(identical(o1, o2)); // false，不共享存储空间\n  // print(identical(o1, o1)); // true，共享存储空间\n\n  // var o1 = Object();\n  // var o2 = Object();\n  // print(identical(o1, o2)); // false\n  // print(identical(o1, o1)); // true\n\n  // 表示实例化常量构造函数\n  // o1 和 o2 共享了存储空间\n  // var o1 = const Object();\n  // var o2 = const Object();\n  // print(identical(o1, o2)); // true，共享存储空间\n  // print(identical(o1, o1)); // true，共享存储空间\n\n  // print(identical([2], [2])); // false\n\n  // var a = [2];\n  // var b = [2];\n  // print(identical(a, b)); // false，不共享存储空间\n\n  const c = [2];\n  const d = [3];\n  print(identical(c, d)); // false，不共享存储空间\n\n  // 发现：const 关键词在多个地方创建相同的对象的时候，内存中只保留了一个对象。\n  // 共享存储空间条件：1、常量   2、值相等。\n}\n```\n\n#### 普通构造函数\n\n```dart\nclass Container {\n  int width;\n  int height;\n  Container({required this.width, required this.height});\n}\n\nvoid main() {\n  var c1 = new Container(width: 100, height: 100);\n  var c2 = new Container(width: 100, height: 100);\n  print(identical(c1, c2)); // false，c1 和 c2 在内存中存储了 2 份\n}\n```\n\n#### 常量构造函数\n\n```dart\n/*\n常量构造函数总结如下几点：\n  1、常量构造函数需以 const 关键字修饰；\n  2、const 构造函数必须用于成员变量都是 final 的类；\n  3、如果实例化时不加 const 修饰符，即使调用的是常量构造函数，实例化的对象也不是常量实例；\n  4、实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象；\n  5、Flutter 中 const 修饰不仅仅是节省组件构建时的内存开销，Flutter 在需要重新构建组件的时候，由于这个组件是不应该改变的，重新构建没有任何意义，因此 Flutter 不会重新构建 const 组件。 \n*/\n\n// 常量构造函数\nclass Container {\n  final int width;\n  final int height;\n  const Container({required this.width, required this.height});\n}\n\nvoid main() {\n  var c1 = Container(width: 100, height: 100);\n  var c2 = Container(width: 100, height: 100);\n  print(identical(c1, c2)); // false\n\n  var c3 = const Container(width: 100, height: 100);\n  var c4 = const Container(width: 100, height: 100);\n  print(identical(c3, c4)); // true\n\n  var c5 = const Container(width: 100, height: 110);\n  var c6 = const Container(width: 120, height: 100);\n  print(identical(c5, c6)); // false\n}\n// 实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象。\n```\n\n","slug":"Dart-学习笔记","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd1000xncttb9sdgh04","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<blockquote>\n<p>本笔记整理自大地老师的 Dart 笔记，同时加入了自己写的一些测试例子。</p>\n</blockquote>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>要在我们本地开发 Dart 程序的话首先需要安装 Dart SDK</p>\n<p>官方文档：<a href=\"https://dart.dev/get-dart\">https://dart.dev/get-dart</a></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows(推荐):</span><br><span class=\"line\"></span><br><span class=\"line\">  http:<span class=\"comment\">//www.gekorm.com/dart-windows/</span></span><br><span class=\"line\"></span><br><span class=\"line\">mac：</span><br><span class=\"line\"></span><br><span class=\"line\">  如果 mac 电脑没有安装 brew 这个工具首先第一步需要安装它： https:<span class=\"comment\">//brew.sh/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  brew tap dart-lang/dart</span><br><span class=\"line\">    </span><br><span class=\"line\">  brew install dart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dart 的开发工具有很多： IntelliJ IDEA  、 WebStorm、 Atom、Vscode 等</span><br><span class=\"line\"></span><br><span class=\"line\">这里我们主要给大家讲解的是如果在 vscode 中配置 Dart。</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">1</span>、找到 vscode 插件安装 Dart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、找到 vscode 插件安装 code runner, Code Runner 可以运行我们的文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>Dart 中定义变量可以使用具体的类型（int、double、String、bool 等）申明 ，也可以通过 var 关键字来申明变量。</p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><blockquote>\n<p>final 和 const 修饰符都可以表示常量。</p>\n</blockquote>\n<ul>\n<li>const 值不变，一开始就得赋值。</li>\n<li>final 可以开始不赋值，只能赋一次。而 final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。</li>\n<li>注意：永远不改变的量，请使用 final 或 const 修饰它，而不是使用 var 或其他变量类型。<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> PI = <span class=\"number\">3.14159</span>;</span><br><span class=\"line\">  <span class=\"comment\">// PI = 3.14; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(PI);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// const x = new DateTime.now(); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// a = 2; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(time);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h3><p>Dart 中支持以下常用数据类型：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Numbers（数值）</span><br><span class=\"line\">    <span class=\"built_in\">int</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span></span><br><span class=\"line\">Strings（字符串）</span><br><span class=\"line\">    <span class=\"built_in\">String</span></span><br><span class=\"line\">Booleans(布尔)</span><br><span class=\"line\">    <span class=\"built_in\">bool</span></span><br><span class=\"line\"><span class=\"built_in\">List</span>（数组）</span><br><span class=\"line\">    在 Dart 中，数组是列表对象，所以大多数人只是称它们为列表</span><br><span class=\"line\">Maps（字典）</span><br><span class=\"line\">    通常来说，<span class=\"built_in\">Map</span> 是一个键值对相关的对象。键和值可以是任何类型的对象。每个键只出现一次，而一个值则可以出现多次</span><br></pre></td></tr></table></figure>\n\n<p>基本使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、字符串类型（String）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> str2 = <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$str1</span> <span class=\"subst\">$str2</span>&quot;</span>); <span class=\"comment\">// 字符串拼接</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str1 + <span class=\"string\">&quot; &quot;</span> + str2); <span class=\"comment\">// 字符串拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 三个单引号或三个双引号，让字符串原样输出</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;&#x27;&#x27;Hello</span></span><br><span class=\"line\"><span class=\"string\">                World&#x27;&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str3);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、数值类型（int、double）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// 必须为整型</span></span><br><span class=\"line\">  x = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">double</span> d = <span class=\"number\">99.9</span>; <span class=\"comment\">// 整型或浮点型</span></span><br><span class=\"line\">  d = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(d);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、布尔类型（bool）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;真&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;假&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、List（数组/集合）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"comment\">// 第一种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(list1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 第二种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list2 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>();</span><br><span class=\"line\">  list2.add(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">  list2.add(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">  list2.add(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(list2);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义 List 时指定类型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list3 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// list3.add(1); // 错误</span></span><br><span class=\"line\">  list3.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(list3);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 5、Maps（字典）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"comment\">// 第一种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> person1 = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;work&quot;</span>: [<span class=\"string\">&quot;程序员&quot;</span>, <span class=\"string\">&quot;送外卖&quot;</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person1);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person1[<span class=\"string\">&quot;name&quot;</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person1[<span class=\"string\">&quot;work&quot;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 第二种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  person2[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">  person2[<span class=\"string\">&quot;age&quot;</span>] = <span class=\"number\">21</span>;</span><br><span class=\"line\">  person2[<span class=\"string\">&quot;work&quot;</span>] = [<span class=\"string\">&quot;程序员&quot;</span>, <span class=\"string\">&quot;送外卖&quot;</span>];</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>is</code> 关键词来判断类型</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x <span class=\"keyword\">is</span> <span class=\"built_in\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;是 String 类型&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x <span class=\"keyword\">is</span> <span class=\"built_in\">int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;是 int 类型&#x27;</span>); <span class=\"comment\">// 执行这里</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;是其他类型&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>Dart 运算符</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">算术运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    +    -    *    /     ~/ (取整)     %（取余）</span><br><span class=\"line\">    </span><br><span class=\"line\">关系运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    ==    ！=   &gt;    &lt;    &gt;=    &lt;=</span><br><span class=\"line\"></span><br><span class=\"line\">逻辑运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    !  &amp;&amp;   ||</span><br><span class=\"line\"></span><br><span class=\"line\">赋值运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    基础赋值运算符   =   ??=</span><br><span class=\"line\">    复合赋值运算符   +=  -=  *=   /=   %=  ~/=</span><br></pre></td></tr></table></figure>\n\n<p>基本使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、算术运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x / y); <span class=\"comment\">// 3.3333333333333335</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x ~/ y); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x % y); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、关系运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">123.0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a 等于 b&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == c) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a 等于 c&#x27;</span>); <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == d) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a 等于 d&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、逻辑运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(!flag); <span class=\"comment\">// true（取反）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、基础赋值运算符（=   ??=）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> aa = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> bb;</span><br><span class=\"line\">  aa ??= <span class=\"number\">100</span>;</span><br><span class=\"line\">  bb ??= <span class=\"number\">200</span>; <span class=\"comment\">// 因为 b 为空，所以重新赋值</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(aa); <span class=\"comment\">// 10</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(bb); <span class=\"comment\">// 200</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 5、复合赋值运算符   +=  -=  <span class=\"emphasis\">*=   /=   %=  ~/=</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"language-markdown\"><span class=\"comment\">   *</span>/</span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> xx = <span class=\"number\">10</span>;</span><br><span class=\"line\">  xx += <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(xx); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、if else / switch case</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> sex = <span class=\"string\">&quot;女&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (sex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;男&quot;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;女&quot;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;女&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;不男不女&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、三目运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> s = flag ? <span class=\"string\">&quot;我是 true&quot;</span> : <span class=\"string\">&quot;我是 false&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、?? 运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = a ?? <span class=\"number\">30</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(b); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、Number 与 String 类型之间的转换</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> <span class=\"built_in\">num</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"built_in\">double</span> d = <span class=\"number\">30.0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> str = <span class=\"string\">&quot;50&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">num</span>.toString()); <span class=\"comment\">// 20</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(d.toString()); <span class=\"comment\">// 30.0</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>.parse(str)); <span class=\"comment\">// 50</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">double</span>.parse(str)); <span class=\"comment\">// 50.0</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>.tryParse(<span class=\"string\">&quot;100a&quot;</span>)); <span class=\"comment\">// null</span></span><br><span class=\"line\">  <span class=\"comment\">// print(int.parse(&quot;100a&quot;)); // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myNum = <span class=\"built_in\">double</span>.parse(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(myNum);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(err); <span class=\"comment\">// FormatException: Invalid double</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、其他类型转换成 Booleans 类型</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myStr = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (myStr.isEmpty) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr 为空&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr 不为空&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myStr2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (myStr2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr2 为空&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr2 不为空&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">0</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x); <span class=\"comment\">// NaN</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x.isNaN) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;x is NaN&quot;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、++  --   表示自增 自减 1</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 在赋值运算里面，如果 ++ -- 写在前面，先运算后赋值，如果 ++ -- 写在后面，先赋值后运算</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = a--;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a); <span class=\"comment\">// 9</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(b); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bb = --aa;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(aa); <span class=\"comment\">// 99</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(bb); <span class=\"comment\">// 99</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、for 语句</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = [<span class=\"string\">&#x27;新闻0&#x27;</span>, <span class=\"string\">&#x27;新闻1&#x27;</span>, <span class=\"string\">&#x27;新闻2&#x27;</span>, <span class=\"string\">&#x27;新闻3&#x27;</span>, <span class=\"string\">&#x27;新闻4&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、while / do while</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 5050</span></span><br><span class=\"line\"></span><br><span class=\"line\">  i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 5050</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、break / continue</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 结束当前循环体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 1 + 2 + 3 = 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>; <span class=\"comment\">// 本次循环跳过下面代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 1 + 3 = 4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集合类型\"><a href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"></a>集合类型</h3><h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    List 里面常用的属性和方法：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    常用属性：</span></span><br><span class=\"line\"><span class=\"comment\">        length          长度</span></span><br><span class=\"line\"><span class=\"comment\">        reversed        翻转</span></span><br><span class=\"line\"><span class=\"comment\">        isEmpty         是否为空</span></span><br><span class=\"line\"><span class=\"comment\">        isNotEmpty      是否不为空</span></span><br><span class=\"line\"><span class=\"comment\">    常用方法：  </span></span><br><span class=\"line\"><span class=\"comment\">        add         增加</span></span><br><span class=\"line\"><span class=\"comment\">        addAll      拼接数组</span></span><br><span class=\"line\"><span class=\"comment\">        indexOf     查找  传入具体值</span></span><br><span class=\"line\"><span class=\"comment\">        remove      删除  传入具体值</span></span><br><span class=\"line\"><span class=\"comment\">        removeAt    删除  传入索引值</span></span><br><span class=\"line\"><span class=\"comment\">        fillRange   修改   </span></span><br><span class=\"line\"><span class=\"comment\">        insert(index,value);            指定位置插入    </span></span><br><span class=\"line\"><span class=\"comment\">        insertAll(index,list)           指定位置插入 List</span></span><br><span class=\"line\"><span class=\"comment\">        toList()    其他类型转换成 List</span></span><br><span class=\"line\"><span class=\"comment\">        join()      List 转换成字符串</span></span><br><span class=\"line\"><span class=\"comment\">        split()     字符串转化成 List</span></span><br><span class=\"line\"><span class=\"comment\">        forEach   </span></span><br><span class=\"line\"><span class=\"comment\">        map</span></span><br><span class=\"line\"><span class=\"comment\">        where</span></span><br><span class=\"line\"><span class=\"comment\">        any</span></span><br><span class=\"line\"><span class=\"comment\">        every</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"built_in\">List</span> myList = [<span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>, <span class=\"string\">&#x27;CC&#x27;</span>];</span><br><span class=\"line\">  myList.add(<span class=\"string\">&#x27;DD&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList = myList.reversed.toList();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList); <span class=\"comment\">// [DD, CC, BB, AA]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// myList.fillRange(1, 3, &#x27;aaa&#x27;);</span></span><br><span class=\"line\">  <span class=\"comment\">// print(myList); // [AA, aaa, aaa, DD]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = myList.join(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str); <span class=\"comment\">// AA-BB-CC-DD</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> Set</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、用它最主要的功能就是去除数组重复内容；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、Set 是没有顺序且不能重复的集合，所以不能通过索引去获取值；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(<span class=\"string\">&#x27;AA&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(<span class=\"string\">&#x27;BB&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(<span class=\"string\">&#x27;AA&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"keyword\">set</span>); <span class=\"comment\">// &#123;AA, BB&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"keyword\">set</span>.toList()); <span class=\"comment\">// [AA, BB]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myList = [<span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>, <span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;CC&#x27;</span>, <span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mySet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  mySet.addAll(myList);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(mySet); <span class=\"comment\">// &#123;AA, BB, CC&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(mySet.toList()); <span class=\"comment\">// [AA, BB, CC]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    映射（Maps）是无序的键值对：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    常用属性：</span></span><br><span class=\"line\"><span class=\"comment\">        keys            获取所有的 key 值</span></span><br><span class=\"line\"><span class=\"comment\">        values          获取所有的 value 值</span></span><br><span class=\"line\"><span class=\"comment\">        isEmpty         是否为空</span></span><br><span class=\"line\"><span class=\"comment\">        isNotEmpty      是否不为空</span></span><br><span class=\"line\"><span class=\"comment\">    常用方法:</span></span><br><span class=\"line\"><span class=\"comment\">        remove(key)     删除指定 key 的数据</span></span><br><span class=\"line\"><span class=\"comment\">        addAll(&#123;...&#125;)   合并映射  给映射内增加属性</span></span><br><span class=\"line\"><span class=\"comment\">        containsValue   查看映射内的值  返回 true/false</span></span><br><span class=\"line\"><span class=\"comment\">        forEach   </span></span><br><span class=\"line\"><span class=\"comment\">        map</span></span><br><span class=\"line\"><span class=\"comment\">        where</span></span><br><span class=\"line\"><span class=\"comment\">        any</span></span><br><span class=\"line\"><span class=\"comment\">        every</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"built_in\">Map</span> zhangSan = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> liSi = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  liSi[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">  liSi[<span class=\"string\">&quot;age&quot;</span>] = <span class=\"number\">21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan.keys.toList()); <span class=\"comment\">// [name, age]</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan.values.toList()); <span class=\"comment\">// [张三, 20]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  zhangSan.addAll(&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;sex&quot;</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;work&quot;</span>: [<span class=\"string\">&#x27;敲代码&#x27;</span>, <span class=\"string\">&#x27;送外卖&#x27;</span>]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan); <span class=\"comment\">// &#123;name: 张三, age: 20, sex: 男, work: [敲代码, 送外卖]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  zhangSan.remove(<span class=\"string\">&quot;sex&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan); <span class=\"comment\">// &#123;name: 张三, age: 20, work: [敲代码, 送外卖]&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"集合的-forEach、map、where、any、every-方法使用\"><a href=\"#集合的-forEach、map、where、any、every-方法使用\" class=\"headerlink\" title=\"集合的 forEach、map、where、any、every 方法使用\"></a>集合的 forEach、map、where、any、every 方法使用</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> List</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = [<span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>, <span class=\"string\">&#x27;CC&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(list[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  list.forEach((element) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(element);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList = myList.map((e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e * <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList.toList()); <span class=\"comment\">// [2, 6, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList2 = myList.where((element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList2.toList()); <span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = myList.any((element) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只要集合里面有满足条件的就返回 true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(f); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> g = myList.every((element) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每一个都满足条件返回 true, 否则返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(g); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> Set</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.addAll([<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.forEach((element) =&gt; <span class=\"built_in\">print</span>(element));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> Map</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> zhangSan = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">  zhangSan.forEach((key, value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$key</span>---<span class=\"subst\">$value</span>&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数定义、作用域\"><a href=\"#函数定义、作用域\" class=\"headerlink\" title=\"函数定义、作用域\"></a>函数定义、作用域</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  内置方法/函数：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      print();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  自定义方法：</span></span><br><span class=\"line\"><span class=\"comment\">      自定义方法的基本格式：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      返回类型  方法名称（参数1，参数2,...）&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        方法体</span></span><br><span class=\"line\"><span class=\"comment\">        return 返回值;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  printInfo(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">int</span> sum = getSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 演示方法的作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> exec() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> sayHello() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sayHello();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exec(); <span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">  <span class=\"comment\">// sayHello(); // 错误写法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> printInfo(<span class=\"built_in\">String</span> info) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(info);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> getSum(<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数传参、默认参数、可选参数、命名参数\"><a href=\"#函数传参、默认参数、可选参数、命名参数\" class=\"headerlink\" title=\"函数传参、默认参数、可选参数、命名参数\"></a>函数传参、默认参数、可选参数、命名参数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、基本传参</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = getSum(<span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 55</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、可选参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  printUserInfo(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  printUserInfo(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、默认参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  printUserInfo2(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;女&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  printUserInfo2(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、命名参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  printUserInfo3(<span class=\"string\">&quot;王五&quot;</span>, sex: <span class=\"string\">&quot;未知&quot;</span>, age: <span class=\"number\">22</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 5、把方法当参数的方法</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  fun2(fun1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> getSum(<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 带可选参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printUserInfo(<span class=\"built_in\">String</span> name, [<span class=\"built_in\">int</span> age]) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---年龄保密&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---年龄：<span class=\"subst\">$age</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 带默认参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printUserInfo2(<span class=\"built_in\">String</span> name, [<span class=\"built_in\">String</span> sex = <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"built_in\">int</span> age]) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄保密&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄：<span class=\"subst\">$age</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 带命名参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printUserInfo3(<span class=\"built_in\">String</span> name, &#123;<span class=\"built_in\">String</span> sex = <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"built_in\">int</span> age&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄保密&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄：<span class=\"subst\">$age</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun1() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fun1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun2(fn) &#123;</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"箭头函数、匿名函数、自执行方法、方法递归\"><a href=\"#箭头函数、匿名函数、自执行方法、方法递归\" class=\"headerlink\" title=\"箭头函数、匿名函数、自执行方法、方法递归\"></a>箭头函数、匿名函数、自执行方法、方法递归</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、箭头函数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 只能写一行，不能多行。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">List</span> myList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  myList.forEach((element) =&gt; <span class=\"built_in\">print</span>(element));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList = myList.map((e) =&gt; e &gt; <span class=\"number\">2</span> ? e * <span class=\"number\">2</span> : e);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList.toList()); <span class=\"comment\">// [1, 6, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、匿名函数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myNum = () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(myNum()); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、自执行方法</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  ((<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是自执行方法&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(n * <span class=\"number\">10</span>); <span class=\"comment\">// 180</span></span><br><span class=\"line\">  &#125;)(<span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、方法递归</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = fn(<span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 5050</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> fn(<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n + fn(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 全局变量特点：全局变量常驻内存、全局变量污染全局；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 局部变量的特点：不常驻内存会被垃圾机制回收、不会污染全局；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   * 闭包：</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、可以常驻内存，不污染全局；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、函数嵌套函数，内部函数会调用外部函数的变量或参数，变量或参数不会被系统回收(不会释放内存)；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、写法：函数嵌套函数，并 return 里面的函数，这样就形成了闭包；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = fn();</span><br><span class=\"line\">  f(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  f(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  f(); <span class=\"comment\">// 4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> () &#123;</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h3><h4 id=\"面向对象的介绍\"><a href=\"#面向对象的介绍\" class=\"headerlink\" title=\"面向对象的介绍\"></a>面向对象的介绍</h4><p>面向对象编程(OOP)的三个基本特征是：封装、继承、多态</p>\n<ul>\n<li><strong>封装</strong>：封装是对象和类概念的主要特性。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其他对象调用, 而一部分属性和方法则隐藏。</li>\n<li><strong>继承</strong>：面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</li>\n<li><strong>多态</strong>：允许将子类类型的指针赋值给父类类型的指针, 同一个函数调用会有不同的执行效果 。</li>\n</ul>\n<p>Dart 所有的东西都是对象，所有的对象都继承自 Object 类。</p>\n<p>Dart 是一门使用类和<strong>单继承</strong>的面向对象语言，所有的对象都是类的实例，并且所有的类都是 Object 的子类</p>\n<p>一个类通常由属性和方法组成。</p>\n<blockquote>\n<p>Dart 和其他面向对象语言不一样，Dart 中没有 public、private、protected 这些访问修饰符，但是我们可以使用 <code>_</code> 把一个属性或者方法定义成私有。</p>\n</blockquote>\n<h4 id=\"类与对象的基本使用\"><a href=\"#类与对象的基本使用\" class=\"headerlink\" title=\"类与对象的基本使用\"></a>类与对象的基本使用</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> _name; <span class=\"comment\">// 加了下划线表示私有属性</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 默认构造函数的简写</span></span><br><span class=\"line\">  Person(<span class=\"keyword\">this</span>._name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\"></span><br><span class=\"line\">  Person.now() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是命名构造函数&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Person.setInfo(<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>._name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _sayHello() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;_sayHello 是一个私有方法&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  execRun() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._sayHello();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">  Rect(<span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height);</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过方法获取面积</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> area &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过属性获取面积</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> areaHeight(height) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Rect.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  p.printInfo();</span><br><span class=\"line\">  p.execRun();</span><br><span class=\"line\"></span><br><span class=\"line\">  Person p2 = Person.now();</span><br><span class=\"line\"></span><br><span class=\"line\">  Person p3 = Person.setInfo(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">  p3.printInfo();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = Rect(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.getArea()); <span class=\"comment\">// 50</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.area); <span class=\"comment\">// 50</span></span><br><span class=\"line\"></span><br><span class=\"line\">  r.areaHeight = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.area); <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类中的初始化列表\"><a href=\"#类中的初始化列表\" class=\"headerlink\" title=\"类中的初始化列表\"></a>类中的初始化列表</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在构造函数体运行之前初始化实例变量</span></span><br><span class=\"line\">  Rect()</span><br><span class=\"line\">      : width = <span class=\"number\">3</span>,</span><br><span class=\"line\">        height = <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.width&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.height&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> area &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Rect.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = Rect();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.area); <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类的静态变量与静态函数\"><a href=\"#类的静态变量与静态函数\" class=\"headerlink\" title=\"类的静态变量与静态函数\"></a>类的静态变量与静态函数</h4><p>Dart 中的静态成员:</p>\n<p>1、使用 static 关键字来实现类级别的变量和函数；</p>\n<p>2、静态方法不能访问非静态成员，非静态方法可以访问静态成员；</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> name = <span class=\"string\">&#x27;张三&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> showName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(Person.name);</span><br><span class=\"line\">  Person.showName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象操作符\"><a href=\"#对象操作符\" class=\"headerlink\" title=\"对象操作符\"></a>对象操作符</h4><p>Dart 中的对象操作符：</p>\n<ul>\n<li><code>?</code> 条件运算符</li>\n<li><code>as</code> 类型转换</li>\n<li><code>is</code> 类型判断</li>\n<li><code>..</code> 级联操作（连缀）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> age;</span><br><span class=\"line\">  Person(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Person p = Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  p?.printInfo(); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Person p2;</span><br><span class=\"line\">  p2?.printInfo(); <span class=\"comment\">// 无打印结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p <span class=\"keyword\">is</span> Person) &#123;</span><br><span class=\"line\">    p.name = <span class=\"string\">&#x27;李四&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p.printInfo(); <span class=\"comment\">// 李四---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p <span class=\"keyword\">is</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p3;</span><br><span class=\"line\">  p3 = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  p3 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">  p3.printInfo(); <span class=\"comment\">// 王五---22</span></span><br><span class=\"line\">  (p3 <span class=\"keyword\">as</span> Person).printInfo(); <span class=\"comment\">// 王五---22</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Person p4 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;AA&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  p4.printInfo(); <span class=\"comment\">// AA---10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  p4</span><br><span class=\"line\">    ..name = <span class=\"string\">&quot;BB&quot;</span></span><br><span class=\"line\">    ..age = <span class=\"number\">11</span></span><br><span class=\"line\">    ..printInfo(); <span class=\"comment\">// BB---11</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h4><blockquote>\n<p>面向对象的三大特性：封装 、继承、多态</p>\n</blockquote>\n<p>Dart 中的类的继承：  </p>\n<ul>\n<li>子类使用 extends 关键词来继承父类；</li>\n<li>子类会继承父类里面可见的属性和方法，但是不会继承构造函数；</li>\n<li>子类能复写父类的方法；</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> age;</span><br><span class=\"line\">  Person(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">  Person.xxx(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> sex;</span><br><span class=\"line\">  Teacher(<span class=\"built_in\">String</span> name, <span class=\"built_in\">num</span> age, <span class=\"built_in\">String</span> sex) : <span class=\"keyword\">super</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Teacher(String name, num age, String sex) : super.xxx(name, age) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.sex = sex;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// super.printInfo(); //自类调用父类的方法</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.sex&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>***<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>***<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.sex&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Teacher.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Teacher t = <span class=\"keyword\">new</span> Teacher(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">20</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\">  t.printInfo(); <span class=\"comment\">// 张三---20---男</span></span><br><span class=\"line\">  t.run(); <span class=\"comment\">// 张三***20***男</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>Dart 抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。</p>\n<ul>\n<li>抽象类通过 abstract 关键字来定义；</li>\n<li>抽象方法不能用 abstract 声明，Dart 中没有方法体的方法我们称为抽象方法；</li>\n<li>如果子类继承抽象类必须得实现里面的抽象方法；</li>\n<li>如果把抽象类当做接口实现的话，必须得实现抽象类里面定义的所有属性和方法；</li>\n<li>抽象类不能被实例化，只有继承它的子类可以；</li>\n</ul>\n<p><strong>extends 抽象类和 implements 的区别：</strong></p>\n<ul>\n<li>如果要复用抽象类里面的方法，并且要用抽象方法约束自类的话，我们就用 extends 继承抽象类；</li>\n<li>如果只是把抽象类当做标准的话，我们就用 implements 实现抽象类；</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  eat(); <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">  run(); <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是一个抽象类里面的普通方法&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Animal.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog eat ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog run ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Animal.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat eat ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat run ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Cat.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Dog.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Dog d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">  d.eat(); <span class=\"comment\">// Dog eat ...</span></span><br><span class=\"line\">  d.printInfo(); <span class=\"comment\">// 我是一个抽象类里面的普通方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Cat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">  c.eat(); <span class=\"comment\">// Cat eat ...</span></span><br><span class=\"line\">  c.printInfo(); <span class=\"comment\">// 我是一个抽象类里面的普通方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h4><ul>\n<li>允许将子类类型的指针赋值给父类类型的指针，同一个函数调用会有不同的执行效果；</li>\n<li>子类的实例赋值给父类的引用；</li>\n<li>多态就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同的表现；</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Animal.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Cat.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Dog.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Animal d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">  d.eat(); <span class=\"comment\">// Dog eat ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Animal c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">  c.eat(); <span class=\"comment\">// Cat eat ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>和 Java 一样，Dart 也有接口，但是和 Java 还是有区别的：</p>\n<ul>\n<li>Dart 的接口没有 interface 关键字定义接口，而是普通类或抽象类都可以作为接口被实现；</li>\n<li>同样使用 implements 关键字进行实现；</li>\n<li>Dart 的接口有点奇怪，如果实现的类是普通类，需要将普通类中抽象的属性和方法全部覆写一遍；</li>\n<li>因为抽象类可以定义抽象方法，普通类不可以，所以一般如果要实现像 Java 接口那样的方式，一般会使用抽象类；</li>\n<li>建议使用抽象类定义接口；</li>\n</ul>\n<blockquote>\n<p>一个类可以实现多个接口。</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DB</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当做接口   接口：就是约定 、规范</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> uri;</span><br><span class=\"line\">  insert(<span class=\"built_in\">String</span> data);</span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;DB.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">DB</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> uri;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  insert(<span class=\"built_in\">String</span> data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MySQL insert&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> id) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MySQL delete&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;DB.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MsSQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">DB</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> uri;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  insert(<span class=\"built_in\">String</span> data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MsSQL insert&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> id) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MsSQL delete&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;DB.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;MySQL.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  DB db = <span class=\"keyword\">new</span> MySQL();</span><br><span class=\"line\">  db.insert(<span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><p>mixins 的中文意思是混入，就是在类中混入其他功能。</p>\n<p>在 Dart 中可以使用 mixins 实现类似<strong>多继承</strong>的功能。</p>\n<p>因为 mixins 使用的条件，随着 Dart 版本一直在变，这里讲的是 Dart 2.x 中使 用 mixins 的条件：</p>\n<ul>\n<li>作为 mixins 的类只能继承自 Object, 不能继承其他类；</li>\n<li>作为 mixins 的类不能有构造函数；</li>\n<li>一个类可以 mixins 多个 mixins 类；</li>\n<li>mixins 绝不是继承，也不是接口，而是一种全新的特性；</li>\n</ul>\n<p>mixins 的实例类型就是其超类的子类型。mixins 使用 <code>with</code> 关键字实现其功能。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> info = <span class=\"string\">&quot;this is A&quot;</span>;</span><br><span class=\"line\">  printA() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  printB() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;A.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;B.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> <span class=\"title\">with</span> <span class=\"title\">A</span>, <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  C(<span class=\"built_in\">String</span> name, <span class=\"built_in\">num</span> age) : <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;A.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;B.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;C.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> C(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  c.printA(); <span class=\"comment\">// A</span></span><br><span class=\"line\">  c.printB(); <span class=\"comment\">// B</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c.info); <span class=\"comment\">// this is A</span></span><br><span class=\"line\">  c.printInfo(); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c <span class=\"keyword\">is</span> C); <span class=\"comment\">// true</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c <span class=\"keyword\">is</span> A); <span class=\"comment\">// true</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c <span class=\"keyword\">is</span> B); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>通俗理解：泛型就是解决类、接口、方法的复用性、以及对不特定数据类型的支持（类型校验）。</p>\n<h4 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData(<span class=\"number\">1</span>)); <span class=\"comment\">// A</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData2(<span class=\"number\">2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData&lt;T&gt;(T value) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">T getData2&lt;T&gt;(T value) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return &quot;A&quot;; // 错误，只能返回 T 类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  PrintClass p = <span class=\"keyword\">new</span> PrintClass&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">  p.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">  p.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">  p.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"comment\">// p.add(&quot;A&quot;); // 报错</span></span><br><span class=\"line\">  p.printInfo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintClass</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">List</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;T&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">void</span> add(T value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list.add(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"keyword\">this</span>.list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h3><p>需求：实现数据缓存的功能。有文件缓存和内存缓存，内存缓存和文件缓存按照接口约束实现。</p>\n<ol>\n<li>定义一个泛型接口，约束实现它的子类必须有 getByKey(key) 和 setByKey(key,value)；</li>\n<li>要求 setByKey 的时候的 value 的类型和实例化子类的时候指定的类型一致；</li>\n</ol>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  MemoryCache m = MemoryCache&lt;<span class=\"built_in\">Map</span>&gt;();</span><br><span class=\"line\">  m.setByKey(<span class=\"string\">&quot;index&quot;</span>, &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;); <span class=\"comment\">// 我是内存缓存，把 key = index  value = &#123;name: 张三, age: 20&#125; 写入到了内存中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  getByKey(<span class=\"built_in\">String</span> key);</span><br><span class=\"line\">  <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemoryCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  getByKey(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是内存缓存，把 key = <span class=\"subst\">$&#123;key&#125;</span>  value = <span class=\"subst\">$&#123;value&#125;</span> 写入到了内存中&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  getByKey(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是文件缓存，把 key = <span class=\"subst\">$&#123;key&#125;</span>  value = <span class=\"subst\">$&#123;value&#125;</span> 写入到了文件中&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h3><p>在 Dart 中，库的使用是通过 <code>import</code> 关键字引入的。library 指令可以创建一个库，每个 Dart 文件都是一个库，即使没有使用 library 指令来指定。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dart 中的库主要有三种：</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">1</span>、我们自定义的库     </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;lib/xxx.dart&#x27;</span>;</span><br><span class=\"line\">    <span class=\"number\">2</span>、系统内置库       </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:math&#x27;</span>;    </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:io&#x27;</span>; </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:convert&#x27;</span>;</span><br><span class=\"line\">    <span class=\"number\">3</span>、pub 包管理系统中的库  </span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dev/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.flutter-io.cn/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dartlang.org/flutter/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">1</span>、需要在自己项目根目录新建一个 pubspec.yaml</span><br><span class=\"line\">        <span class=\"number\">2</span>、在 pubspec.yaml 文件配置名称、描述、依赖等信息</span><br><span class=\"line\">        <span class=\"number\">3</span>、然后运行 pub <span class=\"keyword\">get</span> 获取包下载到本地  </span><br><span class=\"line\">        <span class=\"number\">4</span>、项目中引入库 <span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:http/http.dart&#x27;</span> <span class=\"keyword\">as</span> http; 看文档使用</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入自己本地库\"><a href=\"#导入自己本地库\" class=\"headerlink\" title=\"导入自己本地库\"></a>导入自己本地库</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  p.printInfo(); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入系统内置库\"><a href=\"#导入系统内置库\" class=\"headerlink\" title=\"导入系统内置库\"></a>导入系统内置库</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:math&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(max(<span class=\"number\">10</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// 20</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(min(<span class=\"number\">-1</span>, <span class=\"number\">-2</span>)); <span class=\"comment\">// -2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入系统内置库实现请求数据\"><a href=\"#导入系统内置库实现请求数据\" class=\"headerlink\" title=\"导入系统内置库实现请求数据\"></a>导入系统内置库实现请求数据</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:convert&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:io&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> getDataFromZhihuAPI();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// api 接口： http://news-at.zhihu.com/api/3/stories/latest</span></span><br><span class=\"line\">getDataFromZhihuAPI() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1、创建 HttpClient 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> httpClient = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\">  <span class=\"comment\">// 2、创建 Uri 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> uri = <span class=\"keyword\">new</span> <span class=\"built_in\">Uri</span>.http(<span class=\"string\">&#x27;news-at.zhihu.com&#x27;</span>, <span class=\"string\">&#x27;/api/3/stories/latest&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 3、发起请求，等待请求</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> request = <span class=\"keyword\">await</span> httpClient.getUrl(uri);</span><br><span class=\"line\">  <span class=\"comment\">// 4、关闭请求，等待响应</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> request.close();</span><br><span class=\"line\">  <span class=\"comment\">// 5、解码响应的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.transform(utf8.decoder).join();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"async-和-await\"><a href=\"#async-和-await\" class=\"headerlink\" title=\"async 和 await\"></a>async 和 await</h4><p>这两个关键字的使用只需要记住两点：①、只有 async 方法才能使用 await 关键字调用方法；②、如果调用别的 async 方法必须使用 await 关键字；</p>\n<p>async 是让方法变成异步，await 是等待异步方法执行完成。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> testAsync();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result); <span class=\"comment\">// testAsync</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testAsync() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;testAsync&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入-pub-包管理系统中的库\"><a href=\"#导入-pub-包管理系统中的库\" class=\"headerlink\" title=\"导入 pub 包管理系统中的库\"></a>导入 pub 包管理系统中的库</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub 包管理系统：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、从下面网址找到要用的库</span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dev/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.flutter-io.cn/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dartlang.org/flutter/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、创建一个 pubspec.yaml 文件，内容如下</span><br><span class=\"line\"></span><br><span class=\"line\">    name: xxx</span><br><span class=\"line\">    description: A <span class=\"keyword\">new</span> flutter module project.</span><br><span class=\"line\">    dependencies:  </span><br><span class=\"line\">      date_format: ^<span class=\"number\">1.0</span><span class=\"number\">.9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、配置 dependencies</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、运行 pub <span class=\"keyword\">get</span> 获取远程库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、看文档引入库使用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:date_format/date_format.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(formatDate(<span class=\"built_in\">DateTime</span>(<span class=\"number\">1989</span>, <span class=\"number\">02</span>, <span class=\"number\">21</span>), [yyyy, <span class=\"string\">&#x27;-&#x27;</span>, mm, <span class=\"string\">&#x27;-&#x27;</span>, dd])); <span class=\"comment\">// 1989-02-21</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"库重命名与冲突解决\"><a href=\"#库重命名与冲突解决\" class=\"headerlink\" title=\"库重命名与冲突解决\"></a>库重命名与冲突解决</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当引入两个库中有相同名称标识符的时候，如果是 Java, 通常我们通过写上完整的包名路径来指定使用的具体标识符，甚至不用 <span class=\"keyword\">import</span> 都可以，</span><br><span class=\"line\">但是 Dart 里面是必须 <span class=\"keyword\">import</span> 的。当冲突的时候，可以使用 <span class=\"keyword\">as</span> 关键字来指定库的前缀。如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">as</span> lib2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Element</span> element1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Element</span>();           <span class=\"comment\">// Uses Element from lib1.</span></span><br><span class=\"line\">lib2.<span class=\"built_in\">Element</span> element2 = <span class=\"keyword\">new</span> lib2.<span class=\"built_in\">Element</span>(); <span class=\"comment\">// Uses Element from lib2.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部分导入\"><a href=\"#部分导入\" class=\"headerlink\" title=\"部分导入\"></a>部分导入</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果只需要导入库的一部分，有两种模式：</span><br><span class=\"line\"></span><br><span class=\"line\">模式一：只导入需要的部分，使用 <span class=\"keyword\">show</span> 关键字，如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span> <span class=\"keyword\">show</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\">模式二：隐藏不需要的部分，使用 <span class=\"keyword\">hide</span> 关键字，如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">hide</span> foo;    </span><br></pre></td></tr></table></figure>\n\n<p>MyMath.dart</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getOne() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;one&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getTwo() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;two&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;MyMath.dart&#x27;</span> <span class=\"keyword\">show</span> getOne;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getOne());</span><br><span class=\"line\">  <span class=\"comment\">// print(getTwo()); // 报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟加载也称为懒加载，可以在需要的时候再进行加载。</span><br><span class=\"line\">懒加载的最大好处是可以减少 APP 的启动时间。</span><br><span class=\"line\"></span><br><span class=\"line\">懒加载使用 <span class=\"keyword\">deferred</span> <span class=\"keyword\">as</span> 关键字来指定，如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:deferred/hello.dart&#x27;</span> <span class=\"keyword\">deferred</span> <span class=\"keyword\">as</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\">当需要使用的时候，需要使用 loadLibrary() 方法来加载：</span><br><span class=\"line\"></span><br><span class=\"line\">greet() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> hello.loadLibrary();</span><br><span class=\"line\">    hello.printGreeting();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-13-之后的一些新特性\"><a href=\"#2-13-之后的一些新特性\" class=\"headerlink\" title=\"2.13 之后的一些新特性\"></a>2.13 之后的一些新特性</h3><h4 id=\"Null-safety\"><a href=\"#Null-safety\" class=\"headerlink\" title=\"Null safety\"></a>Null safety</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  Null safety 翻译成中文的意思是空安全。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  null safety 可以帮助开发者避免一些日常开发中很难被发现的错误，并且额外的好处是可以改善性能。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  Flutter2.2.0（2021 年 5 月 19 日发布）之后的版本都要求使用 null safety。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  1、? 可空类型</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  2、! 类型断言</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String?</span> getData(apiUrl) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (apiUrl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;this is server data&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> printLength(<span class=\"built_in\">String?</span> str) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(str!.length);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;str is null&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1、? 可空类型</span></span><br><span class=\"line\">  <span class=\"built_in\">String?</span> str = <span class=\"string\">&quot;abc&quot;</span>; <span class=\"comment\">// String?  表示 str 是一个可空类型</span></span><br><span class=\"line\">  str = <span class=\"keyword\">null</span>; <span class=\"comment\">// 允许设置为 null</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>));</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData(<span class=\"keyword\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2、! 类型断言</span></span><br><span class=\"line\">  <span class=\"built_in\">String?</span> str2 = <span class=\"string\">&quot;this is str&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// str2 = null;</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 str2 不等于 null 会打印 str2 的长度，如果等于 null 会抛出异常</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str2!.length);</span><br><span class=\"line\"></span><br><span class=\"line\">  printLength(<span class=\"string\">&quot;str&quot;</span>);</span><br><span class=\"line\">  printLength(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"late-关键字\"><a href=\"#late-关键字\" class=\"headerlink\" title=\"late 关键字\"></a>late 关键字</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> late 关键字主要用于延迟初始化。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">late</span> <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">late</span> <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> setInfo(<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> getInfo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main(args) &#123;</span><br><span class=\"line\">  Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">  p.setInfo(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p.getInfo());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"required-关键字\"><a href=\"#required-关键字\" class=\"headerlink\" title=\"required 关键字\"></a>required 关键字</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> required 翻译成中文的意思是需要、依赖</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> * 最开始 @required 是注解，现在它已经作为内置修饰符，主要用于允许根据需要标记任何命名参数（函数或类），</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 使得它们不为空。因为可选参数中必须有个 required 参数或者该参数有个默认值。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"built_in\">String</span> printInfo(<span class=\"built_in\">String</span> username, &#123;<span class=\"built_in\">int</span> age = <span class=\"number\">10</span>, <span class=\"built_in\">String</span> sex = <span class=\"string\">&quot;男&quot;</span>&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;姓名:<span class=\"subst\">$username</span>---性别:<span class=\"subst\">$sex</span>--年龄:<span class=\"subst\">$age</span>&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> printInfo2(<span class=\"built_in\">String</span> username, &#123;<span class=\"keyword\">required</span> <span class=\"built_in\">int</span> age, <span class=\"keyword\">required</span> <span class=\"built_in\">String</span> sex&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;姓名:<span class=\"subst\">$username</span>---性别:<span class=\"subst\">$sex</span>--年龄:<span class=\"subst\">$age</span>&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main(args) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(printInfo(<span class=\"string\">&#x27;张三&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(printInfo(<span class=\"string\">&#x27;张三&#x27;</span>, age: <span class=\"number\">20</span>, sex: <span class=\"string\">&quot;女&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// age 和 sex 必须传入</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(printInfo2(<span class=\"string\">&#x27;张三&#x27;</span>, age: <span class=\"number\">22</span>, sex: <span class=\"string\">&quot;女&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> name 可以传入也可以不传入，age 必须传入</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String?</span> name; <span class=\"comment\">// 可空属性</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">  Person(&#123;<span class=\"keyword\">this</span>.name, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.age&#125;); <span class=\"comment\">// age 必须传入</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> getInfo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main(args) &#123;</span><br><span class=\"line\">  Person p = <span class=\"keyword\">new</span> Person(name: <span class=\"string\">&quot;张三&quot;</span>, age: <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p.getInfo()); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Person p1 = <span class=\"keyword\">new</span> Person(age: <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p1.getInfo()); <span class=\"comment\">// null---20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><h4 id=\"回顾-Dart-常量\"><a href=\"#回顾-Dart-常量\" class=\"headerlink\" title=\"回顾 Dart 常量\"></a>回顾 Dart 常量</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">Dart 常量: final 和 const 修饰符。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  1、const 声明的常量是在编译时确定的，永远不会改变；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  2、final 声明的常量允许声明后再赋值，赋值后不可改变，final 声明的变量是在运行时确定的；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  3、final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// const 常量</span></span><br><span class=\"line\">  <span class=\"comment\">// const PI = 3.14;</span></span><br><span class=\"line\">  <span class=\"comment\">// PI = 3.14159; // const 定义的常量没法改变</span></span><br><span class=\"line\">  <span class=\"comment\">// print(PI);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// final 常量</span></span><br><span class=\"line\">  <span class=\"comment\">// final PI = 3.14;</span></span><br><span class=\"line\">  <span class=\"comment\">// print(PI);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> a;</span><br><span class=\"line\">  a = <span class=\"number\">13</span>;</span><br><span class=\"line\">  <span class=\"comment\">// a = 14;</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const、identical-函数\"><a href=\"#const、identical-函数\" class=\"headerlink\" title=\"const、identical 函数\"></a>const、identical 函数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> dart:core 库中 identical 函数的用法介绍如下：</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">用法:</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">bool identical(</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   Object? a,    </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   Object? b   </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">)</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">检查两个引用是否指向同一个对象。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// var o1 = new Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// var o2 = new Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o2)); // false，不共享存储空间</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o1)); // true，共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// var o1 = Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// var o2 = Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o2)); // false</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o1)); // true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 表示实例化常量构造函数</span></span><br><span class=\"line\">  <span class=\"comment\">// o1 和 o2 共享了存储空间</span></span><br><span class=\"line\">  <span class=\"comment\">// var o1 = const Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// var o2 = const Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o2)); // true，共享存储空间</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o1)); // true，共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print(identical([2], [2])); // false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// var a = [2];</span></span><br><span class=\"line\">  <span class=\"comment\">// var b = [2];</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(a, b)); // false，不共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = [<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = [<span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c, d)); <span class=\"comment\">// false，不共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 发现：const 关键词在多个地方创建相同的对象的时候，内存中只保留了一个对象。</span></span><br><span class=\"line\">  <span class=\"comment\">// 共享存储空间条件：1、常量   2、值相等。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"普通构造函数\"><a href=\"#普通构造函数\" class=\"headerlink\" title=\"普通构造函数\"></a>普通构造函数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> height;</span><br><span class=\"line\">  Container(&#123;<span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.width, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.height&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c1 = <span class=\"keyword\">new</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c2 = <span class=\"keyword\">new</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c1, c2)); <span class=\"comment\">// false，c1 和 c2 在内存中存储了 2 份</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常量构造函数\"><a href=\"#常量构造函数\" class=\"headerlink\" title=\"常量构造函数\"></a>常量构造函数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">常量构造函数总结如下几点：</span></span><br><span class=\"line\"><span class=\"comment\">  1、常量构造函数需以 const 关键字修饰；</span></span><br><span class=\"line\"><span class=\"comment\">  2、const 构造函数必须用于成员变量都是 final 的类；</span></span><br><span class=\"line\"><span class=\"comment\">  3、如果实例化时不加 const 修饰符，即使调用的是常量构造函数，实例化的对象也不是常量实例；</span></span><br><span class=\"line\"><span class=\"comment\">  4、实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象；</span></span><br><span class=\"line\"><span class=\"comment\">  5、Flutter 中 const 修饰不仅仅是节省组件构建时的内存开销，Flutter 在需要重新构建组件的时候，由于这个组件是不应该改变的，重新构建没有任何意义，因此 Flutter 不会重新构建 const 组件。 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常量构造函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> height;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Container(&#123;<span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.width, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.height&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c1 = Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c2 = Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c1, c2)); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c3 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c4 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c3, c4)); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c5 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">110</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c6 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">120</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c5, c6)); <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象。</span></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<blockquote>\n<p>本笔记整理自大地老师的 Dart 笔记，同时加入了自己写的一些测试例子。</p>\n</blockquote>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>要在我们本地开发 Dart 程序的话首先需要安装 Dart SDK</p>\n<p>官方文档：<a href=\"https://dart.dev/get-dart\">https://dart.dev/get-dart</a></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows(推荐):</span><br><span class=\"line\"></span><br><span class=\"line\">  http:<span class=\"comment\">//www.gekorm.com/dart-windows/</span></span><br><span class=\"line\"></span><br><span class=\"line\">mac：</span><br><span class=\"line\"></span><br><span class=\"line\">  如果 mac 电脑没有安装 brew 这个工具首先第一步需要安装它： https:<span class=\"comment\">//brew.sh/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  brew tap dart-lang/dart</span><br><span class=\"line\">    </span><br><span class=\"line\">  brew install dart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dart 的开发工具有很多： IntelliJ IDEA  、 WebStorm、 Atom、Vscode 等</span><br><span class=\"line\"></span><br><span class=\"line\">这里我们主要给大家讲解的是如果在 vscode 中配置 Dart。</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">1</span>、找到 vscode 插件安装 Dart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、找到 vscode 插件安装 code runner, Code Runner 可以运行我们的文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>Dart 中定义变量可以使用具体的类型（int、double、String、bool 等）申明 ，也可以通过 var 关键字来申明变量。</p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><blockquote>\n<p>final 和 const 修饰符都可以表示常量。</p>\n</blockquote>\n<ul>\n<li>const 值不变，一开始就得赋值。</li>\n<li>final 可以开始不赋值，只能赋一次。而 final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。</li>\n<li>注意：永远不改变的量，请使用 final 或 const 修饰它，而不是使用 var 或其他变量类型。<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> PI = <span class=\"number\">3.14159</span>;</span><br><span class=\"line\">  <span class=\"comment\">// PI = 3.14; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(PI);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// const x = new DateTime.now(); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// a = 2; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(time);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h3><p>Dart 中支持以下常用数据类型：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Numbers（数值）</span><br><span class=\"line\">    <span class=\"built_in\">int</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span></span><br><span class=\"line\">Strings（字符串）</span><br><span class=\"line\">    <span class=\"built_in\">String</span></span><br><span class=\"line\">Booleans(布尔)</span><br><span class=\"line\">    <span class=\"built_in\">bool</span></span><br><span class=\"line\"><span class=\"built_in\">List</span>（数组）</span><br><span class=\"line\">    在 Dart 中，数组是列表对象，所以大多数人只是称它们为列表</span><br><span class=\"line\">Maps（字典）</span><br><span class=\"line\">    通常来说，<span class=\"built_in\">Map</span> 是一个键值对相关的对象。键和值可以是任何类型的对象。每个键只出现一次，而一个值则可以出现多次</span><br></pre></td></tr></table></figure>\n\n<p>基本使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、字符串类型（String）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> str2 = <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$str1</span> <span class=\"subst\">$str2</span>&quot;</span>); <span class=\"comment\">// 字符串拼接</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str1 + <span class=\"string\">&quot; &quot;</span> + str2); <span class=\"comment\">// 字符串拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 三个单引号或三个双引号，让字符串原样输出</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;&#x27;&#x27;Hello</span></span><br><span class=\"line\"><span class=\"string\">                World&#x27;&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str3);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、数值类型（int、double）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// 必须为整型</span></span><br><span class=\"line\">  x = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">double</span> d = <span class=\"number\">99.9</span>; <span class=\"comment\">// 整型或浮点型</span></span><br><span class=\"line\">  d = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(d);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、布尔类型（bool）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;真&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;假&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、List（数组/集合）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"comment\">// 第一种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(list1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 第二种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list2 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>();</span><br><span class=\"line\">  list2.add(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">  list2.add(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">  list2.add(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(list2);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义 List 时指定类型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list3 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// list3.add(1); // 错误</span></span><br><span class=\"line\">  list3.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(list3);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 5、Maps（字典）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"comment\">// 第一种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> person1 = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;work&quot;</span>: [<span class=\"string\">&quot;程序员&quot;</span>, <span class=\"string\">&quot;送外卖&quot;</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person1);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person1[<span class=\"string\">&quot;name&quot;</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person1[<span class=\"string\">&quot;work&quot;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 第二种定义方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  person2[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">  person2[<span class=\"string\">&quot;age&quot;</span>] = <span class=\"number\">21</span>;</span><br><span class=\"line\">  person2[<span class=\"string\">&quot;work&quot;</span>] = [<span class=\"string\">&quot;程序员&quot;</span>, <span class=\"string\">&quot;送外卖&quot;</span>];</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(person2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>is</code> 关键词来判断类型</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x <span class=\"keyword\">is</span> <span class=\"built_in\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;是 String 类型&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x <span class=\"keyword\">is</span> <span class=\"built_in\">int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;是 int 类型&#x27;</span>); <span class=\"comment\">// 执行这里</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;是其他类型&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>Dart 运算符</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">算术运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    +    -    *    /     ~/ (取整)     %（取余）</span><br><span class=\"line\">    </span><br><span class=\"line\">关系运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    ==    ！=   &gt;    &lt;    &gt;=    &lt;=</span><br><span class=\"line\"></span><br><span class=\"line\">逻辑运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    !  &amp;&amp;   ||</span><br><span class=\"line\"></span><br><span class=\"line\">赋值运算符</span><br><span class=\"line\"></span><br><span class=\"line\">    基础赋值运算符   =   ??=</span><br><span class=\"line\">    复合赋值运算符   +=  -=  *=   /=   %=  ~/=</span><br></pre></td></tr></table></figure>\n\n<p>基本使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、算术运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x / y); <span class=\"comment\">// 3.3333333333333335</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x ~/ y); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x % y); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、关系运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">123.0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a 等于 b&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == c) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a 等于 c&#x27;</span>); <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == d) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a 等于 d&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、逻辑运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(!flag); <span class=\"comment\">// true（取反）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、基础赋值运算符（=   ??=）</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> aa = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> bb;</span><br><span class=\"line\">  aa ??= <span class=\"number\">100</span>;</span><br><span class=\"line\">  bb ??= <span class=\"number\">200</span>; <span class=\"comment\">// 因为 b 为空，所以重新赋值</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(aa); <span class=\"comment\">// 10</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(bb); <span class=\"comment\">// 200</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 5、复合赋值运算符   +=  -=  <span class=\"emphasis\">*=   /=   %=  ~/=</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"language-markdown\"><span class=\"comment\">   *</span>/</span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> xx = <span class=\"number\">10</span>;</span><br><span class=\"line\">  xx += <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(xx); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、if else / switch case</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> sex = <span class=\"string\">&quot;女&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (sex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;男&quot;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;女&quot;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;女&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;不男不女&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、三目运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> s = flag ? <span class=\"string\">&quot;我是 true&quot;</span> : <span class=\"string\">&quot;我是 false&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、?? 运算符</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = a ?? <span class=\"number\">30</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(b); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、Number 与 String 类型之间的转换</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> <span class=\"built_in\">num</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"built_in\">double</span> d = <span class=\"number\">30.0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> str = <span class=\"string\">&quot;50&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">num</span>.toString()); <span class=\"comment\">// 20</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(d.toString()); <span class=\"comment\">// 30.0</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>.parse(str)); <span class=\"comment\">// 50</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">double</span>.parse(str)); <span class=\"comment\">// 50.0</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>.tryParse(<span class=\"string\">&quot;100a&quot;</span>)); <span class=\"comment\">// null</span></span><br><span class=\"line\">  <span class=\"comment\">// print(int.parse(&quot;100a&quot;)); // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myNum = <span class=\"built_in\">double</span>.parse(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(myNum);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(err); <span class=\"comment\">// FormatException: Invalid double</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、其他类型转换成 Booleans 类型</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myStr = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (myStr.isEmpty) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr 为空&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr 不为空&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myStr2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (myStr2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr2 为空&#x27;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;myStr2 不为空&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">0</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x); <span class=\"comment\">// NaN</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x.isNaN) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;x is NaN&quot;</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、++  --   表示自增 自减 1</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 在赋值运算里面，如果 ++ -- 写在前面，先运算后赋值，如果 ++ -- 写在后面，先赋值后运算</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = a--;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a); <span class=\"comment\">// 9</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(b); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bb = --aa;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(aa); <span class=\"comment\">// 99</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(bb); <span class=\"comment\">// 99</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、for 语句</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = [<span class=\"string\">&#x27;新闻0&#x27;</span>, <span class=\"string\">&#x27;新闻1&#x27;</span>, <span class=\"string\">&#x27;新闻2&#x27;</span>, <span class=\"string\">&#x27;新闻3&#x27;</span>, <span class=\"string\">&#x27;新闻4&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、while / do while</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 5050</span></span><br><span class=\"line\"></span><br><span class=\"line\">  i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 5050</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、break / continue</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 结束当前循环体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 1 + 2 + 3 = 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>; <span class=\"comment\">// 本次循环跳过下面代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 1 + 3 = 4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集合类型\"><a href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"></a>集合类型</h3><h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    List 里面常用的属性和方法：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    常用属性：</span></span><br><span class=\"line\"><span class=\"comment\">        length          长度</span></span><br><span class=\"line\"><span class=\"comment\">        reversed        翻转</span></span><br><span class=\"line\"><span class=\"comment\">        isEmpty         是否为空</span></span><br><span class=\"line\"><span class=\"comment\">        isNotEmpty      是否不为空</span></span><br><span class=\"line\"><span class=\"comment\">    常用方法：  </span></span><br><span class=\"line\"><span class=\"comment\">        add         增加</span></span><br><span class=\"line\"><span class=\"comment\">        addAll      拼接数组</span></span><br><span class=\"line\"><span class=\"comment\">        indexOf     查找  传入具体值</span></span><br><span class=\"line\"><span class=\"comment\">        remove      删除  传入具体值</span></span><br><span class=\"line\"><span class=\"comment\">        removeAt    删除  传入索引值</span></span><br><span class=\"line\"><span class=\"comment\">        fillRange   修改   </span></span><br><span class=\"line\"><span class=\"comment\">        insert(index,value);            指定位置插入    </span></span><br><span class=\"line\"><span class=\"comment\">        insertAll(index,list)           指定位置插入 List</span></span><br><span class=\"line\"><span class=\"comment\">        toList()    其他类型转换成 List</span></span><br><span class=\"line\"><span class=\"comment\">        join()      List 转换成字符串</span></span><br><span class=\"line\"><span class=\"comment\">        split()     字符串转化成 List</span></span><br><span class=\"line\"><span class=\"comment\">        forEach   </span></span><br><span class=\"line\"><span class=\"comment\">        map</span></span><br><span class=\"line\"><span class=\"comment\">        where</span></span><br><span class=\"line\"><span class=\"comment\">        any</span></span><br><span class=\"line\"><span class=\"comment\">        every</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"built_in\">List</span> myList = [<span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>, <span class=\"string\">&#x27;CC&#x27;</span>];</span><br><span class=\"line\">  myList.add(<span class=\"string\">&#x27;DD&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList = myList.reversed.toList();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList); <span class=\"comment\">// [DD, CC, BB, AA]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// myList.fillRange(1, 3, &#x27;aaa&#x27;);</span></span><br><span class=\"line\">  <span class=\"comment\">// print(myList); // [AA, aaa, aaa, DD]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = myList.join(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str); <span class=\"comment\">// AA-BB-CC-DD</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> Set</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、用它最主要的功能就是去除数组重复内容；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、Set 是没有顺序且不能重复的集合，所以不能通过索引去获取值；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(<span class=\"string\">&#x27;AA&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(<span class=\"string\">&#x27;BB&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(<span class=\"string\">&#x27;AA&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"keyword\">set</span>); <span class=\"comment\">// &#123;AA, BB&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"keyword\">set</span>.toList()); <span class=\"comment\">// [AA, BB]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myList = [<span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>, <span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;CC&#x27;</span>, <span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mySet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  mySet.addAll(myList);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(mySet); <span class=\"comment\">// &#123;AA, BB, CC&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(mySet.toList()); <span class=\"comment\">// [AA, BB, CC]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    映射（Maps）是无序的键值对：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    常用属性：</span></span><br><span class=\"line\"><span class=\"comment\">        keys            获取所有的 key 值</span></span><br><span class=\"line\"><span class=\"comment\">        values          获取所有的 value 值</span></span><br><span class=\"line\"><span class=\"comment\">        isEmpty         是否为空</span></span><br><span class=\"line\"><span class=\"comment\">        isNotEmpty      是否不为空</span></span><br><span class=\"line\"><span class=\"comment\">    常用方法:</span></span><br><span class=\"line\"><span class=\"comment\">        remove(key)     删除指定 key 的数据</span></span><br><span class=\"line\"><span class=\"comment\">        addAll(&#123;...&#125;)   合并映射  给映射内增加属性</span></span><br><span class=\"line\"><span class=\"comment\">        containsValue   查看映射内的值  返回 true/false</span></span><br><span class=\"line\"><span class=\"comment\">        forEach   </span></span><br><span class=\"line\"><span class=\"comment\">        map</span></span><br><span class=\"line\"><span class=\"comment\">        where</span></span><br><span class=\"line\"><span class=\"comment\">        any</span></span><br><span class=\"line\"><span class=\"comment\">        every</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"built_in\">Map</span> zhangSan = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> liSi = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  liSi[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">  liSi[<span class=\"string\">&quot;age&quot;</span>] = <span class=\"number\">21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan.keys.toList()); <span class=\"comment\">// [name, age]</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan.values.toList()); <span class=\"comment\">// [张三, 20]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  zhangSan.addAll(&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;sex&quot;</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;work&quot;</span>: [<span class=\"string\">&#x27;敲代码&#x27;</span>, <span class=\"string\">&#x27;送外卖&#x27;</span>]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan); <span class=\"comment\">// &#123;name: 张三, age: 20, sex: 男, work: [敲代码, 送外卖]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  zhangSan.remove(<span class=\"string\">&quot;sex&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(zhangSan); <span class=\"comment\">// &#123;name: 张三, age: 20, work: [敲代码, 送外卖]&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"集合的-forEach、map、where、any、every-方法使用\"><a href=\"#集合的-forEach、map、where、any、every-方法使用\" class=\"headerlink\" title=\"集合的 forEach、map、where、any、every 方法使用\"></a>集合的 forEach、map、where、any、every 方法使用</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> List</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = [<span class=\"string\">&#x27;AA&#x27;</span>, <span class=\"string\">&#x27;BB&#x27;</span>, <span class=\"string\">&#x27;CC&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(list[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  list.forEach((element) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(element);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList = myList.map((e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e * <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList.toList()); <span class=\"comment\">// [2, 6, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList2 = myList.where((element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList2.toList()); <span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = myList.any((element) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只要集合里面有满足条件的就返回 true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(f); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> g = myList.every((element) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每一个都满足条件返回 true, 否则返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(g); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> Set</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.addAll([<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.forEach((element) =&gt; <span class=\"built_in\">print</span>(element));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> Map</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> zhangSan = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">  zhangSan.forEach((key, value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$key</span>---<span class=\"subst\">$value</span>&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数定义、作用域\"><a href=\"#函数定义、作用域\" class=\"headerlink\" title=\"函数定义、作用域\"></a>函数定义、作用域</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  内置方法/函数：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      print();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  自定义方法：</span></span><br><span class=\"line\"><span class=\"comment\">      自定义方法的基本格式：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      返回类型  方法名称（参数1，参数2,...）&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        方法体</span></span><br><span class=\"line\"><span class=\"comment\">        return 返回值;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  printInfo(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">int</span> sum = getSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 演示方法的作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> exec() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> sayHello() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sayHello();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exec(); <span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">  <span class=\"comment\">// sayHello(); // 错误写法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> printInfo(<span class=\"built_in\">String</span> info) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(info);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> getSum(<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数传参、默认参数、可选参数、命名参数\"><a href=\"#函数传参、默认参数、可选参数、命名参数\" class=\"headerlink\" title=\"函数传参、默认参数、可选参数、命名参数\"></a>函数传参、默认参数、可选参数、命名参数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、基本传参</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = getSum(<span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 55</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、可选参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  printUserInfo(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  printUserInfo(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、默认参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  printUserInfo2(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;女&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  printUserInfo2(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、命名参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  printUserInfo3(<span class=\"string\">&quot;王五&quot;</span>, sex: <span class=\"string\">&quot;未知&quot;</span>, age: <span class=\"number\">22</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 5、把方法当参数的方法</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  fun2(fun1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> getSum(<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 带可选参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printUserInfo(<span class=\"built_in\">String</span> name, [<span class=\"built_in\">int</span> age]) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---年龄保密&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---年龄：<span class=\"subst\">$age</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 带默认参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printUserInfo2(<span class=\"built_in\">String</span> name, [<span class=\"built_in\">String</span> sex = <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"built_in\">int</span> age]) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄保密&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄：<span class=\"subst\">$age</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 带命名参数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printUserInfo3(<span class=\"built_in\">String</span> name, &#123;<span class=\"built_in\">String</span> sex = <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"built_in\">int</span> age&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄保密&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名：<span class=\"subst\">$name</span>---性别：<span class=\"subst\">$sex</span>---年龄：<span class=\"subst\">$age</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun1() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fun1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun2(fn) &#123;</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"箭头函数、匿名函数、自执行方法、方法递归\"><a href=\"#箭头函数、匿名函数、自执行方法、方法递归\" class=\"headerlink\" title=\"箭头函数、匿名函数、自执行方法、方法递归\"></a>箭头函数、匿名函数、自执行方法、方法递归</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、箭头函数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 只能写一行，不能多行。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"built_in\">List</span> myList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  myList.forEach((element) =&gt; <span class=\"built_in\">print</span>(element));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newList = myList.map((e) =&gt; e &gt; <span class=\"number\">2</span> ? e * <span class=\"number\">2</span> : e);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(newList.toList()); <span class=\"comment\">// [1, 6, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、匿名函数</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myNum = () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(myNum()); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、自执行方法</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  ((<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是自执行方法&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(n * <span class=\"number\">10</span>); <span class=\"comment\">// 180</span></span><br><span class=\"line\">  &#125;)(<span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\"><span class=\"emphasis\">/*</span>*</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 4、方法递归</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = fn(<span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(sum); <span class=\"comment\">// 5050</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> fn(<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n + fn(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 全局变量特点：全局变量常驻内存、全局变量污染全局；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 局部变量的特点：不常驻内存会被垃圾机制回收、不会污染全局；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   * 闭包：</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 1、可以常驻内存，不污染全局；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 2、函数嵌套函数，内部函数会调用外部函数的变量或参数，变量或参数不会被系统回收(不会释放内存)；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\">   *</span> 3、写法：函数嵌套函数，并 return 里面的函数，这样就形成了闭包；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = fn();</span><br><span class=\"line\">  f(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  f(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  f(); <span class=\"comment\">// 4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> () &#123;</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h3><h4 id=\"面向对象的介绍\"><a href=\"#面向对象的介绍\" class=\"headerlink\" title=\"面向对象的介绍\"></a>面向对象的介绍</h4><p>面向对象编程(OOP)的三个基本特征是：封装、继承、多态</p>\n<ul>\n<li><strong>封装</strong>：封装是对象和类概念的主要特性。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其他对象调用, 而一部分属性和方法则隐藏。</li>\n<li><strong>继承</strong>：面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</li>\n<li><strong>多态</strong>：允许将子类类型的指针赋值给父类类型的指针, 同一个函数调用会有不同的执行效果 。</li>\n</ul>\n<p>Dart 所有的东西都是对象，所有的对象都继承自 Object 类。</p>\n<p>Dart 是一门使用类和<strong>单继承</strong>的面向对象语言，所有的对象都是类的实例，并且所有的类都是 Object 的子类</p>\n<p>一个类通常由属性和方法组成。</p>\n<blockquote>\n<p>Dart 和其他面向对象语言不一样，Dart 中没有 public、private、protected 这些访问修饰符，但是我们可以使用 <code>_</code> 把一个属性或者方法定义成私有。</p>\n</blockquote>\n<h4 id=\"类与对象的基本使用\"><a href=\"#类与对象的基本使用\" class=\"headerlink\" title=\"类与对象的基本使用\"></a>类与对象的基本使用</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> _name; <span class=\"comment\">// 加了下划线表示私有属性</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 默认构造函数的简写</span></span><br><span class=\"line\">  Person(<span class=\"keyword\">this</span>._name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\"></span><br><span class=\"line\">  Person.now() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是命名构造函数&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Person.setInfo(<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>._name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _sayHello() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;_sayHello 是一个私有方法&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  execRun() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._sayHello();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">  Rect(<span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height);</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过方法获取面积</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> area &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过属性获取面积</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> areaHeight(height) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Rect.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  p.printInfo();</span><br><span class=\"line\">  p.execRun();</span><br><span class=\"line\"></span><br><span class=\"line\">  Person p2 = Person.now();</span><br><span class=\"line\"></span><br><span class=\"line\">  Person p3 = Person.setInfo(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">  p3.printInfo();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = Rect(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.getArea()); <span class=\"comment\">// 50</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.area); <span class=\"comment\">// 50</span></span><br><span class=\"line\"></span><br><span class=\"line\">  r.areaHeight = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.area); <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类中的初始化列表\"><a href=\"#类中的初始化列表\" class=\"headerlink\" title=\"类中的初始化列表\"></a>类中的初始化列表</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在构造函数体运行之前初始化实例变量</span></span><br><span class=\"line\">  Rect()</span><br><span class=\"line\">      : width = <span class=\"number\">3</span>,</span><br><span class=\"line\">        height = <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.width&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.height&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> area &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Rect.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = Rect();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.area); <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类的静态变量与静态函数\"><a href=\"#类的静态变量与静态函数\" class=\"headerlink\" title=\"类的静态变量与静态函数\"></a>类的静态变量与静态函数</h4><p>Dart 中的静态成员:</p>\n<p>1、使用 static 关键字来实现类级别的变量和函数；</p>\n<p>2、静态方法不能访问非静态成员，非静态方法可以访问静态成员；</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> name = <span class=\"string\">&#x27;张三&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> showName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(Person.name);</span><br><span class=\"line\">  Person.showName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象操作符\"><a href=\"#对象操作符\" class=\"headerlink\" title=\"对象操作符\"></a>对象操作符</h4><p>Dart 中的对象操作符：</p>\n<ul>\n<li><code>?</code> 条件运算符</li>\n<li><code>as</code> 类型转换</li>\n<li><code>is</code> 类型判断</li>\n<li><code>..</code> 级联操作（连缀）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> age;</span><br><span class=\"line\">  Person(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Person p = Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  p?.printInfo(); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Person p2;</span><br><span class=\"line\">  p2?.printInfo(); <span class=\"comment\">// 无打印结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p <span class=\"keyword\">is</span> Person) &#123;</span><br><span class=\"line\">    p.name = <span class=\"string\">&#x27;李四&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p.printInfo(); <span class=\"comment\">// 李四---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p <span class=\"keyword\">is</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p3;</span><br><span class=\"line\">  p3 = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  p3 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">  p3.printInfo(); <span class=\"comment\">// 王五---22</span></span><br><span class=\"line\">  (p3 <span class=\"keyword\">as</span> Person).printInfo(); <span class=\"comment\">// 王五---22</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Person p4 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;AA&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  p4.printInfo(); <span class=\"comment\">// AA---10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  p4</span><br><span class=\"line\">    ..name = <span class=\"string\">&quot;BB&quot;</span></span><br><span class=\"line\">    ..age = <span class=\"number\">11</span></span><br><span class=\"line\">    ..printInfo(); <span class=\"comment\">// BB---11</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h4><blockquote>\n<p>面向对象的三大特性：封装 、继承、多态</p>\n</blockquote>\n<p>Dart 中的类的继承：  </p>\n<ul>\n<li>子类使用 extends 关键词来继承父类；</li>\n<li>子类会继承父类里面可见的属性和方法，但是不会继承构造函数；</li>\n<li>子类能复写父类的方法；</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> age;</span><br><span class=\"line\">  Person(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">  Person.xxx(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.age);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> sex;</span><br><span class=\"line\">  Teacher(<span class=\"built_in\">String</span> name, <span class=\"built_in\">num</span> age, <span class=\"built_in\">String</span> sex) : <span class=\"keyword\">super</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Teacher(String name, num age, String sex) : super.xxx(name, age) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.sex = sex;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// super.printInfo(); //自类调用父类的方法</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.sex&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>***<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>***<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.sex&#125;</span>&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Teacher.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Teacher t = <span class=\"keyword\">new</span> Teacher(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">20</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\">  t.printInfo(); <span class=\"comment\">// 张三---20---男</span></span><br><span class=\"line\">  t.run(); <span class=\"comment\">// 张三***20***男</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>Dart 抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。</p>\n<ul>\n<li>抽象类通过 abstract 关键字来定义；</li>\n<li>抽象方法不能用 abstract 声明，Dart 中没有方法体的方法我们称为抽象方法；</li>\n<li>如果子类继承抽象类必须得实现里面的抽象方法；</li>\n<li>如果把抽象类当做接口实现的话，必须得实现抽象类里面定义的所有属性和方法；</li>\n<li>抽象类不能被实例化，只有继承它的子类可以；</li>\n</ul>\n<p><strong>extends 抽象类和 implements 的区别：</strong></p>\n<ul>\n<li>如果要复用抽象类里面的方法，并且要用抽象方法约束自类的话，我们就用 extends 继承抽象类；</li>\n<li>如果只是把抽象类当做标准的话，我们就用 implements 实现抽象类；</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  eat(); <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">  run(); <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  printInfo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是一个抽象类里面的普通方法&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Animal.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog eat ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog run ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Animal.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat eat ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat run ...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Cat.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Dog.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Dog d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">  d.eat(); <span class=\"comment\">// Dog eat ...</span></span><br><span class=\"line\">  d.printInfo(); <span class=\"comment\">// 我是一个抽象类里面的普通方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Cat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">  c.eat(); <span class=\"comment\">// Cat eat ...</span></span><br><span class=\"line\">  c.printInfo(); <span class=\"comment\">// 我是一个抽象类里面的普通方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h4><ul>\n<li>允许将子类类型的指针赋值给父类类型的指针，同一个函数调用会有不同的执行效果；</li>\n<li>子类的实例赋值给父类的引用；</li>\n<li>多态就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同的表现；</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Animal.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Cat.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Dog.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  Animal d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">  d.eat(); <span class=\"comment\">// Dog eat ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Animal c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">  c.eat(); <span class=\"comment\">// Cat eat ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>和 Java 一样，Dart 也有接口，但是和 Java 还是有区别的：</p>\n<ul>\n<li>Dart 的接口没有 interface 关键字定义接口，而是普通类或抽象类都可以作为接口被实现；</li>\n<li>同样使用 implements 关键字进行实现；</li>\n<li>Dart 的接口有点奇怪，如果实现的类是普通类，需要将普通类中抽象的属性和方法全部覆写一遍；</li>\n<li>因为抽象类可以定义抽象方法，普通类不可以，所以一般如果要实现像 Java 接口那样的方式，一般会使用抽象类；</li>\n<li>建议使用抽象类定义接口；</li>\n</ul>\n<blockquote>\n<p>一个类可以实现多个接口。</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DB</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当做接口   接口：就是约定 、规范</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> uri;</span><br><span class=\"line\">  insert(<span class=\"built_in\">String</span> data);</span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;DB.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">DB</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> uri;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  insert(<span class=\"built_in\">String</span> data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MySQL insert&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> id) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MySQL delete&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;DB.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MsSQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">DB</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> uri;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  insert(<span class=\"built_in\">String</span> data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MsSQL insert&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  delete(<span class=\"built_in\">String</span> id) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;MsSQL delete&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;DB.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;MySQL.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  DB db = <span class=\"keyword\">new</span> MySQL();</span><br><span class=\"line\">  db.insert(<span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><p>mixins 的中文意思是混入，就是在类中混入其他功能。</p>\n<p>在 Dart 中可以使用 mixins 实现类似<strong>多继承</strong>的功能。</p>\n<p>因为 mixins 使用的条件，随着 Dart 版本一直在变，这里讲的是 Dart 2.x 中使 用 mixins 的条件：</p>\n<ul>\n<li>作为 mixins 的类只能继承自 Object, 不能继承其他类；</li>\n<li>作为 mixins 的类不能有构造函数；</li>\n<li>一个类可以 mixins 多个 mixins 类；</li>\n<li>mixins 绝不是继承，也不是接口，而是一种全新的特性；</li>\n</ul>\n<p>mixins 的实例类型就是其超类的子类型。mixins 使用 <code>with</code> 关键字实现其功能。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> info = <span class=\"string\">&quot;this is A&quot;</span>;</span><br><span class=\"line\">  printA() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  printB() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;A.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;B.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> <span class=\"title\">with</span> <span class=\"title\">A</span>, <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  C(<span class=\"built_in\">String</span> name, <span class=\"built_in\">num</span> age) : <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;A.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;B.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;C.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> C(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  c.printA(); <span class=\"comment\">// A</span></span><br><span class=\"line\">  c.printB(); <span class=\"comment\">// B</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c.info); <span class=\"comment\">// this is A</span></span><br><span class=\"line\">  c.printInfo(); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c <span class=\"keyword\">is</span> C); <span class=\"comment\">// true</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c <span class=\"keyword\">is</span> A); <span class=\"comment\">// true</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(c <span class=\"keyword\">is</span> B); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>通俗理解：泛型就是解决类、接口、方法的复用性、以及对不特定数据类型的支持（类型校验）。</p>\n<h4 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData(<span class=\"number\">1</span>)); <span class=\"comment\">// A</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData2(<span class=\"number\">2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData&lt;T&gt;(T value) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">T getData2&lt;T&gt;(T value) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return &quot;A&quot;; // 错误，只能返回 T 类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  PrintClass p = <span class=\"keyword\">new</span> PrintClass&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">  p.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">  p.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">  p.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"comment\">// p.add(&quot;A&quot;); // 报错</span></span><br><span class=\"line\">  p.printInfo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintClass</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">List</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;T&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">void</span> add(T value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list.add(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> printInfo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"keyword\">this</span>.list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h3><p>需求：实现数据缓存的功能。有文件缓存和内存缓存，内存缓存和文件缓存按照接口约束实现。</p>\n<ol>\n<li>定义一个泛型接口，约束实现它的子类必须有 getByKey(key) 和 setByKey(key,value)；</li>\n<li>要求 setByKey 的时候的 value 的类型和实例化子类的时候指定的类型一致；</li>\n</ol>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() &#123;</span><br><span class=\"line\">  MemoryCache m = MemoryCache&lt;<span class=\"built_in\">Map</span>&gt;();</span><br><span class=\"line\">  m.setByKey(<span class=\"string\">&quot;index&quot;</span>, &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;); <span class=\"comment\">// 我是内存缓存，把 key = index  value = &#123;name: 张三, age: 20&#125; 写入到了内存中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  getByKey(<span class=\"built_in\">String</span> key);</span><br><span class=\"line\">  <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemoryCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  getByKey(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是内存缓存，把 key = <span class=\"subst\">$&#123;key&#125;</span>  value = <span class=\"subst\">$&#123;value&#125;</span> 写入到了内存中&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  getByKey(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是文件缓存，把 key = <span class=\"subst\">$&#123;key&#125;</span>  value = <span class=\"subst\">$&#123;value&#125;</span> 写入到了文件中&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h3><p>在 Dart 中，库的使用是通过 <code>import</code> 关键字引入的。library 指令可以创建一个库，每个 Dart 文件都是一个库，即使没有使用 library 指令来指定。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dart 中的库主要有三种：</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">1</span>、我们自定义的库     </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;lib/xxx.dart&#x27;</span>;</span><br><span class=\"line\">    <span class=\"number\">2</span>、系统内置库       </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:math&#x27;</span>;    </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:io&#x27;</span>; </span><br><span class=\"line\">          <span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:convert&#x27;</span>;</span><br><span class=\"line\">    <span class=\"number\">3</span>、pub 包管理系统中的库  </span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dev/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.flutter-io.cn/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dartlang.org/flutter/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">1</span>、需要在自己项目根目录新建一个 pubspec.yaml</span><br><span class=\"line\">        <span class=\"number\">2</span>、在 pubspec.yaml 文件配置名称、描述、依赖等信息</span><br><span class=\"line\">        <span class=\"number\">3</span>、然后运行 pub <span class=\"keyword\">get</span> 获取包下载到本地  </span><br><span class=\"line\">        <span class=\"number\">4</span>、项目中引入库 <span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:http/http.dart&#x27;</span> <span class=\"keyword\">as</span> http; 看文档使用</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入自己本地库\"><a href=\"#导入自己本地库\" class=\"headerlink\" title=\"导入自己本地库\"></a>导入自己本地库</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;Person.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  p.printInfo(); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入系统内置库\"><a href=\"#导入系统内置库\" class=\"headerlink\" title=\"导入系统内置库\"></a>导入系统内置库</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:math&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(max(<span class=\"number\">10</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// 20</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(min(<span class=\"number\">-1</span>, <span class=\"number\">-2</span>)); <span class=\"comment\">// -2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入系统内置库实现请求数据\"><a href=\"#导入系统内置库实现请求数据\" class=\"headerlink\" title=\"导入系统内置库实现请求数据\"></a>导入系统内置库实现请求数据</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:convert&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:io&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> getDataFromZhihuAPI();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// api 接口： http://news-at.zhihu.com/api/3/stories/latest</span></span><br><span class=\"line\">getDataFromZhihuAPI() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1、创建 HttpClient 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> httpClient = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\">  <span class=\"comment\">// 2、创建 Uri 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> uri = <span class=\"keyword\">new</span> <span class=\"built_in\">Uri</span>.http(<span class=\"string\">&#x27;news-at.zhihu.com&#x27;</span>, <span class=\"string\">&#x27;/api/3/stories/latest&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 3、发起请求，等待请求</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> request = <span class=\"keyword\">await</span> httpClient.getUrl(uri);</span><br><span class=\"line\">  <span class=\"comment\">// 4、关闭请求，等待响应</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> request.close();</span><br><span class=\"line\">  <span class=\"comment\">// 5、解码响应的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.transform(utf8.decoder).join();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"async-和-await\"><a href=\"#async-和-await\" class=\"headerlink\" title=\"async 和 await\"></a>async 和 await</h4><p>这两个关键字的使用只需要记住两点：①、只有 async 方法才能使用 await 关键字调用方法；②、如果调用别的 async 方法必须使用 await 关键字；</p>\n<p>async 是让方法变成异步，await 是等待异步方法执行完成。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> testAsync();</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result); <span class=\"comment\">// testAsync</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testAsync() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;testAsync&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入-pub-包管理系统中的库\"><a href=\"#导入-pub-包管理系统中的库\" class=\"headerlink\" title=\"导入 pub 包管理系统中的库\"></a>导入 pub 包管理系统中的库</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub 包管理系统：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、从下面网址找到要用的库</span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dev/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.flutter-io.cn/packages</span></span><br><span class=\"line\">        https:<span class=\"comment\">//pub.dartlang.org/flutter/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、创建一个 pubspec.yaml 文件，内容如下</span><br><span class=\"line\"></span><br><span class=\"line\">    name: xxx</span><br><span class=\"line\">    description: A <span class=\"keyword\">new</span> flutter module project.</span><br><span class=\"line\">    dependencies:  </span><br><span class=\"line\">      date_format: ^<span class=\"number\">1.0</span><span class=\"number\">.9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、配置 dependencies</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、运行 pub <span class=\"keyword\">get</span> 获取远程库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、看文档引入库使用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:date_format/date_format.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(formatDate(<span class=\"built_in\">DateTime</span>(<span class=\"number\">1989</span>, <span class=\"number\">02</span>, <span class=\"number\">21</span>), [yyyy, <span class=\"string\">&#x27;-&#x27;</span>, mm, <span class=\"string\">&#x27;-&#x27;</span>, dd])); <span class=\"comment\">// 1989-02-21</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"库重命名与冲突解决\"><a href=\"#库重命名与冲突解决\" class=\"headerlink\" title=\"库重命名与冲突解决\"></a>库重命名与冲突解决</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当引入两个库中有相同名称标识符的时候，如果是 Java, 通常我们通过写上完整的包名路径来指定使用的具体标识符，甚至不用 <span class=\"keyword\">import</span> 都可以，</span><br><span class=\"line\">但是 Dart 里面是必须 <span class=\"keyword\">import</span> 的。当冲突的时候，可以使用 <span class=\"keyword\">as</span> 关键字来指定库的前缀。如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">as</span> lib2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Element</span> element1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Element</span>();           <span class=\"comment\">// Uses Element from lib1.</span></span><br><span class=\"line\">lib2.<span class=\"built_in\">Element</span> element2 = <span class=\"keyword\">new</span> lib2.<span class=\"built_in\">Element</span>(); <span class=\"comment\">// Uses Element from lib2.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部分导入\"><a href=\"#部分导入\" class=\"headerlink\" title=\"部分导入\"></a>部分导入</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果只需要导入库的一部分，有两种模式：</span><br><span class=\"line\"></span><br><span class=\"line\">模式一：只导入需要的部分，使用 <span class=\"keyword\">show</span> 关键字，如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span> <span class=\"keyword\">show</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\">模式二：隐藏不需要的部分，使用 <span class=\"keyword\">hide</span> 关键字，如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">hide</span> foo;    </span><br></pre></td></tr></table></figure>\n\n<p>MyMath.dart</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getOne() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;one&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getTwo() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;two&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;MyMath.dart&#x27;</span> <span class=\"keyword\">show</span> getOne;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getOne());</span><br><span class=\"line\">  <span class=\"comment\">// print(getTwo()); // 报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟加载也称为懒加载，可以在需要的时候再进行加载。</span><br><span class=\"line\">懒加载的最大好处是可以减少 APP 的启动时间。</span><br><span class=\"line\"></span><br><span class=\"line\">懒加载使用 <span class=\"keyword\">deferred</span> <span class=\"keyword\">as</span> 关键字来指定，如下例子所示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:deferred/hello.dart&#x27;</span> <span class=\"keyword\">deferred</span> <span class=\"keyword\">as</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\">当需要使用的时候，需要使用 loadLibrary() 方法来加载：</span><br><span class=\"line\"></span><br><span class=\"line\">greet() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> hello.loadLibrary();</span><br><span class=\"line\">    hello.printGreeting();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-13-之后的一些新特性\"><a href=\"#2-13-之后的一些新特性\" class=\"headerlink\" title=\"2.13 之后的一些新特性\"></a>2.13 之后的一些新特性</h3><h4 id=\"Null-safety\"><a href=\"#Null-safety\" class=\"headerlink\" title=\"Null safety\"></a>Null safety</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  Null safety 翻译成中文的意思是空安全。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  null safety 可以帮助开发者避免一些日常开发中很难被发现的错误，并且额外的好处是可以改善性能。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  Flutter2.2.0（2021 年 5 月 19 日发布）之后的版本都要求使用 null safety。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  1、? 可空类型</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  2、! 类型断言</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String?</span> getData(apiUrl) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (apiUrl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;this is server data&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> printLength(<span class=\"built_in\">String?</span> str) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(str!.length);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;str is null&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1、? 可空类型</span></span><br><span class=\"line\">  <span class=\"built_in\">String?</span> str = <span class=\"string\">&quot;abc&quot;</span>; <span class=\"comment\">// String?  表示 str 是一个可空类型</span></span><br><span class=\"line\">  str = <span class=\"keyword\">null</span>; <span class=\"comment\">// 允许设置为 null</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>));</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(getData(<span class=\"keyword\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2、! 类型断言</span></span><br><span class=\"line\">  <span class=\"built_in\">String?</span> str2 = <span class=\"string\">&quot;this is str&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// str2 = null;</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 str2 不等于 null 会打印 str2 的长度，如果等于 null 会抛出异常</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(str2!.length);</span><br><span class=\"line\"></span><br><span class=\"line\">  printLength(<span class=\"string\">&quot;str&quot;</span>);</span><br><span class=\"line\">  printLength(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"late-关键字\"><a href=\"#late-关键字\" class=\"headerlink\" title=\"late 关键字\"></a>late 关键字</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> late 关键字主要用于延迟初始化。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">late</span> <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">late</span> <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> setInfo(<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> getInfo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main(args) &#123;</span><br><span class=\"line\">  Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">  p.setInfo(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p.getInfo());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"required-关键字\"><a href=\"#required-关键字\" class=\"headerlink\" title=\"required 关键字\"></a>required 关键字</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> required 翻译成中文的意思是需要、依赖</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> * 最开始 @required 是注解，现在它已经作为内置修饰符，主要用于允许根据需要标记任何命名参数（函数或类），</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> 使得它们不为空。因为可选参数中必须有个 required 参数或者该参数有个默认值。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"built_in\">String</span> printInfo(<span class=\"built_in\">String</span> username, &#123;<span class=\"built_in\">int</span> age = <span class=\"number\">10</span>, <span class=\"built_in\">String</span> sex = <span class=\"string\">&quot;男&quot;</span>&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;姓名:<span class=\"subst\">$username</span>---性别:<span class=\"subst\">$sex</span>--年龄:<span class=\"subst\">$age</span>&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> printInfo2(<span class=\"built_in\">String</span> username, &#123;<span class=\"keyword\">required</span> <span class=\"built_in\">int</span> age, <span class=\"keyword\">required</span> <span class=\"built_in\">String</span> sex&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;姓名:<span class=\"subst\">$username</span>---性别:<span class=\"subst\">$sex</span>--年龄:<span class=\"subst\">$age</span>&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main(args) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(printInfo(<span class=\"string\">&#x27;张三&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(printInfo(<span class=\"string\">&#x27;张三&#x27;</span>, age: <span class=\"number\">20</span>, sex: <span class=\"string\">&quot;女&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// age 和 sex 必须传入</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(printInfo2(<span class=\"string\">&#x27;张三&#x27;</span>, age: <span class=\"number\">22</span>, sex: <span class=\"string\">&quot;女&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"bullet\"> *</span> name 可以传入也可以不传入，age 必须传入</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String?</span> name; <span class=\"comment\">// 可空属性</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">  Person(&#123;<span class=\"keyword\">this</span>.name, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.age&#125;); <span class=\"comment\">// age 必须传入</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> getInfo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>---<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main(args) &#123;</span><br><span class=\"line\">  Person p = <span class=\"keyword\">new</span> Person(name: <span class=\"string\">&quot;张三&quot;</span>, age: <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p.getInfo()); <span class=\"comment\">// 张三---20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Person p1 = <span class=\"keyword\">new</span> Person(age: <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p1.getInfo()); <span class=\"comment\">// null---20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><h4 id=\"回顾-Dart-常量\"><a href=\"#回顾-Dart-常量\" class=\"headerlink\" title=\"回顾 Dart 常量\"></a>回顾 Dart 常量</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">Dart 常量: final 和 const 修饰符。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  1、const 声明的常量是在编译时确定的，永远不会改变；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  2、final 声明的常量允许声明后再赋值，赋值后不可改变，final 声明的变量是在运行时确定的；</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">  3、final 不仅有 const 的编译时常量的特性，最重要的它是运行时常量，并且 final 是惰性初始化，即在运行时第一次使用前才初始化。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"><span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// const 常量</span></span><br><span class=\"line\">  <span class=\"comment\">// const PI = 3.14;</span></span><br><span class=\"line\">  <span class=\"comment\">// PI = 3.14159; // const 定义的常量没法改变</span></span><br><span class=\"line\">  <span class=\"comment\">// print(PI);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// final 常量</span></span><br><span class=\"line\">  <span class=\"comment\">// final PI = 3.14;</span></span><br><span class=\"line\">  <span class=\"comment\">// print(PI);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> a;</span><br><span class=\"line\">  a = <span class=\"number\">13</span>;</span><br><span class=\"line\">  <span class=\"comment\">// a = 14;</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const、identical-函数\"><a href=\"#const、identical-函数\" class=\"headerlink\" title=\"const、identical 函数\"></a>const、identical 函数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"language-markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> dart:core 库中 identical 函数的用法介绍如下：</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"></span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">用法:</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">bool identical(</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   Object? a,    </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">   Object? b   </span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">)</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\">检查两个引用是否指向同一个对象。</span></span></span><br><span class=\"line\"><span class=\"language-markdown\"><span class=\"comment\"> <span class=\"emphasis\">*/</span></span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// var o1 = new Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// var o2 = new Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o2)); // false，不共享存储空间</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o1)); // true，共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// var o1 = Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// var o2 = Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o2)); // false</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o1)); // true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 表示实例化常量构造函数</span></span><br><span class=\"line\">  <span class=\"comment\">// o1 和 o2 共享了存储空间</span></span><br><span class=\"line\">  <span class=\"comment\">// var o1 = const Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// var o2 = const Object();</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o2)); // true，共享存储空间</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(o1, o1)); // true，共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print(identical([2], [2])); // false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// var a = [2];</span></span><br><span class=\"line\">  <span class=\"comment\">// var b = [2];</span></span><br><span class=\"line\">  <span class=\"comment\">// print(identical(a, b)); // false，不共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = [<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = [<span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c, d)); <span class=\"comment\">// false，不共享存储空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 发现：const 关键词在多个地方创建相同的对象的时候，内存中只保留了一个对象。</span></span><br><span class=\"line\">  <span class=\"comment\">// 共享存储空间条件：1、常量   2、值相等。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"普通构造函数\"><a href=\"#普通构造函数\" class=\"headerlink\" title=\"普通构造函数\"></a>普通构造函数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> height;</span><br><span class=\"line\">  Container(&#123;<span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.width, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.height&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c1 = <span class=\"keyword\">new</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c2 = <span class=\"keyword\">new</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c1, c2)); <span class=\"comment\">// false，c1 和 c2 在内存中存储了 2 份</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常量构造函数\"><a href=\"#常量构造函数\" class=\"headerlink\" title=\"常量构造函数\"></a>常量构造函数</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">常量构造函数总结如下几点：</span></span><br><span class=\"line\"><span class=\"comment\">  1、常量构造函数需以 const 关键字修饰；</span></span><br><span class=\"line\"><span class=\"comment\">  2、const 构造函数必须用于成员变量都是 final 的类；</span></span><br><span class=\"line\"><span class=\"comment\">  3、如果实例化时不加 const 修饰符，即使调用的是常量构造函数，实例化的对象也不是常量实例；</span></span><br><span class=\"line\"><span class=\"comment\">  4、实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象；</span></span><br><span class=\"line\"><span class=\"comment\">  5、Flutter 中 const 修饰不仅仅是节省组件构建时的内存开销，Flutter 在需要重新构建组件的时候，由于这个组件是不应该改变的，重新构建没有任何意义，因此 Flutter 不会重新构建 const 组件。 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常量构造函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> height;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Container(&#123;<span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.width, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.height&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c1 = Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c2 = Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c1, c2)); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c3 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c4 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c3, c4)); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c5 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">100</span>, height: <span class=\"number\">110</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c6 = <span class=\"keyword\">const</span> Container(width: <span class=\"number\">120</span>, height: <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(identical(c5, c6)); <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象。</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Kotlin 协程","date":"2023-08-08T14:25:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n### 协程是什么\n\n协程基于线程，它是轻量级线程。\n\n- 协程让**异步逻辑同步化**，杜绝回调地狱。\n- 协程最核心的点就是，函数或者一段程序能够被**挂起**，稍后再在挂起的位置**恢复**。\n\n### 在 Android 中协程用来解决什么问题\n\n- **处理耗时任务**，这种任务常常会阻塞主线程。\n- **保证主线程安全**，即安全地从主线程调用任务 suspend 函数。\n\n### 协程的挂起和恢复\n\n常规函数基础操作包括：invoke（或 call）和 return，协程增加了 suspend 和 resume。\n\n- suspend：也称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量。\n- resume：用于让已暂停的协程从其暂停处继续执行。\n\n### 挂起与阻塞的区别\n\n```kotlin\nGlobalScope.launch(Dispatchers.Main) {\n    // 挂起\n    delay(5000)\n    Log.d(\"tag\", \"${Thread.currentThread().name}:after delay.\")\n}\n\n// 阻塞\nThread.sleep(5000)\nLog.d(\"tag\", \"${Thread.currentThread().name}:after sleep.\")\n```\n\n### 挂起函数\n\n- 使用 suspend 关键字修饰的函数叫做挂起函数。\n- 挂起函数只能在**协程体内**或**其它挂起函数内**调用。\n\n### 协程的两部分\n\nKotlin 的协程实现分为两个层次：\n\n- 基础设施层，标准库的协程 API，主要对协程提供了概念和语义上最基本的支持。\n- 业务框架层，协程的上层框架支持。\n\n基础设施层的一个 demo：\n\n```kotlin\nimport kotlin.coroutines.*\n\n// 协程体\nval continuation = suspend {\n    5\n}.createCoroutine(object : Continuation<Int> {\n\n    override val context: CoroutineContext = EmptyCoroutineContext\n\n    override fun resumeWith(result: Result<Int>) {\n        println(\"Coroutine End: $result\")\n    }\n})\n\ncontinuation.resume(Unit)\n```\n\n基础设施层使用的是 `kotlin.coroutines.*` 而业务框架层使用的是 `kotlinx.coroutines.*`。\n\n### 调度器\n\n所有协程必须在调度器中运行，即使它们在主线程上运行也是如此。\n\n- **Dispatchers.Main**。Android 上的主线程，用来处理 UI 交互和一些轻量级任务（调用 suspend 函数；调用 UI 函数；更新 LiveData）。\n\n- **Dispatchers.IO**。非主线程，专为磁盘和网络 IO 进行了优化（数据库；文件读写；网络处理）。\n\n- **Dispatchers.Default**。非主线程，专为 CPU 密集型任务进行了优化（数组排序；JSON 数据解析；处理差异判断）。\n\n### 任务泄漏\n\n- 当某个协程任务丢失，无法追踪，会导致内存、CPU、磁盘等资源浪费，甚至发送一个无用的网络请求，这种情况称为任务泄漏。\n- 为了能够避免协程泄漏，Kotlin 引入了结构化并发机制。\n\n### 结构化并发\n\n使用结构化并发可以做到：\n\n- 取消任务，当某项任务不再需要时，取消它。\n- 追踪任务，当任务正在执行时，追踪它。\n- 发出错误信号，当协程失败时，发出错误信号表明有错误发生。\n\n### CoroutineScope\n\n1、定义协程必须指定其 CoroutineScope，它会跟踪所有协程，同样它还可以**取消由它所启动的所有协程**。\n\n2、常用的相关 API 有：\n\n- **GlobalScope**，生命周期是 process 级别的，即使 Activity 或 Fragment 已经被销毁，协程仍然在执行。\n- **MainScope**，在 Activity 中使用，可以在 onDestroy() 中取消协程。\n- **viewModelScope**，只能在 ViewModel 中使用，绑定 ViewModel 生命周期。\n- **lifecycleScope**，只能在 Activity、Fragment 中使用，会绑定 Activity 和 Fragment 的生命周期。\n\n### MainScope 使用\n\n```kotlin\nclass CoroutineActivity : AppCompatActivity(), CoroutineScope by MainScope() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_coroutine)\n\n        submit()\n    }\n\n    private fun submit() {\n        btnSubmit?.setOnClickListener {\n            launch {\n                try {\n                    delay(5000)\n                } catch (e: Exception) {\n                    /**\n                     * 取消协程会抛出异常\n                     * kotlinx.coroutines.JobCancellationException: Job was cancelled; job=SupervisorJobImpl{Cancelling}@7e7375b\n                     */\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    override fun onDestroy() {\n        cancel()\n        super.onDestroy()\n    }\n}\n```\n\n### 协程构建器\n\nlaunch 和 async 构建器都可以用来启动新协程：\n\n- **launch**，返回一个 Job 并且不附带任何结果值。\n- **async**，返回一个 Deferred，Deferred 也是一个 Job，可以使用 .await() 在一个延期的值上得到它的最终结果。\n\n等待一个作业：\n\n- join 和 await。\n- 组合并发。\n\n测试构建器：\n\n```kotlin\n@Test\nfun `coroutine builder`() = runBlocking {\n    val job1 = launch {\n        delay(200)\n        println(\"job1 finished.\")\n    }\n\n    val job2 = async {\n        delay(200)\n        println(\"job2 finished.\")\n        \"job2 result\"\n    }\n    println(job2.await())\n}\n\n// 打印结果\njob1 finished.\njob2 finished.\njob2 result\n```\n\n> runBlocking 把当前线程包装成一个协程，它会阻塞当前线程等待子协程执行完再结束。\n\n### join 和 await 等待协程作业\n\n测试 join：\n\n```kotlin\n@Test\nfun `coroutine join`() = runBlocking {\n    val job1 = launch {\n        delay(2000)\n        println(\"One\")\n    }\n    job1.join()\n    val job2 = launch {\n        delay(200)\n        println(\"Two\")\n    }\n    val job3 = launch {\n        delay(200)\n        println(\"Three\")\n    }\n}\n\n// 打印结果\nOne\nTwo\nThree\n```\n\n测试 await：\n\n```kotlin\n@Test\nfun `coroutine await`() = runBlocking {\n    val job1 = async {\n        delay(2000)\n        println(\"One\")\n    }\n    job1.await()\n    val job2 = async {\n        delay(200)\n        println(\"Two\")\n    }\n    val job3 = async {\n        delay(200)\n        println(\"Three\")\n    }\n}\n\n// 打印结果\nOne\nTwo\nThree\n```\n\n### async 组合并发\n\n测试同步 sync：\n\n```kotlin\n@Test\nfun `coroutine sync`() = runBlocking {\n    val time = measureTimeMillis {\n        val one = doOne()\n        val two = doTwo()\n        println(\"The result:${one + two}\")\n    }\n    println(\"Completed in $time ms\")\n}\n\nprivate suspend fun doOne(): Int {\n    delay(1000)\n    return 1\n}\n\nprivate suspend fun doTwo(): Int {\n    delay(1000)\n    return 1\n}\n\n// 打印结果\nThe result:2\nCompleted in 2018 ms\n```\n\n测试异步 async：\n\n```kotlin\n@Test\nfun `coroutine async`() = runBlocking {\n    val time = measureTimeMillis {\n        val one = async {\n            doOne()\n        }\n        val two = async {\n            doTwo()\n        }\n        println(\"The result:${one.await() + two.await()}\")\n\n        /* 以下形式，结果是 2m。\n        val one = async {\n            doOne()\n        }.await()\n        val two = async {\n            doTwo()\n        }.await()\n        println(\"The result:${one + two}\")*/\n    }\n    println(\"Completed in $time ms\")\n}\n\n// 打印结果\nThe result:2\nCompleted in 1034 ms\n```\n\n### 协程的启动模式\n\n- **DEFAULT**：协程创建后，立即开始调度，在调度前如果协程被取消，其将直接进入取消响应的状态。\n\n  ```kotlin\n  @Test\n  fun `start mode DEFAULT`() = runBlocking {\n      val job = launch(start = CoroutineStart.DEFAULT) {\n          delay(5000)\n          println(\"Job finished.\")\n      }\n      delay(1000)\n      job.cancel()\n  }\n  \n  // 什么也不打印\n  ```\n\n- **ATOMIC**：协程创建后，立即开始调度，协程执行到第一个挂起点之前不响应取消。\n\n  ```kotlin\n  @Test\n  fun `start mode ATOMIC`() = runBlocking {\n      val job = launch(start = CoroutineStart.ATOMIC) {\n          var count = 0\n          val time = measureTimeMillis {\n              for (i in 0 until 2100000000) {\n                  if (i % 2 == 0) {\n                      count++\n                  }\n              }\n          }\n          println(\"Before delay $time ms. count=$count\")\n          delay(5000)\n          println(\"Job finished.\")\n      }\n      delay(1000)\n      job.cancel()\n  }\n  \n  // 打印结果\n  Before delay 1513 ms, count=1050000000.\n  ```\n\n- **LAZY**：只有协程被需要时，包括主动调用协程的 start、join 或者 await 等函数时才会开始调度，如果调度前就被取消，那么该协程将直接进入异常结束状态。\n\n  ```kotlin\n  @Test\n  fun `start mode LAZY`() = runBlocking {\n      val job = async (start = CoroutineStart.LAZY) {\n          delay(2000)\n          println(\"Job finished.\")\n      }\n      // 调度前就取消，会抛出异常 kotlinx.coroutines.JobCancellationException\n      job.cancel()\n      job.await()\n  }\n  ```\n\n- **UNDISPATCHED**：协程创建后立即在**当前函数调用栈**中执行，直到遇到第一个真正挂起的点。\n\n  ```kotlin\n  @Test\n  fun `start mode UNDISPATCHED`() = runBlocking {\n      val job = async(context = Dispatchers.IO, start = CoroutineStart.UNDISPATCHED) {\n          println(\"thread1: ${Thread.currentThread().name}\")\n          delay(1000)\n          println(\"thread2: ${Thread.currentThread().name}\")\n      }\n  }\n  \n  // 打印结果\n  thread1: Test worker @coroutine#2\n  thread2: DefaultDispatcher-worker-1 @coroutine#2\n  ```\n\n\n### 协程的作用域构建器\n\n#### coroutineScope 与 runBlocking\n\n- runBlocking 是常规函数，而 coroutineScope 是挂起函数。\n- 它们都会等待其协程体结束，主要区别在于 runBlocking 会阻塞当前线程来等待，而 coroutineScope 只是挂起，会释放底层线程用于其它用途。\n\n```kotlin\n@Test\nfun `coroutine coroutineScope builder`() = runBlocking {\n    coroutineScope {\n        val job1 = launch {\n            delay(400)\n            println(\"job1 finished.\")\n        }\n        val job2 = async {\n            delay(200)\n            println(\"job2 finished.\")\n            throw IllegalArgumentException()\n        }\n    }\n}\n\n// 打印结果\njob2 finished.\n\njava.lang.IllegalArgumentException...\n```\n\n#### coroutineScope 与 supervisorScope\n\n- coroutineScope：一个协程失败了，所有其它兄弟协程也会被取消。\n- supervisorScope：一个协程失败了，不会影响其它兄弟协程。\n\n```kotlin\n@Test\nfun `coroutine supervisorScope builder`() = runBlocking {\n    supervisorScope {\n        val job1 = launch {\n            delay(400)\n            println(\"job1 finished.\")\n        }\n        val job2 = async {\n            delay(200)\n            println(\"job2 finished.\")\n            throw IllegalArgumentException()\n        }\n    }\n}\n\n// 打印结果\njob2 finished.\njob1 finished.\n```\n\n### Job 对象\n\n- 对于每一个创建的协程（通过 launch 或者 async），会返回一个 Job 实例，该实例是协程的唯一标示，并且负责管理协程的生命周期。\n- 一个任务可以包含一系列状态：新创建（**New**）、活跃（**Active**）、完成中（**Completing**）、已完成（**Completed**）、取消中（**Cancelling**）和已取消（**Cancelled**）。虽然我们无法直接访问这些状态，但是我们可以访问 Job 的属性：isActive、isCancelled 和 isCompleted。\n\n### Job 的生命周期\n\n如果协程处于活跃状态，协程运行出错或者调用 job.cancel() 都会将当前任务置为取消中（Cancelling）状态（isActive = false，isCancelled = true）。当所有的子协程都完成后，协程会进入已取消（Cancelled）状态，此时 isCompleted = true。\n\n![](https://gitee.com/zch0304/images/raw/master/note/676350c3f83e92cda2f87c2b90471451.png) \n\n### 协程的取消\n\n- 取消作用域会取消它的子协程。\n\n  ```kotlin\n  @Test\n  fun `scope cancel`() = runBlocking {\n      val scope = CoroutineScope(Dispatchers.Default)\n      scope.launch {\n          delay(1000)\n          println(\"job1.\")\n      }\n      scope.launch {\n          delay(1000)\n          println(\"job2.\")\n      }\n      delay(100)\n      scope.cancel()\n      delay(2000)\n  }\n  \n  // 无打印结果\n  ```\n\n- 被取消的子协程不会影响其余兄弟协程。\n\n  ```kotlin\n  @Test\n  fun `brother cancel`() = runBlocking {\n      val scope = CoroutineScope(Dispatchers.Default)\n      val job1 = scope.launch {\n          delay(1000)\n          println(\"job1.\")\n      }\n      val job2 = scope.launch {\n          delay(1000)\n          println(\"job2.\")\n      }\n      delay(100)\n      job1.cancel()\n      delay(2000)\n  }\n  \n  // 打印结果\n  job2.\n  ```\n\n- 协程通过抛出一个特殊的异常 CancellationException 来处理取消操作。\n\n  ```kotlin\n  @Test\n  fun `CancellationException`() = runBlocking {\n      val job1 = GlobalScope.launch {\n          try {\n              delay(1000)\n              println(\"job1.\")\n          } catch (e: Exception) {\n              e.printStackTrace()\n          }\n      }\n      delay(100)\n      /* job1.cancel(CancellationException(\"取消\"))\n       job1.join()*/\n      job1.cancelAndJoin()\n  }\n  \n  // 打印结果\n  kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled;\n  ```\n\n- 所有 kotlinx.coroutines 中的挂起函数（withContext, delay 等）都是可取消的。\n\n### CPU 密集型任务取消\n\n- isActive 是一个可以被使用在 CoroutineScope 中的扩展属性，检查 Job 是否处于活跃状态。\n\n  ```kotlin\n  @Test\n  fun `cancel cpu task by isActive`() = runBlocking {\n      val job = launch(Dispatchers.Default) {\n          var nextPrintTime = System.currentTimeMillis()\n          var i = 0\n          while (i < 5 && isActive) {\n              if (System.currentTimeMillis() >= nextPrintTime) {\n                  println(\"job: I'm sleeping ${i++} ...\")\n                  nextPrintTime += 500\n              }\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  main: Now I can quit.\n  ```\n\n- ensureActive()，如果 Job 处于非活跃状态，这个方法会抛出异常。\n\n  ```kotlin\n  @Test\n  fun `cancel cpu task by ensureActive`() = runBlocking {\n      val job = launch(Dispatchers.Default) {\n          var nextPrintTime = System.currentTimeMillis()\n          var i = 0\n          while (i < 5) {\n              ensureActive() // 抛出 CancellationException 异常，但被静默处理掉了。\n              if (System.currentTimeMillis() >= nextPrintTime) {\n                  println(\"job: I'm sleeping ${i++} ...\")\n                  nextPrintTime += 500\n              }\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  main: Now I can quit.\n  ```\n\n- yield 函数会检查所在协程的状态，如果已经取消，则抛出 CancellationException 予以响应。此外，它还会尝试出让线程的执行权，给其它协程提供执行机会。\n\n  ```kotlin\n  @Test\n  fun `cancel cpu task by yield`() = runBlocking {\n      val job = launch(Dispatchers.Default) {\n          var nextPrintTime = System.currentTimeMillis()\n          var i = 0\n          while (i < 5) {\n              yield()\n              if (System.currentTimeMillis() >= nextPrintTime) {\n                  println(\"job: I'm sleeping ${i++} ...\")\n                  nextPrintTime += 500\n              }\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  main: Now I can quit.\n  ```\n\n### 协程取消的副作用\n\n- 在 finally 中释放资源。\n\n  ```kotlin\n  @Test\n  fun `release resources`() = runBlocking {\n      val job = launch {\n          try {\n              repeat(1000) { i ->\n                  println(\"job: I'm sleeping $i ...\")\n                  delay(500)\n              }\n          } finally {\n              println(\"job: I'm running finally.\")\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  job: I'm running finally.\n  main: Now I can quit.\n  ```\n\n- use 函数：该函数只能被实现了 Closeable 的对象使用，程序结束的时候会自动调用 close 方法，适合文件对象。\n\n  ```kotlin\n  @Test\n  fun `use function`() = runBlocking {\n      /*val br = BufferedReader(FileReader(\"E:\\\\Hello.txt\"))\n      var line: String?\n      try {\n          while (true) {\n              line = br.readLine() ?: break\n              println(line)\n          }\n      } catch (e: Exception) {\n      } finally {\n          try {\n              br.close()\n          } catch (e: Exception) {\n          }\n      }*/\n  \n      BufferedReader(FileReader(\"E:\\\\Hello.txt\")).use {\n          var line: String?\n          while (true) {\n              line = it.readLine() ?: break\n              println(line)\n          }\n      }\n  }\n  ```\n\n### 不能取消的任务\n\n处于取消中状态的协程不能够挂起（运行不能取消的代码），当协程被取消后需要调用挂起函数，我们需要将清理任务的代码放置于 NonCancellable CoroutineContext 中。这样会挂起运行中的代码，并保持协程取消中状态直到任务处理完成。\n\n```kotlin\n@Test\nfun `cancel with NonCancelable`() = runBlocking {\n    val job = launch {\n        try {\n            repeat(1000) { i ->\n                println(\"job: I'm sleeping $i ...\")\n                delay(500)\n            }\n        } finally {\n            withContext(NonCancellable) {\n                println(\"job: I'm running finally.\")\n                delay(1000)\n                println(\"job: And I've just delayed for 1 sec because I'm non-cancellable.\")\n            }\n        }\n    }\n    delay(1300)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\n// 打印结果\njob: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\njob: I'm running finally.\njob: And I've just delayed for 1 sec because I'm non-cancellable.\nmain: Now I can quit.\n```\n\n> NonCancellable 可用于常驻任务。\n\n### 超时任务\n\n- 很多情况下取消一个协程的理由是它有可能超时。用 withTimeout 进行超时操作，如果规定时间内未完成任务则会抛出异常。\n\n  ```kotlin\n  @Test\n  fun `deal with withTimeout`() = runBlocking {\n      withTimeout(1300) {\n          repeat(1000) { i ->\n              println(\"job: I'm sleeping $i ...\")\n              delay(500)\n          }\n      }\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  \n  Timed out waiting for 1300 ms\n  kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms\n  ```\n\n- withTimeoutOrNull 通过返回 null 来进行超时操作，从而替代抛出一个异常。\n\n  ```kotlin\n  @Test\n  fun `deal with withTimeoutOrNull`() = runBlocking {\n      val result = withTimeoutOrNull(1300) {\n          repeat(1000) { i ->\n              println(\"job: I'm sleeping $i ...\")\n              delay(500)\n          }\n          \"Done\"\n      } ?: \"Undone\"\n      println(\"Result is $result.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  Result is Undone.\n  ```\n\n\n### 协程的上下文\n\nCoroutineContext 是一组用于定义协程行为的元素，它由如下几项构成：\n\n- **Job**：控制协程的生命周期。\n- **CoroutineDispatcher**：向合适的线程分发任务。\n- **CoroutineName**：协程的名称，调试的时候很有用。\n- **CoroutineExceptionHandler**：处理未被捕获的异常。\n\n#### 组合上下文中的元素\n\n有时我们需要在协程上下文中定义多个元素，我们可以使用 \"+\" 操作符来实现。比如，我们可以显示指定一个调度器来启动协程并且同时显示指定一个命名：\n\n```kotlin\n@Test\nfun `CoroutineContext`() = runBlocking<Unit> {\n    launch(Dispatchers.Default + CoroutineName(\"hello\")) {\n        println(\"I'm working in thread ${Thread.currentThread().name}\")\n    }\n}\n\n// 打印结果\nI'm working in thread DefaultDispatcher-worker-1 @hello#2\n```\n\n#### 协程上下文的继承\n\n对于新创建的协程，它的 CoroutineContext 会包含一个全新的 Job 实例，它会帮助我们控制协程的生命周期。而**剩下的元素会从 CoroutineContext 的父类继承**，该父类可能是另外一个协程或者创建该协程的 CoroutineScope。\n\n```kotlin\n@Test\nfun `CoroutineContext extend`() = runBlocking<Unit> {\n    val scope = CoroutineScope(Job() + Dispatchers.IO + CoroutineName(\"hello\"))\n    val job = scope.launch {\n        // 新的协程会将 CoroutineScope 作为父级\n        println(\"${coroutineContext[Job]} ${Thread.currentThread().name}\")\n        val result = async {\n             // 通过 async 创建的新协程会将当前协程作为父级\n            println(\"${coroutineContext[Job]} ${Thread.currentThread().name}\")\n            \"OK\"\n        }.await()\n    }\n    job.join()\n}\n\n// 打印结果\n\"hello#2\":StandaloneCoroutine{Active}@55b8c583 DefaultDispatcher-worker-1 @hello#2\n\"hello#3\":DeferredCoroutine{Active}@64e55ef0 DefaultDispatcher-worker-3 @hello#3\n```\n\n#### 协程上下文的公式\n\n协程上下文 = **默认值** + **继承的 CoroutineContext** + **参数**。\n\n- 一些元素包含默认值：Dispatchers.Default 是默认的 CoroutineDispatcher，以及 \"coroutine\" 作为默认的 CoroutineName。\n- 继承的 CoroutineContext 是 CoroutineScope 或者其父协程的 CoroutineContext。\n- 传入协程构建器的参数的优先级高于继承的上下文，隐藏会覆盖对应参数值。\n\n```kotlin\n@Test\nfun `CoroutineContext extend2`() = runBlocking<Unit> {\n    val coroutineExceptionHandler = CoroutineExceptionHandler { _, excption ->\n        println(\"CoroutineExceptionHandler got $excption\")\n    }\n    val scope = CoroutineScope(Job() + Dispatchers.Main + coroutineExceptionHandler)\n    // 新的 CoroutineContext = 父级 CoroutineContext + Job()\n    val job = scope.launch(Dispatchers.IO) {\n        // 新协程\n        println(\"${coroutineContext[Job]} ${Thread.currentThread().name}\")\n    }\n    job.join()\n}\n\n// 打印结果\n\"coroutine#2\":StandaloneCoroutine{Active}@78ec7afa DefaultDispatcher-worker-1 @coroutine#2\n```\n\n### 协程的异常处理\n\n#### 异常处理的必要性\n\n当应用出现一些意外情况时，给用户提供合适的体验非常重要。一方面，目睹应用崩溃是个很糟糕的体验，另一方面，当用户操作失败时，也必须要能给出正确的提示信息。\n\n#### 异常的传播\n\n协程构建器有两种形式：**自动传播异常**（launch 与 actor），**向用户暴露异常**（async 与 produce）。当这些构建器用于创建一个**根协程**时（该协程不是另一个协程的子协程），前者这类构建器，异常会在它发生的第一时间被抛出，而后者则依赖用户来最终消费异常，例如通过 await 或 receive。\n\n```kotlin\n@Test\nfun `exception propagation`() = runBlocking<Unit> {\n    val job = GlobalScope.launch {\n        try {\n            throw IndexOutOfBoundsException()\n        } catch (e: Exception) {\n            println(\"Caught IndexOutOfBoundsException\")\n        }\n    }\n    job.join()\n\n    val deferred = GlobalScope.async {\n        throw ArithmeticException()\n    }\n    try {\n        deferred.await()\n    } catch (e: Exception) {\n        println(\"Caught ArithmeticException\")\n    }\n}\n\n// 打印结果\nCaught IndexOutOfBoundsException\nCaught ArithmeticException\n```\n\n#### 非根协程的异常\n\n其它协程所创建的协程中，产生的异常总是会被传播。\n\n```kotlin\n@Test\nfun `exception propagation2`() = runBlocking<Unit> {\n    val scope = CoroutineScope(Job())\n    val job = scope.launch {\n        async {\n            // 如果 async 抛出异常，launch 就会立刻抛出异常，而不会调用 .await()\n            throw IllegalArgumentException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nException in thread \"DefaultDispatcher-worker-1 @coroutine#3\" java.lang.IllegalArgumentException\n```\n\n#### 异常的传播特性\n\n当一个协程由于一个异常而运行失败时，它会传播这个异常并传递给它的父级。接下来，父级会进行下面几步操作：\n\n- 取消它的子级。\n- 取消它自己。\n- 将异常传播并传递给它的父级。\n\n#### SupervisorJob\n\n- 使用 SupervisorJob 时，一个子协程的运行失败不会影响到其它子协程。SupervisorJob 不会传播异常给它的父级，它会**让子协程自己处理异常**。\n- 这种需求常见于在作用域内定义作业的 UI 组件，如果任一个 UI 的子作业执行失败了，它并不总是有必要取消整个 UI 组件，但是如果 UI 组件被销毁了，由于它的结果不再被需要了，它就有必要使所有的子作业执行失败。\n\n```kotlin\n@Test\nfun `test SupervisorJob`() = runBlocking<Unit> {\n    val supervisor = CoroutineScope(SupervisorJob())\n    val job1 = supervisor.launch {\n        delay(100)\n        println(\"child 1.\")\n        throw IllegalArgumentException()\n    }\n    val job2 = supervisor.launch {\n        try {\n            delay(Long.MAX_VALUE)\n        } finally {\n            println(\"child 2 finished.\")\n        }\n    }\n//        delay(200)\n//        supervisor.cancel()\n    joinAll(job1, job2)\n}\n\n// 打印结果\nchild 1.\nException in thread \"DefaultDispatcher-worker-2 @coroutine#2\" java.lang.IllegalArgumentException\n一直运行中......\n```\n\n#### supervisorScope\n\n当作业自身执行失败的时候，所有子作业将会全部被取消。\n\n```kotlin\n@Test\nfun `test supervisorScope`() = runBlocking<Unit> {\n    supervisorScope {\n        launch {\n            delay(100)\n            println(\"child 1.\")\n            throw IllegalArgumentException()\n        }\n        try {\n            delay(Long.MAX_VALUE)\n        } finally {\n            println(\"child 2 finished.\")\n        }\n    }\n}\n\n// 打印结果\nchild 1.\nException in thread \"Test worker @coroutine#2\" java.lang.IllegalArgumentException\n一直运行中......\n```\n\n```kotlin\n@Test\nfun `test supervisorScope2`() = runBlocking<Unit> {\n    supervisorScope {\n        launch {\n            try {\n                println(\"The child is sleeping.\")\n                delay(Long.MAX_VALUE)\n            } finally {\n                println(\"The child is cancelled.\")\n            }\n        }\n        yield()\n        println(\"Throwing an exception from the scope.\")\n        throw AssertionError()\n    }\n}\n\n// 打印结果\nThe child is sleeping.\nThrowing an exception from the scope.\nThe child is cancelled.\n\njava.lang.AssertionError\n```\n\n#### 异常的捕获\n\n- 使用 CoroutineExceptionHandler 对协程的异常进行捕获。\n- 以下的条件被满足时，异常就会被捕获。\n  - **时机**：异常是被自动抛出异常的协程所抛出的（使用 launch，而不是 async 时）。\n  - **位置**：在 CoroutineScope 的 CoroutineContext 中或在一个根协程（CoroutineScope 或者 supervisorScope 的直接子协程）中。\n\n```kotlin\n@Test\nfun `test coroutineExceptionHandler`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val job = GlobalScope.launch(handler) {\n        throw AssertionError()\n    }\n    val deferred = GlobalScope.async(handler) {\n        throw ArithmeticException()\n    }\n    job.join()\n    deferred.await()\n}\n\n// 打印结果\nCaught java.lang.AssertionError\n\njava.lang.ArithmeticException\n```\n\n```kotlin\n@Test\nfun `test coroutineExceptionHandler2`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val scope = CoroutineScope(Job())\n    val job = scope.launch(handler) {\n        launch {\n            throw ArithmeticException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nCaught java.lang.ArithmeticException\n```\n\n```kotlin\n@Test\nfun `test coroutineExceptionHandler3`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val scope = CoroutineScope(Job())\n    val job = scope.launch {\n        // handler 放这里捕获不到异常\n        launch(handler) {\n            throw ArithmeticException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nException in thread \"DefaultDispatcher-worker-1 @coroutine#3\" java.lang.ArithmeticException\n```\n\n#### Android 中全局异常处理\n\n- 全局异常处理器可以获取到所有协程未处理的未捕获异常，不过它并不能对异常进行捕获，虽然**不能阻止程序崩溃**，全局异常处理器在程序调试和异常上报等场景中仍然有非常大的用处。\n- 我们需要在 classpath 下面创建 META-INF/services 目录，并在其中创建一个名为 kotlinx.coroutines.CoroutineExceptionHandler 的文件，文件内容就是我们的全局异常处理器的全类名。\n\n正常情况捕获异常（程序不崩溃）：\n\n```kotlin\nval handler = CoroutineExceptionHandler { _, excption ->\n    Log.d(\"tag\", \"Caught $excption\")\n}\n\nbtnGlobalCoroutineExceptionHandler?.setOnClickListener {\n    GlobalScope.launch(handler) {\n        \"abc\".substring(10)\n    }\n}\n\n// 打印结果\nD/tag: Caught java.lang.StringIndexOutOfBoundsException: length=3; index=10\n```\n\n全局异常处理器获取未被捕获异常（程序崩溃）：\n\n```kotlin\nbtnGlobalCoroutineExceptionHandler?.setOnClickListener {\n    GlobalScope.launch {\n        \"abc\".substring(10)\n    }\n}\n\n// 打印结果\nD/tag: Unhandled Coroutine Exception: java.lang.StringIndexOutOfBoundsException: length=3; index=10\n    \n    --------- beginning of crash\nE/AndroidRuntime: FATAL EXCEPTION: DefaultDispatcher-worker-1\n    Process: com.zch.kotlin, PID: 3436\n    java.lang.StringIndexOutOfBoundsException: length=3; index=10\n        at java.lang.String.substring(String.java:1899)\n```\n\n#### 取消与异常\n\n- 取消与异常紧密相关，协程内部使用 CancellationException 来进行取消，这个异常会被忽略。\n- 当子协程被取消时，不会取消它的父协程。\n- 如果一个协程遇到了 CancellationException 以外的异常，它将使用该异常取消它的父协程。当父协程的所有子协程都结束后，异常才会被父协程处理。\n\n```kotlin\n@Test\nfun `test cancel and exception`() = runBlocking<Unit> {\n    val job = launch {\n        val child = launch {\n            try {\n                delay(Long.MAX_VALUE)\n            }finally {\n                println(\"Child is cancelled.\")\n            }\n        }\n        yield()\n        println(\"Cancelling child.\")\n        child.cancelAndJoin()\n        yield()\n        println(\"Parent is not cancelled.\")\n    }\n    job.join()\n}\n\n// 打印结果\nCancelling child.\nChild is cancelled.\nParent is not cancelled.\n```\n\n```kotlin\n@Test\nfun `test cancel and exception2`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val job = GlobalScope.launch(handler) {\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n                withContext(NonCancellable) {\n                    println(\"Children are cancelled, but exception is not handled until all children termination.\")\n                    delay(100)\n                    println(\"The first child finished its non cancellable block.\")\n                }\n            }\n        }\n        launch {\n            delay(10)\n            println(\"Second child throws an exception.\")\n            throw ArithmeticException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nSecond child throws an exception.\nChildren are cancelled, but exception is not handled until all children termination.\nThe first child finished its non cancellable block.\nCaught java.lang.ArithmeticException\n```\n\n#### 异常聚合\n\n当协程的多个子协程因为异常而失败时，一般情况下取第一个异常进行处理。在第一个异常之后发生的所有其它异常，都将被绑定到第一个异常之上。\n\n```kotlin\n@Test\nfun `test exception aggreation`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption ${excption.suppressed.contentToString()}\")\n    }\n    val job = GlobalScope.launch(handler) {\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n                throw ArithmeticException()\n            }\n        }\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n                throw IndexOutOfBoundsException()\n            }\n        }\n        launch {\n            delay(100)\n            throw IOException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nCaught java.io.IOException [java.lang.IndexOutOfBoundsException, java.lang.ArithmeticException]\n```\n\n### Flow\n\n#### 异步返回多个值的方案\n\n集合、序列、挂起函数、Flow。\n\n```kotlin\n// 返回了多个值，但不是异步\nprivate fun simpleList() = listOf(1, 2, 3)\n\n// 返回了多个值，但不是异步（一次返回一个值）\nprivate fun simpleSequence() = sequence {\n    for (i in 1..3) {\n        Thread.sleep(1000) // 阻塞\n//            delay(1000) // 不能用\n        yield(i)\n    }\n}\n\n// 返回了多个值，是异步（一次性返回了多个值）\nprivate suspend fun simpleList2(): List<Int> {\n    delay(1000)\n    return listOf(1, 2, 3)\n}\n\n// 返回了多个值，是异步（一次返回一个值）\nprivate fun simpleFlow() = flow {\n    for (i in 1..3) {\n        delay(1000) // 模拟耗时操作\n        emit(i) // 发射，返回一个元素\n    }\n}\n\n@Test\nfun `test multiple values`() {\n//        simpleList().forEach { println(it) }\n    simpleSequence().forEach { println(it) }\n}\n\n@Test\nfun `test multiple values2`() = runBlocking {\n    simpleList2().forEach { println(it) }\n}\n\n@Test\nfun `test multiple values3`() = runBlocking {\n    // 启动另外一个协程，证明 simpleFlow 没有阻塞主线程\n    launch {\n        for (i in 1..3) {\n            println(\"I'm not blocked $i.\")\n            delay(1500)\n        }\n    }\n    simpleFlow().collect { println(it) }\n}\n```\n\n#### Flow 与其它方式的区别\n\n- 名为 flow 的 Flow 类型构建器函数。\n- flow{...} 构建块中的代码可以挂起。\n- 函数 simpleFlow 不再标有 suspend 修饰符。\n- 流使用 emit 函数发射值。\n- 流使用 collect 函数收集值。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1663391441985.png) \n\n#### 冷流\n\nFlow 是一种类似于序列的冷流，flow 构建器中的代码直到流被收集的时候才运行。\n\n```kotlin\nprivate fun simpleFlow2() = flow {\n    println(\"Flow started.\")\n    for (i in 1..3) {\n        delay(1000)\n        emit(i)\n    }\n}\n\n@Test\nfun `test flow is cold`() = runBlocking {\n    val flow = simpleFlow2()\n    println(\"Calling collect...\")\n    flow.collect { println(it) }\n    println(\"Calling collect again...\")\n    flow.collect { println(it) }\n}\n\n// 打印结果\nCalling collect...\nFlow started.\n1\n2\n3\nCalling collect again...\nFlow started.\n1\n2\n3\n```\n\n#### 流的连续性\n\n- 流的每次单独收集都是按顺序执行的，除非使用特殊操作符。\n- 从上游到下游每个过渡操作符都会处理每个发射出的值，然后再交给末端操作符。\n\n```kotlin\n@Test\nfun `test flow continuation`() = runBlocking {\n    (1..5).asFlow().filter {\n        it % 2 == 0\n    }.map {\n        \"string $it\"\n    }.collect {\n        println(\"Collect $it.\")\n    }\n}\n\n// 打印结果\nCollect string 2.\nCollect string 4.\n```\n\n#### 流构建器\n\n- flowOf 构建器定义了一个发射固定值集的流。\n- 使用 .asFlow() 扩展函数，可以将各种集合与序列转换为流。\n\n```kotlin\n@Test\nfun `test flow builder`() = runBlocking {\n    flowOf(\"one\", \"two\", \"three\")\n        .onEach { delay(1000) }\n        .collect { println(it) }\n\n    (1..3).asFlow().collect { println(it) }\n}\n```\n\n#### 流上下文\n\n- 流的收集总是在调用协程的上下文中发生，流的该属性称为**上下文保存**。\n- flow{...} 构建器中的代码必须遵循上下文保存属性，并且不允许从其它上下文中发射（emit）。\n- flowOn 操作符，该函数用于更改流发射的上下文。\n\n```kotlin\nprivate fun simpleFlow3() = flow {\n    println(\"Flow started ${Thread.currentThread().name}.\")\n    for (i in 1..3) {\n        delay(1000)\n        emit(i)\n    }\n}.flowOn(Dispatchers.Default)\n\n@Test\nfun `test flow on`() = runBlocking {\n    simpleFlow3().collect { println(\"Collected $it ${Thread.currentThread().name}\") }\n}\n\n// 打印结果\nFlow started DefaultDispatcher-worker-1 @coroutine#2.\nCollected 1 Test worker @coroutine#1\nCollected 2 Test worker @coroutine#1\nCollected 3 Test worker @coroutine#1\n```\n\n> 如果去掉 .flowOn(Dispatchers.Default)，那么发射和收集都是在 Test worker 线程中。\n\n#### 在指定协程中收集流\n\n使用 launchIn 替换 collect，我们可以在单独的协程中启动流的收集。\n\n```kotlin\nprivate fun events() = (1..3).asFlow().onEach { delay(100) }.flowOn(Dispatchers.Default)\n\n@Test\nfun `test flow launchIn`() = runBlocking {\n    val job = events()\n        .onEach { println(\"Event: $it ${Thread.currentThread().name}\") }\n//            .launchIn(CoroutineScope(Dispatchers.IO))\n        .launchIn(this)\n\n//        delay(200)\n//        job.cancelAndJoin()\n}\n\n// 打印结果\nEvent: 1 Test worker @coroutine#2\nEvent: 2 Test worker @coroutine#2\nEvent: 3 Test worker @coroutine#2\n```\n\n#### 流的取消\n\n流采用与协程同样的协作取消。像往常一样，流的收集可以是当流在一个可取消的挂起函数（例如 delay）中挂起的时候取消。\n\n```kotlin\nprivate fun simpleFlow4() = flow {\n    for (i in 1..3) {\n        delay(1000)\n        println(\"Emitting $i.\")\n        emit(i)\n    }\n}\n\n@Test\nfun `test cancel flow`() = runBlocking {\n    withTimeoutOrNull(2500) {\n        simpleFlow4().collect { println(it) }\n    }\n    println(\"Done.\")\n}\n\n// 打印结果\nEmitting 1.\n1\nEmitting 2.\n2\nDone.\n```\n\n#### 流的取消检测\n\n- 为方便起见，流构建器对每个发射值执行附加的 ensureActive 检测以进行取消，这意味着从 flow{...} 发出的繁忙循环是可以取消的。\n\n  ```kotlin\n  private fun simpleFlow5() = flow {\n      for (i in 1..5) {\n          println(\"Emitting $i.\")\n          emit(i)\n      }\n  }\n  \n  @Test\n  fun `test cancel flow check`() = runBlocking {\n      simpleFlow5().collect {\n          println(it)\n          if (it == 3) cancel()\n      }\n  }\n  \n  // 打印结果\n  Emitting 1.\n  1\n  Emitting 2.\n  2\n  Emitting 3.\n  3\n  \n  BlockingCoroutine was cancelled\n  kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=\"coroutine#1\":BlockingCoroutine{Cancelled}@5da3da3d\n  ```\n\n- 出于性能原因，大多数其它流操作不会自动执行其它取消检测，在协程处于繁忙循环的情况下，必须明确检测是否取消，通过 **cancellable** 操作符来执行此操作。\n\n  ```kotlin\n  @Test\n  fun `test cancel flow check`() = runBlocking {\n      (1..5).asFlow().cancellable().collect {\n          println(it)\n          if (it == 3) cancel()\n      }\n  }\n  \n  // 打印结果\n  1\n  2\n  3\n  \n  BlockingCoroutine was cancelled\n  kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=\"coroutine#1\":BlockingCoroutine{Cancelled}@63bbd396\n  ```\n\n#### 背压\n\n**1、使用缓冲与 flowOn 处理背压**\n\n- buffer()：并发运行流中发射元素的代码。\n\n- 当必须更改 CoroutineDispatcher 时，flowOn 操作符使用了相同的缓冲机制，但是 buffer 函数显示地请求缓冲而**不改变执行上下文**。\n\n**2、合并与处理最新值**\n\n- conflate()：合并发射项，不对每个值进行处理。\n- collectLastest()：取消并重新发射最后一个值。\n\n```kotlin\nprivate fun simpleFlow6() = flow {\n    for (i in 1..3) {\n        delay(100)\n        emit(i)\n        println(\"Emitting $i ${Thread.currentThread().name}.\")\n    }\n}\n\n@Test\nfun `test flow back pressure`() = runBlocking {\n    val time = measureTimeMillis {\n        simpleFlow6()\n//                .buffer(50) // 并行发射 3 个元素，需要 100 ms\n//                .flowOn(Dispatchers.Default) // 让发射在后台线程，也是并行发射，需要 100 ms\n//                .conflate()\n//                .collect {\n            .collectLatest {\n                delay(300) // 处理这个元素消耗 300 ms\n                println(\"Collected $it ${Thread.currentThread().name}\")\n            }\n    }\n    println(\"Collected in $time ms.\")\n}\n```\n\n不处理背压情况下，上面程序大概需要消耗 （100 + 300）* 3 = 1200 ms。\n\n- 使用 buffer()，大概需要 100 + 3 * 300 = 1000 ms，因为该方式发射元素是异步的。\n- 使用 flowOn 操作符，也是大概需要 100 + 3 * 300 = 1000 ms，该方式发射元素也是异步，但是发射元素切换到了后台线程。\n- 使用 conflate，合并发射项，不对每个值进行处理，大概需要 100 + 2 * 300 = 700 ms。该方式发射元素是异步的，收集过程忽略了中间的元素，只处理了前后两个元素。\n- 使用 collectLastest，上面程序大概需要消耗 700 ms。该方式发射元素也是异步，它会取消并重新发射最后一个值。\n\n#### 操作符\n\n##### 转换操作符\n\n- 可以使用操作符转换流，就像使用集合与序列一样。\n- 转换操作符应用于上游流，并返回下游流。\n- 这些操作符也是冷操作符，就像流一样。这类操作符本身不是挂起函数。\n- 它运行的速度很快，返回新的转换流的定义。\n\n```kotlin\nprivate suspend fun performRequest(request: Int): String {\n    delay(1000)\n    return \"response $request\"\n}\n\n@Test\nfun `test transform flow operator`() = runBlocking {\n    (1..3).asFlow()\n//            .map { performRequest(it) }\n        .transform {\n            emit(\"Making request $it\")\n            emit(performRequest(it))\n        }\n        .collect { println(it) }\n}\n```\n\nmap 转换一次。transform 可以转换发射多次。\n\n##### 限长操作符\n\n```kotlin\nprivate fun numbers() = flow {\n    try {\n        emit(1)\n        emit(2)\n        println(\"This line will not execute.\")\n        emit(3)\n    } finally {\n        println(\"Finally in numbers.\")\n    }\n}\n\n@Test\nfun `test limit length operator`() = runBlocking {\n    numbers().take(2).collect { println(it) }\n}\n\n// 打印结果\n1\n2\nFinally in numbers.\n```\n\n##### 末端流操作符\n\n末端流操作符是在流上用于启动流收集的挂起函数。collect 是最基础的末端操作符，但是还有另外一些更方便的使用的末端操作符：\n\n- 转化为各种集合，例如 toList 与 toSet。\n- 获取第一个（first）值与确保流发射单个（Single）值的操作符。\n- 使用 reduce 与 fold 将流规约到单个值。\n\n```kotlin\n@Test\nfun `test terminal operator`() = runBlocking {\n    val sum = (1..5).asFlow()\n        .map { it * it }\n        .reduce { a, b -> a + b }\n    println(sum)\n}\n\n// 打印结果\n55\n```\n\n##### 组合操作符\n\n就像 Kotlin 标准库中的 Sequence.zip 扩展函数一样，流拥有一个 zip 操作符用于组合两个流中的相关值。\n\n```kotlin\n@Test\nfun `test zip operator`() = runBlocking {\n    val numbs = (1..3).asFlow()\n    val strs = flowOf(\"One\", \"Two\", \"Three\")\n    numbs.zip(strs) { a, b -> \"$a -> $b\" }.collect { println(it) }\n}\n\n// 打印结果\n1 -> One\n2 -> Two\n3 -> Three\n```\n\n```kotlin\n@Test\nfun `test zip2 operator`() = runBlocking {\n    val numbs = (1..3).asFlow().onEach { delay(300) }\n    val strs = flowOf(\"One\", \"Two\", \"Three\").onEach { delay(400) }\n    val startTime = System.currentTimeMillis()\n    numbs.zip(strs) { a, b -> \"$a -> $b\" }.collect {\n        println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n    }\n}\n\n// 打印结果\n1 -> One at 442 ms from start.\n2 -> Two at 839 ms from start.\n3 -> Three at 1246 ms from start.\n```\n\n##### 展平操作符\n\n流表示异步接收的值序列，所以很容易遇到这样的情况：每个值都会触发对另一个值序列的请求，然而，由于流具有异步的性质，因此需要不同的展平模式，存在一系列的流展平操作符：\n\n- flatMapConcat 连接模式。\n- flatMapMerge 合并模式。\n- flatMapLastest 最新展平模式。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1663680667795.jpg) \n\n```kotlin\nprivate fun requestFlow(i: Int) = flow<String> {\n    emit(\"$i: First.\")\n    delay(500)\n    emit(\"$i: Second.\")\n}\n\n@Test\nfun `test flatMapConcat operator`() = runBlocking {\n    val startTime = System.currentTimeMillis()\n    (1..3).asFlow()\n        .onEach {\n            delay(100)\n        }.flatMapConcat {\n            requestFlow(it)\n        }.collect {\n            println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n        }\n}\n\n// 打印结果\n1: First. at 138 ms from start.\n1: Second. at 665 ms from start.\n2: First. at 774 ms from start.\n2: Second. at 1289 ms from start.\n3: First. at 1398 ms from start.\n3: Second. at 1911 ms from start.\n```\n\n```kotlin\n@Test\nfun `test flatMapMerge operator`() = runBlocking {\n    val startTime = System.currentTimeMillis()\n    (1..3).asFlow()\n        .onEach {\n            delay(100)\n        }.flatMapMerge {\n            requestFlow(it)\n        }.collect {\n            println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n        }\n}\n\n// 打印结果\n1: First. at 192 ms from start.\n2: First. at 293 ms from start.\n3: First. at 404 ms from start.\n1: Second. at 698 ms from start.\n2: Second. at 806 ms from start.\n3: Second. at 919 ms from start.\n```\n\n```kotlin\n@Test\nfun `test flatMapLatest operator`() = runBlocking {\n    val startTime = System.currentTimeMillis()\n    (1..3).asFlow()\n        .onEach {\n            delay(100)\n        }.flatMapLatest {\n            requestFlow(it)\n        }.collect {\n            println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n        }\n}\n\n// 打印结果\n1: First. at 178 ms from start.\n2: First. at 326 ms from start.\n3: First. at 441 ms from start.\n3: Second. at 943 ms from start.\n```\n\n#### 流的异常处理\n\n当运算符中的发射器或代码抛出异常时，有几种处理异常的方法：\n\n- try/catch 块。\n- catch 函数。\n\n**1、捕获下游异常**：\n\n```kotlin\nprivate fun exceptionFlow() = flow {\n    for (i in 1..3) {\n        println(\"Emitting $i.\")\n        emit(i)\n    }\n}\n\n@Test\nfun `test flow exception`() = runBlocking {\n    try {\n        exceptionFlow().collect {\n            println(it)\n            check(it <= 1) {\n                \"Collect $it.\"\n            }\n        }\n    } catch (e: Exception) {\n        println(\"Caught $e\")\n    }\n}\n\n// 打印结果\nEmitting 1.\n1\nEmitting 2.\n2\nCaught java.lang.IllegalStateException: Collect 2.\n```\n\n**2、捕获上游异常**：\n\n```kotlin\n@Test\nfun `test flow exception2`() = runBlocking {\n    flow {\n        emit(1)\n        throw ArithmeticException(\"Div 0.\")\n    }.catch {\n        println(\"Caught $it\")\n    }.flowOn(Dispatchers.IO)\n        .collect {\n            println(it)\n        }\n}\n\n// 打印结果\n1\nCaught java.lang.ArithmeticException: Div 0.\n```\n\n**3、恢复异常**：\n\n```kotlin\n@Test\nfun `test flow exception3`() = runBlocking {\n    flow {\n        throw ArithmeticException(\"Div 0.\")\n        emit(1)\n    }.catch {\n        println(\"Caught $it\")\n        emit(10)\n    }.flowOn(Dispatchers.IO)\n        .collect {\n            println(it)\n        }\n}\n\n// 打印结果\nCaught java.lang.ArithmeticException: Div 0.\n10\n```\n\n#### 流的完成\n\n当流收集完成时（普通情况或异常情况），它可能需要执行一个动作。\n\n- 命令式 finally 块。\n- onCompletion 声明式处理。\n\n1、finally 形式：\n\n```kotlin\n@Test\nfun `test flow complete in finally`() = runBlocking {\n    fun simpleFlow() = (1..3).asFlow()\n\n    try {\n        simpleFlow().collect {\n            println(it)\n        }\n    } finally {\n        println(\"Done.\")\n    }\n}\n\n// 打印结果\n1\n2\n3\nDone.\n```\n\n2、onCompletion 函数可以拿到上游异常信息，但捕获异常还是需要 catch 函数。\n\n```kotlin\n@Test\nfun `test flow complete in onCompletion`() = runBlocking {\n    fun simpleFlow() = flow {\n        emit(1)\n        throw RuntimeException()\n    }\n    simpleFlow()\n        .onCompletion { exception ->\n            if (exception != null) {\n                println(\"Flow completed exceptionally.\")\n            }\n        }\n        .catch { exception ->\n            println(\"Caught $exception.\")\n        }\n        .collect {\n            println(it)\n        }\n}\n\n// 打印结果\n1\nFlow completed exceptionally.\nCaught java.lang.RuntimeException.\n```\n\n3、onCompletion 函数也能拿到下游异常信息，但捕获异常需要用 try/catch 形式。\n\n```kotlin\n@Test\nfun `test flow complete in onCompletion2`() = runBlocking {\n    fun simpleFlow() = flow {\n        emit(1)\n        throw RuntimeException()\n    }\n    try {\n        simpleFlow()\n            .onCompletion { exception ->\n                if (exception != null) {\n                    println(\"Flow completed exceptionally.\")\n                }\n            }.collect {\n                println(it)\n                check(it <= 1) {\n                    \"Collect $it.\"\n                }\n            }\n    } catch (e: Exception) {\n        println(\"Caught $e.\")\n    }\n}\n\n// 打印结果\n1\nFlow completed exceptionally.\nCaught java.lang.RuntimeException.\n```\n\n### Channel\n\n#### 什么是 Channel\n\nChannel 实际上是一个**并发安全的队列**，它可以用来连接协程，实现不同协程的通信。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1666439476014.jpg) \n\n```kotlin\n@Test\nfun `test know Channel`() = runBlocking {\n    val channel = Channel<Int>()\n    // 生产者\n    val producer = GlobalScope.launch {\n        var i = 1\n        while (true) {\n            delay(1000)\n            println(\"send $i.\")\n            channel.send(i++)\n        }\n    }\n    // 消费者\n    val consumer = GlobalScope.launch {\n        while (true) {\n            // delay(3000)\n            val element = channel.receive()\n            println(\"receive $element.\")\n        }\n    }\n    joinAll(producer, consumer)\n}\n\n// 打印结果\nsend 1.\nreceive 1.\nsend 2.\nreceive 2.\n......\n```\n\n#### Channel 的容量\n\nChannel 实际上就是一个队列，队列中一定存在缓冲区，那么一旦这个缓冲区满了，并且一直没有人调用 receive 并取走函数，send 就需要挂起。故意让接收端的节奏放慢，发现 send 总是会挂起，直到 receive 之后才会继续往下执行。\n\n比如上面的代码让消费者延迟 3s，那么生产者 send 一个元素后，需要等消费者在 3s 之后 receive 到元素才能 send 下一个元素。因为 Channel 默认的容量是 0。\n\n#### 迭代 Channel\n\nChannel 本身确实像序列，所以我们在读取的时候可以直接获取一个 Channel 的 iterator。\n\n```kotlin\n@Test\nfun `test iterator Channel`() = runBlocking {\n    val channel = Channel<Int>(Channel.UNLIMITED)\n    // 生产者\n    val producer = GlobalScope.launch {\n        for (i in 1..5) {\n            val element = i * i\n            println(\"send $element.\")\n            channel.send(element)\n        }\n    }\n    // 消费者\n    val consumer = GlobalScope.launch {\n//            val it = channel.iterator()\n//            while (it.hasNext()) {\n//                val element = it.next()\n//                println(\"receive $element.\")\n//                delay(2000)\n//            }\n\n        for (element in channel) {\n            println(\"receive $element.\")\n            delay(2000)\n        }\n    }\n    joinAll(producer, consumer)\n}\n\n// 打印结果\nsend 1.\nsend 4.\nsend 9.\nsend 16.\nsend 25.\nreceive 1.\nreceive 4.\nreceive 9.\nreceive 16.\nreceive 25.\n```\n\n#### produce 与 actor\n\n- 构造生产者与消费者的**便捷方法**。\n- 我们可以通过 produce 方法启动一个生产者协程，并返回一个 ReceiveChannel，其它协程就可以用这个 Channel 来接收数据了。反过来，我们可以用 actor 启动一个消费者协程。\n\n```kotlin\n@Test\nfun `test fast producer Channel`() = runBlocking {\n    val receiveChannel: ReceiveChannel<Int> = GlobalScope.produce {\n        repeat(5) {\n            delay(1000)\n            send(it)\n        }\n    }\n    val consumer = GlobalScope.launch {\n        for (element in receiveChannel) {\n            println(\"receive $element.\")\n        }\n    }\n    consumer.join()\n}\n\n// 打印结果\nreceive 0.\nreceive 1.\nreceive 2.\nreceive 3.\nreceive 4.\n```\n\n```kotlin\n@Test\nfun `test fast consumer Channel`() = runBlocking {\n    val sendChannel: SendChannel<Int> = GlobalScope.actor<Int> {\n        while (true) {\n            val element = receive()\n            println(\"receive $element.\")\n        }\n    }\n    val producer = GlobalScope.launch {\n        for (i in 0..3) {\n            sendChannel.send(i)\n        }\n    }\n    producer.join()\n}\n\n// 打印结果\nreceive 0.\nreceive 1.\nreceive 2.\nreceive 3.\n```\n\n#### Channel 的关闭\n\n- produce 和 actor 返回的 Channel 都会随着对应的协程执行完毕而关闭，也正是这样，Channel 才被称为**热数据流**。\n- 对于一个 Channel，如果我们调用了它的 close 方法，它会立即停止接收新元素，也就是说这时它的 **isClosedForSend** 会立即返回 true。而由于 Channel 缓冲区的存在，这时候可能还有一些元素没有被处理完，因此要等所有的元素都被读取之后 isCloseForReceive 才会返回 true。\n- Channel 的生命周期最好由主导方来维护，建议**由主导的一方实现关闭**。\n\n```kotlin\n@Test\nfun `test close Channel`() = runBlocking {\n    val channel = Channel<Int>(3)\n    // 生产者\n    val producer = GlobalScope.launch {\n        List(3) {\n            println(\"send $it.\")\n            channel.send(it)\n        }\n        channel.close()\n        println(\"Close Channel. | - ClosedForSend: ${channel.isClosedForSend}. | - ClosedForReceive: ${channel.isClosedForReceive}.\")\n    }\n    // 消费者\n    val consumer = GlobalScope.launch {\n        for (element in channel) {\n            println(\"receive $element.\")\n            delay(1000)\n        }\n        println(\"After Consuming. | - ClosedForSend: ${channel.isClosedForSend}. | - ClosedForReceive: ${channel.isClosedForReceive}.\")\n    }\n    joinAll(producer, consumer)\n}\n\n// 打印结果\nsend 0.\nsend 1.\nsend 2.\nreceive 0.\nClose Channel. | - ClosedForSend: true. | - ClosedForReceive: false.\nreceive 1.\nreceive 2.\nAfter Consuming. | - ClosedForSend: true. | - ClosedForReceive: true.\n```\n\n#### BroadcastChannel\n\n前面提到，发送端和接收端在 Channel 中存在一对多的情形，从数据处理本身来讲，虽然有多个接收端，但是同一个元素只会被一个接收端读到。广播则不然，**多个接收端不存在互斥行为**。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1666502596729.jpg) \n\n```kotlin\n@Test\nfun `test broadcastChannel`() = runBlocking {\n//        val broadcastChannel = BroadcastChannel<Int>(Channel.BUFFERED)\n    val channel = Channel<Int>()\n    val broadcastChannel = channel.broadcast(3)\n    val producer = GlobalScope.launch {\n        List(3) {\n            delay(100)\n            broadcastChannel.send(it)\n        }\n        broadcastChannel.close()\n    }\n    List(3) { index ->\n        GlobalScope.launch {\n            val receiveChannel = broadcastChannel.openSubscription()\n            for (i in receiveChannel) {\n                println(\"[#$index] receive: $i.\")\n            }\n        }\n    }.joinAll()\n}\n\n// 打印结果\n[#2] receive: 0.\n[#0] receive: 0.\n[#1] receive: 0.\n[#1] receive: 1.\n[#2] receive: 1.\n[#0] receive: 1.\n[#1] receive: 2.\n[#2] receive: 2.\n[#0] receive: 2.\n```\n\n### select - 多路复用\n\n#### 什么是多路复用\n\n数据通信系统或计算机网络系统中，传输媒体的带宽或容量往往会大于传输单一信号的需求，为了有效地利用通信线路，希望**一个信道同时传输多路信号**，这就是所谓的多路复用技术（Multiplexing）。\n\n#### 复用多个 await\n\n两个 API 分别从网络和本地缓存获取数据，期望哪个先返回就先用哪个做展示。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1666531343879.png)  \n\n```kotlin\ndata class Response<T>(val value: T, val isLocal: Boolean)\n\ndata class User(val name: String, val address: String)\n\nfun CoroutineScope.getUserFromLocal(name: String) = async(Dispatchers.IO) {\n    delay(1000)\n    User(name, \"Local\")\n}\n\nfun CoroutineScope.getUserFromServer(name: String) = async(Dispatchers.IO) {\n    delay(2000)\n    User(name, \"Server\")\n}\n\n@Test\nfun `test select await`() = runBlocking {\n    GlobalScope.launch {\n        val localRequest = getUserFromLocal(\"AAA\")\n        val serverRequest = getUserFromServer(\"BBB\")\n\n        val userResponse = select<Response<User>> {\n            localRequest.onAwait { Response(it, true) }\n            serverRequest.onAwait { Response(it, false) }\n        }\n\n        userResponse.value.let {\n            println(it)\n        }\n    }.join()\n}\n\n// 打印结果\nUser(name=AAA, address=Local)\n```\n\n#### 复用多个 Channel\n\n跟 await 类似，会接收到最快的那个 Channel 消息。\n\n```kotlin\n@Test\nfun `test select Channel`() = runBlocking {\n    val channels = listOf(Channel<Int>(), Channel<Int>())\n    GlobalScope.launch {\n        delay(100)\n        channels[0].send(200)\n    }\n    GlobalScope.launch {\n        delay(50)\n        channels[1].send(100)\n    }\n    val result = select<Int?> {\n        channels.forEach { channel ->\n            channel.onReceive { it }\n        }\n    }\n    println(result)\n}\n\n// 打印结果\n100\n```\n\n#### SelectClause\n\n我们怎么知道哪些事件可以被 **select** 呢？其实所有能够被 select 的事件都是 **SelectClauseN** 类型，包括：\n\n- **SelectClause0**：对应事件没有返回值，例如 join 没有返回值，对应的 onJoin 就是这个类型，使用时 onJoin 的参数是一个无参函数。\n\n- **SelectClause1**：对应事件有返回值，前面的 onAwait 和 onReceive 都是此类情况。\n- **SelectClause2**：对应事件有返回值，此外还需要额外的一个参数，例如 Channel.onSend 有两个参数，第一个就是一个 Channel 数据类型的值，表示即将发送的值，第二个是发送成功时的回调。\n\n如果我们想要确认挂起函数是否支持 select，只需要查看其是否存在对应的 SelectClauseN 即可。\n\n```kotlin\n@Test\nfun `test SelectClause0`() = runBlocking {\n    val job1 = GlobalScope.launch {\n        println(\"job 1\")\n        delay(100)\n    }\n    val job2 = GlobalScope.launch {\n        println(\"job 2\")\n        delay(10)\n    }\n    select<Unit> {\n        job1.onJoin {\n            println(\"job 1 onJoin\")\n        }\n        job2.onJoin {\n            println(\"job 2 onJoin\")\n        }\n    }\n}\n\n// 打印结果\njob 1\njob 2\njob 2 onJoin\n```\n\n```kotlin\n@Test\nfun `test SelectClause2`() = runBlocking {\n    val channels = listOf(Channel<Int>(), Channel<Int>())\n    println(channels)\n    launch(Dispatchers.IO) {\n        select {\n            launch {\n                delay(10)\n                channels[1].onSend(200) { sentChannel ->\n                    println(\"sent on $sentChannel\")\n                }\n            }\n            launch {\n                delay(100)\n                channels[0].onSend(100) { sentChannel ->\n                    println(\"sent on $sentChannel\")\n                }\n            }\n        }\n    }\n\n    GlobalScope.launch {\n        println(channels[0].receive())\n    }\n    GlobalScope.launch {\n        println(channels[1].receive())\n    }\n\n    delay(1000)\n}\n\n// 打印结果\n[RendezvousChannel@24c4ddae{EmptyQueue}, RendezvousChannel@766653e6{EmptyQueue}]\n200\nsent on RendezvousChannel@766653e6{EmptyQueue}\n```\n\n#### 使用 Flow 实现多路复用\n\n多数情况下，我们可以通过构造合适的 Flow 来实现多路复用的效果。\n\n```kotlin\n@Test\nfun `test select flow`() = runBlocking {\n    // 函数 -> 协程 -> Flow -> Flow 合并\n    val name = \"guest\"\n    coroutineScope {\n        listOf(::getUserFromLocal, ::getUserFromServer)\n            .map { function ->\n                function.call(name)\n            }.map { deferred ->\n                flow {\n                    emit(deferred.await())\n                }\n            }.merge()\n            .collect { user ->\n                println(user)\n            }\n    }\n}\n\n// 打印结果\nUser(name=guest, address=Local)\nUser(name=guest, address=Server)\n```\n\n### 并发安全\n\n由于协程是基于线程的，既然线程有并发问题，那么协程也一定有。\n\n#### 不安全的并发访问\n\n我们使用线程在解决并发问题的时候总是会遇到线程安全问题，而 Java 平台上的 Kotlin 协程实现免不了存在并发调度的情况，因此线程安全同样值得留意。\n\n```kotlin\n@Test\nfun `test not safe concurrent`() = runBlocking {\n    var count = 0\n    List(10000) {\n        GlobalScope.launch {\n            count++\n        }\n    }.joinAll()\n    println(count)\n}\n\n// 打印结果（每次打印可能不一样）\n9997\n```\n\nJava API 中安全的并发访问：\n\n```kotlin\n@Test\nfun `test safe concurrent`() = runBlocking {\n    var count = AtomicInteger(0)\n    List(10000) {\n        GlobalScope.launch {\n            count.incrementAndGet()\n        }\n    }.joinAll()\n    println(count.get())\n}\n\n// 打印结果（每次打印都一样）\n10000\n```\n\n#### 协程的并发工具\n\n除了我们在线程中常用的解决并发问题的手段之外，协程框架也提供了一些并发安全的工具，包括：\n\n- **Channel**：并发安全的消息通道，我们已经非常熟悉。\n- **Mutex**：轻量级锁，它的 lock 和 unlock 从语义上与线程锁比较类似，之所以轻量是因为它在获取不到锁时不会阻塞线程，而是挂起等待锁的释放。\n- **Semaphore**：轻量级信号量，信号量可以有多个，协程在获取到信号量后即可执行并发操作。当 Semaphore 的参数为 1 时，效果等价于 Mutex。\n\n```kotlin\n@Test\nfun `test safe concurrent tools`() = runBlocking {\n    var count = 0\n    val mutex = Mutex()\n    List(10000) {\n        GlobalScope.launch {\n            mutex.withLock {\n                count++\n            }\n        }\n    }.joinAll()\n    println(count)\n}\n\n// 打印结果（每次打印都一样）\n10000\n```\n\n```kotlin\n@Test\nfun `test safe concurrent tools2`() = runBlocking {\n    var count = 0\n    val semaphore = Semaphore(1)\n    List(10000) {\n        GlobalScope.launch {\n            semaphore.withPermit {\n                count++\n            }\n        }\n    }.joinAll()\n    println(count)\n}\n```\n\n#### 避免访问外部可变状态\n\n编写函数时要求它不得访问外部状态，只能基于参数做运算，通过返回值提供运算结果。\n\n```kotlin\n@Test\nfun `test avoid access outer variable`() = runBlocking {\n    var count = 0\n    val result = count + List(10000) {\n        GlobalScope.async { 1 }\n    }.map {\n        it.await()\n    }.sum()\n    println(result)\n}\n\n// 打印结果（每次打印都一样）\n10000\n```\n\n### 冷流还是热流\n\n- Flow 是冷流，什么是冷流？简单来说，如果 Flow 有了订阅者 Collector 以后，发射出来的值才会实实在在的存在于内存之中，这跟懒加载的概念很像。\n- 与之相对的是热流，StateFlow 和 SharedFlow 是热流，在垃圾回收之前，都是存在于内存之中，并且处于活跃状态的。\n\n### StateFlow\n\nStateFlow 是一个状态容器式**可观察数据流**，可以向其收集器发出当前状态更新和新状态更新。还可通过其 value 属性读取当前状态。\n\n```kotlin\nclass NumberViewModel : ViewModel() {\n\n    // StateFlow 与 LiveData 很像，但能使用 Flow 的操作符。\n    val number = MutableStateFlow(0)\n\n    fun increment() {\n        number.value++\n    }\n\n    fun decrement() {\n        number.value--\n    }\n}\n```\n\n```kotlin\nclass NumberFragment : Fragment() {\n\n    private val mNumberViewModel: NumberViewModel by viewModels()\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        btnPlus.setOnClickListener {\n            // 加法\n            mNumberViewModel.increment()\n        }\n        \n        btnMinus.setOnClickListener {\n            // 减法\n            mNumberViewModel.decrement()\n        }\n\n        lifecycleScope.launch {\n            // 收集数据\n            mNumberViewModel.number.collect {\n                tvNumber.text = it.toString()\n            }\n        }\n    }\n}\n```\n\n### SharedFlow\n\nSharedFlow 会向从其中收集值的所有使用方发出数据。\n\n```kotlin\n/**\n * 使用 SharedFlow 模拟 EventBus 收发数据\n */\nobject LocalEventBus {\n\n    val events = MutableSharedFlow<Event>()\n\n    suspend fun postEvent(event: Event) {\n        // 发送数据\n        events.emit(event)\n    }\n}\n\ndata class Event(val timestamp: Long)\n```\n\n```kotlin\nclass SharedViewModel : ViewModel() {\n\n    private var job: Job? = null\n\n    /**\n     * 开始刷新数据\n     */\n    fun startRefresh() {\n        // 开启协程\n        job = viewModelScope.launch(Dispatchers.IO) {\n            // 发送数据\n            while (true) {\n                LocalEventBus.postEvent(Event(System.currentTimeMillis()))\n            }\n        }\n    }\n\n    /**\n     * 停止刷新数据\n     */\n    fun stopRefresh() {\n        // 关闭协程\n        job?.cancel()\n    }\n}\n```\n\n```kotlin\n/**\n * 发送数据界面\n */\nclass SharedFlowFragment : Fragment() {\n\n    private val mSharedViewModel: SharedViewModel by viewModels()\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        btnStart.setOnClickListener {\n            // 发送[开始刷新数据]指令\n            mSharedViewModel.startRefresh()\n        }\n        btnStop.setOnClickListener {\n            // 发送[停止刷新数据]指令\n            mSharedViewModel.stopRefresh()\n        }\n    }\n}\n```\n\n```kotlin\n/**\n * 收集数据界面\n */\nclass TextsFragment : Fragment() {\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n \t    lifecycleScope.launch {\n            // 收集数据\n            LocalEventBus.events.collect {\n                textView.text = \"${tag}: ${it.timestamp}\"\n            }\n        }\n    }\n}\n```\n\n### Flow 的应用\n\n#### Flow 与文件下载的应用\n\n```kotlin\n/**\n * 下载状态\n */\nsealed class DownloadStatus {\n\n    // 空状态\n    object None : DownloadStatus()\n\n    // 下载进度\n    data class Progress(val value: Int) : DownloadStatus()\n\n    // 错误\n    data class Error(val throwable: Throwable) : DownloadStatus()\n\n    // 完成\n    data class Done(val file: File) : DownloadStatus()\n}\n```\n\n```kotlin\n/**\n * 下载文件管理类\n */\nobject DownloadManager {\n\n    /**\n     * 下载文件\n     * @param url String 远程文件地址\n     * @param file File 下载到的本地文件\n     * @return Flow<DownloadStatus>\n     */\n    fun download(url: String, file: File): Flow<DownloadStatus> {\n        return flow {\n            val request = Request.Builder().url(url).get().build()\n            val response = OkHttpClient.Builder().build().newCall(request).execute()\n            if (response.isSuccessful) {\n                response.body()!!.let { body ->\n                    val total = body.contentLength()\n                    // 文件读写\n                    file.outputStream().use { outputStream ->\n                        val inputStream = body.byteStream()\n                        var emittedProgress = 0L\n                        inputStream.copyTo(outputStream) { bytesCopied ->\n                            val progress = bytesCopied * 100 / total\n                            if (progress - emittedProgress > 5) {\n                                delay(100)\n                                emit(DownloadStatus.Progress(progress.toInt()))\n                                emittedProgress = progress\n                            }\n                        }\n                    }\n                }\n                emit(DownloadStatus.Done(file))\n            } else {\n                throw IOException(response.toString())\n            }\n        }.catch {\n            file.delete()\n            emit(DownloadStatus.Error(it))\n        }.flowOn(Dispatchers.IO)\n    }\n}\n```\n\n```kotlin\n/**\n * 扩展方法 读写文件并返回下载进度\n * @receiver InputStream\n * @param out OutputStream\n * @param bufferSize Int\n * @param progress Function1<Long, Unit>\n * @return Long\n */\ninline fun InputStream.copyTo(out: OutputStream, bufferSize: Int = DEFAULT_BUFFER_SIZE, progress: (Long) -> Unit): Long {\n    var bytesCopied: Long = 0\n    val buffer = ByteArray(bufferSize)\n    var bytes = read(buffer)\n    while (bytes >= 0) {\n        out.write(buffer, 0, bytes)\n        bytesCopied += bytes\n        bytes = read(buffer)\n\n        progress(bytesCopied)\n    }\n    return bytesCopied\n}\n```\n\n```kotlin\n/**\n * 下载文件界面\n */\nclass DownloadFragment : Fragment() {\n\n    private val URL = \"https://img1.baidu.com/it/u=413643897,2296924942&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=500\"\n\n    private fun download() {\n        // sdcard/Android/data/com.zch.flowpractice/files/pic.png\n        val file = File(requireActivity().getExternalFilesDir(null)?.path, \"pic.jpg\")\n        lifecycleScope.launch {\n            DownloadManager.download(URL, file).collect { status ->\n                when (status) {\n                    is DownloadStatus.Progress -> {\n                        progressBar.progress = status.value\n                        tvProgress.text = \"${status.value}%\"\n                    }\n\n                    is DownloadStatus.Error -> {\n                        ToastUtils.showLong(\"下载错误\")\n                    }\n\n                    is DownloadStatus.Done -> {\n                        progressBar.progress = 100\n                        tvProgress.text = \"100%\"\n                        ToastUtils.showShort(\"下载完成\")\n                    }\n\n                    else -> {\n                        ToastUtils.showShort(\"下载失败\")\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### Flow 与 Room 的应用\n\n```Kotlin\n/**\n * Room 实体类声明\n */\n@Entity\ndata class User(\n    // 主键\n    @PrimaryKey\n    val uid: Int,\n    // 数据库里存入的字段名\n    @ColumnInfo(name = \"first_name\")\n    val firstName: String,\n    // 数据库里存入的字段名\n    @ColumnInfo(name = \"last_name\")\n    val lastName: String\n)\n```\n\n```kotlin\n/**\n * Dao 类声明\n */\n@Dao\ninterface UserDao {\n    // 这里设置了一下冲突，如果两条记录相同则会替换\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(user: User)\n\n    // 这里不需要挂起（返回 Flow 或 LiveData 都不需要）\n    @Query(\"SELECT * FROM user\")\n    fun getAll(): Flow<List<User>>\n}\n```\n\n```kotlin\n/**\n * 数据库操作类\n * \n * entities      数据库里存入的表，可是多个\n * version       数据库的版本号\n * exportSchema  是否生成 json 文件，用于查看数据库的结构\n */\n@Database(entities = [User::class], version = 1, exportSchema = false)\nabstract class AppDataBase : RoomDatabase() {\n\n    /**\n     * Dao 对象\n     */\n    abstract fun UserDao(): UserDao\n\n    companion object {\n        private var instance: AppDataBase? = null\n\n        fun getInstance(context: Context): AppDataBase {\n            // 对象锁\n            return instance ?: synchronized(this) {\n                Room.databaseBuilder(context, AppDataBase::class.java, \"user_db\")\n                    .build().also { instance = it }\n            }\n        }\n    }\n}\n```\n\n```kotlin\n/**\n * User ViewModel\n */\nclass UserViewModel(app: Application) : AndroidViewModel(app) {\n\n    /**\n     * 插入数据\n     * @param user User\n     */\n    fun insert(user: User) {\n        viewModelScope.launch {\n            AppDataBase.getInstance(getApplication()).UserDao().insert(user)\n        }\n    }\n\n    /**\n     * 获取所有数据\n     * @return Flow<List<User>>\n     */\n    fun getAll(): Flow<List<User>> {\n        return AppDataBase.getInstance(getApplication()).UserDao().getAll()\n            .catch { e ->\n                e.printStackTrace()\n            }.flowOn(Dispatchers.IO)\n    }\n}\n```\n\n```kotlin\n/**\n * 用户界面\n */\nclass UserFragment : BaseBindingFragment() {\n\n    private val mBinding: FragmentUserBinding by lazy {\n        FragmentUserBinding.inflate(layoutInflater)\n    }\n\n    private val mUserAdapter: UserAdapter by lazy {\n        UserAdapter()\n    }\n\n    private val mUserViewModel: UserViewModel by viewModels()\n\n    override fun getBindingRoot() = mBinding.root\n\n    override fun initView() {\n        mBinding.rvUser.adapter = mUserAdapter\n    }\n\n    override fun initEvent() {\n        mBinding.btnAddUser.setOnClickListener {\n            mBinding.run {\n                // 插入数据\n                mUserViewModel.insert(\n                    User(\n                        edtUid.text.toString().toInt(),\n                        edtFirstName.text.toString(),\n                        edtLastName.text.toString()\n                    )\n                )\n            }\n        }\n    }\n\n    override fun initData() {\n        lifecycleScope.launch {\n            // 获取所有数据\n            mUserViewModel.getAll().collect {\n                mUserAdapter.submitList(it)\n            }\n        }\n    }\n}\n```\n\n#### Flow 与 Retrofit 的应用\n\n```kotlin\n/**\n * 文章实体类\n * @property id 文章 id\n * @property text 文章内容\n */\ndata class Article(val id: Int, val text: String)\n```\n\n```kotlin\n/**\n * 文章接口\n */\ninterface ArticleApi {\n\n    @GET(\"article\")\n    suspend fun searchArticle(@Query(\"key\") key: String): List<Article>\n}\n```\n\n```kotlin\n/**\n * Retrofit 网络请求管理类\n */\nobject RetrofitClient {\n\n    private const val URL = \"\"\n\n    private val instance: Retrofit by lazy {\n        Retrofit.Builder()\n            .client(OkHttpClient.Builder().build())\n            .baseUrl(URL)\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n    }\n\n    val articleApi: ArticleApi by lazy {\n        instance.create(ArticleApi::class.java)\n    }\n}\n```\n\n```kotlin\n/**\n * 文章 ViewModel\n */\nclass ArticleViewModel : ViewModel() {\n\n    val articles = MutableLiveData<List<Article>>()\n\n    fun searchArticle(key: String) {\n        viewModelScope.launch(Dispatchers.Main) {\n            flow {\n                val list = RetrofitClient.articleApi.searchArticle(key)\n                emit(list)\n            }.flowOn(Dispatchers.IO)\n                .catch { e -> e.printStackTrace() }\n                .collect {\n                    articles.value = it\n                }\n        }\n    }\n}\n```\n\n```kotlin\n/**\n * 文章界面\n */\nclass ArticleFragment : BaseBindingFragment() {\n\n    private val articleViewModel by viewModels<ArticleViewModel>()\n\n    private val mBinding: FragmentArticleBinding by lazy {\n        FragmentArticleBinding.inflate(layoutInflater)\n    }\n\n    override fun getBindingRoot() = mBinding.root\n\n    override fun initView() {\n    }\n\n    override fun initEvent() {\n    }\n\n    override fun initData() {\n        // 请求数据\n        articleViewModel.searchArticle(\"三国演义\")\n        \n        // 监听数据据返回\n        articleViewModel.articles.observe(viewLifecycleOwner) {\n\n        }\n    }\n}\n```\n","source":"_posts/Kotlin-协程.md","raw":"---\ntitle: Kotlin 协程\ndate: 2023-08-08 22:25:00\ncategories: \"Kotlin\"\ntags:\n     - Android\n     - Kotlin\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n### 协程是什么\n\n协程基于线程，它是轻量级线程。\n\n- 协程让**异步逻辑同步化**，杜绝回调地狱。\n- 协程最核心的点就是，函数或者一段程序能够被**挂起**，稍后再在挂起的位置**恢复**。\n\n### 在 Android 中协程用来解决什么问题\n\n- **处理耗时任务**，这种任务常常会阻塞主线程。\n- **保证主线程安全**，即安全地从主线程调用任务 suspend 函数。\n\n### 协程的挂起和恢复\n\n常规函数基础操作包括：invoke（或 call）和 return，协程增加了 suspend 和 resume。\n\n- suspend：也称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量。\n- resume：用于让已暂停的协程从其暂停处继续执行。\n\n### 挂起与阻塞的区别\n\n```kotlin\nGlobalScope.launch(Dispatchers.Main) {\n    // 挂起\n    delay(5000)\n    Log.d(\"tag\", \"${Thread.currentThread().name}:after delay.\")\n}\n\n// 阻塞\nThread.sleep(5000)\nLog.d(\"tag\", \"${Thread.currentThread().name}:after sleep.\")\n```\n\n### 挂起函数\n\n- 使用 suspend 关键字修饰的函数叫做挂起函数。\n- 挂起函数只能在**协程体内**或**其它挂起函数内**调用。\n\n### 协程的两部分\n\nKotlin 的协程实现分为两个层次：\n\n- 基础设施层，标准库的协程 API，主要对协程提供了概念和语义上最基本的支持。\n- 业务框架层，协程的上层框架支持。\n\n基础设施层的一个 demo：\n\n```kotlin\nimport kotlin.coroutines.*\n\n// 协程体\nval continuation = suspend {\n    5\n}.createCoroutine(object : Continuation<Int> {\n\n    override val context: CoroutineContext = EmptyCoroutineContext\n\n    override fun resumeWith(result: Result<Int>) {\n        println(\"Coroutine End: $result\")\n    }\n})\n\ncontinuation.resume(Unit)\n```\n\n基础设施层使用的是 `kotlin.coroutines.*` 而业务框架层使用的是 `kotlinx.coroutines.*`。\n\n### 调度器\n\n所有协程必须在调度器中运行，即使它们在主线程上运行也是如此。\n\n- **Dispatchers.Main**。Android 上的主线程，用来处理 UI 交互和一些轻量级任务（调用 suspend 函数；调用 UI 函数；更新 LiveData）。\n\n- **Dispatchers.IO**。非主线程，专为磁盘和网络 IO 进行了优化（数据库；文件读写；网络处理）。\n\n- **Dispatchers.Default**。非主线程，专为 CPU 密集型任务进行了优化（数组排序；JSON 数据解析；处理差异判断）。\n\n### 任务泄漏\n\n- 当某个协程任务丢失，无法追踪，会导致内存、CPU、磁盘等资源浪费，甚至发送一个无用的网络请求，这种情况称为任务泄漏。\n- 为了能够避免协程泄漏，Kotlin 引入了结构化并发机制。\n\n### 结构化并发\n\n使用结构化并发可以做到：\n\n- 取消任务，当某项任务不再需要时，取消它。\n- 追踪任务，当任务正在执行时，追踪它。\n- 发出错误信号，当协程失败时，发出错误信号表明有错误发生。\n\n### CoroutineScope\n\n1、定义协程必须指定其 CoroutineScope，它会跟踪所有协程，同样它还可以**取消由它所启动的所有协程**。\n\n2、常用的相关 API 有：\n\n- **GlobalScope**，生命周期是 process 级别的，即使 Activity 或 Fragment 已经被销毁，协程仍然在执行。\n- **MainScope**，在 Activity 中使用，可以在 onDestroy() 中取消协程。\n- **viewModelScope**，只能在 ViewModel 中使用，绑定 ViewModel 生命周期。\n- **lifecycleScope**，只能在 Activity、Fragment 中使用，会绑定 Activity 和 Fragment 的生命周期。\n\n### MainScope 使用\n\n```kotlin\nclass CoroutineActivity : AppCompatActivity(), CoroutineScope by MainScope() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_coroutine)\n\n        submit()\n    }\n\n    private fun submit() {\n        btnSubmit?.setOnClickListener {\n            launch {\n                try {\n                    delay(5000)\n                } catch (e: Exception) {\n                    /**\n                     * 取消协程会抛出异常\n                     * kotlinx.coroutines.JobCancellationException: Job was cancelled; job=SupervisorJobImpl{Cancelling}@7e7375b\n                     */\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    override fun onDestroy() {\n        cancel()\n        super.onDestroy()\n    }\n}\n```\n\n### 协程构建器\n\nlaunch 和 async 构建器都可以用来启动新协程：\n\n- **launch**，返回一个 Job 并且不附带任何结果值。\n- **async**，返回一个 Deferred，Deferred 也是一个 Job，可以使用 .await() 在一个延期的值上得到它的最终结果。\n\n等待一个作业：\n\n- join 和 await。\n- 组合并发。\n\n测试构建器：\n\n```kotlin\n@Test\nfun `coroutine builder`() = runBlocking {\n    val job1 = launch {\n        delay(200)\n        println(\"job1 finished.\")\n    }\n\n    val job2 = async {\n        delay(200)\n        println(\"job2 finished.\")\n        \"job2 result\"\n    }\n    println(job2.await())\n}\n\n// 打印结果\njob1 finished.\njob2 finished.\njob2 result\n```\n\n> runBlocking 把当前线程包装成一个协程，它会阻塞当前线程等待子协程执行完再结束。\n\n### join 和 await 等待协程作业\n\n测试 join：\n\n```kotlin\n@Test\nfun `coroutine join`() = runBlocking {\n    val job1 = launch {\n        delay(2000)\n        println(\"One\")\n    }\n    job1.join()\n    val job2 = launch {\n        delay(200)\n        println(\"Two\")\n    }\n    val job3 = launch {\n        delay(200)\n        println(\"Three\")\n    }\n}\n\n// 打印结果\nOne\nTwo\nThree\n```\n\n测试 await：\n\n```kotlin\n@Test\nfun `coroutine await`() = runBlocking {\n    val job1 = async {\n        delay(2000)\n        println(\"One\")\n    }\n    job1.await()\n    val job2 = async {\n        delay(200)\n        println(\"Two\")\n    }\n    val job3 = async {\n        delay(200)\n        println(\"Three\")\n    }\n}\n\n// 打印结果\nOne\nTwo\nThree\n```\n\n### async 组合并发\n\n测试同步 sync：\n\n```kotlin\n@Test\nfun `coroutine sync`() = runBlocking {\n    val time = measureTimeMillis {\n        val one = doOne()\n        val two = doTwo()\n        println(\"The result:${one + two}\")\n    }\n    println(\"Completed in $time ms\")\n}\n\nprivate suspend fun doOne(): Int {\n    delay(1000)\n    return 1\n}\n\nprivate suspend fun doTwo(): Int {\n    delay(1000)\n    return 1\n}\n\n// 打印结果\nThe result:2\nCompleted in 2018 ms\n```\n\n测试异步 async：\n\n```kotlin\n@Test\nfun `coroutine async`() = runBlocking {\n    val time = measureTimeMillis {\n        val one = async {\n            doOne()\n        }\n        val two = async {\n            doTwo()\n        }\n        println(\"The result:${one.await() + two.await()}\")\n\n        /* 以下形式，结果是 2m。\n        val one = async {\n            doOne()\n        }.await()\n        val two = async {\n            doTwo()\n        }.await()\n        println(\"The result:${one + two}\")*/\n    }\n    println(\"Completed in $time ms\")\n}\n\n// 打印结果\nThe result:2\nCompleted in 1034 ms\n```\n\n### 协程的启动模式\n\n- **DEFAULT**：协程创建后，立即开始调度，在调度前如果协程被取消，其将直接进入取消响应的状态。\n\n  ```kotlin\n  @Test\n  fun `start mode DEFAULT`() = runBlocking {\n      val job = launch(start = CoroutineStart.DEFAULT) {\n          delay(5000)\n          println(\"Job finished.\")\n      }\n      delay(1000)\n      job.cancel()\n  }\n  \n  // 什么也不打印\n  ```\n\n- **ATOMIC**：协程创建后，立即开始调度，协程执行到第一个挂起点之前不响应取消。\n\n  ```kotlin\n  @Test\n  fun `start mode ATOMIC`() = runBlocking {\n      val job = launch(start = CoroutineStart.ATOMIC) {\n          var count = 0\n          val time = measureTimeMillis {\n              for (i in 0 until 2100000000) {\n                  if (i % 2 == 0) {\n                      count++\n                  }\n              }\n          }\n          println(\"Before delay $time ms. count=$count\")\n          delay(5000)\n          println(\"Job finished.\")\n      }\n      delay(1000)\n      job.cancel()\n  }\n  \n  // 打印结果\n  Before delay 1513 ms, count=1050000000.\n  ```\n\n- **LAZY**：只有协程被需要时，包括主动调用协程的 start、join 或者 await 等函数时才会开始调度，如果调度前就被取消，那么该协程将直接进入异常结束状态。\n\n  ```kotlin\n  @Test\n  fun `start mode LAZY`() = runBlocking {\n      val job = async (start = CoroutineStart.LAZY) {\n          delay(2000)\n          println(\"Job finished.\")\n      }\n      // 调度前就取消，会抛出异常 kotlinx.coroutines.JobCancellationException\n      job.cancel()\n      job.await()\n  }\n  ```\n\n- **UNDISPATCHED**：协程创建后立即在**当前函数调用栈**中执行，直到遇到第一个真正挂起的点。\n\n  ```kotlin\n  @Test\n  fun `start mode UNDISPATCHED`() = runBlocking {\n      val job = async(context = Dispatchers.IO, start = CoroutineStart.UNDISPATCHED) {\n          println(\"thread1: ${Thread.currentThread().name}\")\n          delay(1000)\n          println(\"thread2: ${Thread.currentThread().name}\")\n      }\n  }\n  \n  // 打印结果\n  thread1: Test worker @coroutine#2\n  thread2: DefaultDispatcher-worker-1 @coroutine#2\n  ```\n\n\n### 协程的作用域构建器\n\n#### coroutineScope 与 runBlocking\n\n- runBlocking 是常规函数，而 coroutineScope 是挂起函数。\n- 它们都会等待其协程体结束，主要区别在于 runBlocking 会阻塞当前线程来等待，而 coroutineScope 只是挂起，会释放底层线程用于其它用途。\n\n```kotlin\n@Test\nfun `coroutine coroutineScope builder`() = runBlocking {\n    coroutineScope {\n        val job1 = launch {\n            delay(400)\n            println(\"job1 finished.\")\n        }\n        val job2 = async {\n            delay(200)\n            println(\"job2 finished.\")\n            throw IllegalArgumentException()\n        }\n    }\n}\n\n// 打印结果\njob2 finished.\n\njava.lang.IllegalArgumentException...\n```\n\n#### coroutineScope 与 supervisorScope\n\n- coroutineScope：一个协程失败了，所有其它兄弟协程也会被取消。\n- supervisorScope：一个协程失败了，不会影响其它兄弟协程。\n\n```kotlin\n@Test\nfun `coroutine supervisorScope builder`() = runBlocking {\n    supervisorScope {\n        val job1 = launch {\n            delay(400)\n            println(\"job1 finished.\")\n        }\n        val job2 = async {\n            delay(200)\n            println(\"job2 finished.\")\n            throw IllegalArgumentException()\n        }\n    }\n}\n\n// 打印结果\njob2 finished.\njob1 finished.\n```\n\n### Job 对象\n\n- 对于每一个创建的协程（通过 launch 或者 async），会返回一个 Job 实例，该实例是协程的唯一标示，并且负责管理协程的生命周期。\n- 一个任务可以包含一系列状态：新创建（**New**）、活跃（**Active**）、完成中（**Completing**）、已完成（**Completed**）、取消中（**Cancelling**）和已取消（**Cancelled**）。虽然我们无法直接访问这些状态，但是我们可以访问 Job 的属性：isActive、isCancelled 和 isCompleted。\n\n### Job 的生命周期\n\n如果协程处于活跃状态，协程运行出错或者调用 job.cancel() 都会将当前任务置为取消中（Cancelling）状态（isActive = false，isCancelled = true）。当所有的子协程都完成后，协程会进入已取消（Cancelled）状态，此时 isCompleted = true。\n\n![](https://gitee.com/zch0304/images/raw/master/note/676350c3f83e92cda2f87c2b90471451.png) \n\n### 协程的取消\n\n- 取消作用域会取消它的子协程。\n\n  ```kotlin\n  @Test\n  fun `scope cancel`() = runBlocking {\n      val scope = CoroutineScope(Dispatchers.Default)\n      scope.launch {\n          delay(1000)\n          println(\"job1.\")\n      }\n      scope.launch {\n          delay(1000)\n          println(\"job2.\")\n      }\n      delay(100)\n      scope.cancel()\n      delay(2000)\n  }\n  \n  // 无打印结果\n  ```\n\n- 被取消的子协程不会影响其余兄弟协程。\n\n  ```kotlin\n  @Test\n  fun `brother cancel`() = runBlocking {\n      val scope = CoroutineScope(Dispatchers.Default)\n      val job1 = scope.launch {\n          delay(1000)\n          println(\"job1.\")\n      }\n      val job2 = scope.launch {\n          delay(1000)\n          println(\"job2.\")\n      }\n      delay(100)\n      job1.cancel()\n      delay(2000)\n  }\n  \n  // 打印结果\n  job2.\n  ```\n\n- 协程通过抛出一个特殊的异常 CancellationException 来处理取消操作。\n\n  ```kotlin\n  @Test\n  fun `CancellationException`() = runBlocking {\n      val job1 = GlobalScope.launch {\n          try {\n              delay(1000)\n              println(\"job1.\")\n          } catch (e: Exception) {\n              e.printStackTrace()\n          }\n      }\n      delay(100)\n      /* job1.cancel(CancellationException(\"取消\"))\n       job1.join()*/\n      job1.cancelAndJoin()\n  }\n  \n  // 打印结果\n  kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled;\n  ```\n\n- 所有 kotlinx.coroutines 中的挂起函数（withContext, delay 等）都是可取消的。\n\n### CPU 密集型任务取消\n\n- isActive 是一个可以被使用在 CoroutineScope 中的扩展属性，检查 Job 是否处于活跃状态。\n\n  ```kotlin\n  @Test\n  fun `cancel cpu task by isActive`() = runBlocking {\n      val job = launch(Dispatchers.Default) {\n          var nextPrintTime = System.currentTimeMillis()\n          var i = 0\n          while (i < 5 && isActive) {\n              if (System.currentTimeMillis() >= nextPrintTime) {\n                  println(\"job: I'm sleeping ${i++} ...\")\n                  nextPrintTime += 500\n              }\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  main: Now I can quit.\n  ```\n\n- ensureActive()，如果 Job 处于非活跃状态，这个方法会抛出异常。\n\n  ```kotlin\n  @Test\n  fun `cancel cpu task by ensureActive`() = runBlocking {\n      val job = launch(Dispatchers.Default) {\n          var nextPrintTime = System.currentTimeMillis()\n          var i = 0\n          while (i < 5) {\n              ensureActive() // 抛出 CancellationException 异常，但被静默处理掉了。\n              if (System.currentTimeMillis() >= nextPrintTime) {\n                  println(\"job: I'm sleeping ${i++} ...\")\n                  nextPrintTime += 500\n              }\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  main: Now I can quit.\n  ```\n\n- yield 函数会检查所在协程的状态，如果已经取消，则抛出 CancellationException 予以响应。此外，它还会尝试出让线程的执行权，给其它协程提供执行机会。\n\n  ```kotlin\n  @Test\n  fun `cancel cpu task by yield`() = runBlocking {\n      val job = launch(Dispatchers.Default) {\n          var nextPrintTime = System.currentTimeMillis()\n          var i = 0\n          while (i < 5) {\n              yield()\n              if (System.currentTimeMillis() >= nextPrintTime) {\n                  println(\"job: I'm sleeping ${i++} ...\")\n                  nextPrintTime += 500\n              }\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  main: Now I can quit.\n  ```\n\n### 协程取消的副作用\n\n- 在 finally 中释放资源。\n\n  ```kotlin\n  @Test\n  fun `release resources`() = runBlocking {\n      val job = launch {\n          try {\n              repeat(1000) { i ->\n                  println(\"job: I'm sleeping $i ...\")\n                  delay(500)\n              }\n          } finally {\n              println(\"job: I'm running finally.\")\n          }\n      }\n      delay(1300)\n      println(\"main: I'm tired of waiting!\")\n      job.cancelAndJoin()\n      println(\"main: Now I can quit.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  main: I'm tired of waiting!\n  job: I'm running finally.\n  main: Now I can quit.\n  ```\n\n- use 函数：该函数只能被实现了 Closeable 的对象使用，程序结束的时候会自动调用 close 方法，适合文件对象。\n\n  ```kotlin\n  @Test\n  fun `use function`() = runBlocking {\n      /*val br = BufferedReader(FileReader(\"E:\\\\Hello.txt\"))\n      var line: String?\n      try {\n          while (true) {\n              line = br.readLine() ?: break\n              println(line)\n          }\n      } catch (e: Exception) {\n      } finally {\n          try {\n              br.close()\n          } catch (e: Exception) {\n          }\n      }*/\n  \n      BufferedReader(FileReader(\"E:\\\\Hello.txt\")).use {\n          var line: String?\n          while (true) {\n              line = it.readLine() ?: break\n              println(line)\n          }\n      }\n  }\n  ```\n\n### 不能取消的任务\n\n处于取消中状态的协程不能够挂起（运行不能取消的代码），当协程被取消后需要调用挂起函数，我们需要将清理任务的代码放置于 NonCancellable CoroutineContext 中。这样会挂起运行中的代码，并保持协程取消中状态直到任务处理完成。\n\n```kotlin\n@Test\nfun `cancel with NonCancelable`() = runBlocking {\n    val job = launch {\n        try {\n            repeat(1000) { i ->\n                println(\"job: I'm sleeping $i ...\")\n                delay(500)\n            }\n        } finally {\n            withContext(NonCancellable) {\n                println(\"job: I'm running finally.\")\n                delay(1000)\n                println(\"job: And I've just delayed for 1 sec because I'm non-cancellable.\")\n            }\n        }\n    }\n    delay(1300)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\n// 打印结果\njob: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\njob: I'm running finally.\njob: And I've just delayed for 1 sec because I'm non-cancellable.\nmain: Now I can quit.\n```\n\n> NonCancellable 可用于常驻任务。\n\n### 超时任务\n\n- 很多情况下取消一个协程的理由是它有可能超时。用 withTimeout 进行超时操作，如果规定时间内未完成任务则会抛出异常。\n\n  ```kotlin\n  @Test\n  fun `deal with withTimeout`() = runBlocking {\n      withTimeout(1300) {\n          repeat(1000) { i ->\n              println(\"job: I'm sleeping $i ...\")\n              delay(500)\n          }\n      }\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  \n  Timed out waiting for 1300 ms\n  kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms\n  ```\n\n- withTimeoutOrNull 通过返回 null 来进行超时操作，从而替代抛出一个异常。\n\n  ```kotlin\n  @Test\n  fun `deal with withTimeoutOrNull`() = runBlocking {\n      val result = withTimeoutOrNull(1300) {\n          repeat(1000) { i ->\n              println(\"job: I'm sleeping $i ...\")\n              delay(500)\n          }\n          \"Done\"\n      } ?: \"Undone\"\n      println(\"Result is $result.\")\n  }\n  \n  // 打印结果\n  job: I'm sleeping 0 ...\n  job: I'm sleeping 1 ...\n  job: I'm sleeping 2 ...\n  Result is Undone.\n  ```\n\n\n### 协程的上下文\n\nCoroutineContext 是一组用于定义协程行为的元素，它由如下几项构成：\n\n- **Job**：控制协程的生命周期。\n- **CoroutineDispatcher**：向合适的线程分发任务。\n- **CoroutineName**：协程的名称，调试的时候很有用。\n- **CoroutineExceptionHandler**：处理未被捕获的异常。\n\n#### 组合上下文中的元素\n\n有时我们需要在协程上下文中定义多个元素，我们可以使用 \"+\" 操作符来实现。比如，我们可以显示指定一个调度器来启动协程并且同时显示指定一个命名：\n\n```kotlin\n@Test\nfun `CoroutineContext`() = runBlocking<Unit> {\n    launch(Dispatchers.Default + CoroutineName(\"hello\")) {\n        println(\"I'm working in thread ${Thread.currentThread().name}\")\n    }\n}\n\n// 打印结果\nI'm working in thread DefaultDispatcher-worker-1 @hello#2\n```\n\n#### 协程上下文的继承\n\n对于新创建的协程，它的 CoroutineContext 会包含一个全新的 Job 实例，它会帮助我们控制协程的生命周期。而**剩下的元素会从 CoroutineContext 的父类继承**，该父类可能是另外一个协程或者创建该协程的 CoroutineScope。\n\n```kotlin\n@Test\nfun `CoroutineContext extend`() = runBlocking<Unit> {\n    val scope = CoroutineScope(Job() + Dispatchers.IO + CoroutineName(\"hello\"))\n    val job = scope.launch {\n        // 新的协程会将 CoroutineScope 作为父级\n        println(\"${coroutineContext[Job]} ${Thread.currentThread().name}\")\n        val result = async {\n             // 通过 async 创建的新协程会将当前协程作为父级\n            println(\"${coroutineContext[Job]} ${Thread.currentThread().name}\")\n            \"OK\"\n        }.await()\n    }\n    job.join()\n}\n\n// 打印结果\n\"hello#2\":StandaloneCoroutine{Active}@55b8c583 DefaultDispatcher-worker-1 @hello#2\n\"hello#3\":DeferredCoroutine{Active}@64e55ef0 DefaultDispatcher-worker-3 @hello#3\n```\n\n#### 协程上下文的公式\n\n协程上下文 = **默认值** + **继承的 CoroutineContext** + **参数**。\n\n- 一些元素包含默认值：Dispatchers.Default 是默认的 CoroutineDispatcher，以及 \"coroutine\" 作为默认的 CoroutineName。\n- 继承的 CoroutineContext 是 CoroutineScope 或者其父协程的 CoroutineContext。\n- 传入协程构建器的参数的优先级高于继承的上下文，隐藏会覆盖对应参数值。\n\n```kotlin\n@Test\nfun `CoroutineContext extend2`() = runBlocking<Unit> {\n    val coroutineExceptionHandler = CoroutineExceptionHandler { _, excption ->\n        println(\"CoroutineExceptionHandler got $excption\")\n    }\n    val scope = CoroutineScope(Job() + Dispatchers.Main + coroutineExceptionHandler)\n    // 新的 CoroutineContext = 父级 CoroutineContext + Job()\n    val job = scope.launch(Dispatchers.IO) {\n        // 新协程\n        println(\"${coroutineContext[Job]} ${Thread.currentThread().name}\")\n    }\n    job.join()\n}\n\n// 打印结果\n\"coroutine#2\":StandaloneCoroutine{Active}@78ec7afa DefaultDispatcher-worker-1 @coroutine#2\n```\n\n### 协程的异常处理\n\n#### 异常处理的必要性\n\n当应用出现一些意外情况时，给用户提供合适的体验非常重要。一方面，目睹应用崩溃是个很糟糕的体验，另一方面，当用户操作失败时，也必须要能给出正确的提示信息。\n\n#### 异常的传播\n\n协程构建器有两种形式：**自动传播异常**（launch 与 actor），**向用户暴露异常**（async 与 produce）。当这些构建器用于创建一个**根协程**时（该协程不是另一个协程的子协程），前者这类构建器，异常会在它发生的第一时间被抛出，而后者则依赖用户来最终消费异常，例如通过 await 或 receive。\n\n```kotlin\n@Test\nfun `exception propagation`() = runBlocking<Unit> {\n    val job = GlobalScope.launch {\n        try {\n            throw IndexOutOfBoundsException()\n        } catch (e: Exception) {\n            println(\"Caught IndexOutOfBoundsException\")\n        }\n    }\n    job.join()\n\n    val deferred = GlobalScope.async {\n        throw ArithmeticException()\n    }\n    try {\n        deferred.await()\n    } catch (e: Exception) {\n        println(\"Caught ArithmeticException\")\n    }\n}\n\n// 打印结果\nCaught IndexOutOfBoundsException\nCaught ArithmeticException\n```\n\n#### 非根协程的异常\n\n其它协程所创建的协程中，产生的异常总是会被传播。\n\n```kotlin\n@Test\nfun `exception propagation2`() = runBlocking<Unit> {\n    val scope = CoroutineScope(Job())\n    val job = scope.launch {\n        async {\n            // 如果 async 抛出异常，launch 就会立刻抛出异常，而不会调用 .await()\n            throw IllegalArgumentException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nException in thread \"DefaultDispatcher-worker-1 @coroutine#3\" java.lang.IllegalArgumentException\n```\n\n#### 异常的传播特性\n\n当一个协程由于一个异常而运行失败时，它会传播这个异常并传递给它的父级。接下来，父级会进行下面几步操作：\n\n- 取消它的子级。\n- 取消它自己。\n- 将异常传播并传递给它的父级。\n\n#### SupervisorJob\n\n- 使用 SupervisorJob 时，一个子协程的运行失败不会影响到其它子协程。SupervisorJob 不会传播异常给它的父级，它会**让子协程自己处理异常**。\n- 这种需求常见于在作用域内定义作业的 UI 组件，如果任一个 UI 的子作业执行失败了，它并不总是有必要取消整个 UI 组件，但是如果 UI 组件被销毁了，由于它的结果不再被需要了，它就有必要使所有的子作业执行失败。\n\n```kotlin\n@Test\nfun `test SupervisorJob`() = runBlocking<Unit> {\n    val supervisor = CoroutineScope(SupervisorJob())\n    val job1 = supervisor.launch {\n        delay(100)\n        println(\"child 1.\")\n        throw IllegalArgumentException()\n    }\n    val job2 = supervisor.launch {\n        try {\n            delay(Long.MAX_VALUE)\n        } finally {\n            println(\"child 2 finished.\")\n        }\n    }\n//        delay(200)\n//        supervisor.cancel()\n    joinAll(job1, job2)\n}\n\n// 打印结果\nchild 1.\nException in thread \"DefaultDispatcher-worker-2 @coroutine#2\" java.lang.IllegalArgumentException\n一直运行中......\n```\n\n#### supervisorScope\n\n当作业自身执行失败的时候，所有子作业将会全部被取消。\n\n```kotlin\n@Test\nfun `test supervisorScope`() = runBlocking<Unit> {\n    supervisorScope {\n        launch {\n            delay(100)\n            println(\"child 1.\")\n            throw IllegalArgumentException()\n        }\n        try {\n            delay(Long.MAX_VALUE)\n        } finally {\n            println(\"child 2 finished.\")\n        }\n    }\n}\n\n// 打印结果\nchild 1.\nException in thread \"Test worker @coroutine#2\" java.lang.IllegalArgumentException\n一直运行中......\n```\n\n```kotlin\n@Test\nfun `test supervisorScope2`() = runBlocking<Unit> {\n    supervisorScope {\n        launch {\n            try {\n                println(\"The child is sleeping.\")\n                delay(Long.MAX_VALUE)\n            } finally {\n                println(\"The child is cancelled.\")\n            }\n        }\n        yield()\n        println(\"Throwing an exception from the scope.\")\n        throw AssertionError()\n    }\n}\n\n// 打印结果\nThe child is sleeping.\nThrowing an exception from the scope.\nThe child is cancelled.\n\njava.lang.AssertionError\n```\n\n#### 异常的捕获\n\n- 使用 CoroutineExceptionHandler 对协程的异常进行捕获。\n- 以下的条件被满足时，异常就会被捕获。\n  - **时机**：异常是被自动抛出异常的协程所抛出的（使用 launch，而不是 async 时）。\n  - **位置**：在 CoroutineScope 的 CoroutineContext 中或在一个根协程（CoroutineScope 或者 supervisorScope 的直接子协程）中。\n\n```kotlin\n@Test\nfun `test coroutineExceptionHandler`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val job = GlobalScope.launch(handler) {\n        throw AssertionError()\n    }\n    val deferred = GlobalScope.async(handler) {\n        throw ArithmeticException()\n    }\n    job.join()\n    deferred.await()\n}\n\n// 打印结果\nCaught java.lang.AssertionError\n\njava.lang.ArithmeticException\n```\n\n```kotlin\n@Test\nfun `test coroutineExceptionHandler2`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val scope = CoroutineScope(Job())\n    val job = scope.launch(handler) {\n        launch {\n            throw ArithmeticException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nCaught java.lang.ArithmeticException\n```\n\n```kotlin\n@Test\nfun `test coroutineExceptionHandler3`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val scope = CoroutineScope(Job())\n    val job = scope.launch {\n        // handler 放这里捕获不到异常\n        launch(handler) {\n            throw ArithmeticException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nException in thread \"DefaultDispatcher-worker-1 @coroutine#3\" java.lang.ArithmeticException\n```\n\n#### Android 中全局异常处理\n\n- 全局异常处理器可以获取到所有协程未处理的未捕获异常，不过它并不能对异常进行捕获，虽然**不能阻止程序崩溃**，全局异常处理器在程序调试和异常上报等场景中仍然有非常大的用处。\n- 我们需要在 classpath 下面创建 META-INF/services 目录，并在其中创建一个名为 kotlinx.coroutines.CoroutineExceptionHandler 的文件，文件内容就是我们的全局异常处理器的全类名。\n\n正常情况捕获异常（程序不崩溃）：\n\n```kotlin\nval handler = CoroutineExceptionHandler { _, excption ->\n    Log.d(\"tag\", \"Caught $excption\")\n}\n\nbtnGlobalCoroutineExceptionHandler?.setOnClickListener {\n    GlobalScope.launch(handler) {\n        \"abc\".substring(10)\n    }\n}\n\n// 打印结果\nD/tag: Caught java.lang.StringIndexOutOfBoundsException: length=3; index=10\n```\n\n全局异常处理器获取未被捕获异常（程序崩溃）：\n\n```kotlin\nbtnGlobalCoroutineExceptionHandler?.setOnClickListener {\n    GlobalScope.launch {\n        \"abc\".substring(10)\n    }\n}\n\n// 打印结果\nD/tag: Unhandled Coroutine Exception: java.lang.StringIndexOutOfBoundsException: length=3; index=10\n    \n    --------- beginning of crash\nE/AndroidRuntime: FATAL EXCEPTION: DefaultDispatcher-worker-1\n    Process: com.zch.kotlin, PID: 3436\n    java.lang.StringIndexOutOfBoundsException: length=3; index=10\n        at java.lang.String.substring(String.java:1899)\n```\n\n#### 取消与异常\n\n- 取消与异常紧密相关，协程内部使用 CancellationException 来进行取消，这个异常会被忽略。\n- 当子协程被取消时，不会取消它的父协程。\n- 如果一个协程遇到了 CancellationException 以外的异常，它将使用该异常取消它的父协程。当父协程的所有子协程都结束后，异常才会被父协程处理。\n\n```kotlin\n@Test\nfun `test cancel and exception`() = runBlocking<Unit> {\n    val job = launch {\n        val child = launch {\n            try {\n                delay(Long.MAX_VALUE)\n            }finally {\n                println(\"Child is cancelled.\")\n            }\n        }\n        yield()\n        println(\"Cancelling child.\")\n        child.cancelAndJoin()\n        yield()\n        println(\"Parent is not cancelled.\")\n    }\n    job.join()\n}\n\n// 打印结果\nCancelling child.\nChild is cancelled.\nParent is not cancelled.\n```\n\n```kotlin\n@Test\nfun `test cancel and exception2`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption\")\n    }\n    val job = GlobalScope.launch(handler) {\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n                withContext(NonCancellable) {\n                    println(\"Children are cancelled, but exception is not handled until all children termination.\")\n                    delay(100)\n                    println(\"The first child finished its non cancellable block.\")\n                }\n            }\n        }\n        launch {\n            delay(10)\n            println(\"Second child throws an exception.\")\n            throw ArithmeticException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nSecond child throws an exception.\nChildren are cancelled, but exception is not handled until all children termination.\nThe first child finished its non cancellable block.\nCaught java.lang.ArithmeticException\n```\n\n#### 异常聚合\n\n当协程的多个子协程因为异常而失败时，一般情况下取第一个异常进行处理。在第一个异常之后发生的所有其它异常，都将被绑定到第一个异常之上。\n\n```kotlin\n@Test\nfun `test exception aggreation`() = runBlocking<Unit> {\n    val handler = CoroutineExceptionHandler { _, excption ->\n        println(\"Caught $excption ${excption.suppressed.contentToString()}\")\n    }\n    val job = GlobalScope.launch(handler) {\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n                throw ArithmeticException()\n            }\n        }\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n                throw IndexOutOfBoundsException()\n            }\n        }\n        launch {\n            delay(100)\n            throw IOException()\n        }\n    }\n    job.join()\n}\n\n// 打印结果\nCaught java.io.IOException [java.lang.IndexOutOfBoundsException, java.lang.ArithmeticException]\n```\n\n### Flow\n\n#### 异步返回多个值的方案\n\n集合、序列、挂起函数、Flow。\n\n```kotlin\n// 返回了多个值，但不是异步\nprivate fun simpleList() = listOf(1, 2, 3)\n\n// 返回了多个值，但不是异步（一次返回一个值）\nprivate fun simpleSequence() = sequence {\n    for (i in 1..3) {\n        Thread.sleep(1000) // 阻塞\n//            delay(1000) // 不能用\n        yield(i)\n    }\n}\n\n// 返回了多个值，是异步（一次性返回了多个值）\nprivate suspend fun simpleList2(): List<Int> {\n    delay(1000)\n    return listOf(1, 2, 3)\n}\n\n// 返回了多个值，是异步（一次返回一个值）\nprivate fun simpleFlow() = flow {\n    for (i in 1..3) {\n        delay(1000) // 模拟耗时操作\n        emit(i) // 发射，返回一个元素\n    }\n}\n\n@Test\nfun `test multiple values`() {\n//        simpleList().forEach { println(it) }\n    simpleSequence().forEach { println(it) }\n}\n\n@Test\nfun `test multiple values2`() = runBlocking {\n    simpleList2().forEach { println(it) }\n}\n\n@Test\nfun `test multiple values3`() = runBlocking {\n    // 启动另外一个协程，证明 simpleFlow 没有阻塞主线程\n    launch {\n        for (i in 1..3) {\n            println(\"I'm not blocked $i.\")\n            delay(1500)\n        }\n    }\n    simpleFlow().collect { println(it) }\n}\n```\n\n#### Flow 与其它方式的区别\n\n- 名为 flow 的 Flow 类型构建器函数。\n- flow{...} 构建块中的代码可以挂起。\n- 函数 simpleFlow 不再标有 suspend 修饰符。\n- 流使用 emit 函数发射值。\n- 流使用 collect 函数收集值。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1663391441985.png) \n\n#### 冷流\n\nFlow 是一种类似于序列的冷流，flow 构建器中的代码直到流被收集的时候才运行。\n\n```kotlin\nprivate fun simpleFlow2() = flow {\n    println(\"Flow started.\")\n    for (i in 1..3) {\n        delay(1000)\n        emit(i)\n    }\n}\n\n@Test\nfun `test flow is cold`() = runBlocking {\n    val flow = simpleFlow2()\n    println(\"Calling collect...\")\n    flow.collect { println(it) }\n    println(\"Calling collect again...\")\n    flow.collect { println(it) }\n}\n\n// 打印结果\nCalling collect...\nFlow started.\n1\n2\n3\nCalling collect again...\nFlow started.\n1\n2\n3\n```\n\n#### 流的连续性\n\n- 流的每次单独收集都是按顺序执行的，除非使用特殊操作符。\n- 从上游到下游每个过渡操作符都会处理每个发射出的值，然后再交给末端操作符。\n\n```kotlin\n@Test\nfun `test flow continuation`() = runBlocking {\n    (1..5).asFlow().filter {\n        it % 2 == 0\n    }.map {\n        \"string $it\"\n    }.collect {\n        println(\"Collect $it.\")\n    }\n}\n\n// 打印结果\nCollect string 2.\nCollect string 4.\n```\n\n#### 流构建器\n\n- flowOf 构建器定义了一个发射固定值集的流。\n- 使用 .asFlow() 扩展函数，可以将各种集合与序列转换为流。\n\n```kotlin\n@Test\nfun `test flow builder`() = runBlocking {\n    flowOf(\"one\", \"two\", \"three\")\n        .onEach { delay(1000) }\n        .collect { println(it) }\n\n    (1..3).asFlow().collect { println(it) }\n}\n```\n\n#### 流上下文\n\n- 流的收集总是在调用协程的上下文中发生，流的该属性称为**上下文保存**。\n- flow{...} 构建器中的代码必须遵循上下文保存属性，并且不允许从其它上下文中发射（emit）。\n- flowOn 操作符，该函数用于更改流发射的上下文。\n\n```kotlin\nprivate fun simpleFlow3() = flow {\n    println(\"Flow started ${Thread.currentThread().name}.\")\n    for (i in 1..3) {\n        delay(1000)\n        emit(i)\n    }\n}.flowOn(Dispatchers.Default)\n\n@Test\nfun `test flow on`() = runBlocking {\n    simpleFlow3().collect { println(\"Collected $it ${Thread.currentThread().name}\") }\n}\n\n// 打印结果\nFlow started DefaultDispatcher-worker-1 @coroutine#2.\nCollected 1 Test worker @coroutine#1\nCollected 2 Test worker @coroutine#1\nCollected 3 Test worker @coroutine#1\n```\n\n> 如果去掉 .flowOn(Dispatchers.Default)，那么发射和收集都是在 Test worker 线程中。\n\n#### 在指定协程中收集流\n\n使用 launchIn 替换 collect，我们可以在单独的协程中启动流的收集。\n\n```kotlin\nprivate fun events() = (1..3).asFlow().onEach { delay(100) }.flowOn(Dispatchers.Default)\n\n@Test\nfun `test flow launchIn`() = runBlocking {\n    val job = events()\n        .onEach { println(\"Event: $it ${Thread.currentThread().name}\") }\n//            .launchIn(CoroutineScope(Dispatchers.IO))\n        .launchIn(this)\n\n//        delay(200)\n//        job.cancelAndJoin()\n}\n\n// 打印结果\nEvent: 1 Test worker @coroutine#2\nEvent: 2 Test worker @coroutine#2\nEvent: 3 Test worker @coroutine#2\n```\n\n#### 流的取消\n\n流采用与协程同样的协作取消。像往常一样，流的收集可以是当流在一个可取消的挂起函数（例如 delay）中挂起的时候取消。\n\n```kotlin\nprivate fun simpleFlow4() = flow {\n    for (i in 1..3) {\n        delay(1000)\n        println(\"Emitting $i.\")\n        emit(i)\n    }\n}\n\n@Test\nfun `test cancel flow`() = runBlocking {\n    withTimeoutOrNull(2500) {\n        simpleFlow4().collect { println(it) }\n    }\n    println(\"Done.\")\n}\n\n// 打印结果\nEmitting 1.\n1\nEmitting 2.\n2\nDone.\n```\n\n#### 流的取消检测\n\n- 为方便起见，流构建器对每个发射值执行附加的 ensureActive 检测以进行取消，这意味着从 flow{...} 发出的繁忙循环是可以取消的。\n\n  ```kotlin\n  private fun simpleFlow5() = flow {\n      for (i in 1..5) {\n          println(\"Emitting $i.\")\n          emit(i)\n      }\n  }\n  \n  @Test\n  fun `test cancel flow check`() = runBlocking {\n      simpleFlow5().collect {\n          println(it)\n          if (it == 3) cancel()\n      }\n  }\n  \n  // 打印结果\n  Emitting 1.\n  1\n  Emitting 2.\n  2\n  Emitting 3.\n  3\n  \n  BlockingCoroutine was cancelled\n  kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=\"coroutine#1\":BlockingCoroutine{Cancelled}@5da3da3d\n  ```\n\n- 出于性能原因，大多数其它流操作不会自动执行其它取消检测，在协程处于繁忙循环的情况下，必须明确检测是否取消，通过 **cancellable** 操作符来执行此操作。\n\n  ```kotlin\n  @Test\n  fun `test cancel flow check`() = runBlocking {\n      (1..5).asFlow().cancellable().collect {\n          println(it)\n          if (it == 3) cancel()\n      }\n  }\n  \n  // 打印结果\n  1\n  2\n  3\n  \n  BlockingCoroutine was cancelled\n  kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=\"coroutine#1\":BlockingCoroutine{Cancelled}@63bbd396\n  ```\n\n#### 背压\n\n**1、使用缓冲与 flowOn 处理背压**\n\n- buffer()：并发运行流中发射元素的代码。\n\n- 当必须更改 CoroutineDispatcher 时，flowOn 操作符使用了相同的缓冲机制，但是 buffer 函数显示地请求缓冲而**不改变执行上下文**。\n\n**2、合并与处理最新值**\n\n- conflate()：合并发射项，不对每个值进行处理。\n- collectLastest()：取消并重新发射最后一个值。\n\n```kotlin\nprivate fun simpleFlow6() = flow {\n    for (i in 1..3) {\n        delay(100)\n        emit(i)\n        println(\"Emitting $i ${Thread.currentThread().name}.\")\n    }\n}\n\n@Test\nfun `test flow back pressure`() = runBlocking {\n    val time = measureTimeMillis {\n        simpleFlow6()\n//                .buffer(50) // 并行发射 3 个元素，需要 100 ms\n//                .flowOn(Dispatchers.Default) // 让发射在后台线程，也是并行发射，需要 100 ms\n//                .conflate()\n//                .collect {\n            .collectLatest {\n                delay(300) // 处理这个元素消耗 300 ms\n                println(\"Collected $it ${Thread.currentThread().name}\")\n            }\n    }\n    println(\"Collected in $time ms.\")\n}\n```\n\n不处理背压情况下，上面程序大概需要消耗 （100 + 300）* 3 = 1200 ms。\n\n- 使用 buffer()，大概需要 100 + 3 * 300 = 1000 ms，因为该方式发射元素是异步的。\n- 使用 flowOn 操作符，也是大概需要 100 + 3 * 300 = 1000 ms，该方式发射元素也是异步，但是发射元素切换到了后台线程。\n- 使用 conflate，合并发射项，不对每个值进行处理，大概需要 100 + 2 * 300 = 700 ms。该方式发射元素是异步的，收集过程忽略了中间的元素，只处理了前后两个元素。\n- 使用 collectLastest，上面程序大概需要消耗 700 ms。该方式发射元素也是异步，它会取消并重新发射最后一个值。\n\n#### 操作符\n\n##### 转换操作符\n\n- 可以使用操作符转换流，就像使用集合与序列一样。\n- 转换操作符应用于上游流，并返回下游流。\n- 这些操作符也是冷操作符，就像流一样。这类操作符本身不是挂起函数。\n- 它运行的速度很快，返回新的转换流的定义。\n\n```kotlin\nprivate suspend fun performRequest(request: Int): String {\n    delay(1000)\n    return \"response $request\"\n}\n\n@Test\nfun `test transform flow operator`() = runBlocking {\n    (1..3).asFlow()\n//            .map { performRequest(it) }\n        .transform {\n            emit(\"Making request $it\")\n            emit(performRequest(it))\n        }\n        .collect { println(it) }\n}\n```\n\nmap 转换一次。transform 可以转换发射多次。\n\n##### 限长操作符\n\n```kotlin\nprivate fun numbers() = flow {\n    try {\n        emit(1)\n        emit(2)\n        println(\"This line will not execute.\")\n        emit(3)\n    } finally {\n        println(\"Finally in numbers.\")\n    }\n}\n\n@Test\nfun `test limit length operator`() = runBlocking {\n    numbers().take(2).collect { println(it) }\n}\n\n// 打印结果\n1\n2\nFinally in numbers.\n```\n\n##### 末端流操作符\n\n末端流操作符是在流上用于启动流收集的挂起函数。collect 是最基础的末端操作符，但是还有另外一些更方便的使用的末端操作符：\n\n- 转化为各种集合，例如 toList 与 toSet。\n- 获取第一个（first）值与确保流发射单个（Single）值的操作符。\n- 使用 reduce 与 fold 将流规约到单个值。\n\n```kotlin\n@Test\nfun `test terminal operator`() = runBlocking {\n    val sum = (1..5).asFlow()\n        .map { it * it }\n        .reduce { a, b -> a + b }\n    println(sum)\n}\n\n// 打印结果\n55\n```\n\n##### 组合操作符\n\n就像 Kotlin 标准库中的 Sequence.zip 扩展函数一样，流拥有一个 zip 操作符用于组合两个流中的相关值。\n\n```kotlin\n@Test\nfun `test zip operator`() = runBlocking {\n    val numbs = (1..3).asFlow()\n    val strs = flowOf(\"One\", \"Two\", \"Three\")\n    numbs.zip(strs) { a, b -> \"$a -> $b\" }.collect { println(it) }\n}\n\n// 打印结果\n1 -> One\n2 -> Two\n3 -> Three\n```\n\n```kotlin\n@Test\nfun `test zip2 operator`() = runBlocking {\n    val numbs = (1..3).asFlow().onEach { delay(300) }\n    val strs = flowOf(\"One\", \"Two\", \"Three\").onEach { delay(400) }\n    val startTime = System.currentTimeMillis()\n    numbs.zip(strs) { a, b -> \"$a -> $b\" }.collect {\n        println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n    }\n}\n\n// 打印结果\n1 -> One at 442 ms from start.\n2 -> Two at 839 ms from start.\n3 -> Three at 1246 ms from start.\n```\n\n##### 展平操作符\n\n流表示异步接收的值序列，所以很容易遇到这样的情况：每个值都会触发对另一个值序列的请求，然而，由于流具有异步的性质，因此需要不同的展平模式，存在一系列的流展平操作符：\n\n- flatMapConcat 连接模式。\n- flatMapMerge 合并模式。\n- flatMapLastest 最新展平模式。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1663680667795.jpg) \n\n```kotlin\nprivate fun requestFlow(i: Int) = flow<String> {\n    emit(\"$i: First.\")\n    delay(500)\n    emit(\"$i: Second.\")\n}\n\n@Test\nfun `test flatMapConcat operator`() = runBlocking {\n    val startTime = System.currentTimeMillis()\n    (1..3).asFlow()\n        .onEach {\n            delay(100)\n        }.flatMapConcat {\n            requestFlow(it)\n        }.collect {\n            println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n        }\n}\n\n// 打印结果\n1: First. at 138 ms from start.\n1: Second. at 665 ms from start.\n2: First. at 774 ms from start.\n2: Second. at 1289 ms from start.\n3: First. at 1398 ms from start.\n3: Second. at 1911 ms from start.\n```\n\n```kotlin\n@Test\nfun `test flatMapMerge operator`() = runBlocking {\n    val startTime = System.currentTimeMillis()\n    (1..3).asFlow()\n        .onEach {\n            delay(100)\n        }.flatMapMerge {\n            requestFlow(it)\n        }.collect {\n            println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n        }\n}\n\n// 打印结果\n1: First. at 192 ms from start.\n2: First. at 293 ms from start.\n3: First. at 404 ms from start.\n1: Second. at 698 ms from start.\n2: Second. at 806 ms from start.\n3: Second. at 919 ms from start.\n```\n\n```kotlin\n@Test\nfun `test flatMapLatest operator`() = runBlocking {\n    val startTime = System.currentTimeMillis()\n    (1..3).asFlow()\n        .onEach {\n            delay(100)\n        }.flatMapLatest {\n            requestFlow(it)\n        }.collect {\n            println(\"$it at ${System.currentTimeMillis() - startTime} ms from start.\")\n        }\n}\n\n// 打印结果\n1: First. at 178 ms from start.\n2: First. at 326 ms from start.\n3: First. at 441 ms from start.\n3: Second. at 943 ms from start.\n```\n\n#### 流的异常处理\n\n当运算符中的发射器或代码抛出异常时，有几种处理异常的方法：\n\n- try/catch 块。\n- catch 函数。\n\n**1、捕获下游异常**：\n\n```kotlin\nprivate fun exceptionFlow() = flow {\n    for (i in 1..3) {\n        println(\"Emitting $i.\")\n        emit(i)\n    }\n}\n\n@Test\nfun `test flow exception`() = runBlocking {\n    try {\n        exceptionFlow().collect {\n            println(it)\n            check(it <= 1) {\n                \"Collect $it.\"\n            }\n        }\n    } catch (e: Exception) {\n        println(\"Caught $e\")\n    }\n}\n\n// 打印结果\nEmitting 1.\n1\nEmitting 2.\n2\nCaught java.lang.IllegalStateException: Collect 2.\n```\n\n**2、捕获上游异常**：\n\n```kotlin\n@Test\nfun `test flow exception2`() = runBlocking {\n    flow {\n        emit(1)\n        throw ArithmeticException(\"Div 0.\")\n    }.catch {\n        println(\"Caught $it\")\n    }.flowOn(Dispatchers.IO)\n        .collect {\n            println(it)\n        }\n}\n\n// 打印结果\n1\nCaught java.lang.ArithmeticException: Div 0.\n```\n\n**3、恢复异常**：\n\n```kotlin\n@Test\nfun `test flow exception3`() = runBlocking {\n    flow {\n        throw ArithmeticException(\"Div 0.\")\n        emit(1)\n    }.catch {\n        println(\"Caught $it\")\n        emit(10)\n    }.flowOn(Dispatchers.IO)\n        .collect {\n            println(it)\n        }\n}\n\n// 打印结果\nCaught java.lang.ArithmeticException: Div 0.\n10\n```\n\n#### 流的完成\n\n当流收集完成时（普通情况或异常情况），它可能需要执行一个动作。\n\n- 命令式 finally 块。\n- onCompletion 声明式处理。\n\n1、finally 形式：\n\n```kotlin\n@Test\nfun `test flow complete in finally`() = runBlocking {\n    fun simpleFlow() = (1..3).asFlow()\n\n    try {\n        simpleFlow().collect {\n            println(it)\n        }\n    } finally {\n        println(\"Done.\")\n    }\n}\n\n// 打印结果\n1\n2\n3\nDone.\n```\n\n2、onCompletion 函数可以拿到上游异常信息，但捕获异常还是需要 catch 函数。\n\n```kotlin\n@Test\nfun `test flow complete in onCompletion`() = runBlocking {\n    fun simpleFlow() = flow {\n        emit(1)\n        throw RuntimeException()\n    }\n    simpleFlow()\n        .onCompletion { exception ->\n            if (exception != null) {\n                println(\"Flow completed exceptionally.\")\n            }\n        }\n        .catch { exception ->\n            println(\"Caught $exception.\")\n        }\n        .collect {\n            println(it)\n        }\n}\n\n// 打印结果\n1\nFlow completed exceptionally.\nCaught java.lang.RuntimeException.\n```\n\n3、onCompletion 函数也能拿到下游异常信息，但捕获异常需要用 try/catch 形式。\n\n```kotlin\n@Test\nfun `test flow complete in onCompletion2`() = runBlocking {\n    fun simpleFlow() = flow {\n        emit(1)\n        throw RuntimeException()\n    }\n    try {\n        simpleFlow()\n            .onCompletion { exception ->\n                if (exception != null) {\n                    println(\"Flow completed exceptionally.\")\n                }\n            }.collect {\n                println(it)\n                check(it <= 1) {\n                    \"Collect $it.\"\n                }\n            }\n    } catch (e: Exception) {\n        println(\"Caught $e.\")\n    }\n}\n\n// 打印结果\n1\nFlow completed exceptionally.\nCaught java.lang.RuntimeException.\n```\n\n### Channel\n\n#### 什么是 Channel\n\nChannel 实际上是一个**并发安全的队列**，它可以用来连接协程，实现不同协程的通信。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1666439476014.jpg) \n\n```kotlin\n@Test\nfun `test know Channel`() = runBlocking {\n    val channel = Channel<Int>()\n    // 生产者\n    val producer = GlobalScope.launch {\n        var i = 1\n        while (true) {\n            delay(1000)\n            println(\"send $i.\")\n            channel.send(i++)\n        }\n    }\n    // 消费者\n    val consumer = GlobalScope.launch {\n        while (true) {\n            // delay(3000)\n            val element = channel.receive()\n            println(\"receive $element.\")\n        }\n    }\n    joinAll(producer, consumer)\n}\n\n// 打印结果\nsend 1.\nreceive 1.\nsend 2.\nreceive 2.\n......\n```\n\n#### Channel 的容量\n\nChannel 实际上就是一个队列，队列中一定存在缓冲区，那么一旦这个缓冲区满了，并且一直没有人调用 receive 并取走函数，send 就需要挂起。故意让接收端的节奏放慢，发现 send 总是会挂起，直到 receive 之后才会继续往下执行。\n\n比如上面的代码让消费者延迟 3s，那么生产者 send 一个元素后，需要等消费者在 3s 之后 receive 到元素才能 send 下一个元素。因为 Channel 默认的容量是 0。\n\n#### 迭代 Channel\n\nChannel 本身确实像序列，所以我们在读取的时候可以直接获取一个 Channel 的 iterator。\n\n```kotlin\n@Test\nfun `test iterator Channel`() = runBlocking {\n    val channel = Channel<Int>(Channel.UNLIMITED)\n    // 生产者\n    val producer = GlobalScope.launch {\n        for (i in 1..5) {\n            val element = i * i\n            println(\"send $element.\")\n            channel.send(element)\n        }\n    }\n    // 消费者\n    val consumer = GlobalScope.launch {\n//            val it = channel.iterator()\n//            while (it.hasNext()) {\n//                val element = it.next()\n//                println(\"receive $element.\")\n//                delay(2000)\n//            }\n\n        for (element in channel) {\n            println(\"receive $element.\")\n            delay(2000)\n        }\n    }\n    joinAll(producer, consumer)\n}\n\n// 打印结果\nsend 1.\nsend 4.\nsend 9.\nsend 16.\nsend 25.\nreceive 1.\nreceive 4.\nreceive 9.\nreceive 16.\nreceive 25.\n```\n\n#### produce 与 actor\n\n- 构造生产者与消费者的**便捷方法**。\n- 我们可以通过 produce 方法启动一个生产者协程，并返回一个 ReceiveChannel，其它协程就可以用这个 Channel 来接收数据了。反过来，我们可以用 actor 启动一个消费者协程。\n\n```kotlin\n@Test\nfun `test fast producer Channel`() = runBlocking {\n    val receiveChannel: ReceiveChannel<Int> = GlobalScope.produce {\n        repeat(5) {\n            delay(1000)\n            send(it)\n        }\n    }\n    val consumer = GlobalScope.launch {\n        for (element in receiveChannel) {\n            println(\"receive $element.\")\n        }\n    }\n    consumer.join()\n}\n\n// 打印结果\nreceive 0.\nreceive 1.\nreceive 2.\nreceive 3.\nreceive 4.\n```\n\n```kotlin\n@Test\nfun `test fast consumer Channel`() = runBlocking {\n    val sendChannel: SendChannel<Int> = GlobalScope.actor<Int> {\n        while (true) {\n            val element = receive()\n            println(\"receive $element.\")\n        }\n    }\n    val producer = GlobalScope.launch {\n        for (i in 0..3) {\n            sendChannel.send(i)\n        }\n    }\n    producer.join()\n}\n\n// 打印结果\nreceive 0.\nreceive 1.\nreceive 2.\nreceive 3.\n```\n\n#### Channel 的关闭\n\n- produce 和 actor 返回的 Channel 都会随着对应的协程执行完毕而关闭，也正是这样，Channel 才被称为**热数据流**。\n- 对于一个 Channel，如果我们调用了它的 close 方法，它会立即停止接收新元素，也就是说这时它的 **isClosedForSend** 会立即返回 true。而由于 Channel 缓冲区的存在，这时候可能还有一些元素没有被处理完，因此要等所有的元素都被读取之后 isCloseForReceive 才会返回 true。\n- Channel 的生命周期最好由主导方来维护，建议**由主导的一方实现关闭**。\n\n```kotlin\n@Test\nfun `test close Channel`() = runBlocking {\n    val channel = Channel<Int>(3)\n    // 生产者\n    val producer = GlobalScope.launch {\n        List(3) {\n            println(\"send $it.\")\n            channel.send(it)\n        }\n        channel.close()\n        println(\"Close Channel. | - ClosedForSend: ${channel.isClosedForSend}. | - ClosedForReceive: ${channel.isClosedForReceive}.\")\n    }\n    // 消费者\n    val consumer = GlobalScope.launch {\n        for (element in channel) {\n            println(\"receive $element.\")\n            delay(1000)\n        }\n        println(\"After Consuming. | - ClosedForSend: ${channel.isClosedForSend}. | - ClosedForReceive: ${channel.isClosedForReceive}.\")\n    }\n    joinAll(producer, consumer)\n}\n\n// 打印结果\nsend 0.\nsend 1.\nsend 2.\nreceive 0.\nClose Channel. | - ClosedForSend: true. | - ClosedForReceive: false.\nreceive 1.\nreceive 2.\nAfter Consuming. | - ClosedForSend: true. | - ClosedForReceive: true.\n```\n\n#### BroadcastChannel\n\n前面提到，发送端和接收端在 Channel 中存在一对多的情形，从数据处理本身来讲，虽然有多个接收端，但是同一个元素只会被一个接收端读到。广播则不然，**多个接收端不存在互斥行为**。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1666502596729.jpg) \n\n```kotlin\n@Test\nfun `test broadcastChannel`() = runBlocking {\n//        val broadcastChannel = BroadcastChannel<Int>(Channel.BUFFERED)\n    val channel = Channel<Int>()\n    val broadcastChannel = channel.broadcast(3)\n    val producer = GlobalScope.launch {\n        List(3) {\n            delay(100)\n            broadcastChannel.send(it)\n        }\n        broadcastChannel.close()\n    }\n    List(3) { index ->\n        GlobalScope.launch {\n            val receiveChannel = broadcastChannel.openSubscription()\n            for (i in receiveChannel) {\n                println(\"[#$index] receive: $i.\")\n            }\n        }\n    }.joinAll()\n}\n\n// 打印结果\n[#2] receive: 0.\n[#0] receive: 0.\n[#1] receive: 0.\n[#1] receive: 1.\n[#2] receive: 1.\n[#0] receive: 1.\n[#1] receive: 2.\n[#2] receive: 2.\n[#0] receive: 2.\n```\n\n### select - 多路复用\n\n#### 什么是多路复用\n\n数据通信系统或计算机网络系统中，传输媒体的带宽或容量往往会大于传输单一信号的需求，为了有效地利用通信线路，希望**一个信道同时传输多路信号**，这就是所谓的多路复用技术（Multiplexing）。\n\n#### 复用多个 await\n\n两个 API 分别从网络和本地缓存获取数据，期望哪个先返回就先用哪个做展示。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1666531343879.png)  \n\n```kotlin\ndata class Response<T>(val value: T, val isLocal: Boolean)\n\ndata class User(val name: String, val address: String)\n\nfun CoroutineScope.getUserFromLocal(name: String) = async(Dispatchers.IO) {\n    delay(1000)\n    User(name, \"Local\")\n}\n\nfun CoroutineScope.getUserFromServer(name: String) = async(Dispatchers.IO) {\n    delay(2000)\n    User(name, \"Server\")\n}\n\n@Test\nfun `test select await`() = runBlocking {\n    GlobalScope.launch {\n        val localRequest = getUserFromLocal(\"AAA\")\n        val serverRequest = getUserFromServer(\"BBB\")\n\n        val userResponse = select<Response<User>> {\n            localRequest.onAwait { Response(it, true) }\n            serverRequest.onAwait { Response(it, false) }\n        }\n\n        userResponse.value.let {\n            println(it)\n        }\n    }.join()\n}\n\n// 打印结果\nUser(name=AAA, address=Local)\n```\n\n#### 复用多个 Channel\n\n跟 await 类似，会接收到最快的那个 Channel 消息。\n\n```kotlin\n@Test\nfun `test select Channel`() = runBlocking {\n    val channels = listOf(Channel<Int>(), Channel<Int>())\n    GlobalScope.launch {\n        delay(100)\n        channels[0].send(200)\n    }\n    GlobalScope.launch {\n        delay(50)\n        channels[1].send(100)\n    }\n    val result = select<Int?> {\n        channels.forEach { channel ->\n            channel.onReceive { it }\n        }\n    }\n    println(result)\n}\n\n// 打印结果\n100\n```\n\n#### SelectClause\n\n我们怎么知道哪些事件可以被 **select** 呢？其实所有能够被 select 的事件都是 **SelectClauseN** 类型，包括：\n\n- **SelectClause0**：对应事件没有返回值，例如 join 没有返回值，对应的 onJoin 就是这个类型，使用时 onJoin 的参数是一个无参函数。\n\n- **SelectClause1**：对应事件有返回值，前面的 onAwait 和 onReceive 都是此类情况。\n- **SelectClause2**：对应事件有返回值，此外还需要额外的一个参数，例如 Channel.onSend 有两个参数，第一个就是一个 Channel 数据类型的值，表示即将发送的值，第二个是发送成功时的回调。\n\n如果我们想要确认挂起函数是否支持 select，只需要查看其是否存在对应的 SelectClauseN 即可。\n\n```kotlin\n@Test\nfun `test SelectClause0`() = runBlocking {\n    val job1 = GlobalScope.launch {\n        println(\"job 1\")\n        delay(100)\n    }\n    val job2 = GlobalScope.launch {\n        println(\"job 2\")\n        delay(10)\n    }\n    select<Unit> {\n        job1.onJoin {\n            println(\"job 1 onJoin\")\n        }\n        job2.onJoin {\n            println(\"job 2 onJoin\")\n        }\n    }\n}\n\n// 打印结果\njob 1\njob 2\njob 2 onJoin\n```\n\n```kotlin\n@Test\nfun `test SelectClause2`() = runBlocking {\n    val channels = listOf(Channel<Int>(), Channel<Int>())\n    println(channels)\n    launch(Dispatchers.IO) {\n        select {\n            launch {\n                delay(10)\n                channels[1].onSend(200) { sentChannel ->\n                    println(\"sent on $sentChannel\")\n                }\n            }\n            launch {\n                delay(100)\n                channels[0].onSend(100) { sentChannel ->\n                    println(\"sent on $sentChannel\")\n                }\n            }\n        }\n    }\n\n    GlobalScope.launch {\n        println(channels[0].receive())\n    }\n    GlobalScope.launch {\n        println(channels[1].receive())\n    }\n\n    delay(1000)\n}\n\n// 打印结果\n[RendezvousChannel@24c4ddae{EmptyQueue}, RendezvousChannel@766653e6{EmptyQueue}]\n200\nsent on RendezvousChannel@766653e6{EmptyQueue}\n```\n\n#### 使用 Flow 实现多路复用\n\n多数情况下，我们可以通过构造合适的 Flow 来实现多路复用的效果。\n\n```kotlin\n@Test\nfun `test select flow`() = runBlocking {\n    // 函数 -> 协程 -> Flow -> Flow 合并\n    val name = \"guest\"\n    coroutineScope {\n        listOf(::getUserFromLocal, ::getUserFromServer)\n            .map { function ->\n                function.call(name)\n            }.map { deferred ->\n                flow {\n                    emit(deferred.await())\n                }\n            }.merge()\n            .collect { user ->\n                println(user)\n            }\n    }\n}\n\n// 打印结果\nUser(name=guest, address=Local)\nUser(name=guest, address=Server)\n```\n\n### 并发安全\n\n由于协程是基于线程的，既然线程有并发问题，那么协程也一定有。\n\n#### 不安全的并发访问\n\n我们使用线程在解决并发问题的时候总是会遇到线程安全问题，而 Java 平台上的 Kotlin 协程实现免不了存在并发调度的情况，因此线程安全同样值得留意。\n\n```kotlin\n@Test\nfun `test not safe concurrent`() = runBlocking {\n    var count = 0\n    List(10000) {\n        GlobalScope.launch {\n            count++\n        }\n    }.joinAll()\n    println(count)\n}\n\n// 打印结果（每次打印可能不一样）\n9997\n```\n\nJava API 中安全的并发访问：\n\n```kotlin\n@Test\nfun `test safe concurrent`() = runBlocking {\n    var count = AtomicInteger(0)\n    List(10000) {\n        GlobalScope.launch {\n            count.incrementAndGet()\n        }\n    }.joinAll()\n    println(count.get())\n}\n\n// 打印结果（每次打印都一样）\n10000\n```\n\n#### 协程的并发工具\n\n除了我们在线程中常用的解决并发问题的手段之外，协程框架也提供了一些并发安全的工具，包括：\n\n- **Channel**：并发安全的消息通道，我们已经非常熟悉。\n- **Mutex**：轻量级锁，它的 lock 和 unlock 从语义上与线程锁比较类似，之所以轻量是因为它在获取不到锁时不会阻塞线程，而是挂起等待锁的释放。\n- **Semaphore**：轻量级信号量，信号量可以有多个，协程在获取到信号量后即可执行并发操作。当 Semaphore 的参数为 1 时，效果等价于 Mutex。\n\n```kotlin\n@Test\nfun `test safe concurrent tools`() = runBlocking {\n    var count = 0\n    val mutex = Mutex()\n    List(10000) {\n        GlobalScope.launch {\n            mutex.withLock {\n                count++\n            }\n        }\n    }.joinAll()\n    println(count)\n}\n\n// 打印结果（每次打印都一样）\n10000\n```\n\n```kotlin\n@Test\nfun `test safe concurrent tools2`() = runBlocking {\n    var count = 0\n    val semaphore = Semaphore(1)\n    List(10000) {\n        GlobalScope.launch {\n            semaphore.withPermit {\n                count++\n            }\n        }\n    }.joinAll()\n    println(count)\n}\n```\n\n#### 避免访问外部可变状态\n\n编写函数时要求它不得访问外部状态，只能基于参数做运算，通过返回值提供运算结果。\n\n```kotlin\n@Test\nfun `test avoid access outer variable`() = runBlocking {\n    var count = 0\n    val result = count + List(10000) {\n        GlobalScope.async { 1 }\n    }.map {\n        it.await()\n    }.sum()\n    println(result)\n}\n\n// 打印结果（每次打印都一样）\n10000\n```\n\n### 冷流还是热流\n\n- Flow 是冷流，什么是冷流？简单来说，如果 Flow 有了订阅者 Collector 以后，发射出来的值才会实实在在的存在于内存之中，这跟懒加载的概念很像。\n- 与之相对的是热流，StateFlow 和 SharedFlow 是热流，在垃圾回收之前，都是存在于内存之中，并且处于活跃状态的。\n\n### StateFlow\n\nStateFlow 是一个状态容器式**可观察数据流**，可以向其收集器发出当前状态更新和新状态更新。还可通过其 value 属性读取当前状态。\n\n```kotlin\nclass NumberViewModel : ViewModel() {\n\n    // StateFlow 与 LiveData 很像，但能使用 Flow 的操作符。\n    val number = MutableStateFlow(0)\n\n    fun increment() {\n        number.value++\n    }\n\n    fun decrement() {\n        number.value--\n    }\n}\n```\n\n```kotlin\nclass NumberFragment : Fragment() {\n\n    private val mNumberViewModel: NumberViewModel by viewModels()\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        btnPlus.setOnClickListener {\n            // 加法\n            mNumberViewModel.increment()\n        }\n        \n        btnMinus.setOnClickListener {\n            // 减法\n            mNumberViewModel.decrement()\n        }\n\n        lifecycleScope.launch {\n            // 收集数据\n            mNumberViewModel.number.collect {\n                tvNumber.text = it.toString()\n            }\n        }\n    }\n}\n```\n\n### SharedFlow\n\nSharedFlow 会向从其中收集值的所有使用方发出数据。\n\n```kotlin\n/**\n * 使用 SharedFlow 模拟 EventBus 收发数据\n */\nobject LocalEventBus {\n\n    val events = MutableSharedFlow<Event>()\n\n    suspend fun postEvent(event: Event) {\n        // 发送数据\n        events.emit(event)\n    }\n}\n\ndata class Event(val timestamp: Long)\n```\n\n```kotlin\nclass SharedViewModel : ViewModel() {\n\n    private var job: Job? = null\n\n    /**\n     * 开始刷新数据\n     */\n    fun startRefresh() {\n        // 开启协程\n        job = viewModelScope.launch(Dispatchers.IO) {\n            // 发送数据\n            while (true) {\n                LocalEventBus.postEvent(Event(System.currentTimeMillis()))\n            }\n        }\n    }\n\n    /**\n     * 停止刷新数据\n     */\n    fun stopRefresh() {\n        // 关闭协程\n        job?.cancel()\n    }\n}\n```\n\n```kotlin\n/**\n * 发送数据界面\n */\nclass SharedFlowFragment : Fragment() {\n\n    private val mSharedViewModel: SharedViewModel by viewModels()\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        btnStart.setOnClickListener {\n            // 发送[开始刷新数据]指令\n            mSharedViewModel.startRefresh()\n        }\n        btnStop.setOnClickListener {\n            // 发送[停止刷新数据]指令\n            mSharedViewModel.stopRefresh()\n        }\n    }\n}\n```\n\n```kotlin\n/**\n * 收集数据界面\n */\nclass TextsFragment : Fragment() {\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n \t    lifecycleScope.launch {\n            // 收集数据\n            LocalEventBus.events.collect {\n                textView.text = \"${tag}: ${it.timestamp}\"\n            }\n        }\n    }\n}\n```\n\n### Flow 的应用\n\n#### Flow 与文件下载的应用\n\n```kotlin\n/**\n * 下载状态\n */\nsealed class DownloadStatus {\n\n    // 空状态\n    object None : DownloadStatus()\n\n    // 下载进度\n    data class Progress(val value: Int) : DownloadStatus()\n\n    // 错误\n    data class Error(val throwable: Throwable) : DownloadStatus()\n\n    // 完成\n    data class Done(val file: File) : DownloadStatus()\n}\n```\n\n```kotlin\n/**\n * 下载文件管理类\n */\nobject DownloadManager {\n\n    /**\n     * 下载文件\n     * @param url String 远程文件地址\n     * @param file File 下载到的本地文件\n     * @return Flow<DownloadStatus>\n     */\n    fun download(url: String, file: File): Flow<DownloadStatus> {\n        return flow {\n            val request = Request.Builder().url(url).get().build()\n            val response = OkHttpClient.Builder().build().newCall(request).execute()\n            if (response.isSuccessful) {\n                response.body()!!.let { body ->\n                    val total = body.contentLength()\n                    // 文件读写\n                    file.outputStream().use { outputStream ->\n                        val inputStream = body.byteStream()\n                        var emittedProgress = 0L\n                        inputStream.copyTo(outputStream) { bytesCopied ->\n                            val progress = bytesCopied * 100 / total\n                            if (progress - emittedProgress > 5) {\n                                delay(100)\n                                emit(DownloadStatus.Progress(progress.toInt()))\n                                emittedProgress = progress\n                            }\n                        }\n                    }\n                }\n                emit(DownloadStatus.Done(file))\n            } else {\n                throw IOException(response.toString())\n            }\n        }.catch {\n            file.delete()\n            emit(DownloadStatus.Error(it))\n        }.flowOn(Dispatchers.IO)\n    }\n}\n```\n\n```kotlin\n/**\n * 扩展方法 读写文件并返回下载进度\n * @receiver InputStream\n * @param out OutputStream\n * @param bufferSize Int\n * @param progress Function1<Long, Unit>\n * @return Long\n */\ninline fun InputStream.copyTo(out: OutputStream, bufferSize: Int = DEFAULT_BUFFER_SIZE, progress: (Long) -> Unit): Long {\n    var bytesCopied: Long = 0\n    val buffer = ByteArray(bufferSize)\n    var bytes = read(buffer)\n    while (bytes >= 0) {\n        out.write(buffer, 0, bytes)\n        bytesCopied += bytes\n        bytes = read(buffer)\n\n        progress(bytesCopied)\n    }\n    return bytesCopied\n}\n```\n\n```kotlin\n/**\n * 下载文件界面\n */\nclass DownloadFragment : Fragment() {\n\n    private val URL = \"https://img1.baidu.com/it/u=413643897,2296924942&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=500\"\n\n    private fun download() {\n        // sdcard/Android/data/com.zch.flowpractice/files/pic.png\n        val file = File(requireActivity().getExternalFilesDir(null)?.path, \"pic.jpg\")\n        lifecycleScope.launch {\n            DownloadManager.download(URL, file).collect { status ->\n                when (status) {\n                    is DownloadStatus.Progress -> {\n                        progressBar.progress = status.value\n                        tvProgress.text = \"${status.value}%\"\n                    }\n\n                    is DownloadStatus.Error -> {\n                        ToastUtils.showLong(\"下载错误\")\n                    }\n\n                    is DownloadStatus.Done -> {\n                        progressBar.progress = 100\n                        tvProgress.text = \"100%\"\n                        ToastUtils.showShort(\"下载完成\")\n                    }\n\n                    else -> {\n                        ToastUtils.showShort(\"下载失败\")\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### Flow 与 Room 的应用\n\n```Kotlin\n/**\n * Room 实体类声明\n */\n@Entity\ndata class User(\n    // 主键\n    @PrimaryKey\n    val uid: Int,\n    // 数据库里存入的字段名\n    @ColumnInfo(name = \"first_name\")\n    val firstName: String,\n    // 数据库里存入的字段名\n    @ColumnInfo(name = \"last_name\")\n    val lastName: String\n)\n```\n\n```kotlin\n/**\n * Dao 类声明\n */\n@Dao\ninterface UserDao {\n    // 这里设置了一下冲突，如果两条记录相同则会替换\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(user: User)\n\n    // 这里不需要挂起（返回 Flow 或 LiveData 都不需要）\n    @Query(\"SELECT * FROM user\")\n    fun getAll(): Flow<List<User>>\n}\n```\n\n```kotlin\n/**\n * 数据库操作类\n * \n * entities      数据库里存入的表，可是多个\n * version       数据库的版本号\n * exportSchema  是否生成 json 文件，用于查看数据库的结构\n */\n@Database(entities = [User::class], version = 1, exportSchema = false)\nabstract class AppDataBase : RoomDatabase() {\n\n    /**\n     * Dao 对象\n     */\n    abstract fun UserDao(): UserDao\n\n    companion object {\n        private var instance: AppDataBase? = null\n\n        fun getInstance(context: Context): AppDataBase {\n            // 对象锁\n            return instance ?: synchronized(this) {\n                Room.databaseBuilder(context, AppDataBase::class.java, \"user_db\")\n                    .build().also { instance = it }\n            }\n        }\n    }\n}\n```\n\n```kotlin\n/**\n * User ViewModel\n */\nclass UserViewModel(app: Application) : AndroidViewModel(app) {\n\n    /**\n     * 插入数据\n     * @param user User\n     */\n    fun insert(user: User) {\n        viewModelScope.launch {\n            AppDataBase.getInstance(getApplication()).UserDao().insert(user)\n        }\n    }\n\n    /**\n     * 获取所有数据\n     * @return Flow<List<User>>\n     */\n    fun getAll(): Flow<List<User>> {\n        return AppDataBase.getInstance(getApplication()).UserDao().getAll()\n            .catch { e ->\n                e.printStackTrace()\n            }.flowOn(Dispatchers.IO)\n    }\n}\n```\n\n```kotlin\n/**\n * 用户界面\n */\nclass UserFragment : BaseBindingFragment() {\n\n    private val mBinding: FragmentUserBinding by lazy {\n        FragmentUserBinding.inflate(layoutInflater)\n    }\n\n    private val mUserAdapter: UserAdapter by lazy {\n        UserAdapter()\n    }\n\n    private val mUserViewModel: UserViewModel by viewModels()\n\n    override fun getBindingRoot() = mBinding.root\n\n    override fun initView() {\n        mBinding.rvUser.adapter = mUserAdapter\n    }\n\n    override fun initEvent() {\n        mBinding.btnAddUser.setOnClickListener {\n            mBinding.run {\n                // 插入数据\n                mUserViewModel.insert(\n                    User(\n                        edtUid.text.toString().toInt(),\n                        edtFirstName.text.toString(),\n                        edtLastName.text.toString()\n                    )\n                )\n            }\n        }\n    }\n\n    override fun initData() {\n        lifecycleScope.launch {\n            // 获取所有数据\n            mUserViewModel.getAll().collect {\n                mUserAdapter.submitList(it)\n            }\n        }\n    }\n}\n```\n\n#### Flow 与 Retrofit 的应用\n\n```kotlin\n/**\n * 文章实体类\n * @property id 文章 id\n * @property text 文章内容\n */\ndata class Article(val id: Int, val text: String)\n```\n\n```kotlin\n/**\n * 文章接口\n */\ninterface ArticleApi {\n\n    @GET(\"article\")\n    suspend fun searchArticle(@Query(\"key\") key: String): List<Article>\n}\n```\n\n```kotlin\n/**\n * Retrofit 网络请求管理类\n */\nobject RetrofitClient {\n\n    private const val URL = \"\"\n\n    private val instance: Retrofit by lazy {\n        Retrofit.Builder()\n            .client(OkHttpClient.Builder().build())\n            .baseUrl(URL)\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n    }\n\n    val articleApi: ArticleApi by lazy {\n        instance.create(ArticleApi::class.java)\n    }\n}\n```\n\n```kotlin\n/**\n * 文章 ViewModel\n */\nclass ArticleViewModel : ViewModel() {\n\n    val articles = MutableLiveData<List<Article>>()\n\n    fun searchArticle(key: String) {\n        viewModelScope.launch(Dispatchers.Main) {\n            flow {\n                val list = RetrofitClient.articleApi.searchArticle(key)\n                emit(list)\n            }.flowOn(Dispatchers.IO)\n                .catch { e -> e.printStackTrace() }\n                .collect {\n                    articles.value = it\n                }\n        }\n    }\n}\n```\n\n```kotlin\n/**\n * 文章界面\n */\nclass ArticleFragment : BaseBindingFragment() {\n\n    private val articleViewModel by viewModels<ArticleViewModel>()\n\n    private val mBinding: FragmentArticleBinding by lazy {\n        FragmentArticleBinding.inflate(layoutInflater)\n    }\n\n    override fun getBindingRoot() = mBinding.root\n\n    override fun initView() {\n    }\n\n    override fun initEvent() {\n    }\n\n    override fun initData() {\n        // 请求数据\n        articleViewModel.searchArticle(\"三国演义\")\n        \n        // 监听数据据返回\n        articleViewModel.articles.observe(viewLifecycleOwner) {\n\n        }\n    }\n}\n```\n","slug":"Kotlin-协程","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd10011nctt90fw7h3t","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h3 id=\"协程是什么\"><a href=\"#协程是什么\" class=\"headerlink\" title=\"协程是什么\"></a>协程是什么</h3><p>协程基于线程，它是轻量级线程。</p>\n<ul>\n<li>协程让<strong>异步逻辑同步化</strong>，杜绝回调地狱。</li>\n<li>协程最核心的点就是，函数或者一段程序能够被<strong>挂起</strong>，稍后再在挂起的位置<strong>恢复</strong>。</li>\n</ul>\n<h3 id=\"在-Android-中协程用来解决什么问题\"><a href=\"#在-Android-中协程用来解决什么问题\" class=\"headerlink\" title=\"在 Android 中协程用来解决什么问题\"></a>在 Android 中协程用来解决什么问题</h3><ul>\n<li><strong>处理耗时任务</strong>，这种任务常常会阻塞主线程。</li>\n<li><strong>保证主线程安全</strong>，即安全地从主线程调用任务 suspend 函数。</li>\n</ul>\n<h3 id=\"协程的挂起和恢复\"><a href=\"#协程的挂起和恢复\" class=\"headerlink\" title=\"协程的挂起和恢复\"></a>协程的挂起和恢复</h3><p>常规函数基础操作包括：invoke（或 call）和 return，协程增加了 suspend 和 resume。</p>\n<ul>\n<li>suspend：也称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量。</li>\n<li>resume：用于让已暂停的协程从其暂停处继续执行。</li>\n</ul>\n<h3 id=\"挂起与阻塞的区别\"><a href=\"#挂起与阻塞的区别\" class=\"headerlink\" title=\"挂起与阻塞的区别\"></a>挂起与阻塞的区别</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalScope.launch(Dispatchers.Main) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挂起</span></span><br><span class=\"line\">    delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>:after delay.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞</span></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">5000</span>)</span><br><span class=\"line\">Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>:after sleep.&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挂起函数\"><a href=\"#挂起函数\" class=\"headerlink\" title=\"挂起函数\"></a>挂起函数</h3><ul>\n<li>使用 suspend 关键字修饰的函数叫做挂起函数。</li>\n<li>挂起函数只能在<strong>协程体内</strong>或<strong>其它挂起函数内</strong>调用。</li>\n</ul>\n<h3 id=\"协程的两部分\"><a href=\"#协程的两部分\" class=\"headerlink\" title=\"协程的两部分\"></a>协程的两部分</h3><p>Kotlin 的协程实现分为两个层次：</p>\n<ul>\n<li>基础设施层，标准库的协程 API，主要对协程提供了概念和语义上最基本的支持。</li>\n<li>业务框架层，协程的上层框架支持。</li>\n</ul>\n<p>基础设施层的一个 demo：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> kotlin.coroutines.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 协程体</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> continuation = <span class=\"keyword\">suspend</span> &#123;</span><br><span class=\"line\">    <span class=\"number\">5</span></span><br><span class=\"line\">&#125;.createCoroutine(<span class=\"keyword\">object</span> : Continuation&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> context: CoroutineContext = EmptyCoroutineContext</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">resumeWith</span><span class=\"params\">(result: <span class=\"type\">Result</span>&lt;<span class=\"type\">Int</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Coroutine End: <span class=\"variable\">$result</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">continuation.resume(<span class=\"built_in\">Unit</span>)</span><br></pre></td></tr></table></figure>\n\n<p>基础设施层使用的是 <code>kotlin.coroutines.*</code> 而业务框架层使用的是 <code>kotlinx.coroutines.*</code>。</p>\n<h3 id=\"调度器\"><a href=\"#调度器\" class=\"headerlink\" title=\"调度器\"></a>调度器</h3><p>所有协程必须在调度器中运行，即使它们在主线程上运行也是如此。</p>\n<ul>\n<li><p><strong>Dispatchers.Main</strong>。Android 上的主线程，用来处理 UI 交互和一些轻量级任务（调用 suspend 函数；调用 UI 函数；更新 LiveData）。</p>\n</li>\n<li><p><strong>Dispatchers.IO</strong>。非主线程，专为磁盘和网络 IO 进行了优化（数据库；文件读写；网络处理）。</p>\n</li>\n<li><p><strong>Dispatchers.Default</strong>。非主线程，专为 CPU 密集型任务进行了优化（数组排序；JSON 数据解析；处理差异判断）。</p>\n</li>\n</ul>\n<h3 id=\"任务泄漏\"><a href=\"#任务泄漏\" class=\"headerlink\" title=\"任务泄漏\"></a>任务泄漏</h3><ul>\n<li>当某个协程任务丢失，无法追踪，会导致内存、CPU、磁盘等资源浪费，甚至发送一个无用的网络请求，这种情况称为任务泄漏。</li>\n<li>为了能够避免协程泄漏，Kotlin 引入了结构化并发机制。</li>\n</ul>\n<h3 id=\"结构化并发\"><a href=\"#结构化并发\" class=\"headerlink\" title=\"结构化并发\"></a>结构化并发</h3><p>使用结构化并发可以做到：</p>\n<ul>\n<li>取消任务，当某项任务不再需要时，取消它。</li>\n<li>追踪任务，当任务正在执行时，追踪它。</li>\n<li>发出错误信号，当协程失败时，发出错误信号表明有错误发生。</li>\n</ul>\n<h3 id=\"CoroutineScope\"><a href=\"#CoroutineScope\" class=\"headerlink\" title=\"CoroutineScope\"></a>CoroutineScope</h3><p>1、定义协程必须指定其 CoroutineScope，它会跟踪所有协程，同样它还可以<strong>取消由它所启动的所有协程</strong>。</p>\n<p>2、常用的相关 API 有：</p>\n<ul>\n<li><strong>GlobalScope</strong>，生命周期是 process 级别的，即使 Activity 或 Fragment 已经被销毁，协程仍然在执行。</li>\n<li><strong>MainScope</strong>，在 Activity 中使用，可以在 onDestroy() 中取消协程。</li>\n<li><strong>viewModelScope</strong>，只能在 ViewModel 中使用，绑定 ViewModel 生命周期。</li>\n<li><strong>lifecycleScope</strong>，只能在 Activity、Fragment 中使用，会绑定 Activity 和 Fragment 的生命周期。</li>\n</ul>\n<h3 id=\"MainScope-使用\"><a href=\"#MainScope-使用\" class=\"headerlink\" title=\"MainScope 使用\"></a>MainScope 使用</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CoroutineActivity</span> : <span class=\"type\">AppCompatActivity</span>(), CoroutineScope <span class=\"keyword\">by</span> MainScope() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_coroutine)</span><br><span class=\"line\"></span><br><span class=\"line\">        submit()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">submit</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        btnSubmit?.setOnClickListener &#123;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 取消协程会抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">                     * kotlinx.coroutines.JobCancellationException: Job was cancelled; job=SupervisorJobImpl&#123;Cancelling&#125;@7e7375b</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    e.printStackTrace()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        cancel()</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"协程构建器\"><a href=\"#协程构建器\" class=\"headerlink\" title=\"协程构建器\"></a>协程构建器</h3><p>launch 和 async 构建器都可以用来启动新协程：</p>\n<ul>\n<li><strong>launch</strong>，返回一个 Job 并且不附带任何结果值。</li>\n<li><strong>async</strong>，返回一个 Deferred，Deferred 也是一个 Job，可以使用 .await() 在一个延期的值上得到它的最终结果。</li>\n</ul>\n<p>等待一个作业：</p>\n<ul>\n<li>join 和 await。</li>\n<li>组合并发。</li>\n</ul>\n<p>测试构建器：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job1 finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job2 finished.&quot;</span>)</span><br><span class=\"line\">        <span class=\"string\">&quot;job2 result&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(job2.await())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job1 finished.</span><br><span class=\"line\">job2 finished.</span><br><span class=\"line\">job2 result</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>runBlocking 把当前线程包装成一个协程，它会阻塞当前线程等待子协程执行完再结束。</p>\n</blockquote>\n<h3 id=\"join-和-await-等待协程作业\"><a href=\"#join-和-await-等待协程作业\" class=\"headerlink\" title=\"join 和 await 等待协程作业\"></a>join 和 await 等待协程作业</h3><p>测试 join：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine join`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;One&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job1.join()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Two&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job3 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Three&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">One</span><br><span class=\"line\">Two</span><br><span class=\"line\">Three</span><br></pre></td></tr></table></figure>\n\n<p>测试 await：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine await`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;One&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job1.await()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Two&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job3 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Three&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">One</span><br><span class=\"line\">Two</span><br><span class=\"line\">Three</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async-组合并发\"><a href=\"#async-组合并发\" class=\"headerlink\" title=\"async 组合并发\"></a>async 组合并发</h3><p>测试同步 sync：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine sync`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> one = doOne()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> two = doTwo()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;The result:<span class=\"subst\">$&#123;one + two&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Completed in <span class=\"variable\">$time</span> ms&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doOne</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doTwo</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">The result:<span class=\"number\">2</span></span><br><span class=\"line\">Completed <span class=\"keyword\">in</span> <span class=\"number\">2018</span> ms</span><br></pre></td></tr></table></figure>\n\n<p>测试异步 async：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine async`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> one = async &#123;</span><br><span class=\"line\">            doOne()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> two = async &#123;</span><br><span class=\"line\">            doTwo()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;The result:<span class=\"subst\">$&#123;one.await() + two.await()&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 以下形式，结果是 2m。</span></span><br><span class=\"line\"><span class=\"comment\">        val one = async &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            doOne()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;.await()</span></span><br><span class=\"line\"><span class=\"comment\">        val two = async &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            doTwo()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;.await()</span></span><br><span class=\"line\"><span class=\"comment\">        println(&quot;The result:$&#123;one + two&#125;&quot;)*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Completed in <span class=\"variable\">$time</span> ms&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">The result:<span class=\"number\">2</span></span><br><span class=\"line\">Completed <span class=\"keyword\">in</span> <span class=\"number\">1034</span> ms</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"协程的启动模式\"><a href=\"#协程的启动模式\" class=\"headerlink\" title=\"协程的启动模式\"></a>协程的启动模式</h3><ul>\n<li><p><strong>DEFAULT</strong>：协程创建后，立即开始调度，在调度前如果协程被取消，其将直接进入取消响应的状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode DEFAULT`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(start = CoroutineStart.DEFAULT) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Job finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    job.cancel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 什么也不打印</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ATOMIC</strong>：协程创建后，立即开始调度，协程执行到第一个挂起点之前不响应取消。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode ATOMIC`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(start = CoroutineStart.ATOMIC) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">2100000000</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    count++</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Before delay <span class=\"variable\">$time</span> ms. count=<span class=\"variable\">$count</span>&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Job finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    job.cancel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Before delay <span class=\"number\">1513</span> ms, count=<span class=\"number\">1050000000.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>LAZY</strong>：只有协程被需要时，包括主动调用协程的 start、join 或者 await 等函数时才会开始调度，如果调度前就被取消，那么该协程将直接进入异常结束状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode LAZY`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = async (start = CoroutineStart.LAZY) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Job finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调度前就取消，会抛出异常 kotlinx.coroutines.JobCancellationException</span></span><br><span class=\"line\">    job.cancel()</span><br><span class=\"line\">    job.await()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>UNDISPATCHED</strong>：协程创建后立即在<strong>当前函数调用栈</strong>中执行，直到遇到第一个真正挂起的点。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode UNDISPATCHED`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = async(context = Dispatchers.IO, start = CoroutineStart.UNDISPATCHED) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;thread1: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;thread2: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">thread1: Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br><span class=\"line\">thread2: DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"协程的作用域构建器\"><a href=\"#协程的作用域构建器\" class=\"headerlink\" title=\"协程的作用域构建器\"></a>协程的作用域构建器</h3><h4 id=\"coroutineScope-与-runBlocking\"><a href=\"#coroutineScope-与-runBlocking\" class=\"headerlink\" title=\"coroutineScope 与 runBlocking\"></a>coroutineScope 与 runBlocking</h4><ul>\n<li>runBlocking 是常规函数，而 coroutineScope 是挂起函数。</li>\n<li>它们都会等待其协程体结束，主要区别在于 runBlocking 会阻塞当前线程来等待，而 coroutineScope 只是挂起，会释放底层线程用于其它用途。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine coroutineScope builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    coroutineScope &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">400</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job1 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job2 finished.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job2 finished.</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.IllegalArgumentException...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"coroutineScope-与-supervisorScope\"><a href=\"#coroutineScope-与-supervisorScope\" class=\"headerlink\" title=\"coroutineScope 与 supervisorScope\"></a>coroutineScope 与 supervisorScope</h4><ul>\n<li>coroutineScope：一个协程失败了，所有其它兄弟协程也会被取消。</li>\n<li>supervisorScope：一个协程失败了，不会影响其它兄弟协程。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine supervisorScope builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    supervisorScope &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">400</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job1 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job2 finished.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job2 finished.</span><br><span class=\"line\">job1 finished.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Job-对象\"><a href=\"#Job-对象\" class=\"headerlink\" title=\"Job 对象\"></a>Job 对象</h3><ul>\n<li>对于每一个创建的协程（通过 launch 或者 async），会返回一个 Job 实例，该实例是协程的唯一标示，并且负责管理协程的生命周期。</li>\n<li>一个任务可以包含一系列状态：新创建（<strong>New</strong>）、活跃（<strong>Active</strong>）、完成中（<strong>Completing</strong>）、已完成（<strong>Completed</strong>）、取消中（<strong>Cancelling</strong>）和已取消（<strong>Cancelled</strong>）。虽然我们无法直接访问这些状态，但是我们可以访问 Job 的属性：isActive、isCancelled 和 isCompleted。</li>\n</ul>\n<h3 id=\"Job-的生命周期\"><a href=\"#Job-的生命周期\" class=\"headerlink\" title=\"Job 的生命周期\"></a>Job 的生命周期</h3><p>如果协程处于活跃状态，协程运行出错或者调用 job.cancel() 都会将当前任务置为取消中（Cancelling）状态（isActive &#x3D; false，isCancelled &#x3D; true）。当所有的子协程都完成后，协程会进入已取消（Cancelled）状态，此时 isCompleted &#x3D; true。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/676350c3f83e92cda2f87c2b90471451.png\"> </p>\n<h3 id=\"协程的取消\"><a href=\"#协程的取消\" class=\"headerlink\" title=\"协程的取消\"></a>协程的取消</h3><ul>\n<li><p>取消作用域会取消它的子协程。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `scope cancel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Dispatchers.Default)</span><br><span class=\"line\">    scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job1.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job2.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    scope.cancel()</span><br><span class=\"line\">    delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无打印结果</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>被取消的子协程不会影响其余兄弟协程。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `brother cancel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Dispatchers.Default)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job1.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job2.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    job1.cancel()</span><br><span class=\"line\">    delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job2.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>协程通过抛出一个特殊的异常 CancellationException 来处理取消操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CancellationException`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job1.&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"comment\">/* job1.cancel(CancellationException(&quot;取消&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">     job1.join()*/</span></span><br><span class=\"line\">    job1.cancelAndJoin()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有 kotlinx.coroutines 中的挂起函数（withContext, delay 等）都是可取消的。</p>\n</li>\n</ul>\n<h3 id=\"CPU-密集型任务取消\"><a href=\"#CPU-密集型任务取消\" class=\"headerlink\" title=\"CPU 密集型任务取消\"></a>CPU 密集型任务取消</h3><ul>\n<li><p>isActive 是一个可以被使用在 CoroutineScope 中的扩展属性，检查 Job 是否处于活跃状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel cpu task <span class=\"keyword\">by</span> isActive`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span> &amp;&amp; isActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                nextPrintTime += <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">main: Now I can quit.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ensureActive()，如果 Job 处于非活跃状态，这个方法会抛出异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel cpu task <span class=\"keyword\">by</span> ensureActive`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            ensureActive() <span class=\"comment\">// 抛出 CancellationException 异常，但被静默处理掉了。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                nextPrintTime += <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">main: Now I can quit.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>yield 函数会检查所在协程的状态，如果已经取消，则抛出 CancellationException 予以响应。此外，它还会尝试出让线程的执行权，给其它协程提供执行机会。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel cpu task <span class=\"keyword\">by</span> yield`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            yield()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                nextPrintTime += <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">main: Now I can quit.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"协程取消的副作用\"><a href=\"#协程取消的副作用\" class=\"headerlink\" title=\"协程取消的副作用\"></a>协程取消的副作用</h3><ul>\n<li><p>在 finally 中释放资源。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `release resources`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job: I&#x27;m running finally.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m running finally.</span></span><br><span class=\"line\"><span class=\"string\">main: Now I can quit.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>use 函数：该函数只能被实现了 Closeable 的对象使用，程序结束的时候会自动调用 close 方法，适合文件对象。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `use function`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*val br = BufferedReader(FileReader(&quot;E:\\\\Hello.txt&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">    var line: String?</span></span><br><span class=\"line\"><span class=\"comment\">    try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        while (true) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            line = br.readLine() ?: break</span></span><br><span class=\"line\"><span class=\"comment\">            println(line)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; catch (e: Exception) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; finally &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            br.close()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; catch (e: Exception) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    BufferedReader(FileReader(<span class=\"string\">&quot;E:\\\\Hello.txt&quot;</span>)).use &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> line: String?</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            line = it.readLine() ?: <span class=\"keyword\">break</span></span><br><span class=\"line\">            println(line)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"不能取消的任务\"><a href=\"#不能取消的任务\" class=\"headerlink\" title=\"不能取消的任务\"></a>不能取消的任务</h3><p>处于取消中状态的协程不能够挂起（运行不能取消的代码），当协程被取消后需要调用挂起函数，我们需要将清理任务的代码放置于 NonCancellable CoroutineContext 中。这样会挂起运行中的代码，并保持协程取消中状态直到任务处理完成。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel with NonCancelable`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            withContext(NonCancellable) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m running finally.&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: And I&#x27;ve just delayed for 1 sec because I&#x27;m non-cancellable.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m running finally.</span></span><br><span class=\"line\"><span class=\"string\">job: And I&#x27;</span>ve just delayed <span class=\"keyword\">for</span> <span class=\"number\">1</span> sec because I<span class=\"string\">&#x27;m non-cancellable.</span></span><br><span class=\"line\"><span class=\"string\">main: Now I can quit.</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>NonCancellable 可用于常驻任务。</p>\n</blockquote>\n<h3 id=\"超时任务\"><a href=\"#超时任务\" class=\"headerlink\" title=\"超时任务\"></a>超时任务</h3><ul>\n<li><p>很多情况下取消一个协程的理由是它有可能超时。用 withTimeout 进行超时操作，如果规定时间内未完成任务则会抛出异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `deal with withTimeout`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    withTimeout(<span class=\"number\">1300</span>) &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Timed out waiting for 1300 ms</span></span><br><span class=\"line\"><span class=\"string\">kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>withTimeoutOrNull 通过返回 null 来进行超时操作，从而替代抛出一个异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `deal with withTimeoutOrNull`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = withTimeoutOrNull(<span class=\"number\">1300</span>) &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"string\">&quot;Done&quot;</span></span><br><span class=\"line\">    &#125; ?: <span class=\"string\">&quot;Undone&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Result is <span class=\"variable\">$result</span>.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">Result is Undone.</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"协程的上下文\"><a href=\"#协程的上下文\" class=\"headerlink\" title=\"协程的上下文\"></a>协程的上下文</h3><p>CoroutineContext 是一组用于定义协程行为的元素，它由如下几项构成：</p>\n<ul>\n<li><strong>Job</strong>：控制协程的生命周期。</li>\n<li><strong>CoroutineDispatcher</strong>：向合适的线程分发任务。</li>\n<li><strong>CoroutineName</strong>：协程的名称，调试的时候很有用。</li>\n<li><strong>CoroutineExceptionHandler</strong>：处理未被捕获的异常。</li>\n</ul>\n<h4 id=\"组合上下文中的元素\"><a href=\"#组合上下文中的元素\" class=\"headerlink\" title=\"组合上下文中的元素\"></a>组合上下文中的元素</h4><p>有时我们需要在协程上下文中定义多个元素，我们可以使用 “+” 操作符来实现。比如，我们可以显示指定一个调度器来启动协程并且同时显示指定一个命名：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CoroutineContext`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    launch(Dispatchers.Default + CoroutineName(<span class=\"string\">&quot;hello&quot;</span>)) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;I&#x27;m working in thread <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">I<span class=\"string\">&#x27;m working in thread DefaultDispatcher-worker-1 @hello#2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协程上下文的继承\"><a href=\"#协程上下文的继承\" class=\"headerlink\" title=\"协程上下文的继承\"></a>协程上下文的继承</h4><p>对于新创建的协程，它的 CoroutineContext 会包含一个全新的 Job 实例，它会帮助我们控制协程的生命周期。而<strong>剩下的元素会从 CoroutineContext 的父类继承</strong>，该父类可能是另外一个协程或者创建该协程的 CoroutineScope。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CoroutineContext extend`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job() + Dispatchers.IO + CoroutineName(<span class=\"string\">&quot;hello&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新的协程会将 CoroutineScope 作为父级</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;coroutineContext[Job]&#125;</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = async &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 通过 async 创建的新协程会将当前协程作为父级</span></span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;coroutineContext[Job]&#125;</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">        &#125;.await()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello#2&quot;</span>:StandaloneCoroutine&#123;Active&#125;@55b8c583 DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@hello</span>#<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello#3&quot;</span>:DeferredCoroutine&#123;Active&#125;@64e55ef0 DefaultDispatcher-worker-<span class=\"number\">3</span> <span class=\"meta\">@hello</span>#<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协程上下文的公式\"><a href=\"#协程上下文的公式\" class=\"headerlink\" title=\"协程上下文的公式\"></a>协程上下文的公式</h4><p>协程上下文 &#x3D; <strong>默认值</strong> + <strong>继承的 CoroutineContext</strong> + <strong>参数</strong>。</p>\n<ul>\n<li>一些元素包含默认值：Dispatchers.Default 是默认的 CoroutineDispatcher，以及 “coroutine” 作为默认的 CoroutineName。</li>\n<li>继承的 CoroutineContext 是 CoroutineScope 或者其父协程的 CoroutineContext。</li>\n<li>传入协程构建器的参数的优先级高于继承的上下文，隐藏会覆盖对应参数值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CoroutineContext extend2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> coroutineExceptionHandler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;CoroutineExceptionHandler got <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job() + Dispatchers.Main + coroutineExceptionHandler)</span><br><span class=\"line\">    <span class=\"comment\">// 新的 CoroutineContext = 父级 CoroutineContext + Job()</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新协程</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;coroutineContext[Job]&#125;</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;coroutine#2&quot;</span>:StandaloneCoroutine&#123;Active&#125;@78ec7afa DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"协程的异常处理\"><a href=\"#协程的异常处理\" class=\"headerlink\" title=\"协程的异常处理\"></a>协程的异常处理</h3><h4 id=\"异常处理的必要性\"><a href=\"#异常处理的必要性\" class=\"headerlink\" title=\"异常处理的必要性\"></a>异常处理的必要性</h4><p>当应用出现一些意外情况时，给用户提供合适的体验非常重要。一方面，目睹应用崩溃是个很糟糕的体验，另一方面，当用户操作失败时，也必须要能给出正确的提示信息。</p>\n<h4 id=\"异常的传播\"><a href=\"#异常的传播\" class=\"headerlink\" title=\"异常的传播\"></a>异常的传播</h4><p>协程构建器有两种形式：<strong>自动传播异常</strong>（launch 与 actor），<strong>向用户暴露异常</strong>（async 与 produce）。当这些构建器用于创建一个<strong>根协程</strong>时（该协程不是另一个协程的子协程），前者这类构建器，异常会在它发生的第一时间被抛出，而后者则依赖用户来最终消费异常，例如通过 await 或 receive。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `exception propagation`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IndexOutOfBoundsException()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;Caught IndexOutOfBoundsException&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> deferred = GlobalScope.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        deferred.await()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught ArithmeticException&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught IndexOutOfBoundsException</span><br><span class=\"line\">Caught ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非根协程的异常\"><a href=\"#非根协程的异常\" class=\"headerlink\" title=\"非根协程的异常\"></a>非根协程的异常</h4><p>其它协程所创建的协程中，产生的异常总是会被传播。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `exception propagation2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch &#123;</span><br><span class=\"line\">        async &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 async 抛出异常，launch 就会立刻抛出异常，而不会调用 .await()</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;DefaultDispatcher-worker-1 @coroutine#3&quot;</span> java.lang.IllegalArgumentException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常的传播特性\"><a href=\"#异常的传播特性\" class=\"headerlink\" title=\"异常的传播特性\"></a>异常的传播特性</h4><p>当一个协程由于一个异常而运行失败时，它会传播这个异常并传递给它的父级。接下来，父级会进行下面几步操作：</p>\n<ul>\n<li>取消它的子级。</li>\n<li>取消它自己。</li>\n<li>将异常传播并传递给它的父级。</li>\n</ul>\n<h4 id=\"SupervisorJob\"><a href=\"#SupervisorJob\" class=\"headerlink\" title=\"SupervisorJob\"></a>SupervisorJob</h4><ul>\n<li>使用 SupervisorJob 时，一个子协程的运行失败不会影响到其它子协程。SupervisorJob 不会传播异常给它的父级，它会<strong>让子协程自己处理异常</strong>。</li>\n<li>这种需求常见于在作用域内定义作业的 UI 组件，如果任一个 UI 的子作业执行失败了，它并不总是有必要取消整个 UI 组件，但是如果 UI 组件被销毁了，由于它的结果不再被需要了，它就有必要使所有的子作业执行失败。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test SupervisorJob`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> supervisor = CoroutineScope(SupervisorJob())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = supervisor.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;child 1.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = supervisor.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;child 2 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//        delay(200)</span></span><br><span class=\"line\"><span class=\"comment\">//        supervisor.cancel()</span></span><br><span class=\"line\">    joinAll(job1, job2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">child <span class=\"number\">1.</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;DefaultDispatcher-worker-2 @coroutine#2&quot;</span> java.lang.IllegalArgumentException</span><br><span class=\"line\">一直运行中......</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"supervisorScope\"><a href=\"#supervisorScope\" class=\"headerlink\" title=\"supervisorScope\"></a>supervisorScope</h4><p>当作业自身执行失败的时候，所有子作业将会全部被取消。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test supervisorScope`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    supervisorScope &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;child 1.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;child 2 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">child <span class=\"number\">1.</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;Test worker @coroutine#2&quot;</span> java.lang.IllegalArgumentException</span><br><span class=\"line\">一直运行中......</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test supervisorScope2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    supervisorScope &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;The child is sleeping.&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;The child is cancelled.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        yield()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Throwing an exception from the scope.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> AssertionError()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">The child <span class=\"keyword\">is</span> sleeping.</span><br><span class=\"line\">Throwing an exception from the scope.</span><br><span class=\"line\">The child <span class=\"keyword\">is</span> cancelled.</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.AssertionError</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常的捕获\"><a href=\"#异常的捕获\" class=\"headerlink\" title=\"异常的捕获\"></a>异常的捕获</h4><ul>\n<li>使用 CoroutineExceptionHandler 对协程的异常进行捕获。</li>\n<li>以下的条件被满足时，异常就会被捕获。<ul>\n<li><strong>时机</strong>：异常是被自动抛出异常的协程所抛出的（使用 launch，而不是 async 时）。</li>\n<li><strong>位置</strong>：在 CoroutineScope 的 CoroutineContext 中或在一个根协程（CoroutineScope 或者 supervisorScope 的直接子协程）中。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test coroutineExceptionHandler`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> AssertionError()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> deferred = GlobalScope.async(handler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">    deferred.await()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.lang.AssertionError</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test coroutineExceptionHandler2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch(handler) &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test coroutineExceptionHandler3`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handler 放这里捕获不到异常</span></span><br><span class=\"line\">        launch(handler) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;DefaultDispatcher-worker-1 @coroutine#3&quot;</span> java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Android-中全局异常处理\"><a href=\"#Android-中全局异常处理\" class=\"headerlink\" title=\"Android 中全局异常处理\"></a>Android 中全局异常处理</h4><ul>\n<li>全局异常处理器可以获取到所有协程未处理的未捕获异常，不过它并不能对异常进行捕获，虽然<strong>不能阻止程序崩溃</strong>，全局异常处理器在程序调试和异常上报等场景中仍然有非常大的用处。</li>\n<li>我们需要在 classpath 下面创建 META-INF&#x2F;services 目录，并在其中创建一个名为 kotlinx.coroutines.CoroutineExceptionHandler 的文件，文件内容就是我们的全局异常处理器的全类名。</li>\n</ul>\n<p>正常情况捕获异常（程序不崩溃）：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">btnGlobalCoroutineExceptionHandler?.setOnClickListener &#123;</span><br><span class=\"line\">    GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;abc&quot;</span>.substring(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">D/tag: Caught java.lang.StringIndexOutOfBoundsException: length=<span class=\"number\">3</span>; index=<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>全局异常处理器获取未被捕获异常（程序崩溃）：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btnGlobalCoroutineExceptionHandler?.setOnClickListener &#123;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;abc&quot;</span>.substring(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">D/tag: Unhandled Coroutine Exception: java.lang.StringIndexOutOfBoundsException: length=<span class=\"number\">3</span>; index=<span class=\"number\">10</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    --------- beginning of crash</span><br><span class=\"line\">E/AndroidRuntime: FATAL EXCEPTION: DefaultDispatcher-worker-<span class=\"number\">1</span></span><br><span class=\"line\">    Process: com.zch.kotlin, PID: <span class=\"number\">3436</span></span><br><span class=\"line\">    java.lang.StringIndexOutOfBoundsException: length=<span class=\"number\">3</span>; index=<span class=\"number\">10</span></span><br><span class=\"line\">        at java.lang.String.substring(String.java:<span class=\"number\">1899</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取消与异常\"><a href=\"#取消与异常\" class=\"headerlink\" title=\"取消与异常\"></a>取消与异常</h4><ul>\n<li>取消与异常紧密相关，协程内部使用 CancellationException 来进行取消，这个异常会被忽略。</li>\n<li>当子协程被取消时，不会取消它的父协程。</li>\n<li>如果一个协程遇到了 CancellationException 以外的异常，它将使用该异常取消它的父协程。当父协程的所有子协程都结束后，异常才会被父协程处理。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel and exception`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> child = launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;Child is cancelled.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        yield()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Cancelling child.&quot;</span>)</span><br><span class=\"line\">        child.cancelAndJoin()</span><br><span class=\"line\">        yield()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Parent is not cancelled.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Cancelling child.</span><br><span class=\"line\">Child <span class=\"keyword\">is</span> cancelled.</span><br><span class=\"line\">Parent <span class=\"keyword\">is</span> not cancelled.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel and exception2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                withContext(NonCancellable) &#123;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;Children are cancelled, but exception is not handled until all children termination.&quot;</span>)</span><br><span class=\"line\">                    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;The first child finished its non cancellable block.&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">10</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;Second child throws an exception.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Second child throws an exception.</span><br><span class=\"line\">Children are cancelled, but exception <span class=\"keyword\">is</span> not handled until all children termination.</span><br><span class=\"line\">The first child finished its non cancellable block.</span><br><span class=\"line\">Caught java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常聚合\"><a href=\"#异常聚合\" class=\"headerlink\" title=\"异常聚合\"></a>异常聚合</h4><p>当协程的多个子协程因为异常而失败时，一般情况下取第一个异常进行处理。在第一个异常之后发生的所有其它异常，都将被绑定到第一个异常之上。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test exception aggreation`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span> <span class=\"subst\">$&#123;excption.suppressed.contentToString()&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> IndexOutOfBoundsException()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IOException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.io.IOException [java.lang.IndexOutOfBoundsException, java.lang.ArithmeticException]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Flow\"><a href=\"#Flow\" class=\"headerlink\" title=\"Flow\"></a>Flow</h3><h4 id=\"异步返回多个值的方案\"><a href=\"#异步返回多个值的方案\" class=\"headerlink\" title=\"异步返回多个值的方案\"></a>异步返回多个值的方案</h4><p>集合、序列、挂起函数、Flow。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回了多个值，但不是异步</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleList</span><span class=\"params\">()</span></span> = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回了多个值，但不是异步（一次返回一个值）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleSequence</span><span class=\"params\">()</span></span> = sequence &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>) <span class=\"comment\">// 阻塞</span></span><br><span class=\"line\"><span class=\"comment\">//            delay(1000) // 不能用</span></span><br><span class=\"line\">        yield(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回了多个值，是异步（一次性返回了多个值）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleList2</span><span class=\"params\">()</span></span>: List&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回了多个值，是异步（一次返回一个值）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>) <span class=\"comment\">// 模拟耗时操作</span></span><br><span class=\"line\">        emit(i) <span class=\"comment\">// 发射，返回一个元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test multiple values`<span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        simpleList().forEach &#123; println(it) &#125;</span></span><br><span class=\"line\">    simpleSequence().forEach &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test multiple values2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    simpleList2().forEach &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test multiple values3`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 启动另外一个协程，证明 simpleFlow 没有阻塞主线程</span></span><br><span class=\"line\">    launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;I&#x27;m not blocked <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">1500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    simpleFlow().collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flow-与其它方式的区别\"><a href=\"#Flow-与其它方式的区别\" class=\"headerlink\" title=\"Flow 与其它方式的区别\"></a>Flow 与其它方式的区别</h4><ul>\n<li>名为 flow 的 Flow 类型构建器函数。</li>\n<li>flow{…} 构建块中的代码可以挂起。</li>\n<li>函数 simpleFlow 不再标有 suspend 修饰符。</li>\n<li>流使用 emit 函数发射值。</li>\n<li>流使用 collect 函数收集值。</li>\n</ul>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1663391441985.png\"> </p>\n<h4 id=\"冷流\"><a href=\"#冷流\" class=\"headerlink\" title=\"冷流\"></a>冷流</h4><p>Flow 是一种类似于序列的冷流，flow 构建器中的代码直到流被收集的时候才运行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow2</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Flow started.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow <span class=\"keyword\">is</span> cold`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> flow = simpleFlow2()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Calling collect...&quot;</span>)</span><br><span class=\"line\">    flow.collect &#123; println(it) &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Calling collect again...&quot;</span>)</span><br><span class=\"line\">    flow.collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Calling collect...</span><br><span class=\"line\">Flow started.</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Calling collect again...</span><br><span class=\"line\">Flow started.</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的连续性\"><a href=\"#流的连续性\" class=\"headerlink\" title=\"流的连续性\"></a>流的连续性</h4><ul>\n<li>流的每次单独收集都是按顺序执行的，除非使用特殊操作符。</li>\n<li>从上游到下游每个过渡操作符都会处理每个发射出的值，然后再交给末端操作符。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow continuation`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.5</span>).asFlow().filter &#123;</span><br><span class=\"line\">        it % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;.map &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;string <span class=\"variable\">$it</span>&quot;</span></span><br><span class=\"line\">    &#125;.collect &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Collect <span class=\"variable\">$it</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Collect string <span class=\"number\">2.</span></span><br><span class=\"line\">Collect string <span class=\"number\">4.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流构建器\"><a href=\"#流构建器\" class=\"headerlink\" title=\"流构建器\"></a>流构建器</h4><ul>\n<li>flowOf 构建器定义了一个发射固定值集的流。</li>\n<li>使用 .asFlow() 扩展函数，可以将各种集合与序列转换为流。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    flowOf(<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>)</span><br><span class=\"line\">        .onEach &#123; delay(<span class=\"number\">1000</span>) &#125;</span><br><span class=\"line\">        .collect &#123; println(it) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow().collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流上下文\"><a href=\"#流上下文\" class=\"headerlink\" title=\"流上下文\"></a>流上下文</h4><ul>\n<li>流的收集总是在调用协程的上下文中发生，流的该属性称为<strong>上下文保存</strong>。</li>\n<li>flow{…} 构建器中的代码必须遵循上下文保存属性，并且不允许从其它上下文中发射（emit）。</li>\n<li>flowOn 操作符，该函数用于更改流发射的上下文。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow3</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Flow started <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.flowOn(Dispatchers.Default)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow on`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    simpleFlow3().collect &#123; println(<span class=\"string\">&quot;Collected <span class=\"variable\">$it</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Flow started DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2.</span></span><br><span class=\"line\">Collected <span class=\"number\">1</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span></span><br><span class=\"line\">Collected <span class=\"number\">2</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span></span><br><span class=\"line\">Collected <span class=\"number\">3</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果去掉 .flowOn(Dispatchers.Default)，那么发射和收集都是在 Test worker 线程中。</p>\n</blockquote>\n<h4 id=\"在指定协程中收集流\"><a href=\"#在指定协程中收集流\" class=\"headerlink\" title=\"在指定协程中收集流\"></a>在指定协程中收集流</h4><p>使用 launchIn 替换 collect，我们可以在单独的协程中启动流的收集。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">events</span><span class=\"params\">()</span></span> = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow().onEach &#123; delay(<span class=\"number\">100</span>) &#125;.flowOn(Dispatchers.Default)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow launchIn`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = events()</span><br><span class=\"line\">        .onEach &#123; println(<span class=\"string\">&quot;Event: <span class=\"variable\">$it</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>) &#125;</span><br><span class=\"line\"><span class=\"comment\">//            .launchIn(CoroutineScope(Dispatchers.IO))</span></span><br><span class=\"line\">        .launchIn(<span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        delay(200)</span></span><br><span class=\"line\"><span class=\"comment\">//        job.cancelAndJoin()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Event: <span class=\"number\">1</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br><span class=\"line\">Event: <span class=\"number\">2</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br><span class=\"line\">Event: <span class=\"number\">3</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的取消\"><a href=\"#流的取消\" class=\"headerlink\" title=\"流的取消\"></a>流的取消</h4><p>流采用与协程同样的协作取消。像往常一样，流的收集可以是当流在一个可取消的挂起函数（例如 delay）中挂起的时候取消。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow4</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel flow`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    withTimeoutOrNull(<span class=\"number\">2500</span>) &#123;</span><br><span class=\"line\">        simpleFlow4().collect &#123; println(it) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Done.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Emitting <span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Emitting <span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的取消检测\"><a href=\"#流的取消检测\" class=\"headerlink\" title=\"流的取消检测\"></a>流的取消检测</h4><ul>\n<li><p>为方便起见，流构建器对每个发射值执行附加的 ensureActive 检测以进行取消，这意味着从 flow{…} 发出的繁忙循环是可以取消的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow5</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel flow check`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    simpleFlow5().collect &#123;</span><br><span class=\"line\">        println(it)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it == <span class=\"number\">3</span>) cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Emitting <span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Emitting <span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Emitting <span class=\"number\">3.</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">BlockingCoroutine was cancelled</span><br><span class=\"line\">kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=<span class=\"string\">&quot;coroutine#1&quot;</span>:BlockingCoroutine&#123;Cancelled&#125;@5da3da3d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出于性能原因，大多数其它流操作不会自动执行其它取消检测，在协程处于繁忙循环的情况下，必须明确检测是否取消，通过 <strong>cancellable</strong> 操作符来执行此操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel flow check`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.5</span>).asFlow().cancellable().collect &#123;</span><br><span class=\"line\">        println(it)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it == <span class=\"number\">3</span>) cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">BlockingCoroutine was cancelled</span><br><span class=\"line\">kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=<span class=\"string\">&quot;coroutine#1&quot;</span>:BlockingCoroutine&#123;Cancelled&#125;@63bbd396</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"背压\"><a href=\"#背压\" class=\"headerlink\" title=\"背压\"></a>背压</h4><p><strong>1、使用缓冲与 flowOn 处理背压</strong></p>\n<ul>\n<li><p>buffer()：并发运行流中发射元素的代码。</p>\n</li>\n<li><p>当必须更改 CoroutineDispatcher 时，flowOn 操作符使用了相同的缓冲机制，但是 buffer 函数显示地请求缓冲而<strong>不改变执行上下文</strong>。</p>\n</li>\n</ul>\n<p><strong>2、合并与处理最新值</strong></p>\n<ul>\n<li>conflate()：合并发射项，不对每个值进行处理。</li>\n<li>collectLastest()：取消并重新发射最后一个值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow6</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow back pressure`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        simpleFlow6()</span><br><span class=\"line\"><span class=\"comment\">//                .buffer(50) // 并行发射 3 个元素，需要 100 ms</span></span><br><span class=\"line\"><span class=\"comment\">//                .flowOn(Dispatchers.Default) // 让发射在后台线程，也是并行发射，需要 100 ms</span></span><br><span class=\"line\"><span class=\"comment\">//                .conflate()</span></span><br><span class=\"line\"><span class=\"comment\">//                .collect &#123;</span></span><br><span class=\"line\">            .collectLatest &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">300</span>) <span class=\"comment\">// 处理这个元素消耗 300 ms</span></span><br><span class=\"line\">                println(<span class=\"string\">&quot;Collected <span class=\"variable\">$it</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Collected in <span class=\"variable\">$time</span> ms.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不处理背压情况下，上面程序大概需要消耗 （100 + 300）* 3 &#x3D; 1200 ms。</p>\n<ul>\n<li>使用 buffer()，大概需要 100 + 3 * 300 &#x3D; 1000 ms，因为该方式发射元素是异步的。</li>\n<li>使用 flowOn 操作符，也是大概需要 100 + 3 * 300 &#x3D; 1000 ms，该方式发射元素也是异步，但是发射元素切换到了后台线程。</li>\n<li>使用 conflate，合并发射项，不对每个值进行处理，大概需要 100 + 2 * 300 &#x3D; 700 ms。该方式发射元素是异步的，收集过程忽略了中间的元素，只处理了前后两个元素。</li>\n<li>使用 collectLastest，上面程序大概需要消耗 700 ms。该方式发射元素也是异步，它会取消并重新发射最后一个值。</li>\n</ul>\n<h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><h5 id=\"转换操作符\"><a href=\"#转换操作符\" class=\"headerlink\" title=\"转换操作符\"></a>转换操作符</h5><ul>\n<li>可以使用操作符转换流，就像使用集合与序列一样。</li>\n<li>转换操作符应用于上游流，并返回下游流。</li>\n<li>这些操作符也是冷操作符，就像流一样。这类操作符本身不是挂起函数。</li>\n<li>它运行的速度很快，返回新的转换流的定义。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">performRequest</span><span class=\"params\">(request: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;response <span class=\"variable\">$request</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test transform flow <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\"><span class=\"comment\">//            .map &#123; performRequest(it) &#125;</span></span><br><span class=\"line\">        .transform &#123;</span><br><span class=\"line\">            emit(<span class=\"string\">&quot;Making request <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            emit(performRequest(it))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>map 转换一次。transform 可以转换发射多次。</p>\n<h5 id=\"限长操作符\"><a href=\"#限长操作符\" class=\"headerlink\" title=\"限长操作符\"></a>限长操作符</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">numbers</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">2</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;This line will not execute.&quot;</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Finally in numbers.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test limit length <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    numbers().take(<span class=\"number\">2</span>).collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Finally <span class=\"keyword\">in</span> numbers.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"末端流操作符\"><a href=\"#末端流操作符\" class=\"headerlink\" title=\"末端流操作符\"></a>末端流操作符</h5><p>末端流操作符是在流上用于启动流收集的挂起函数。collect 是最基础的末端操作符，但是还有另外一些更方便的使用的末端操作符：</p>\n<ul>\n<li>转化为各种集合，例如 toList 与 toSet。</li>\n<li>获取第一个（first）值与确保流发射单个（Single）值的操作符。</li>\n<li>使用 reduce 与 fold 将流规约到单个值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test terminal <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = (<span class=\"number\">1.</span><span class=\"number\">.5</span>).asFlow()</span><br><span class=\"line\">        .map &#123; it * it &#125;</span><br><span class=\"line\">        .reduce &#123; a, b -&gt; a + b &#125;</span><br><span class=\"line\">    println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">55</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"组合操作符\"><a href=\"#组合操作符\" class=\"headerlink\" title=\"组合操作符\"></a>组合操作符</h5><p>就像 Kotlin 标准库中的 Sequence.zip 扩展函数一样，流拥有一个 zip 操作符用于组合两个流中的相关值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test zip <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> numbs = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> strs = flowOf(<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>)</span><br><span class=\"line\">    numbs.zip(strs) &#123; a, b -&gt; <span class=\"string\">&quot;<span class=\"variable\">$a</span> -&gt; <span class=\"variable\">$b</span>&quot;</span> &#125;.collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; One</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; Two</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; Three</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test zip2 <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> numbs = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow().onEach &#123; delay(<span class=\"number\">300</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> strs = flowOf(<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>).onEach &#123; delay(<span class=\"number\">400</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    numbs.zip(strs) &#123; a, b -&gt; <span class=\"string\">&quot;<span class=\"variable\">$a</span> -&gt; <span class=\"variable\">$b</span>&quot;</span> &#125;.collect &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; One at <span class=\"number\">442</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; Two at <span class=\"number\">839</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; Three at <span class=\"number\">1246</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"展平操作符\"><a href=\"#展平操作符\" class=\"headerlink\" title=\"展平操作符\"></a>展平操作符</h5><p>流表示异步接收的值序列，所以很容易遇到这样的情况：每个值都会触发对另一个值序列的请求，然而，由于流具有异步的性质，因此需要不同的展平模式，存在一系列的流展平操作符：</p>\n<ul>\n<li>flatMapConcat 连接模式。</li>\n<li>flatMapMerge 合并模式。</li>\n<li>flatMapLastest 最新展平模式。</li>\n</ul>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1663680667795.jpg\"> </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">requestFlow</span><span class=\"params\">(i: <span class=\"type\">Int</span>)</span></span> = flow&lt;String&gt; &#123;</span><br><span class=\"line\">    emit(<span class=\"string\">&quot;<span class=\"variable\">$i</span>: First.&quot;</span>)</span><br><span class=\"line\">    delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">    emit(<span class=\"string\">&quot;<span class=\"variable\">$i</span>: Second.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flatMapConcat <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">        .onEach &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;.flatMapConcat &#123;</span><br><span class=\"line\">            requestFlow(it)</span><br><span class=\"line\">        &#125;.collect &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span>: First. at <span class=\"number\">138</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">1</span>: Second. at <span class=\"number\">665</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: First. at <span class=\"number\">774</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: Second. at <span class=\"number\">1289</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: First. at <span class=\"number\">1398</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: Second. at <span class=\"number\">1911</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flatMapMerge <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">        .onEach &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;.flatMapMerge &#123;</span><br><span class=\"line\">            requestFlow(it)</span><br><span class=\"line\">        &#125;.collect &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span>: First. at <span class=\"number\">192</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: First. at <span class=\"number\">293</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: First. at <span class=\"number\">404</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">1</span>: Second. at <span class=\"number\">698</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: Second. at <span class=\"number\">806</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: Second. at <span class=\"number\">919</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flatMapLatest <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">        .onEach &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;.flatMapLatest &#123;</span><br><span class=\"line\">            requestFlow(it)</span><br><span class=\"line\">        &#125;.collect &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span>: First. at <span class=\"number\">178</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: First. at <span class=\"number\">326</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: First. at <span class=\"number\">441</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: Second. at <span class=\"number\">943</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的异常处理\"><a href=\"#流的异常处理\" class=\"headerlink\" title=\"流的异常处理\"></a>流的异常处理</h4><p>当运算符中的发射器或代码抛出异常时，有几种处理异常的方法：</p>\n<ul>\n<li>try&#x2F;catch 块。</li>\n<li>catch 函数。</li>\n</ul>\n<p><strong>1、捕获下游异常</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">exceptionFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow exception`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        exceptionFlow().collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">            check(it &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Collect <span class=\"variable\">$it</span>.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$e</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Emitting <span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Emitting <span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Caught java.lang.IllegalStateException: Collect <span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、捕获上游异常</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow exception2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    flow &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException(<span class=\"string\">&quot;Div 0.&quot;</span>)</span><br><span class=\"line\">    &#125;.<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">    &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">        .collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Caught java.lang.ArithmeticException: Div <span class=\"number\">0.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、恢复异常</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow exception3`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    flow &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException(<span class=\"string\">&quot;Div 0.&quot;</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;.<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">        .collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.lang.ArithmeticException: Div <span class=\"number\">0.</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的完成\"><a href=\"#流的完成\" class=\"headerlink\" title=\"流的完成\"></a>流的完成</h4><p>当流收集完成时（普通情况或异常情况），它可能需要执行一个动作。</p>\n<ul>\n<li>命令式 finally 块。</li>\n<li>onCompletion 声明式处理。</li>\n</ul>\n<p>1、finally 形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow complete <span class=\"keyword\">in</span> <span class=\"keyword\">finally</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        simpleFlow().collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Done.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n<p>2、onCompletion 函数可以拿到上游异常信息，但捕获异常还是需要 catch 函数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow complete <span class=\"keyword\">in</span> onCompletion`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> RuntimeException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    simpleFlow()</span><br><span class=\"line\">        .onCompletion &#123; exception -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;Flow completed exceptionally.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .<span class=\"keyword\">catch</span> &#123; exception -&gt;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;Caught <span class=\"variable\">$exception</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Flow completed exceptionally.</span><br><span class=\"line\">Caught java.lang.RuntimeException.</span><br></pre></td></tr></table></figure>\n\n<p>3、onCompletion 函数也能拿到下游异常信息，但捕获异常需要用 try&#x2F;catch 形式。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow complete <span class=\"keyword\">in</span> onCompletion2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> RuntimeException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        simpleFlow()</span><br><span class=\"line\">            .onCompletion &#123; exception -&gt;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;Flow completed exceptionally.&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;.collect &#123;</span><br><span class=\"line\">                println(it)</span><br><span class=\"line\">                check(it &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Collect <span class=\"variable\">$it</span>.&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$e</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Flow completed exceptionally.</span><br><span class=\"line\">Caught java.lang.RuntimeException.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><h4 id=\"什么是-Channel\"><a href=\"#什么是-Channel\" class=\"headerlink\" title=\"什么是 Channel\"></a>什么是 Channel</h4><p>Channel 实际上是一个<strong>并发安全的队列</strong>，它可以用来连接协程，实现不同协程的通信。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1666439476014.jpg\"> </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test know Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"comment\">// 生产者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;send <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">            channel.send(i++)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 消费者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// delay(3000)</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> element = channel.receive()</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    joinAll(producer, consumer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">send <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">send <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Channel-的容量\"><a href=\"#Channel-的容量\" class=\"headerlink\" title=\"Channel 的容量\"></a>Channel 的容量</h4><p>Channel 实际上就是一个队列，队列中一定存在缓冲区，那么一旦这个缓冲区满了，并且一直没有人调用 receive 并取走函数，send 就需要挂起。故意让接收端的节奏放慢，发现 send 总是会挂起，直到 receive 之后才会继续往下执行。</p>\n<p>比如上面的代码让消费者延迟 3s，那么生产者 send 一个元素后，需要等消费者在 3s 之后 receive 到元素才能 send 下一个元素。因为 Channel 默认的容量是 0。</p>\n<h4 id=\"迭代-Channel\"><a href=\"#迭代-Channel\" class=\"headerlink\" title=\"迭代 Channel\"></a>迭代 Channel</h4><p>Channel 本身确实像序列，所以我们在读取的时候可以直接获取一个 Channel 的 iterator。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test iterator Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;(Channel.UNLIMITED)</span><br><span class=\"line\">    <span class=\"comment\">// 生产者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> element = i * i</span><br><span class=\"line\">            println(<span class=\"string\">&quot;send <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">            channel.send(element)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 消费者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\"><span class=\"comment\">//            val it = channel.iterator()</span></span><br><span class=\"line\"><span class=\"comment\">//            while (it.hasNext()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                val element = it.next()</span></span><br><span class=\"line\"><span class=\"comment\">//                println(&quot;receive $element.&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//                delay(2000)</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> channel) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    joinAll(producer, consumer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">send <span class=\"number\">1.</span></span><br><span class=\"line\">send <span class=\"number\">4.</span></span><br><span class=\"line\">send <span class=\"number\">9.</span></span><br><span class=\"line\">send <span class=\"number\">16.</span></span><br><span class=\"line\">send <span class=\"number\">25.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">4.</span></span><br><span class=\"line\">receive <span class=\"number\">9.</span></span><br><span class=\"line\">receive <span class=\"number\">16.</span></span><br><span class=\"line\">receive <span class=\"number\">25.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"produce-与-actor\"><a href=\"#produce-与-actor\" class=\"headerlink\" title=\"produce 与 actor\"></a>produce 与 actor</h4><ul>\n<li>构造生产者与消费者的<strong>便捷方法</strong>。</li>\n<li>我们可以通过 produce 方法启动一个生产者协程，并返回一个 ReceiveChannel，其它协程就可以用这个 Channel 来接收数据了。反过来，我们可以用 actor 启动一个消费者协程。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test fast producer Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> receiveChannel: ReceiveChannel&lt;<span class=\"built_in\">Int</span>&gt; = GlobalScope.produce &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            send(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> receiveChannel) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    consumer.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">receive <span class=\"number\">0.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">3.</span></span><br><span class=\"line\">receive <span class=\"number\">4.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test fast consumer Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sendChannel: SendChannel&lt;<span class=\"built_in\">Int</span>&gt; = GlobalScope.actor&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> element = receive()</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">            sendChannel.send(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    producer.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">receive <span class=\"number\">0.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">3.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Channel-的关闭\"><a href=\"#Channel-的关闭\" class=\"headerlink\" title=\"Channel 的关闭\"></a>Channel 的关闭</h4><ul>\n<li>produce 和 actor 返回的 Channel 都会随着对应的协程执行完毕而关闭，也正是这样，Channel 才被称为<strong>热数据流</strong>。</li>\n<li>对于一个 Channel，如果我们调用了它的 close 方法，它会立即停止接收新元素，也就是说这时它的 <strong>isClosedForSend</strong> 会立即返回 true。而由于 Channel 缓冲区的存在，这时候可能还有一些元素没有被处理完，因此要等所有的元素都被读取之后 isCloseForReceive 才会返回 true。</li>\n<li>Channel 的生命周期最好由主导方来维护，建议<strong>由主导的一方实现关闭</strong>。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test close Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 生产者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        List(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;send <span class=\"variable\">$it</span>.&quot;</span>)</span><br><span class=\"line\">            channel.send(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        channel.close()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Close Channel. | - ClosedForSend: <span class=\"subst\">$&#123;channel.isClosedForSend&#125;</span>. | - ClosedForReceive: <span class=\"subst\">$&#123;channel.isClosedForReceive&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 消费者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> channel) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;After Consuming. | - ClosedForSend: <span class=\"subst\">$&#123;channel.isClosedForSend&#125;</span>. | - ClosedForReceive: <span class=\"subst\">$&#123;channel.isClosedForReceive&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    joinAll(producer, consumer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">send <span class=\"number\">0.</span></span><br><span class=\"line\">send <span class=\"number\">1.</span></span><br><span class=\"line\">send <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">0.</span></span><br><span class=\"line\">Close Channel. | - ClosedForSend: <span class=\"literal\">true</span>. | - ClosedForReceive: <span class=\"literal\">false</span>.</span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">After Consuming. | - ClosedForSend: <span class=\"literal\">true</span>. | - ClosedForReceive: <span class=\"literal\">true</span>.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BroadcastChannel\"><a href=\"#BroadcastChannel\" class=\"headerlink\" title=\"BroadcastChannel\"></a>BroadcastChannel</h4><p>前面提到，发送端和接收端在 Channel 中存在一对多的情形，从数据处理本身来讲，虽然有多个接收端，但是同一个元素只会被一个接收端读到。广播则不然，<strong>多个接收端不存在互斥行为</strong>。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1666502596729.jpg\"> </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test broadcastChannel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\"><span class=\"comment\">//        val broadcastChannel = BroadcastChannel&lt;Int&gt;(Channel.BUFFERED)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> broadcastChannel = channel.broadcast(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        List(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            broadcastChannel.send(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        broadcastChannel.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List(<span class=\"number\">3</span>) &#123; index -&gt;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> receiveChannel = broadcastChannel.openSubscription()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> receiveChannel) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;[#<span class=\"variable\">$index</span>] receive: <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">[#<span class=\"number\">2</span>] receive: <span class=\"number\">0.</span></span><br><span class=\"line\">[#<span class=\"number\">0</span>] receive: <span class=\"number\">0.</span></span><br><span class=\"line\">[#<span class=\"number\">1</span>] receive: <span class=\"number\">0.</span></span><br><span class=\"line\">[#<span class=\"number\">1</span>] receive: <span class=\"number\">1.</span></span><br><span class=\"line\">[#<span class=\"number\">2</span>] receive: <span class=\"number\">1.</span></span><br><span class=\"line\">[#<span class=\"number\">0</span>] receive: <span class=\"number\">1.</span></span><br><span class=\"line\">[#<span class=\"number\">1</span>] receive: <span class=\"number\">2.</span></span><br><span class=\"line\">[#<span class=\"number\">2</span>] receive: <span class=\"number\">2.</span></span><br><span class=\"line\">[#<span class=\"number\">0</span>] receive: <span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"select-多路复用\"><a href=\"#select-多路复用\" class=\"headerlink\" title=\"select - 多路复用\"></a>select - 多路复用</h3><h4 id=\"什么是多路复用\"><a href=\"#什么是多路复用\" class=\"headerlink\" title=\"什么是多路复用\"></a>什么是多路复用</h4><p>数据通信系统或计算机网络系统中，传输媒体的带宽或容量往往会大于传输单一信号的需求，为了有效地利用通信线路，希望<strong>一个信道同时传输多路信号</strong>，这就是所谓的多路复用技术（Multiplexing）。</p>\n<h4 id=\"复用多个-await\"><a href=\"#复用多个-await\" class=\"headerlink\" title=\"复用多个 await\"></a>复用多个 await</h4><p>两个 API 分别从网络和本地缓存获取数据，期望哪个先返回就先用哪个做展示。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1666531343879.png\">  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Response</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> value: T, <span class=\"keyword\">val</span> isLocal: <span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> address: String)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">getUserFromLocal</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> = async(Dispatchers.IO) &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    User(name, <span class=\"string\">&quot;Local&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">getUserFromServer</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> = async(Dispatchers.IO) &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    User(name, <span class=\"string\">&quot;Server&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test select await`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> localRequest = getUserFromLocal(<span class=\"string\">&quot;AAA&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> serverRequest = getUserFromServer(<span class=\"string\">&quot;BBB&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userResponse = select&lt;Response&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">            localRequest.onAwait &#123; Response(it, <span class=\"literal\">true</span>) &#125;</span><br><span class=\"line\">            serverRequest.onAwait &#123; Response(it, <span class=\"literal\">false</span>) &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        userResponse.value.let &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">User(name=AAA, address=Local)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复用多个-Channel\"><a href=\"#复用多个-Channel\" class=\"headerlink\" title=\"复用多个 Channel\"></a>复用多个 Channel</h4><p>跟 await 类似，会接收到最快的那个 Channel 消息。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test select Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channels = listOf(Channel&lt;<span class=\"built_in\">Int</span>&gt;(), Channel&lt;<span class=\"built_in\">Int</span>&gt;())</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        channels[<span class=\"number\">0</span>].send(<span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">50</span>)</span><br><span class=\"line\">        channels[<span class=\"number\">1</span>].send(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = select&lt;<span class=\"built_in\">Int</span>?&gt; &#123;</span><br><span class=\"line\">        channels.forEach &#123; channel -&gt;</span><br><span class=\"line\">            channel.onReceive &#123; it &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SelectClause\"><a href=\"#SelectClause\" class=\"headerlink\" title=\"SelectClause\"></a>SelectClause</h4><p>我们怎么知道哪些事件可以被 <strong>select</strong> 呢？其实所有能够被 select 的事件都是 <strong>SelectClauseN</strong> 类型，包括：</p>\n<ul>\n<li><p><strong>SelectClause0</strong>：对应事件没有返回值，例如 join 没有返回值，对应的 onJoin 就是这个类型，使用时 onJoin 的参数是一个无参函数。</p>\n</li>\n<li><p><strong>SelectClause1</strong>：对应事件有返回值，前面的 onAwait 和 onReceive 都是此类情况。</p>\n</li>\n<li><p><strong>SelectClause2</strong>：对应事件有返回值，此外还需要额外的一个参数，例如 Channel.onSend 有两个参数，第一个就是一个 Channel 数据类型的值，表示即将发送的值，第二个是发送成功时的回调。</p>\n</li>\n</ul>\n<p>如果我们想要确认挂起函数是否支持 select，只需要查看其是否存在对应的 SelectClauseN 即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test SelectClause0`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = GlobalScope.launch &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job 1&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = GlobalScope.launch &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job 2&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    select&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">        job1.onJoin &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job 1 onJoin&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        job2.onJoin &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job 2 onJoin&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job <span class=\"number\">1</span></span><br><span class=\"line\">job <span class=\"number\">2</span></span><br><span class=\"line\">job <span class=\"number\">2</span> onJoin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test SelectClause2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channels = listOf(Channel&lt;<span class=\"built_in\">Int</span>&gt;(), Channel&lt;<span class=\"built_in\">Int</span>&gt;())</span><br><span class=\"line\">    println(channels)</span><br><span class=\"line\">    launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">        select &#123;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">10</span>)</span><br><span class=\"line\">                channels[<span class=\"number\">1</span>].onSend(<span class=\"number\">200</span>) &#123; sentChannel -&gt;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;sent on <span class=\"variable\">$sentChannel</span>&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                channels[<span class=\"number\">0</span>].onSend(<span class=\"number\">100</span>) &#123; sentChannel -&gt;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;sent on <span class=\"variable\">$sentChannel</span>&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        println(channels[<span class=\"number\">0</span>].receive())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        println(channels[<span class=\"number\">1</span>].receive())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">[<span class=\"symbol\">RendezvousChannel@</span>24c4ddae&#123;EmptyQueue&#125;, <span class=\"symbol\">RendezvousChannel@</span><span class=\"number\">766653e6</span>&#123;EmptyQueue&#125;]</span><br><span class=\"line\"><span class=\"number\">200</span></span><br><span class=\"line\">sent on <span class=\"symbol\">RendezvousChannel@</span><span class=\"number\">766653e6</span>&#123;EmptyQueue&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-Flow-实现多路复用\"><a href=\"#使用-Flow-实现多路复用\" class=\"headerlink\" title=\"使用 Flow 实现多路复用\"></a>使用 Flow 实现多路复用</h4><p>多数情况下，我们可以通过构造合适的 Flow 来实现多路复用的效果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test select flow`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数 -&gt; 协程 -&gt; Flow -&gt; Flow 合并</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"string\">&quot;guest&quot;</span></span><br><span class=\"line\">    coroutineScope &#123;</span><br><span class=\"line\">        listOf(::getUserFromLocal, ::getUserFromServer)</span><br><span class=\"line\">            .map &#123; function -&gt;</span><br><span class=\"line\">                function.call(name)</span><br><span class=\"line\">            &#125;.map &#123; deferred -&gt;</span><br><span class=\"line\">                flow &#123;</span><br><span class=\"line\">                    emit(deferred.await())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;.merge()</span><br><span class=\"line\">            .collect &#123; user -&gt;</span><br><span class=\"line\">                println(user)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">User(name=guest, address=Local)</span><br><span class=\"line\">User(name=guest, address=Server)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"并发安全\"><a href=\"#并发安全\" class=\"headerlink\" title=\"并发安全\"></a>并发安全</h3><p>由于协程是基于线程的，既然线程有并发问题，那么协程也一定有。</p>\n<h4 id=\"不安全的并发访问\"><a href=\"#不安全的并发访问\" class=\"headerlink\" title=\"不安全的并发访问\"></a>不安全的并发访问</h4><p>我们使用线程在解决并发问题的时候总是会遇到线程安全问题，而 Java 平台上的 Kotlin 协程实现免不了存在并发调度的情况，因此线程安全同样值得留意。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test not safe concurrent`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印可能不一样）</span></span><br><span class=\"line\"><span class=\"number\">9997</span></span><br></pre></td></tr></table></figure>\n\n<p>Java API 中安全的并发访问：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test safe concurrent`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = AtomicInteger(<span class=\"number\">0</span>)</span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            count.incrementAndGet()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count.<span class=\"keyword\">get</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印都一样）</span></span><br><span class=\"line\"><span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协程的并发工具\"><a href=\"#协程的并发工具\" class=\"headerlink\" title=\"协程的并发工具\"></a>协程的并发工具</h4><p>除了我们在线程中常用的解决并发问题的手段之外，协程框架也提供了一些并发安全的工具，包括：</p>\n<ul>\n<li><strong>Channel</strong>：并发安全的消息通道，我们已经非常熟悉。</li>\n<li><strong>Mutex</strong>：轻量级锁，它的 lock 和 unlock 从语义上与线程锁比较类似，之所以轻量是因为它在获取不到锁时不会阻塞线程，而是挂起等待锁的释放。</li>\n<li><strong>Semaphore</strong>：轻量级信号量，信号量可以有多个，协程在获取到信号量后即可执行并发操作。当 Semaphore 的参数为 1 时，效果等价于 Mutex。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test safe concurrent tools`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mutex = Mutex()</span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            mutex.withLock &#123;</span><br><span class=\"line\">                count++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印都一样）</span></span><br><span class=\"line\"><span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test safe concurrent tools2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> semaphore = Semaphore(<span class=\"number\">1</span>)</span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            semaphore.withPermit &#123;</span><br><span class=\"line\">                count++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"避免访问外部可变状态\"><a href=\"#避免访问外部可变状态\" class=\"headerlink\" title=\"避免访问外部可变状态\"></a>避免访问外部可变状态</h4><p>编写函数时要求它不得访问外部状态，只能基于参数做运算，通过返回值提供运算结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test avoid access outer variable`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = count + List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.async &#123; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;.map &#123;</span><br><span class=\"line\">        it.await()</span><br><span class=\"line\">    &#125;.sum()</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印都一样）</span></span><br><span class=\"line\"><span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"冷流还是热流\"><a href=\"#冷流还是热流\" class=\"headerlink\" title=\"冷流还是热流\"></a>冷流还是热流</h3><ul>\n<li>Flow 是冷流，什么是冷流？简单来说，如果 Flow 有了订阅者 Collector 以后，发射出来的值才会实实在在的存在于内存之中，这跟懒加载的概念很像。</li>\n<li>与之相对的是热流，StateFlow 和 SharedFlow 是热流，在垃圾回收之前，都是存在于内存之中，并且处于活跃状态的。</li>\n</ul>\n<h3 id=\"StateFlow\"><a href=\"#StateFlow\" class=\"headerlink\" title=\"StateFlow\"></a>StateFlow</h3><p>StateFlow 是一个状态容器式<strong>可观察数据流</strong>，可以向其收集器发出当前状态更新和新状态更新。还可通过其 value 属性读取当前状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NumberViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// StateFlow 与 LiveData 很像，但能使用 Flow 的操作符。</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> number = MutableStateFlow(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        number.value++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">decrement</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        number.value--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NumberFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mNumberViewModel: NumberViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">        </span><br><span class=\"line\">        btnPlus.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 加法</span></span><br><span class=\"line\">            mNumberViewModel.increment()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        btnMinus.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 减法</span></span><br><span class=\"line\">            mNumberViewModel.decrement()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lifecycleScope.launch &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 收集数据</span></span><br><span class=\"line\">            mNumberViewModel.number.collect &#123;</span><br><span class=\"line\">                tvNumber.text = it.toString()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SharedFlow\"><a href=\"#SharedFlow\" class=\"headerlink\" title=\"SharedFlow\"></a>SharedFlow</h3><p>SharedFlow 会向从其中收集值的所有使用方发出数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 SharedFlow 模拟 EventBus 收发数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> LocalEventBus &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> events = MutableSharedFlow&lt;Event&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">postEvent</span><span class=\"params\">(event: <span class=\"type\">Event</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        events.emit(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Event</span>(<span class=\"keyword\">val</span> timestamp: <span class=\"built_in\">Long</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SharedViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> job: Job? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始刷新数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startRefresh</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启协程</span></span><br><span class=\"line\">        job = viewModelScope.launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                LocalEventBus.postEvent(Event(System.currentTimeMillis()))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止刷新数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">stopRefresh</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭协程</span></span><br><span class=\"line\">        job?.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送数据界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SharedFlowFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mSharedViewModel: SharedViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">        </span><br><span class=\"line\">        btnStart.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送[开始刷新数据]指令</span></span><br><span class=\"line\">            mSharedViewModel.startRefresh()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        btnStop.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送[停止刷新数据]指令</span></span><br><span class=\"line\">            mSharedViewModel.stopRefresh()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 收集数据界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TextsFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">        </span><br><span class=\"line\"> \t    lifecycleScope.launch &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 收集数据</span></span><br><span class=\"line\">            LocalEventBus.events.collect &#123;</span><br><span class=\"line\">                textView.text = <span class=\"string\">&quot;<span class=\"subst\">$&#123;tag&#125;</span>: <span class=\"subst\">$&#123;it.timestamp&#125;</span>&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Flow-的应用\"><a href=\"#Flow-的应用\" class=\"headerlink\" title=\"Flow 的应用\"></a>Flow 的应用</h3><h4 id=\"Flow-与文件下载的应用\"><a href=\"#Flow-与文件下载的应用\" class=\"headerlink\" title=\"Flow 与文件下载的应用\"></a>Flow 与文件下载的应用</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadStatus</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 空状态</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> None : DownloadStatus()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下载进度</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Progress</span>(<span class=\"keyword\">val</span> value: <span class=\"built_in\">Int</span>) : DownloadStatus()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 错误</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Error</span>(<span class=\"keyword\">val</span> throwable: Throwable) : DownloadStatus()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 完成</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Done</span>(<span class=\"keyword\">val</span> file: File) : DownloadStatus()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载文件管理类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> DownloadManager &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下载文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> url String 远程文件地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file File 下载到的本地文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Flow&lt;DownloadStatus&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">download</span><span class=\"params\">(url: <span class=\"type\">String</span>, file: <span class=\"type\">File</span>)</span></span>: Flow&lt;DownloadStatus&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flow &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> request = Request.Builder().url(url).<span class=\"keyword\">get</span>().build()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> response = OkHttpClient.Builder().build().newCall(request).execute()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.isSuccessful) &#123;</span><br><span class=\"line\">                response.body()!!.let &#123; body -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> total = body.contentLength()</span><br><span class=\"line\">                    <span class=\"comment\">// 文件读写</span></span><br><span class=\"line\">                    file.outputStream().use &#123; outputStream -&gt;</span><br><span class=\"line\">                        <span class=\"keyword\">val</span> inputStream = body.byteStream()</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> emittedProgress = <span class=\"number\">0L</span></span><br><span class=\"line\">                        inputStream.copyTo(outputStream) &#123; bytesCopied -&gt;</span><br><span class=\"line\">                            <span class=\"keyword\">val</span> progress = bytesCopied * <span class=\"number\">100</span> / total</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (progress - emittedProgress &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                                delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                                emit(DownloadStatus.Progress(progress.toInt()))</span><br><span class=\"line\">                                emittedProgress = progress</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                emit(DownloadStatus.Done(file))</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> IOException(response.toString())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">            file.delete()</span><br><span class=\"line\">            emit(DownloadStatus.Error(it))</span><br><span class=\"line\">        &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展方法 读写文件并返回下载进度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@receiver</span> InputStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> out OutputStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bufferSize Int</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> progress Function1&lt;Long, Unit&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> Long</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> InputStream.<span class=\"title\">copyTo</span><span class=\"params\">(<span class=\"keyword\">out</span>: <span class=\"type\">OutputStream</span>, bufferSize: <span class=\"type\">Int</span> = DEFAULT_BUFFER_SIZE, progress: (<span class=\"type\">Long</span>) -&gt; <span class=\"type\">Unit</span>)</span></span>: <span class=\"built_in\">Long</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytesCopied: <span class=\"built_in\">Long</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> buffer = ByteArray(bufferSize)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = read(buffer)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bytes &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">out</span>.write(buffer, <span class=\"number\">0</span>, bytes)</span><br><span class=\"line\">        bytesCopied += bytes</span><br><span class=\"line\">        bytes = read(buffer)</span><br><span class=\"line\"></span><br><span class=\"line\">        progress(bytesCopied)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytesCopied</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载文件界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> URL = <span class=\"string\">&quot;https://img1.baidu.com/it/u=413643897,2296924942&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">download</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// sdcard/Android/data/com.zch.flowpractice/files/pic.png</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> file = File(requireActivity().getExternalFilesDir(<span class=\"literal\">null</span>)?.path, <span class=\"string\">&quot;pic.jpg&quot;</span>)</span><br><span class=\"line\">        lifecycleScope.launch &#123;</span><br><span class=\"line\">            DownloadManager.download(URL, file).collect &#123; status -&gt;</span><br><span class=\"line\">                <span class=\"keyword\">when</span> (status) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">is</span> DownloadStatus.Progress -&gt; &#123;</span><br><span class=\"line\">                        progressBar.progress = status.value</span><br><span class=\"line\">                        tvProgress.text = <span class=\"string\">&quot;<span class=\"subst\">$&#123;status.value&#125;</span>%&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">is</span> DownloadStatus.Error -&gt; &#123;</span><br><span class=\"line\">                        ToastUtils.showLong(<span class=\"string\">&quot;下载错误&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">is</span> DownloadStatus.Done -&gt; &#123;</span><br><span class=\"line\">                        progressBar.progress = <span class=\"number\">100</span></span><br><span class=\"line\">                        tvProgress.text = <span class=\"string\">&quot;100%&quot;</span></span><br><span class=\"line\">                        ToastUtils.showShort(<span class=\"string\">&quot;下载完成&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">                        ToastUtils.showShort(<span class=\"string\">&quot;下载失败&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flow-与-Room-的应用\"><a href=\"#Flow-与-Room-的应用\" class=\"headerlink\" title=\"Flow 与 Room 的应用\"></a>Flow 与 Room 的应用</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Room 实体类声明</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 主键</span></span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> uid: <span class=\"built_in\">Int</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 数据库里存入的字段名</span></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"string\">&quot;first_name&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> firstName: String,</span><br><span class=\"line\">    <span class=\"comment\">// 数据库里存入的字段名</span></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"string\">&quot;last_name&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> lastName: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dao 类声明</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里设置了一下冲突，如果两条记录相同则会替换</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里不需要挂起（返回 Flow 或 LiveData 都不需要）</span></span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;SELECT * FROM user&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAll</span><span class=\"params\">()</span></span>: Flow&lt;List&lt;User&gt;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库操作类</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * entities      数据库里存入的表，可是多个</span></span><br><span class=\"line\"><span class=\"comment\"> * version       数据库的版本号</span></span><br><span class=\"line\"><span class=\"comment\"> * exportSchema  是否生成 json 文件，用于查看数据库的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Database(entities = [User::class], version = 1, exportSchema = false)</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDataBase</span> : <span class=\"type\">RoomDatabase</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Dao 对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">UserDao</span><span class=\"params\">()</span></span>: UserDao</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: AppDataBase? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: AppDataBase &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对象锁</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance ?: synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                Room.databaseBuilder(context, AppDataBase::<span class=\"keyword\">class</span>.java, <span class=\"string\">&quot;user_db&quot;</span>)</span><br><span class=\"line\">                    .build().also &#123; instance = it &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * User ViewModel</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserViewModel</span>(app: Application) : AndroidViewModel(app) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user User</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            AppDataBase.getInstance(getApplication()).UserDao().insert(user)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Flow&lt;List&lt;User&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAll</span><span class=\"params\">()</span></span>: Flow&lt;List&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AppDataBase.getInstance(getApplication()).UserDao().getAll()</span><br><span class=\"line\">            .<span class=\"keyword\">catch</span> &#123; e -&gt;</span><br><span class=\"line\">                e.printStackTrace()</span><br><span class=\"line\">            &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserFragment</span> : <span class=\"type\">BaseBindingFragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBinding: FragmentUserBinding <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        FragmentUserBinding.inflate(layoutInflater)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mUserAdapter: UserAdapter <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        UserAdapter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mUserViewModel: UserViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBindingRoot</span><span class=\"params\">()</span></span> = mBinding.root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mBinding.rvUser.adapter = mUserAdapter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initEvent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mBinding.btnAddUser.setOnClickListener &#123;</span><br><span class=\"line\">            mBinding.run &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">                mUserViewModel.insert(</span><br><span class=\"line\">                    User(</span><br><span class=\"line\">                        edtUid.text.toString().toInt(),</span><br><span class=\"line\">                        edtFirstName.text.toString(),</span><br><span class=\"line\">                        edtLastName.text.toString()</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initData</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        lifecycleScope.launch &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取所有数据</span></span><br><span class=\"line\">            mUserViewModel.getAll().collect &#123;</span><br><span class=\"line\">                mUserAdapter.submitList(it)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flow-与-Retrofit-的应用\"><a href=\"#Flow-与-Retrofit-的应用\" class=\"headerlink\" title=\"Flow 与 Retrofit 的应用\"></a>Flow 与 Retrofit 的应用</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章实体类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> id 文章 id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> text 文章内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Article</span>(<span class=\"keyword\">val</span> id: <span class=\"built_in\">Int</span>, <span class=\"keyword\">val</span> text: String)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ArticleApi</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;article&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">searchArticle</span><span class=\"params\">(<span class=\"meta\">@Query(<span class=\"string\">&quot;key&quot;</span>)</span> key: <span class=\"type\">String</span>)</span></span>: List&lt;Article&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrofit 网络请求管理类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> RetrofitClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> URL = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> instance: Retrofit <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        Retrofit.Builder()</span><br><span class=\"line\">            .client(OkHttpClient.Builder().build())</span><br><span class=\"line\">            .baseUrl(URL)</span><br><span class=\"line\">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> articleApi: ArticleApi <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        instance.create(ArticleApi::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章 ViewModel</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArticleViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> articles = MutableLiveData&lt;List&lt;Article&gt;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">searchArticle</span><span class=\"params\">(key: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch(Dispatchers.Main) &#123;</span><br><span class=\"line\">            flow &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> list = RetrofitClient.articleApi.searchArticle(key)</span><br><span class=\"line\">                emit(list)</span><br><span class=\"line\">            &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">                .<span class=\"keyword\">catch</span> &#123; e -&gt; e.printStackTrace() &#125;</span><br><span class=\"line\">                .collect &#123;</span><br><span class=\"line\">                    articles.value = it</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArticleFragment</span> : <span class=\"type\">BaseBindingFragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> articleViewModel <span class=\"keyword\">by</span> viewModels&lt;ArticleViewModel&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBinding: FragmentArticleBinding <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        FragmentArticleBinding.inflate(layoutInflater)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBindingRoot</span><span class=\"params\">()</span></span> = mBinding.root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initEvent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initData</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求数据</span></span><br><span class=\"line\">        articleViewModel.searchArticle(<span class=\"string\">&quot;三国演义&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 监听数据据返回</span></span><br><span class=\"line\">        articleViewModel.articles.observe(viewLifecycleOwner) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h3 id=\"协程是什么\"><a href=\"#协程是什么\" class=\"headerlink\" title=\"协程是什么\"></a>协程是什么</h3><p>协程基于线程，它是轻量级线程。</p>\n<ul>\n<li>协程让<strong>异步逻辑同步化</strong>，杜绝回调地狱。</li>\n<li>协程最核心的点就是，函数或者一段程序能够被<strong>挂起</strong>，稍后再在挂起的位置<strong>恢复</strong>。</li>\n</ul>\n<h3 id=\"在-Android-中协程用来解决什么问题\"><a href=\"#在-Android-中协程用来解决什么问题\" class=\"headerlink\" title=\"在 Android 中协程用来解决什么问题\"></a>在 Android 中协程用来解决什么问题</h3><ul>\n<li><strong>处理耗时任务</strong>，这种任务常常会阻塞主线程。</li>\n<li><strong>保证主线程安全</strong>，即安全地从主线程调用任务 suspend 函数。</li>\n</ul>\n<h3 id=\"协程的挂起和恢复\"><a href=\"#协程的挂起和恢复\" class=\"headerlink\" title=\"协程的挂起和恢复\"></a>协程的挂起和恢复</h3><p>常规函数基础操作包括：invoke（或 call）和 return，协程增加了 suspend 和 resume。</p>\n<ul>\n<li>suspend：也称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量。</li>\n<li>resume：用于让已暂停的协程从其暂停处继续执行。</li>\n</ul>\n<h3 id=\"挂起与阻塞的区别\"><a href=\"#挂起与阻塞的区别\" class=\"headerlink\" title=\"挂起与阻塞的区别\"></a>挂起与阻塞的区别</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalScope.launch(Dispatchers.Main) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挂起</span></span><br><span class=\"line\">    delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>:after delay.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞</span></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">5000</span>)</span><br><span class=\"line\">Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>:after sleep.&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挂起函数\"><a href=\"#挂起函数\" class=\"headerlink\" title=\"挂起函数\"></a>挂起函数</h3><ul>\n<li>使用 suspend 关键字修饰的函数叫做挂起函数。</li>\n<li>挂起函数只能在<strong>协程体内</strong>或<strong>其它挂起函数内</strong>调用。</li>\n</ul>\n<h3 id=\"协程的两部分\"><a href=\"#协程的两部分\" class=\"headerlink\" title=\"协程的两部分\"></a>协程的两部分</h3><p>Kotlin 的协程实现分为两个层次：</p>\n<ul>\n<li>基础设施层，标准库的协程 API，主要对协程提供了概念和语义上最基本的支持。</li>\n<li>业务框架层，协程的上层框架支持。</li>\n</ul>\n<p>基础设施层的一个 demo：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> kotlin.coroutines.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 协程体</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> continuation = <span class=\"keyword\">suspend</span> &#123;</span><br><span class=\"line\">    <span class=\"number\">5</span></span><br><span class=\"line\">&#125;.createCoroutine(<span class=\"keyword\">object</span> : Continuation&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> context: CoroutineContext = EmptyCoroutineContext</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">resumeWith</span><span class=\"params\">(result: <span class=\"type\">Result</span>&lt;<span class=\"type\">Int</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Coroutine End: <span class=\"variable\">$result</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">continuation.resume(<span class=\"built_in\">Unit</span>)</span><br></pre></td></tr></table></figure>\n\n<p>基础设施层使用的是 <code>kotlin.coroutines.*</code> 而业务框架层使用的是 <code>kotlinx.coroutines.*</code>。</p>\n<h3 id=\"调度器\"><a href=\"#调度器\" class=\"headerlink\" title=\"调度器\"></a>调度器</h3><p>所有协程必须在调度器中运行，即使它们在主线程上运行也是如此。</p>\n<ul>\n<li><p><strong>Dispatchers.Main</strong>。Android 上的主线程，用来处理 UI 交互和一些轻量级任务（调用 suspend 函数；调用 UI 函数；更新 LiveData）。</p>\n</li>\n<li><p><strong>Dispatchers.IO</strong>。非主线程，专为磁盘和网络 IO 进行了优化（数据库；文件读写；网络处理）。</p>\n</li>\n<li><p><strong>Dispatchers.Default</strong>。非主线程，专为 CPU 密集型任务进行了优化（数组排序；JSON 数据解析；处理差异判断）。</p>\n</li>\n</ul>\n<h3 id=\"任务泄漏\"><a href=\"#任务泄漏\" class=\"headerlink\" title=\"任务泄漏\"></a>任务泄漏</h3><ul>\n<li>当某个协程任务丢失，无法追踪，会导致内存、CPU、磁盘等资源浪费，甚至发送一个无用的网络请求，这种情况称为任务泄漏。</li>\n<li>为了能够避免协程泄漏，Kotlin 引入了结构化并发机制。</li>\n</ul>\n<h3 id=\"结构化并发\"><a href=\"#结构化并发\" class=\"headerlink\" title=\"结构化并发\"></a>结构化并发</h3><p>使用结构化并发可以做到：</p>\n<ul>\n<li>取消任务，当某项任务不再需要时，取消它。</li>\n<li>追踪任务，当任务正在执行时，追踪它。</li>\n<li>发出错误信号，当协程失败时，发出错误信号表明有错误发生。</li>\n</ul>\n<h3 id=\"CoroutineScope\"><a href=\"#CoroutineScope\" class=\"headerlink\" title=\"CoroutineScope\"></a>CoroutineScope</h3><p>1、定义协程必须指定其 CoroutineScope，它会跟踪所有协程，同样它还可以<strong>取消由它所启动的所有协程</strong>。</p>\n<p>2、常用的相关 API 有：</p>\n<ul>\n<li><strong>GlobalScope</strong>，生命周期是 process 级别的，即使 Activity 或 Fragment 已经被销毁，协程仍然在执行。</li>\n<li><strong>MainScope</strong>，在 Activity 中使用，可以在 onDestroy() 中取消协程。</li>\n<li><strong>viewModelScope</strong>，只能在 ViewModel 中使用，绑定 ViewModel 生命周期。</li>\n<li><strong>lifecycleScope</strong>，只能在 Activity、Fragment 中使用，会绑定 Activity 和 Fragment 的生命周期。</li>\n</ul>\n<h3 id=\"MainScope-使用\"><a href=\"#MainScope-使用\" class=\"headerlink\" title=\"MainScope 使用\"></a>MainScope 使用</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CoroutineActivity</span> : <span class=\"type\">AppCompatActivity</span>(), CoroutineScope <span class=\"keyword\">by</span> MainScope() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_coroutine)</span><br><span class=\"line\"></span><br><span class=\"line\">        submit()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">submit</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        btnSubmit?.setOnClickListener &#123;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 取消协程会抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">                     * kotlinx.coroutines.JobCancellationException: Job was cancelled; job=SupervisorJobImpl&#123;Cancelling&#125;@7e7375b</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    e.printStackTrace()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        cancel()</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"协程构建器\"><a href=\"#协程构建器\" class=\"headerlink\" title=\"协程构建器\"></a>协程构建器</h3><p>launch 和 async 构建器都可以用来启动新协程：</p>\n<ul>\n<li><strong>launch</strong>，返回一个 Job 并且不附带任何结果值。</li>\n<li><strong>async</strong>，返回一个 Deferred，Deferred 也是一个 Job，可以使用 .await() 在一个延期的值上得到它的最终结果。</li>\n</ul>\n<p>等待一个作业：</p>\n<ul>\n<li>join 和 await。</li>\n<li>组合并发。</li>\n</ul>\n<p>测试构建器：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job1 finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job2 finished.&quot;</span>)</span><br><span class=\"line\">        <span class=\"string\">&quot;job2 result&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(job2.await())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job1 finished.</span><br><span class=\"line\">job2 finished.</span><br><span class=\"line\">job2 result</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>runBlocking 把当前线程包装成一个协程，它会阻塞当前线程等待子协程执行完再结束。</p>\n</blockquote>\n<h3 id=\"join-和-await-等待协程作业\"><a href=\"#join-和-await-等待协程作业\" class=\"headerlink\" title=\"join 和 await 等待协程作业\"></a>join 和 await 等待协程作业</h3><p>测试 join：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine join`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;One&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job1.join()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Two&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job3 = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Three&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">One</span><br><span class=\"line\">Two</span><br><span class=\"line\">Three</span><br></pre></td></tr></table></figure>\n\n<p>测试 await：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine await`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;One&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job1.await()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Two&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job3 = async &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Three&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">One</span><br><span class=\"line\">Two</span><br><span class=\"line\">Three</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async-组合并发\"><a href=\"#async-组合并发\" class=\"headerlink\" title=\"async 组合并发\"></a>async 组合并发</h3><p>测试同步 sync：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine sync`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> one = doOne()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> two = doTwo()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;The result:<span class=\"subst\">$&#123;one + two&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Completed in <span class=\"variable\">$time</span> ms&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doOne</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doTwo</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">The result:<span class=\"number\">2</span></span><br><span class=\"line\">Completed <span class=\"keyword\">in</span> <span class=\"number\">2018</span> ms</span><br></pre></td></tr></table></figure>\n\n<p>测试异步 async：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine async`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> one = async &#123;</span><br><span class=\"line\">            doOne()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> two = async &#123;</span><br><span class=\"line\">            doTwo()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;The result:<span class=\"subst\">$&#123;one.await() + two.await()&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 以下形式，结果是 2m。</span></span><br><span class=\"line\"><span class=\"comment\">        val one = async &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            doOne()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;.await()</span></span><br><span class=\"line\"><span class=\"comment\">        val two = async &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            doTwo()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;.await()</span></span><br><span class=\"line\"><span class=\"comment\">        println(&quot;The result:$&#123;one + two&#125;&quot;)*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Completed in <span class=\"variable\">$time</span> ms&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">The result:<span class=\"number\">2</span></span><br><span class=\"line\">Completed <span class=\"keyword\">in</span> <span class=\"number\">1034</span> ms</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"协程的启动模式\"><a href=\"#协程的启动模式\" class=\"headerlink\" title=\"协程的启动模式\"></a>协程的启动模式</h3><ul>\n<li><p><strong>DEFAULT</strong>：协程创建后，立即开始调度，在调度前如果协程被取消，其将直接进入取消响应的状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode DEFAULT`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(start = CoroutineStart.DEFAULT) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Job finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    job.cancel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 什么也不打印</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ATOMIC</strong>：协程创建后，立即开始调度，协程执行到第一个挂起点之前不响应取消。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode ATOMIC`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(start = CoroutineStart.ATOMIC) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">2100000000</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    count++</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Before delay <span class=\"variable\">$time</span> ms. count=<span class=\"variable\">$count</span>&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">5000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Job finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    job.cancel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Before delay <span class=\"number\">1513</span> ms, count=<span class=\"number\">1050000000.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>LAZY</strong>：只有协程被需要时，包括主动调用协程的 start、join 或者 await 等函数时才会开始调度，如果调度前就被取消，那么该协程将直接进入异常结束状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode LAZY`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = async (start = CoroutineStart.LAZY) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Job finished.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调度前就取消，会抛出异常 kotlinx.coroutines.JobCancellationException</span></span><br><span class=\"line\">    job.cancel()</span><br><span class=\"line\">    job.await()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>UNDISPATCHED</strong>：协程创建后立即在<strong>当前函数调用栈</strong>中执行，直到遇到第一个真正挂起的点。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `start mode UNDISPATCHED`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = async(context = Dispatchers.IO, start = CoroutineStart.UNDISPATCHED) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;thread1: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;thread2: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">thread1: Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br><span class=\"line\">thread2: DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"协程的作用域构建器\"><a href=\"#协程的作用域构建器\" class=\"headerlink\" title=\"协程的作用域构建器\"></a>协程的作用域构建器</h3><h4 id=\"coroutineScope-与-runBlocking\"><a href=\"#coroutineScope-与-runBlocking\" class=\"headerlink\" title=\"coroutineScope 与 runBlocking\"></a>coroutineScope 与 runBlocking</h4><ul>\n<li>runBlocking 是常规函数，而 coroutineScope 是挂起函数。</li>\n<li>它们都会等待其协程体结束，主要区别在于 runBlocking 会阻塞当前线程来等待，而 coroutineScope 只是挂起，会释放底层线程用于其它用途。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine coroutineScope builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    coroutineScope &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">400</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job1 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job2 finished.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job2 finished.</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.IllegalArgumentException...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"coroutineScope-与-supervisorScope\"><a href=\"#coroutineScope-与-supervisorScope\" class=\"headerlink\" title=\"coroutineScope 与 supervisorScope\"></a>coroutineScope 与 supervisorScope</h4><ul>\n<li>coroutineScope：一个协程失败了，所有其它兄弟协程也会被取消。</li>\n<li>supervisorScope：一个协程失败了，不会影响其它兄弟协程。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `coroutine supervisorScope builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    supervisorScope &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">400</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job1 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job2 = async &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job2 finished.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job2 finished.</span><br><span class=\"line\">job1 finished.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Job-对象\"><a href=\"#Job-对象\" class=\"headerlink\" title=\"Job 对象\"></a>Job 对象</h3><ul>\n<li>对于每一个创建的协程（通过 launch 或者 async），会返回一个 Job 实例，该实例是协程的唯一标示，并且负责管理协程的生命周期。</li>\n<li>一个任务可以包含一系列状态：新创建（<strong>New</strong>）、活跃（<strong>Active</strong>）、完成中（<strong>Completing</strong>）、已完成（<strong>Completed</strong>）、取消中（<strong>Cancelling</strong>）和已取消（<strong>Cancelled</strong>）。虽然我们无法直接访问这些状态，但是我们可以访问 Job 的属性：isActive、isCancelled 和 isCompleted。</li>\n</ul>\n<h3 id=\"Job-的生命周期\"><a href=\"#Job-的生命周期\" class=\"headerlink\" title=\"Job 的生命周期\"></a>Job 的生命周期</h3><p>如果协程处于活跃状态，协程运行出错或者调用 job.cancel() 都会将当前任务置为取消中（Cancelling）状态（isActive &#x3D; false，isCancelled &#x3D; true）。当所有的子协程都完成后，协程会进入已取消（Cancelled）状态，此时 isCompleted &#x3D; true。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/676350c3f83e92cda2f87c2b90471451.png\"> </p>\n<h3 id=\"协程的取消\"><a href=\"#协程的取消\" class=\"headerlink\" title=\"协程的取消\"></a>协程的取消</h3><ul>\n<li><p>取消作用域会取消它的子协程。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `scope cancel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Dispatchers.Default)</span><br><span class=\"line\">    scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job1.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job2.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    scope.cancel()</span><br><span class=\"line\">    delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无打印结果</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>被取消的子协程不会影响其余兄弟协程。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `brother cancel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Dispatchers.Default)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job1.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = scope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job2.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    job1.cancel()</span><br><span class=\"line\">    delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job2.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>协程通过抛出一个特殊的异常 CancellationException 来处理取消操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CancellationException`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job1.&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"comment\">/* job1.cancel(CancellationException(&quot;取消&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">     job1.join()*/</span></span><br><span class=\"line\">    job1.cancelAndJoin()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有 kotlinx.coroutines 中的挂起函数（withContext, delay 等）都是可取消的。</p>\n</li>\n</ul>\n<h3 id=\"CPU-密集型任务取消\"><a href=\"#CPU-密集型任务取消\" class=\"headerlink\" title=\"CPU 密集型任务取消\"></a>CPU 密集型任务取消</h3><ul>\n<li><p>isActive 是一个可以被使用在 CoroutineScope 中的扩展属性，检查 Job 是否处于活跃状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel cpu task <span class=\"keyword\">by</span> isActive`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span> &amp;&amp; isActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                nextPrintTime += <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">main: Now I can quit.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ensureActive()，如果 Job 处于非活跃状态，这个方法会抛出异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel cpu task <span class=\"keyword\">by</span> ensureActive`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            ensureActive() <span class=\"comment\">// 抛出 CancellationException 异常，但被静默处理掉了。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                nextPrintTime += <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">main: Now I can quit.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>yield 函数会检查所在协程的状态，如果已经取消，则抛出 CancellationException 予以响应。此外，它还会尝试出让线程的执行权，给其它协程提供执行机会。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel cpu task <span class=\"keyword\">by</span> yield`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            yield()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                nextPrintTime += <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">main: Now I can quit.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"协程取消的副作用\"><a href=\"#协程取消的副作用\" class=\"headerlink\" title=\"协程取消的副作用\"></a>协程取消的副作用</h3><ul>\n<li><p>在 finally 中释放资源。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `release resources`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job: I&#x27;m running finally.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m running finally.</span></span><br><span class=\"line\"><span class=\"string\">main: Now I can quit.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>use 函数：该函数只能被实现了 Closeable 的对象使用，程序结束的时候会自动调用 close 方法，适合文件对象。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `use function`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*val br = BufferedReader(FileReader(&quot;E:\\\\Hello.txt&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">    var line: String?</span></span><br><span class=\"line\"><span class=\"comment\">    try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        while (true) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            line = br.readLine() ?: break</span></span><br><span class=\"line\"><span class=\"comment\">            println(line)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; catch (e: Exception) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; finally &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            br.close()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; catch (e: Exception) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    BufferedReader(FileReader(<span class=\"string\">&quot;E:\\\\Hello.txt&quot;</span>)).use &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> line: String?</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            line = it.readLine() ?: <span class=\"keyword\">break</span></span><br><span class=\"line\">            println(line)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"不能取消的任务\"><a href=\"#不能取消的任务\" class=\"headerlink\" title=\"不能取消的任务\"></a>不能取消的任务</h3><p>处于取消中状态的协程不能够挂起（运行不能取消的代码），当协程被取消后需要调用挂起函数，我们需要将清理任务的代码放置于 NonCancellable CoroutineContext 中。这样会挂起运行中的代码，并保持协程取消中状态直到任务处理完成。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `cancel with NonCancelable`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            withContext(NonCancellable) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: I&#x27;m running finally.&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                println(<span class=\"string\">&quot;job: And I&#x27;ve just delayed for 1 sec because I&#x27;m non-cancellable.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m running finally.</span></span><br><span class=\"line\"><span class=\"string\">job: And I&#x27;</span>ve just delayed <span class=\"keyword\">for</span> <span class=\"number\">1</span> sec because I<span class=\"string\">&#x27;m non-cancellable.</span></span><br><span class=\"line\"><span class=\"string\">main: Now I can quit.</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>NonCancellable 可用于常驻任务。</p>\n</blockquote>\n<h3 id=\"超时任务\"><a href=\"#超时任务\" class=\"headerlink\" title=\"超时任务\"></a>超时任务</h3><ul>\n<li><p>很多情况下取消一个协程的理由是它有可能超时。用 withTimeout 进行超时操作，如果规定时间内未完成任务则会抛出异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `deal with withTimeout`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    withTimeout(<span class=\"number\">1300</span>) &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Timed out waiting for 1300 ms</span></span><br><span class=\"line\"><span class=\"string\">kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>withTimeoutOrNull 通过返回 null 来进行超时操作，从而替代抛出一个异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `deal with withTimeoutOrNull`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = withTimeoutOrNull(<span class=\"number\">1300</span>) &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"string\">&quot;Done&quot;</span></span><br><span class=\"line\">    &#125; ?: <span class=\"string\">&quot;Undone&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Result is <span class=\"variable\">$result</span>.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">Result is Undone.</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"协程的上下文\"><a href=\"#协程的上下文\" class=\"headerlink\" title=\"协程的上下文\"></a>协程的上下文</h3><p>CoroutineContext 是一组用于定义协程行为的元素，它由如下几项构成：</p>\n<ul>\n<li><strong>Job</strong>：控制协程的生命周期。</li>\n<li><strong>CoroutineDispatcher</strong>：向合适的线程分发任务。</li>\n<li><strong>CoroutineName</strong>：协程的名称，调试的时候很有用。</li>\n<li><strong>CoroutineExceptionHandler</strong>：处理未被捕获的异常。</li>\n</ul>\n<h4 id=\"组合上下文中的元素\"><a href=\"#组合上下文中的元素\" class=\"headerlink\" title=\"组合上下文中的元素\"></a>组合上下文中的元素</h4><p>有时我们需要在协程上下文中定义多个元素，我们可以使用 “+” 操作符来实现。比如，我们可以显示指定一个调度器来启动协程并且同时显示指定一个命名：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CoroutineContext`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    launch(Dispatchers.Default + CoroutineName(<span class=\"string\">&quot;hello&quot;</span>)) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;I&#x27;m working in thread <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">I<span class=\"string\">&#x27;m working in thread DefaultDispatcher-worker-1 @hello#2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协程上下文的继承\"><a href=\"#协程上下文的继承\" class=\"headerlink\" title=\"协程上下文的继承\"></a>协程上下文的继承</h4><p>对于新创建的协程，它的 CoroutineContext 会包含一个全新的 Job 实例，它会帮助我们控制协程的生命周期。而<strong>剩下的元素会从 CoroutineContext 的父类继承</strong>，该父类可能是另外一个协程或者创建该协程的 CoroutineScope。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CoroutineContext extend`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job() + Dispatchers.IO + CoroutineName(<span class=\"string\">&quot;hello&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新的协程会将 CoroutineScope 作为父级</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;coroutineContext[Job]&#125;</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = async &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 通过 async 创建的新协程会将当前协程作为父级</span></span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;coroutineContext[Job]&#125;</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">        &#125;.await()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello#2&quot;</span>:StandaloneCoroutine&#123;Active&#125;@55b8c583 DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@hello</span>#<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello#3&quot;</span>:DeferredCoroutine&#123;Active&#125;@64e55ef0 DefaultDispatcher-worker-<span class=\"number\">3</span> <span class=\"meta\">@hello</span>#<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协程上下文的公式\"><a href=\"#协程上下文的公式\" class=\"headerlink\" title=\"协程上下文的公式\"></a>协程上下文的公式</h4><p>协程上下文 &#x3D; <strong>默认值</strong> + <strong>继承的 CoroutineContext</strong> + <strong>参数</strong>。</p>\n<ul>\n<li>一些元素包含默认值：Dispatchers.Default 是默认的 CoroutineDispatcher，以及 “coroutine” 作为默认的 CoroutineName。</li>\n<li>继承的 CoroutineContext 是 CoroutineScope 或者其父协程的 CoroutineContext。</li>\n<li>传入协程构建器的参数的优先级高于继承的上下文，隐藏会覆盖对应参数值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `CoroutineContext extend2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> coroutineExceptionHandler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;CoroutineExceptionHandler got <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job() + Dispatchers.Main + coroutineExceptionHandler)</span><br><span class=\"line\">    <span class=\"comment\">// 新的 CoroutineContext = 父级 CoroutineContext + Job()</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新协程</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;coroutineContext[Job]&#125;</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;coroutine#2&quot;</span>:StandaloneCoroutine&#123;Active&#125;@78ec7afa DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"协程的异常处理\"><a href=\"#协程的异常处理\" class=\"headerlink\" title=\"协程的异常处理\"></a>协程的异常处理</h3><h4 id=\"异常处理的必要性\"><a href=\"#异常处理的必要性\" class=\"headerlink\" title=\"异常处理的必要性\"></a>异常处理的必要性</h4><p>当应用出现一些意外情况时，给用户提供合适的体验非常重要。一方面，目睹应用崩溃是个很糟糕的体验，另一方面，当用户操作失败时，也必须要能给出正确的提示信息。</p>\n<h4 id=\"异常的传播\"><a href=\"#异常的传播\" class=\"headerlink\" title=\"异常的传播\"></a>异常的传播</h4><p>协程构建器有两种形式：<strong>自动传播异常</strong>（launch 与 actor），<strong>向用户暴露异常</strong>（async 与 produce）。当这些构建器用于创建一个<strong>根协程</strong>时（该协程不是另一个协程的子协程），前者这类构建器，异常会在它发生的第一时间被抛出，而后者则依赖用户来最终消费异常，例如通过 await 或 receive。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `exception propagation`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IndexOutOfBoundsException()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;Caught IndexOutOfBoundsException&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> deferred = GlobalScope.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        deferred.await()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught ArithmeticException&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught IndexOutOfBoundsException</span><br><span class=\"line\">Caught ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非根协程的异常\"><a href=\"#非根协程的异常\" class=\"headerlink\" title=\"非根协程的异常\"></a>非根协程的异常</h4><p>其它协程所创建的协程中，产生的异常总是会被传播。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `exception propagation2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch &#123;</span><br><span class=\"line\">        async &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 async 抛出异常，launch 就会立刻抛出异常，而不会调用 .await()</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;DefaultDispatcher-worker-1 @coroutine#3&quot;</span> java.lang.IllegalArgumentException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常的传播特性\"><a href=\"#异常的传播特性\" class=\"headerlink\" title=\"异常的传播特性\"></a>异常的传播特性</h4><p>当一个协程由于一个异常而运行失败时，它会传播这个异常并传递给它的父级。接下来，父级会进行下面几步操作：</p>\n<ul>\n<li>取消它的子级。</li>\n<li>取消它自己。</li>\n<li>将异常传播并传递给它的父级。</li>\n</ul>\n<h4 id=\"SupervisorJob\"><a href=\"#SupervisorJob\" class=\"headerlink\" title=\"SupervisorJob\"></a>SupervisorJob</h4><ul>\n<li>使用 SupervisorJob 时，一个子协程的运行失败不会影响到其它子协程。SupervisorJob 不会传播异常给它的父级，它会<strong>让子协程自己处理异常</strong>。</li>\n<li>这种需求常见于在作用域内定义作业的 UI 组件，如果任一个 UI 的子作业执行失败了，它并不总是有必要取消整个 UI 组件，但是如果 UI 组件被销毁了，由于它的结果不再被需要了，它就有必要使所有的子作业执行失败。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test SupervisorJob`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> supervisor = CoroutineScope(SupervisorJob())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = supervisor.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;child 1.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = supervisor.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;child 2 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//        delay(200)</span></span><br><span class=\"line\"><span class=\"comment\">//        supervisor.cancel()</span></span><br><span class=\"line\">    joinAll(job1, job2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">child <span class=\"number\">1.</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;DefaultDispatcher-worker-2 @coroutine#2&quot;</span> java.lang.IllegalArgumentException</span><br><span class=\"line\">一直运行中......</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"supervisorScope\"><a href=\"#supervisorScope\" class=\"headerlink\" title=\"supervisorScope\"></a>supervisorScope</h4><p>当作业自身执行失败的时候，所有子作业将会全部被取消。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test supervisorScope`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    supervisorScope &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;child 1.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;child 2 finished.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">child <span class=\"number\">1.</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;Test worker @coroutine#2&quot;</span> java.lang.IllegalArgumentException</span><br><span class=\"line\">一直运行中......</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test supervisorScope2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    supervisorScope &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;The child is sleeping.&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;The child is cancelled.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        yield()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Throwing an exception from the scope.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> AssertionError()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">The child <span class=\"keyword\">is</span> sleeping.</span><br><span class=\"line\">Throwing an exception from the scope.</span><br><span class=\"line\">The child <span class=\"keyword\">is</span> cancelled.</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.AssertionError</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常的捕获\"><a href=\"#异常的捕获\" class=\"headerlink\" title=\"异常的捕获\"></a>异常的捕获</h4><ul>\n<li>使用 CoroutineExceptionHandler 对协程的异常进行捕获。</li>\n<li>以下的条件被满足时，异常就会被捕获。<ul>\n<li><strong>时机</strong>：异常是被自动抛出异常的协程所抛出的（使用 launch，而不是 async 时）。</li>\n<li><strong>位置</strong>：在 CoroutineScope 的 CoroutineContext 中或在一个根协程（CoroutineScope 或者 supervisorScope 的直接子协程）中。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test coroutineExceptionHandler`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> AssertionError()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> deferred = GlobalScope.async(handler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">    deferred.await()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.lang.AssertionError</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test coroutineExceptionHandler2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch(handler) &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test coroutineExceptionHandler3`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> scope = CoroutineScope(Job())</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = scope.launch &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handler 放这里捕获不到异常</span></span><br><span class=\"line\">        launch(handler) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;DefaultDispatcher-worker-1 @coroutine#3&quot;</span> java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Android-中全局异常处理\"><a href=\"#Android-中全局异常处理\" class=\"headerlink\" title=\"Android 中全局异常处理\"></a>Android 中全局异常处理</h4><ul>\n<li>全局异常处理器可以获取到所有协程未处理的未捕获异常，不过它并不能对异常进行捕获，虽然<strong>不能阻止程序崩溃</strong>，全局异常处理器在程序调试和异常上报等场景中仍然有非常大的用处。</li>\n<li>我们需要在 classpath 下面创建 META-INF&#x2F;services 目录，并在其中创建一个名为 kotlinx.coroutines.CoroutineExceptionHandler 的文件，文件内容就是我们的全局异常处理器的全类名。</li>\n</ul>\n<p>正常情况捕获异常（程序不崩溃）：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">btnGlobalCoroutineExceptionHandler?.setOnClickListener &#123;</span><br><span class=\"line\">    GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;abc&quot;</span>.substring(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">D/tag: Caught java.lang.StringIndexOutOfBoundsException: length=<span class=\"number\">3</span>; index=<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>全局异常处理器获取未被捕获异常（程序崩溃）：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btnGlobalCoroutineExceptionHandler?.setOnClickListener &#123;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;abc&quot;</span>.substring(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">D/tag: Unhandled Coroutine Exception: java.lang.StringIndexOutOfBoundsException: length=<span class=\"number\">3</span>; index=<span class=\"number\">10</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    --------- beginning of crash</span><br><span class=\"line\">E/AndroidRuntime: FATAL EXCEPTION: DefaultDispatcher-worker-<span class=\"number\">1</span></span><br><span class=\"line\">    Process: com.zch.kotlin, PID: <span class=\"number\">3436</span></span><br><span class=\"line\">    java.lang.StringIndexOutOfBoundsException: length=<span class=\"number\">3</span>; index=<span class=\"number\">10</span></span><br><span class=\"line\">        at java.lang.String.substring(String.java:<span class=\"number\">1899</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取消与异常\"><a href=\"#取消与异常\" class=\"headerlink\" title=\"取消与异常\"></a>取消与异常</h4><ul>\n<li>取消与异常紧密相关，协程内部使用 CancellationException 来进行取消，这个异常会被忽略。</li>\n<li>当子协程被取消时，不会取消它的父协程。</li>\n<li>如果一个协程遇到了 CancellationException 以外的异常，它将使用该异常取消它的父协程。当父协程的所有子协程都结束后，异常才会被父协程处理。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel and exception`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> child = launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;Child is cancelled.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        yield()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Cancelling child.&quot;</span>)</span><br><span class=\"line\">        child.cancelAndJoin()</span><br><span class=\"line\">        yield()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Parent is not cancelled.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Cancelling child.</span><br><span class=\"line\">Child <span class=\"keyword\">is</span> cancelled.</span><br><span class=\"line\">Parent <span class=\"keyword\">is</span> not cancelled.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel and exception2`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                withContext(NonCancellable) &#123;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;Children are cancelled, but exception is not handled until all children termination.&quot;</span>)</span><br><span class=\"line\">                    delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;The first child finished its non cancellable block.&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">10</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;Second child throws an exception.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Second child throws an exception.</span><br><span class=\"line\">Children are cancelled, but exception <span class=\"keyword\">is</span> not handled until all children termination.</span><br><span class=\"line\">The first child finished its non cancellable block.</span><br><span class=\"line\">Caught java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常聚合\"><a href=\"#异常聚合\" class=\"headerlink\" title=\"异常聚合\"></a>异常聚合</h4><p>当协程的多个子协程因为异常而失败时，一般情况下取第一个异常进行处理。在第一个异常之后发生的所有其它异常，都将被绑定到第一个异常之上。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test exception aggreation`<span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, excption -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$excption</span> <span class=\"subst\">$&#123;excption.suppressed.contentToString()&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> IndexOutOfBoundsException()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> IOException()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.io.IOException [java.lang.IndexOutOfBoundsException, java.lang.ArithmeticException]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Flow\"><a href=\"#Flow\" class=\"headerlink\" title=\"Flow\"></a>Flow</h3><h4 id=\"异步返回多个值的方案\"><a href=\"#异步返回多个值的方案\" class=\"headerlink\" title=\"异步返回多个值的方案\"></a>异步返回多个值的方案</h4><p>集合、序列、挂起函数、Flow。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回了多个值，但不是异步</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleList</span><span class=\"params\">()</span></span> = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回了多个值，但不是异步（一次返回一个值）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleSequence</span><span class=\"params\">()</span></span> = sequence &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>) <span class=\"comment\">// 阻塞</span></span><br><span class=\"line\"><span class=\"comment\">//            delay(1000) // 不能用</span></span><br><span class=\"line\">        yield(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回了多个值，是异步（一次性返回了多个值）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleList2</span><span class=\"params\">()</span></span>: List&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回了多个值，是异步（一次返回一个值）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>) <span class=\"comment\">// 模拟耗时操作</span></span><br><span class=\"line\">        emit(i) <span class=\"comment\">// 发射，返回一个元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test multiple values`<span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        simpleList().forEach &#123; println(it) &#125;</span></span><br><span class=\"line\">    simpleSequence().forEach &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test multiple values2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    simpleList2().forEach &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test multiple values3`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 启动另外一个协程，证明 simpleFlow 没有阻塞主线程</span></span><br><span class=\"line\">    launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;I&#x27;m not blocked <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">1500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    simpleFlow().collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flow-与其它方式的区别\"><a href=\"#Flow-与其它方式的区别\" class=\"headerlink\" title=\"Flow 与其它方式的区别\"></a>Flow 与其它方式的区别</h4><ul>\n<li>名为 flow 的 Flow 类型构建器函数。</li>\n<li>flow{…} 构建块中的代码可以挂起。</li>\n<li>函数 simpleFlow 不再标有 suspend 修饰符。</li>\n<li>流使用 emit 函数发射值。</li>\n<li>流使用 collect 函数收集值。</li>\n</ul>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1663391441985.png\"> </p>\n<h4 id=\"冷流\"><a href=\"#冷流\" class=\"headerlink\" title=\"冷流\"></a>冷流</h4><p>Flow 是一种类似于序列的冷流，flow 构建器中的代码直到流被收集的时候才运行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow2</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Flow started.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow <span class=\"keyword\">is</span> cold`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> flow = simpleFlow2()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Calling collect...&quot;</span>)</span><br><span class=\"line\">    flow.collect &#123; println(it) &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Calling collect again...&quot;</span>)</span><br><span class=\"line\">    flow.collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Calling collect...</span><br><span class=\"line\">Flow started.</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Calling collect again...</span><br><span class=\"line\">Flow started.</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的连续性\"><a href=\"#流的连续性\" class=\"headerlink\" title=\"流的连续性\"></a>流的连续性</h4><ul>\n<li>流的每次单独收集都是按顺序执行的，除非使用特殊操作符。</li>\n<li>从上游到下游每个过渡操作符都会处理每个发射出的值，然后再交给末端操作符。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow continuation`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.5</span>).asFlow().filter &#123;</span><br><span class=\"line\">        it % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;.map &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;string <span class=\"variable\">$it</span>&quot;</span></span><br><span class=\"line\">    &#125;.collect &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Collect <span class=\"variable\">$it</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Collect string <span class=\"number\">2.</span></span><br><span class=\"line\">Collect string <span class=\"number\">4.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流构建器\"><a href=\"#流构建器\" class=\"headerlink\" title=\"流构建器\"></a>流构建器</h4><ul>\n<li>flowOf 构建器定义了一个发射固定值集的流。</li>\n<li>使用 .asFlow() 扩展函数，可以将各种集合与序列转换为流。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow builder`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    flowOf(<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>)</span><br><span class=\"line\">        .onEach &#123; delay(<span class=\"number\">1000</span>) &#125;</span><br><span class=\"line\">        .collect &#123; println(it) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow().collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流上下文\"><a href=\"#流上下文\" class=\"headerlink\" title=\"流上下文\"></a>流上下文</h4><ul>\n<li>流的收集总是在调用协程的上下文中发生，流的该属性称为<strong>上下文保存</strong>。</li>\n<li>flow{…} 构建器中的代码必须遵循上下文保存属性，并且不允许从其它上下文中发射（emit）。</li>\n<li>flowOn 操作符，该函数用于更改流发射的上下文。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow3</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Flow started <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.flowOn(Dispatchers.Default)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow on`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    simpleFlow3().collect &#123; println(<span class=\"string\">&quot;Collected <span class=\"variable\">$it</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Flow started DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2.</span></span><br><span class=\"line\">Collected <span class=\"number\">1</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span></span><br><span class=\"line\">Collected <span class=\"number\">2</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span></span><br><span class=\"line\">Collected <span class=\"number\">3</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果去掉 .flowOn(Dispatchers.Default)，那么发射和收集都是在 Test worker 线程中。</p>\n</blockquote>\n<h4 id=\"在指定协程中收集流\"><a href=\"#在指定协程中收集流\" class=\"headerlink\" title=\"在指定协程中收集流\"></a>在指定协程中收集流</h4><p>使用 launchIn 替换 collect，我们可以在单独的协程中启动流的收集。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">events</span><span class=\"params\">()</span></span> = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow().onEach &#123; delay(<span class=\"number\">100</span>) &#125;.flowOn(Dispatchers.Default)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow launchIn`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = events()</span><br><span class=\"line\">        .onEach &#123; println(<span class=\"string\">&quot;Event: <span class=\"variable\">$it</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>) &#125;</span><br><span class=\"line\"><span class=\"comment\">//            .launchIn(CoroutineScope(Dispatchers.IO))</span></span><br><span class=\"line\">        .launchIn(<span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        delay(200)</span></span><br><span class=\"line\"><span class=\"comment\">//        job.cancelAndJoin()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Event: <span class=\"number\">1</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br><span class=\"line\">Event: <span class=\"number\">2</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br><span class=\"line\">Event: <span class=\"number\">3</span> Test worker <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的取消\"><a href=\"#流的取消\" class=\"headerlink\" title=\"流的取消\"></a>流的取消</h4><p>流采用与协程同样的协作取消。像往常一样，流的收集可以是当流在一个可取消的挂起函数（例如 delay）中挂起的时候取消。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow4</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel flow`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    withTimeoutOrNull(<span class=\"number\">2500</span>) &#123;</span><br><span class=\"line\">        simpleFlow4().collect &#123; println(it) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Done.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Emitting <span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Emitting <span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的取消检测\"><a href=\"#流的取消检测\" class=\"headerlink\" title=\"流的取消检测\"></a>流的取消检测</h4><ul>\n<li><p>为方便起见，流构建器对每个发射值执行附加的 ensureActive 检测以进行取消，这意味着从 flow{…} 发出的繁忙循环是可以取消的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow5</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel flow check`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    simpleFlow5().collect &#123;</span><br><span class=\"line\">        println(it)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it == <span class=\"number\">3</span>) cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Emitting <span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Emitting <span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Emitting <span class=\"number\">3.</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">BlockingCoroutine was cancelled</span><br><span class=\"line\">kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=<span class=\"string\">&quot;coroutine#1&quot;</span>:BlockingCoroutine&#123;Cancelled&#125;@5da3da3d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出于性能原因，大多数其它流操作不会自动执行其它取消检测，在协程处于繁忙循环的情况下，必须明确检测是否取消，通过 <strong>cancellable</strong> 操作符来执行此操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test cancel flow check`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.5</span>).asFlow().cancellable().collect &#123;</span><br><span class=\"line\">        println(it)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it == <span class=\"number\">3</span>) cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">BlockingCoroutine was cancelled</span><br><span class=\"line\">kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=<span class=\"string\">&quot;coroutine#1&quot;</span>:BlockingCoroutine&#123;Cancelled&#125;@63bbd396</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"背压\"><a href=\"#背压\" class=\"headerlink\" title=\"背压\"></a>背压</h4><p><strong>1、使用缓冲与 flowOn 处理背压</strong></p>\n<ul>\n<li><p>buffer()：并发运行流中发射元素的代码。</p>\n</li>\n<li><p>当必须更改 CoroutineDispatcher 时，flowOn 操作符使用了相同的缓冲机制，但是 buffer 函数显示地请求缓冲而<strong>不改变执行上下文</strong>。</p>\n</li>\n</ul>\n<p><strong>2、合并与处理最新值</strong></p>\n<ul>\n<li>conflate()：合并发射项，不对每个值进行处理。</li>\n<li>collectLastest()：取消并重新发射最后一个值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow6</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow back pressure`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        simpleFlow6()</span><br><span class=\"line\"><span class=\"comment\">//                .buffer(50) // 并行发射 3 个元素，需要 100 ms</span></span><br><span class=\"line\"><span class=\"comment\">//                .flowOn(Dispatchers.Default) // 让发射在后台线程，也是并行发射，需要 100 ms</span></span><br><span class=\"line\"><span class=\"comment\">//                .conflate()</span></span><br><span class=\"line\"><span class=\"comment\">//                .collect &#123;</span></span><br><span class=\"line\">            .collectLatest &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">300</span>) <span class=\"comment\">// 处理这个元素消耗 300 ms</span></span><br><span class=\"line\">                println(<span class=\"string\">&quot;Collected <span class=\"variable\">$it</span> <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Collected in <span class=\"variable\">$time</span> ms.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不处理背压情况下，上面程序大概需要消耗 （100 + 300）* 3 &#x3D; 1200 ms。</p>\n<ul>\n<li>使用 buffer()，大概需要 100 + 3 * 300 &#x3D; 1000 ms，因为该方式发射元素是异步的。</li>\n<li>使用 flowOn 操作符，也是大概需要 100 + 3 * 300 &#x3D; 1000 ms，该方式发射元素也是异步，但是发射元素切换到了后台线程。</li>\n<li>使用 conflate，合并发射项，不对每个值进行处理，大概需要 100 + 2 * 300 &#x3D; 700 ms。该方式发射元素是异步的，收集过程忽略了中间的元素，只处理了前后两个元素。</li>\n<li>使用 collectLastest，上面程序大概需要消耗 700 ms。该方式发射元素也是异步，它会取消并重新发射最后一个值。</li>\n</ul>\n<h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><h5 id=\"转换操作符\"><a href=\"#转换操作符\" class=\"headerlink\" title=\"转换操作符\"></a>转换操作符</h5><ul>\n<li>可以使用操作符转换流，就像使用集合与序列一样。</li>\n<li>转换操作符应用于上游流，并返回下游流。</li>\n<li>这些操作符也是冷操作符，就像流一样。这类操作符本身不是挂起函数。</li>\n<li>它运行的速度很快，返回新的转换流的定义。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">performRequest</span><span class=\"params\">(request: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;response <span class=\"variable\">$request</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test transform flow <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\"><span class=\"comment\">//            .map &#123; performRequest(it) &#125;</span></span><br><span class=\"line\">        .transform &#123;</span><br><span class=\"line\">            emit(<span class=\"string\">&quot;Making request <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            emit(performRequest(it))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>map 转换一次。transform 可以转换发射多次。</p>\n<h5 id=\"限长操作符\"><a href=\"#限长操作符\" class=\"headerlink\" title=\"限长操作符\"></a>限长操作符</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">numbers</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">2</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;This line will not execute.&quot;</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Finally in numbers.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test limit length <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    numbers().take(<span class=\"number\">2</span>).collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Finally <span class=\"keyword\">in</span> numbers.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"末端流操作符\"><a href=\"#末端流操作符\" class=\"headerlink\" title=\"末端流操作符\"></a>末端流操作符</h5><p>末端流操作符是在流上用于启动流收集的挂起函数。collect 是最基础的末端操作符，但是还有另外一些更方便的使用的末端操作符：</p>\n<ul>\n<li>转化为各种集合，例如 toList 与 toSet。</li>\n<li>获取第一个（first）值与确保流发射单个（Single）值的操作符。</li>\n<li>使用 reduce 与 fold 将流规约到单个值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test terminal <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = (<span class=\"number\">1.</span><span class=\"number\">.5</span>).asFlow()</span><br><span class=\"line\">        .map &#123; it * it &#125;</span><br><span class=\"line\">        .reduce &#123; a, b -&gt; a + b &#125;</span><br><span class=\"line\">    println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">55</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"组合操作符\"><a href=\"#组合操作符\" class=\"headerlink\" title=\"组合操作符\"></a>组合操作符</h5><p>就像 Kotlin 标准库中的 Sequence.zip 扩展函数一样，流拥有一个 zip 操作符用于组合两个流中的相关值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test zip <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> numbs = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> strs = flowOf(<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>)</span><br><span class=\"line\">    numbs.zip(strs) &#123; a, b -&gt; <span class=\"string\">&quot;<span class=\"variable\">$a</span> -&gt; <span class=\"variable\">$b</span>&quot;</span> &#125;.collect &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; One</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; Two</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; Three</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test zip2 <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> numbs = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow().onEach &#123; delay(<span class=\"number\">300</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> strs = flowOf(<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>).onEach &#123; delay(<span class=\"number\">400</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    numbs.zip(strs) &#123; a, b -&gt; <span class=\"string\">&quot;<span class=\"variable\">$a</span> -&gt; <span class=\"variable\">$b</span>&quot;</span> &#125;.collect &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; One at <span class=\"number\">442</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; Two at <span class=\"number\">839</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; Three at <span class=\"number\">1246</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"展平操作符\"><a href=\"#展平操作符\" class=\"headerlink\" title=\"展平操作符\"></a>展平操作符</h5><p>流表示异步接收的值序列，所以很容易遇到这样的情况：每个值都会触发对另一个值序列的请求，然而，由于流具有异步的性质，因此需要不同的展平模式，存在一系列的流展平操作符：</p>\n<ul>\n<li>flatMapConcat 连接模式。</li>\n<li>flatMapMerge 合并模式。</li>\n<li>flatMapLastest 最新展平模式。</li>\n</ul>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1663680667795.jpg\"> </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">requestFlow</span><span class=\"params\">(i: <span class=\"type\">Int</span>)</span></span> = flow&lt;String&gt; &#123;</span><br><span class=\"line\">    emit(<span class=\"string\">&quot;<span class=\"variable\">$i</span>: First.&quot;</span>)</span><br><span class=\"line\">    delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">    emit(<span class=\"string\">&quot;<span class=\"variable\">$i</span>: Second.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flatMapConcat <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">        .onEach &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;.flatMapConcat &#123;</span><br><span class=\"line\">            requestFlow(it)</span><br><span class=\"line\">        &#125;.collect &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span>: First. at <span class=\"number\">138</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">1</span>: Second. at <span class=\"number\">665</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: First. at <span class=\"number\">774</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: Second. at <span class=\"number\">1289</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: First. at <span class=\"number\">1398</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: Second. at <span class=\"number\">1911</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flatMapMerge <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">        .onEach &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;.flatMapMerge &#123;</span><br><span class=\"line\">            requestFlow(it)</span><br><span class=\"line\">        &#125;.collect &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span>: First. at <span class=\"number\">192</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: First. at <span class=\"number\">293</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: First. at <span class=\"number\">404</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">1</span>: Second. at <span class=\"number\">698</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: Second. at <span class=\"number\">806</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: Second. at <span class=\"number\">919</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flatMapLatest <span class=\"keyword\">operator</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\">        .onEach &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;.flatMapLatest &#123;</span><br><span class=\"line\">            requestFlow(it)</span><br><span class=\"line\">        &#125;.collect &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$it</span> at <span class=\"subst\">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span>: First. at <span class=\"number\">178</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">2</span>: First. at <span class=\"number\">326</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: First. at <span class=\"number\">441</span> ms from start.</span><br><span class=\"line\"><span class=\"number\">3</span>: Second. at <span class=\"number\">943</span> ms from start.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的异常处理\"><a href=\"#流的异常处理\" class=\"headerlink\" title=\"流的异常处理\"></a>流的异常处理</h4><p>当运算符中的发射器或代码抛出异常时，有几种处理异常的方法：</p>\n<ul>\n<li>try&#x2F;catch 块。</li>\n<li>catch 函数。</li>\n</ul>\n<p><strong>1、捕获下游异常</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">exceptionFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Emitting <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">        emit(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow exception`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        exceptionFlow().collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">            check(it &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Collect <span class=\"variable\">$it</span>.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$e</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Emitting <span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Emitting <span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Caught java.lang.IllegalStateException: Collect <span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、捕获上游异常</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow exception2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    flow &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException(<span class=\"string\">&quot;Div 0.&quot;</span>)</span><br><span class=\"line\">    &#125;.<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">    &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">        .collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Caught java.lang.ArithmeticException: Div <span class=\"number\">0.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、恢复异常</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow exception3`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    flow &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException(<span class=\"string\">&quot;Div 0.&quot;</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;.<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">        emit(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">        .collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">Caught java.lang.ArithmeticException: Div <span class=\"number\">0.</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流的完成\"><a href=\"#流的完成\" class=\"headerlink\" title=\"流的完成\"></a>流的完成</h4><p>当流收集完成时（普通情况或异常情况），它可能需要执行一个动作。</p>\n<ul>\n<li>命令式 finally 块。</li>\n<li>onCompletion 声明式处理。</li>\n</ul>\n<p>1、finally 形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow complete <span class=\"keyword\">in</span> <span class=\"keyword\">finally</span>`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = (<span class=\"number\">1.</span><span class=\"number\">.3</span>).asFlow()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        simpleFlow().collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Done.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n<p>2、onCompletion 函数可以拿到上游异常信息，但捕获异常还是需要 catch 函数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow complete <span class=\"keyword\">in</span> onCompletion`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> RuntimeException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    simpleFlow()</span><br><span class=\"line\">        .onCompletion &#123; exception -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;Flow completed exceptionally.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .<span class=\"keyword\">catch</span> &#123; exception -&gt;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;Caught <span class=\"variable\">$exception</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .collect &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Flow completed exceptionally.</span><br><span class=\"line\">Caught java.lang.RuntimeException.</span><br></pre></td></tr></table></figure>\n\n<p>3、onCompletion 函数也能拿到下游异常信息，但捕获异常需要用 try&#x2F;catch 形式。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test flow complete <span class=\"keyword\">in</span> onCompletion2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">simpleFlow</span><span class=\"params\">()</span></span> = flow &#123;</span><br><span class=\"line\">        emit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> RuntimeException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        simpleFlow()</span><br><span class=\"line\">            .onCompletion &#123; exception -&gt;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;Flow completed exceptionally.&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;.collect &#123;</span><br><span class=\"line\">                println(it)</span><br><span class=\"line\">                check(it &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Collect <span class=\"variable\">$it</span>.&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Caught <span class=\"variable\">$e</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Flow completed exceptionally.</span><br><span class=\"line\">Caught java.lang.RuntimeException.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><h4 id=\"什么是-Channel\"><a href=\"#什么是-Channel\" class=\"headerlink\" title=\"什么是 Channel\"></a>什么是 Channel</h4><p>Channel 实际上是一个<strong>并发安全的队列</strong>，它可以用来连接协程，实现不同协程的通信。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1666439476014.jpg\"> </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test know Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"comment\">// 生产者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            println(<span class=\"string\">&quot;send <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">            channel.send(i++)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 消费者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// delay(3000)</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> element = channel.receive()</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    joinAll(producer, consumer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">send <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">send <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Channel-的容量\"><a href=\"#Channel-的容量\" class=\"headerlink\" title=\"Channel 的容量\"></a>Channel 的容量</h4><p>Channel 实际上就是一个队列，队列中一定存在缓冲区，那么一旦这个缓冲区满了，并且一直没有人调用 receive 并取走函数，send 就需要挂起。故意让接收端的节奏放慢，发现 send 总是会挂起，直到 receive 之后才会继续往下执行。</p>\n<p>比如上面的代码让消费者延迟 3s，那么生产者 send 一个元素后，需要等消费者在 3s 之后 receive 到元素才能 send 下一个元素。因为 Channel 默认的容量是 0。</p>\n<h4 id=\"迭代-Channel\"><a href=\"#迭代-Channel\" class=\"headerlink\" title=\"迭代 Channel\"></a>迭代 Channel</h4><p>Channel 本身确实像序列，所以我们在读取的时候可以直接获取一个 Channel 的 iterator。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test iterator Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;(Channel.UNLIMITED)</span><br><span class=\"line\">    <span class=\"comment\">// 生产者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> element = i * i</span><br><span class=\"line\">            println(<span class=\"string\">&quot;send <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">            channel.send(element)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 消费者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\"><span class=\"comment\">//            val it = channel.iterator()</span></span><br><span class=\"line\"><span class=\"comment\">//            while (it.hasNext()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                val element = it.next()</span></span><br><span class=\"line\"><span class=\"comment\">//                println(&quot;receive $element.&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//                delay(2000)</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> channel) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    joinAll(producer, consumer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">send <span class=\"number\">1.</span></span><br><span class=\"line\">send <span class=\"number\">4.</span></span><br><span class=\"line\">send <span class=\"number\">9.</span></span><br><span class=\"line\">send <span class=\"number\">16.</span></span><br><span class=\"line\">send <span class=\"number\">25.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">4.</span></span><br><span class=\"line\">receive <span class=\"number\">9.</span></span><br><span class=\"line\">receive <span class=\"number\">16.</span></span><br><span class=\"line\">receive <span class=\"number\">25.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"produce-与-actor\"><a href=\"#produce-与-actor\" class=\"headerlink\" title=\"produce 与 actor\"></a>produce 与 actor</h4><ul>\n<li>构造生产者与消费者的<strong>便捷方法</strong>。</li>\n<li>我们可以通过 produce 方法启动一个生产者协程，并返回一个 ReceiveChannel，其它协程就可以用这个 Channel 来接收数据了。反过来，我们可以用 actor 启动一个消费者协程。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test fast producer Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> receiveChannel: ReceiveChannel&lt;<span class=\"built_in\">Int</span>&gt; = GlobalScope.produce &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            send(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> receiveChannel) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    consumer.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">receive <span class=\"number\">0.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">3.</span></span><br><span class=\"line\">receive <span class=\"number\">4.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test fast consumer Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sendChannel: SendChannel&lt;<span class=\"built_in\">Int</span>&gt; = GlobalScope.actor&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> element = receive()</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.3</span>) &#123;</span><br><span class=\"line\">            sendChannel.send(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    producer.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">receive <span class=\"number\">0.</span></span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">3.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Channel-的关闭\"><a href=\"#Channel-的关闭\" class=\"headerlink\" title=\"Channel 的关闭\"></a>Channel 的关闭</h4><ul>\n<li>produce 和 actor 返回的 Channel 都会随着对应的协程执行完毕而关闭，也正是这样，Channel 才被称为<strong>热数据流</strong>。</li>\n<li>对于一个 Channel，如果我们调用了它的 close 方法，它会立即停止接收新元素，也就是说这时它的 <strong>isClosedForSend</strong> 会立即返回 true。而由于 Channel 缓冲区的存在，这时候可能还有一些元素没有被处理完，因此要等所有的元素都被读取之后 isCloseForReceive 才会返回 true。</li>\n<li>Channel 的生命周期最好由主导方来维护，建议<strong>由主导的一方实现关闭</strong>。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test close Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 生产者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        List(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;send <span class=\"variable\">$it</span>.&quot;</span>)</span><br><span class=\"line\">            channel.send(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        channel.close()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Close Channel. | - ClosedForSend: <span class=\"subst\">$&#123;channel.isClosedForSend&#125;</span>. | - ClosedForReceive: <span class=\"subst\">$&#123;channel.isClosedForReceive&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 消费者</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer = GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> channel) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;receive <span class=\"variable\">$element</span>.&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;After Consuming. | - ClosedForSend: <span class=\"subst\">$&#123;channel.isClosedForSend&#125;</span>. | - ClosedForReceive: <span class=\"subst\">$&#123;channel.isClosedForReceive&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    joinAll(producer, consumer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">send <span class=\"number\">0.</span></span><br><span class=\"line\">send <span class=\"number\">1.</span></span><br><span class=\"line\">send <span class=\"number\">2.</span></span><br><span class=\"line\">receive <span class=\"number\">0.</span></span><br><span class=\"line\">Close Channel. | - ClosedForSend: <span class=\"literal\">true</span>. | - ClosedForReceive: <span class=\"literal\">false</span>.</span><br><span class=\"line\">receive <span class=\"number\">1.</span></span><br><span class=\"line\">receive <span class=\"number\">2.</span></span><br><span class=\"line\">After Consuming. | - ClosedForSend: <span class=\"literal\">true</span>. | - ClosedForReceive: <span class=\"literal\">true</span>.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BroadcastChannel\"><a href=\"#BroadcastChannel\" class=\"headerlink\" title=\"BroadcastChannel\"></a>BroadcastChannel</h4><p>前面提到，发送端和接收端在 Channel 中存在一对多的情形，从数据处理本身来讲，虽然有多个接收端，但是同一个元素只会被一个接收端读到。广播则不然，<strong>多个接收端不存在互斥行为</strong>。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1666502596729.jpg\"> </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test broadcastChannel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\"><span class=\"comment\">//        val broadcastChannel = BroadcastChannel&lt;Int&gt;(Channel.BUFFERED)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> channel = Channel&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> broadcastChannel = channel.broadcast(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer = GlobalScope.launch &#123;</span><br><span class=\"line\">        List(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            broadcastChannel.send(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        broadcastChannel.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List(<span class=\"number\">3</span>) &#123; index -&gt;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> receiveChannel = broadcastChannel.openSubscription()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> receiveChannel) &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;[#<span class=\"variable\">$index</span>] receive: <span class=\"variable\">$i</span>.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">[#<span class=\"number\">2</span>] receive: <span class=\"number\">0.</span></span><br><span class=\"line\">[#<span class=\"number\">0</span>] receive: <span class=\"number\">0.</span></span><br><span class=\"line\">[#<span class=\"number\">1</span>] receive: <span class=\"number\">0.</span></span><br><span class=\"line\">[#<span class=\"number\">1</span>] receive: <span class=\"number\">1.</span></span><br><span class=\"line\">[#<span class=\"number\">2</span>] receive: <span class=\"number\">1.</span></span><br><span class=\"line\">[#<span class=\"number\">0</span>] receive: <span class=\"number\">1.</span></span><br><span class=\"line\">[#<span class=\"number\">1</span>] receive: <span class=\"number\">2.</span></span><br><span class=\"line\">[#<span class=\"number\">2</span>] receive: <span class=\"number\">2.</span></span><br><span class=\"line\">[#<span class=\"number\">0</span>] receive: <span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"select-多路复用\"><a href=\"#select-多路复用\" class=\"headerlink\" title=\"select - 多路复用\"></a>select - 多路复用</h3><h4 id=\"什么是多路复用\"><a href=\"#什么是多路复用\" class=\"headerlink\" title=\"什么是多路复用\"></a>什么是多路复用</h4><p>数据通信系统或计算机网络系统中，传输媒体的带宽或容量往往会大于传输单一信号的需求，为了有效地利用通信线路，希望<strong>一个信道同时传输多路信号</strong>，这就是所谓的多路复用技术（Multiplexing）。</p>\n<h4 id=\"复用多个-await\"><a href=\"#复用多个-await\" class=\"headerlink\" title=\"复用多个 await\"></a>复用多个 await</h4><p>两个 API 分别从网络和本地缓存获取数据，期望哪个先返回就先用哪个做展示。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1666531343879.png\">  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Response</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> value: T, <span class=\"keyword\">val</span> isLocal: <span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> address: String)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">getUserFromLocal</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> = async(Dispatchers.IO) &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    User(name, <span class=\"string\">&quot;Local&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">getUserFromServer</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> = async(Dispatchers.IO) &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    User(name, <span class=\"string\">&quot;Server&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test select await`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> localRequest = getUserFromLocal(<span class=\"string\">&quot;AAA&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> serverRequest = getUserFromServer(<span class=\"string\">&quot;BBB&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userResponse = select&lt;Response&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">            localRequest.onAwait &#123; Response(it, <span class=\"literal\">true</span>) &#125;</span><br><span class=\"line\">            serverRequest.onAwait &#123; Response(it, <span class=\"literal\">false</span>) &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        userResponse.value.let &#123;</span><br><span class=\"line\">            println(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">User(name=AAA, address=Local)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复用多个-Channel\"><a href=\"#复用多个-Channel\" class=\"headerlink\" title=\"复用多个 Channel\"></a>复用多个 Channel</h4><p>跟 await 类似，会接收到最快的那个 Channel 消息。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test select Channel`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channels = listOf(Channel&lt;<span class=\"built_in\">Int</span>&gt;(), Channel&lt;<span class=\"built_in\">Int</span>&gt;())</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        channels[<span class=\"number\">0</span>].send(<span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">50</span>)</span><br><span class=\"line\">        channels[<span class=\"number\">1</span>].send(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = select&lt;<span class=\"built_in\">Int</span>?&gt; &#123;</span><br><span class=\"line\">        channels.forEach &#123; channel -&gt;</span><br><span class=\"line\">            channel.onReceive &#123; it &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SelectClause\"><a href=\"#SelectClause\" class=\"headerlink\" title=\"SelectClause\"></a>SelectClause</h4><p>我们怎么知道哪些事件可以被 <strong>select</strong> 呢？其实所有能够被 select 的事件都是 <strong>SelectClauseN</strong> 类型，包括：</p>\n<ul>\n<li><p><strong>SelectClause0</strong>：对应事件没有返回值，例如 join 没有返回值，对应的 onJoin 就是这个类型，使用时 onJoin 的参数是一个无参函数。</p>\n</li>\n<li><p><strong>SelectClause1</strong>：对应事件有返回值，前面的 onAwait 和 onReceive 都是此类情况。</p>\n</li>\n<li><p><strong>SelectClause2</strong>：对应事件有返回值，此外还需要额外的一个参数，例如 Channel.onSend 有两个参数，第一个就是一个 Channel 数据类型的值，表示即将发送的值，第二个是发送成功时的回调。</p>\n</li>\n</ul>\n<p>如果我们想要确认挂起函数是否支持 select，只需要查看其是否存在对应的 SelectClauseN 即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test SelectClause0`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job1 = GlobalScope.launch &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job 1&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job2 = GlobalScope.launch &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;job 2&quot;</span>)</span><br><span class=\"line\">        delay(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    select&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">        job1.onJoin &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job 1 onJoin&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        job2.onJoin &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;job 2 onJoin&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">job <span class=\"number\">1</span></span><br><span class=\"line\">job <span class=\"number\">2</span></span><br><span class=\"line\">job <span class=\"number\">2</span> onJoin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test SelectClause2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> channels = listOf(Channel&lt;<span class=\"built_in\">Int</span>&gt;(), Channel&lt;<span class=\"built_in\">Int</span>&gt;())</span><br><span class=\"line\">    println(channels)</span><br><span class=\"line\">    launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">        select &#123;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">10</span>)</span><br><span class=\"line\">                channels[<span class=\"number\">1</span>].onSend(<span class=\"number\">200</span>) &#123; sentChannel -&gt;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;sent on <span class=\"variable\">$sentChannel</span>&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                channels[<span class=\"number\">0</span>].onSend(<span class=\"number\">100</span>) &#123; sentChannel -&gt;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;sent on <span class=\"variable\">$sentChannel</span>&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        println(channels[<span class=\"number\">0</span>].receive())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        println(channels[<span class=\"number\">1</span>].receive())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">[<span class=\"symbol\">RendezvousChannel@</span>24c4ddae&#123;EmptyQueue&#125;, <span class=\"symbol\">RendezvousChannel@</span><span class=\"number\">766653e6</span>&#123;EmptyQueue&#125;]</span><br><span class=\"line\"><span class=\"number\">200</span></span><br><span class=\"line\">sent on <span class=\"symbol\">RendezvousChannel@</span><span class=\"number\">766653e6</span>&#123;EmptyQueue&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-Flow-实现多路复用\"><a href=\"#使用-Flow-实现多路复用\" class=\"headerlink\" title=\"使用 Flow 实现多路复用\"></a>使用 Flow 实现多路复用</h4><p>多数情况下，我们可以通过构造合适的 Flow 来实现多路复用的效果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test select flow`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数 -&gt; 协程 -&gt; Flow -&gt; Flow 合并</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"string\">&quot;guest&quot;</span></span><br><span class=\"line\">    coroutineScope &#123;</span><br><span class=\"line\">        listOf(::getUserFromLocal, ::getUserFromServer)</span><br><span class=\"line\">            .map &#123; function -&gt;</span><br><span class=\"line\">                function.call(name)</span><br><span class=\"line\">            &#125;.map &#123; deferred -&gt;</span><br><span class=\"line\">                flow &#123;</span><br><span class=\"line\">                    emit(deferred.await())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;.merge()</span><br><span class=\"line\">            .collect &#123; user -&gt;</span><br><span class=\"line\">                println(user)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">User(name=guest, address=Local)</span><br><span class=\"line\">User(name=guest, address=Server)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"并发安全\"><a href=\"#并发安全\" class=\"headerlink\" title=\"并发安全\"></a>并发安全</h3><p>由于协程是基于线程的，既然线程有并发问题，那么协程也一定有。</p>\n<h4 id=\"不安全的并发访问\"><a href=\"#不安全的并发访问\" class=\"headerlink\" title=\"不安全的并发访问\"></a>不安全的并发访问</h4><p>我们使用线程在解决并发问题的时候总是会遇到线程安全问题，而 Java 平台上的 Kotlin 协程实现免不了存在并发调度的情况，因此线程安全同样值得留意。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test not safe concurrent`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印可能不一样）</span></span><br><span class=\"line\"><span class=\"number\">9997</span></span><br></pre></td></tr></table></figure>\n\n<p>Java API 中安全的并发访问：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test safe concurrent`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = AtomicInteger(<span class=\"number\">0</span>)</span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            count.incrementAndGet()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count.<span class=\"keyword\">get</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印都一样）</span></span><br><span class=\"line\"><span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协程的并发工具\"><a href=\"#协程的并发工具\" class=\"headerlink\" title=\"协程的并发工具\"></a>协程的并发工具</h4><p>除了我们在线程中常用的解决并发问题的手段之外，协程框架也提供了一些并发安全的工具，包括：</p>\n<ul>\n<li><strong>Channel</strong>：并发安全的消息通道，我们已经非常熟悉。</li>\n<li><strong>Mutex</strong>：轻量级锁，它的 lock 和 unlock 从语义上与线程锁比较类似，之所以轻量是因为它在获取不到锁时不会阻塞线程，而是挂起等待锁的释放。</li>\n<li><strong>Semaphore</strong>：轻量级信号量，信号量可以有多个，协程在获取到信号量后即可执行并发操作。当 Semaphore 的参数为 1 时，效果等价于 Mutex。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test safe concurrent tools`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mutex = Mutex()</span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            mutex.withLock &#123;</span><br><span class=\"line\">                count++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印都一样）</span></span><br><span class=\"line\"><span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test safe concurrent tools2`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> semaphore = Semaphore(<span class=\"number\">1</span>)</span><br><span class=\"line\">    List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            semaphore.withPermit &#123;</span><br><span class=\"line\">                count++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.joinAll()</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"避免访问外部可变状态\"><a href=\"#避免访问外部可变状态\" class=\"headerlink\" title=\"避免访问外部可变状态\"></a>避免访问外部可变状态</h4><p>编写函数时要求它不得访问外部状态，只能基于参数做运算，通过返回值提供运算结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> `test avoid access outer variable`<span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = count + List(<span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        GlobalScope.async &#123; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;.map &#123;</span><br><span class=\"line\">        it.await()</span><br><span class=\"line\">    &#125;.sum()</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果（每次打印都一样）</span></span><br><span class=\"line\"><span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"冷流还是热流\"><a href=\"#冷流还是热流\" class=\"headerlink\" title=\"冷流还是热流\"></a>冷流还是热流</h3><ul>\n<li>Flow 是冷流，什么是冷流？简单来说，如果 Flow 有了订阅者 Collector 以后，发射出来的值才会实实在在的存在于内存之中，这跟懒加载的概念很像。</li>\n<li>与之相对的是热流，StateFlow 和 SharedFlow 是热流，在垃圾回收之前，都是存在于内存之中，并且处于活跃状态的。</li>\n</ul>\n<h3 id=\"StateFlow\"><a href=\"#StateFlow\" class=\"headerlink\" title=\"StateFlow\"></a>StateFlow</h3><p>StateFlow 是一个状态容器式<strong>可观察数据流</strong>，可以向其收集器发出当前状态更新和新状态更新。还可通过其 value 属性读取当前状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NumberViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// StateFlow 与 LiveData 很像，但能使用 Flow 的操作符。</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> number = MutableStateFlow(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        number.value++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">decrement</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        number.value--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NumberFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mNumberViewModel: NumberViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">        </span><br><span class=\"line\">        btnPlus.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 加法</span></span><br><span class=\"line\">            mNumberViewModel.increment()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        btnMinus.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 减法</span></span><br><span class=\"line\">            mNumberViewModel.decrement()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lifecycleScope.launch &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 收集数据</span></span><br><span class=\"line\">            mNumberViewModel.number.collect &#123;</span><br><span class=\"line\">                tvNumber.text = it.toString()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SharedFlow\"><a href=\"#SharedFlow\" class=\"headerlink\" title=\"SharedFlow\"></a>SharedFlow</h3><p>SharedFlow 会向从其中收集值的所有使用方发出数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 SharedFlow 模拟 EventBus 收发数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> LocalEventBus &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> events = MutableSharedFlow&lt;Event&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">postEvent</span><span class=\"params\">(event: <span class=\"type\">Event</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        events.emit(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Event</span>(<span class=\"keyword\">val</span> timestamp: <span class=\"built_in\">Long</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SharedViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> job: Job? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始刷新数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startRefresh</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启协程</span></span><br><span class=\"line\">        job = viewModelScope.launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                LocalEventBus.postEvent(Event(System.currentTimeMillis()))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止刷新数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">stopRefresh</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭协程</span></span><br><span class=\"line\">        job?.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送数据界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SharedFlowFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mSharedViewModel: SharedViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">        </span><br><span class=\"line\">        btnStart.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送[开始刷新数据]指令</span></span><br><span class=\"line\">            mSharedViewModel.startRefresh()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        btnStop.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送[停止刷新数据]指令</span></span><br><span class=\"line\">            mSharedViewModel.stopRefresh()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 收集数据界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TextsFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">        </span><br><span class=\"line\"> \t    lifecycleScope.launch &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 收集数据</span></span><br><span class=\"line\">            LocalEventBus.events.collect &#123;</span><br><span class=\"line\">                textView.text = <span class=\"string\">&quot;<span class=\"subst\">$&#123;tag&#125;</span>: <span class=\"subst\">$&#123;it.timestamp&#125;</span>&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Flow-的应用\"><a href=\"#Flow-的应用\" class=\"headerlink\" title=\"Flow 的应用\"></a>Flow 的应用</h3><h4 id=\"Flow-与文件下载的应用\"><a href=\"#Flow-与文件下载的应用\" class=\"headerlink\" title=\"Flow 与文件下载的应用\"></a>Flow 与文件下载的应用</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadStatus</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 空状态</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> None : DownloadStatus()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下载进度</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Progress</span>(<span class=\"keyword\">val</span> value: <span class=\"built_in\">Int</span>) : DownloadStatus()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 错误</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Error</span>(<span class=\"keyword\">val</span> throwable: Throwable) : DownloadStatus()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 完成</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Done</span>(<span class=\"keyword\">val</span> file: File) : DownloadStatus()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载文件管理类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> DownloadManager &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下载文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> url String 远程文件地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file File 下载到的本地文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Flow&lt;DownloadStatus&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">download</span><span class=\"params\">(url: <span class=\"type\">String</span>, file: <span class=\"type\">File</span>)</span></span>: Flow&lt;DownloadStatus&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flow &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> request = Request.Builder().url(url).<span class=\"keyword\">get</span>().build()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> response = OkHttpClient.Builder().build().newCall(request).execute()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.isSuccessful) &#123;</span><br><span class=\"line\">                response.body()!!.let &#123; body -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> total = body.contentLength()</span><br><span class=\"line\">                    <span class=\"comment\">// 文件读写</span></span><br><span class=\"line\">                    file.outputStream().use &#123; outputStream -&gt;</span><br><span class=\"line\">                        <span class=\"keyword\">val</span> inputStream = body.byteStream()</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> emittedProgress = <span class=\"number\">0L</span></span><br><span class=\"line\">                        inputStream.copyTo(outputStream) &#123; bytesCopied -&gt;</span><br><span class=\"line\">                            <span class=\"keyword\">val</span> progress = bytesCopied * <span class=\"number\">100</span> / total</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (progress - emittedProgress &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                                delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                                emit(DownloadStatus.Progress(progress.toInt()))</span><br><span class=\"line\">                                emittedProgress = progress</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                emit(DownloadStatus.Done(file))</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> IOException(response.toString())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">            file.delete()</span><br><span class=\"line\">            emit(DownloadStatus.Error(it))</span><br><span class=\"line\">        &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展方法 读写文件并返回下载进度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@receiver</span> InputStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> out OutputStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bufferSize Int</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> progress Function1&lt;Long, Unit&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> Long</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> InputStream.<span class=\"title\">copyTo</span><span class=\"params\">(<span class=\"keyword\">out</span>: <span class=\"type\">OutputStream</span>, bufferSize: <span class=\"type\">Int</span> = DEFAULT_BUFFER_SIZE, progress: (<span class=\"type\">Long</span>) -&gt; <span class=\"type\">Unit</span>)</span></span>: <span class=\"built_in\">Long</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytesCopied: <span class=\"built_in\">Long</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> buffer = ByteArray(bufferSize)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = read(buffer)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bytes &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">out</span>.write(buffer, <span class=\"number\">0</span>, bytes)</span><br><span class=\"line\">        bytesCopied += bytes</span><br><span class=\"line\">        bytes = read(buffer)</span><br><span class=\"line\"></span><br><span class=\"line\">        progress(bytesCopied)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytesCopied</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载文件界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadFragment</span> : <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> URL = <span class=\"string\">&quot;https://img1.baidu.com/it/u=413643897,2296924942&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">download</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// sdcard/Android/data/com.zch.flowpractice/files/pic.png</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> file = File(requireActivity().getExternalFilesDir(<span class=\"literal\">null</span>)?.path, <span class=\"string\">&quot;pic.jpg&quot;</span>)</span><br><span class=\"line\">        lifecycleScope.launch &#123;</span><br><span class=\"line\">            DownloadManager.download(URL, file).collect &#123; status -&gt;</span><br><span class=\"line\">                <span class=\"keyword\">when</span> (status) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">is</span> DownloadStatus.Progress -&gt; &#123;</span><br><span class=\"line\">                        progressBar.progress = status.value</span><br><span class=\"line\">                        tvProgress.text = <span class=\"string\">&quot;<span class=\"subst\">$&#123;status.value&#125;</span>%&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">is</span> DownloadStatus.Error -&gt; &#123;</span><br><span class=\"line\">                        ToastUtils.showLong(<span class=\"string\">&quot;下载错误&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">is</span> DownloadStatus.Done -&gt; &#123;</span><br><span class=\"line\">                        progressBar.progress = <span class=\"number\">100</span></span><br><span class=\"line\">                        tvProgress.text = <span class=\"string\">&quot;100%&quot;</span></span><br><span class=\"line\">                        ToastUtils.showShort(<span class=\"string\">&quot;下载完成&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">                        ToastUtils.showShort(<span class=\"string\">&quot;下载失败&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flow-与-Room-的应用\"><a href=\"#Flow-与-Room-的应用\" class=\"headerlink\" title=\"Flow 与 Room 的应用\"></a>Flow 与 Room 的应用</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Room 实体类声明</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 主键</span></span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> uid: <span class=\"built_in\">Int</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 数据库里存入的字段名</span></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"string\">&quot;first_name&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> firstName: String,</span><br><span class=\"line\">    <span class=\"comment\">// 数据库里存入的字段名</span></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"string\">&quot;last_name&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> lastName: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dao 类声明</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里设置了一下冲突，如果两条记录相同则会替换</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里不需要挂起（返回 Flow 或 LiveData 都不需要）</span></span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;SELECT * FROM user&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAll</span><span class=\"params\">()</span></span>: Flow&lt;List&lt;User&gt;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库操作类</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * entities      数据库里存入的表，可是多个</span></span><br><span class=\"line\"><span class=\"comment\"> * version       数据库的版本号</span></span><br><span class=\"line\"><span class=\"comment\"> * exportSchema  是否生成 json 文件，用于查看数据库的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Database(entities = [User::class], version = 1, exportSchema = false)</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDataBase</span> : <span class=\"type\">RoomDatabase</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Dao 对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">UserDao</span><span class=\"params\">()</span></span>: UserDao</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: AppDataBase? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: AppDataBase &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对象锁</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance ?: synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                Room.databaseBuilder(context, AppDataBase::<span class=\"keyword\">class</span>.java, <span class=\"string\">&quot;user_db&quot;</span>)</span><br><span class=\"line\">                    .build().also &#123; instance = it &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * User ViewModel</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserViewModel</span>(app: Application) : AndroidViewModel(app) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user User</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            AppDataBase.getInstance(getApplication()).UserDao().insert(user)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Flow&lt;List&lt;User&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAll</span><span class=\"params\">()</span></span>: Flow&lt;List&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AppDataBase.getInstance(getApplication()).UserDao().getAll()</span><br><span class=\"line\">            .<span class=\"keyword\">catch</span> &#123; e -&gt;</span><br><span class=\"line\">                e.printStackTrace()</span><br><span class=\"line\">            &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserFragment</span> : <span class=\"type\">BaseBindingFragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBinding: FragmentUserBinding <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        FragmentUserBinding.inflate(layoutInflater)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mUserAdapter: UserAdapter <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        UserAdapter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mUserViewModel: UserViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBindingRoot</span><span class=\"params\">()</span></span> = mBinding.root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mBinding.rvUser.adapter = mUserAdapter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initEvent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mBinding.btnAddUser.setOnClickListener &#123;</span><br><span class=\"line\">            mBinding.run &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">                mUserViewModel.insert(</span><br><span class=\"line\">                    User(</span><br><span class=\"line\">                        edtUid.text.toString().toInt(),</span><br><span class=\"line\">                        edtFirstName.text.toString(),</span><br><span class=\"line\">                        edtLastName.text.toString()</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initData</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        lifecycleScope.launch &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取所有数据</span></span><br><span class=\"line\">            mUserViewModel.getAll().collect &#123;</span><br><span class=\"line\">                mUserAdapter.submitList(it)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flow-与-Retrofit-的应用\"><a href=\"#Flow-与-Retrofit-的应用\" class=\"headerlink\" title=\"Flow 与 Retrofit 的应用\"></a>Flow 与 Retrofit 的应用</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章实体类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> id 文章 id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> text 文章内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Article</span>(<span class=\"keyword\">val</span> id: <span class=\"built_in\">Int</span>, <span class=\"keyword\">val</span> text: String)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ArticleApi</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;article&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">searchArticle</span><span class=\"params\">(<span class=\"meta\">@Query(<span class=\"string\">&quot;key&quot;</span>)</span> key: <span class=\"type\">String</span>)</span></span>: List&lt;Article&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrofit 网络请求管理类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> RetrofitClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> URL = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> instance: Retrofit <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        Retrofit.Builder()</span><br><span class=\"line\">            .client(OkHttpClient.Builder().build())</span><br><span class=\"line\">            .baseUrl(URL)</span><br><span class=\"line\">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> articleApi: ArticleApi <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        instance.create(ArticleApi::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章 ViewModel</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArticleViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> articles = MutableLiveData&lt;List&lt;Article&gt;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">searchArticle</span><span class=\"params\">(key: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch(Dispatchers.Main) &#123;</span><br><span class=\"line\">            flow &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> list = RetrofitClient.articleApi.searchArticle(key)</span><br><span class=\"line\">                emit(list)</span><br><span class=\"line\">            &#125;.flowOn(Dispatchers.IO)</span><br><span class=\"line\">                .<span class=\"keyword\">catch</span> &#123; e -&gt; e.printStackTrace() &#125;</span><br><span class=\"line\">                .collect &#123;</span><br><span class=\"line\">                    articles.value = it</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文章界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArticleFragment</span> : <span class=\"type\">BaseBindingFragment</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> articleViewModel <span class=\"keyword\">by</span> viewModels&lt;ArticleViewModel&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBinding: FragmentArticleBinding <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        FragmentArticleBinding.inflate(layoutInflater)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBindingRoot</span><span class=\"params\">()</span></span> = mBinding.root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initEvent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initData</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求数据</span></span><br><span class=\"line\">        articleViewModel.searchArticle(<span class=\"string\">&quot;三国演义&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 监听数据据返回</span></span><br><span class=\"line\">        articleViewModel.articles.observe(viewLifecycleOwner) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java 子类和父类相关成员执行顺序","date":"2018-06-02T06:20:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n> 先说结论，再通过运行程序去验证。\n\n\n## 结论\n\n- new 一个子类的初始化顺序\n\n  父类静态成员变量、静态代码块 --> 子类静态成员变量、静态代码块 --> 父类成员变量、构造代码块 --> 父类无参构造方法 --> 子类成员变量、   构造代码块 --> 子类无参构造方法\n\n- 多次创建对象，静态成员变量和静态代码块都只执行一次\n\n- 除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();\n\n## 程序运行\n\n**打印类（用于打印结果）**\n\n```Java\nclass Test {\n\n\tpublic Test(String str) {\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n**父类**\n\n```Java\nclass Parent {\n\n\tprivate static Test t10 = new Test(\"父类静态成员变量 0\");\n\tprivate Test t11 = new Test(\"父类成员变量  0\");\n\n\t{\n\t\tTest t14 = new Test(\"父类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t12 = new Test(\"父类静态代码块 0\");\n\t}\n\n\tprivate Test t16 = new Test(\"父类成员变量 1\");\n\n\t{\n\t\tTest t15 = new Test(\"父类构造代码块 1\");\n\t}\n\n\tprivate static Test t13 = new Test(\"父类静态成员变量 1\");\n\n\tpublic Parent() {\n\t\tSystem.out.println(\"父类无参构造方法\");\n\t}\n\n\tpublic Parent(int i) {\n\t\tSystem.out.println(\"父类有参构造方法 0\");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"父类成员方法\");\n\t}\n\n\tpublic static void g() {\n\t\tSystem.out.println(\"父类静态成员方法\");\n\t}\n}\n```\n\n**子类**\n\n```Java\nclass Son extends Parent {\n\n\tprivate static Test t0 = new Test(\"子类静态成员变量 0\");\n\tprivate Test t1 = new Test(\"子类成员变量 0\");\n\n\t{\n\t\tTest t4 = new Test(\"子类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t2 = new Test(\"子类静态代码块 0\");\n\t}\n\n\tprivate Test t6 = new Test(\"子类成员变量 1\");\n\n\t{\n\t\tTest t5 = new Test(\"子类构造代码块 1\");\n\t}\n\n\tprivate static Test t3 = new Test(\"子类静态成员变量 1\");\n\n\tpublic Son() {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\n\tpublic Son(int i) {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类有参构造方法 0\");\n\t}\n\n\tpublic Son(int i, int j) {\n\t\t// super(); 不会调用了，因为显式调用了 super(1)\n\t\tsuper(1);\n\t\tSystem.out.println(\"子类有参构造方法 1\");\n\t}\n\n\tpublic void ff() {\n\t\tSystem.out.println(\"子类成员方法\");\n\t}\n\n\tpublic static void gg() {\n\t\tSystem.out.println(\"子类静态成员方法\");\n\t}\n}\n```\n\n**调用类**\n\n```Java\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1);\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1, 2);\n\t}\n}\n```\n\n\n执行了调用类后，打印结果如下：\n\n```Java\n父类静态成员变量 0\n父类静态代码块 0\n父类静态成员变量 1\n子类静态成员变量 0\n子类静态代码块 0\n子类静态成员变量 1\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 0\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类有参构造方法 0\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 1\n```\n\n## 扩展说明\n\n[引自此处](https://blog.csdn.net/u010687392/article/details/42388585)\n\n- 子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。\n\n- new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。\n所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。","source":"_posts/Java-子类和父类相关成员执行顺序.md","raw":"---\ntitle: Java 子类和父类相关成员执行顺序\ndate: 2018-6-2 14:20:00\ncategories: \"Java\"\ntags:\n     - Java\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n> 先说结论，再通过运行程序去验证。\n\n\n## 结论\n\n- new 一个子类的初始化顺序\n\n  父类静态成员变量、静态代码块 --> 子类静态成员变量、静态代码块 --> 父类成员变量、构造代码块 --> 父类无参构造方法 --> 子类成员变量、   构造代码块 --> 子类无参构造方法\n\n- 多次创建对象，静态成员变量和静态代码块都只执行一次\n\n- 除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();\n\n## 程序运行\n\n**打印类（用于打印结果）**\n\n```Java\nclass Test {\n\n\tpublic Test(String str) {\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n**父类**\n\n```Java\nclass Parent {\n\n\tprivate static Test t10 = new Test(\"父类静态成员变量 0\");\n\tprivate Test t11 = new Test(\"父类成员变量  0\");\n\n\t{\n\t\tTest t14 = new Test(\"父类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t12 = new Test(\"父类静态代码块 0\");\n\t}\n\n\tprivate Test t16 = new Test(\"父类成员变量 1\");\n\n\t{\n\t\tTest t15 = new Test(\"父类构造代码块 1\");\n\t}\n\n\tprivate static Test t13 = new Test(\"父类静态成员变量 1\");\n\n\tpublic Parent() {\n\t\tSystem.out.println(\"父类无参构造方法\");\n\t}\n\n\tpublic Parent(int i) {\n\t\tSystem.out.println(\"父类有参构造方法 0\");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"父类成员方法\");\n\t}\n\n\tpublic static void g() {\n\t\tSystem.out.println(\"父类静态成员方法\");\n\t}\n}\n```\n\n**子类**\n\n```Java\nclass Son extends Parent {\n\n\tprivate static Test t0 = new Test(\"子类静态成员变量 0\");\n\tprivate Test t1 = new Test(\"子类成员变量 0\");\n\n\t{\n\t\tTest t4 = new Test(\"子类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t2 = new Test(\"子类静态代码块 0\");\n\t}\n\n\tprivate Test t6 = new Test(\"子类成员变量 1\");\n\n\t{\n\t\tTest t5 = new Test(\"子类构造代码块 1\");\n\t}\n\n\tprivate static Test t3 = new Test(\"子类静态成员变量 1\");\n\n\tpublic Son() {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\n\tpublic Son(int i) {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类有参构造方法 0\");\n\t}\n\n\tpublic Son(int i, int j) {\n\t\t// super(); 不会调用了，因为显式调用了 super(1)\n\t\tsuper(1);\n\t\tSystem.out.println(\"子类有参构造方法 1\");\n\t}\n\n\tpublic void ff() {\n\t\tSystem.out.println(\"子类成员方法\");\n\t}\n\n\tpublic static void gg() {\n\t\tSystem.out.println(\"子类静态成员方法\");\n\t}\n}\n```\n\n**调用类**\n\n```Java\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1);\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1, 2);\n\t}\n}\n```\n\n\n执行了调用类后，打印结果如下：\n\n```Java\n父类静态成员变量 0\n父类静态代码块 0\n父类静态成员变量 1\n子类静态成员变量 0\n子类静态代码块 0\n子类静态成员变量 1\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 0\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类有参构造方法 0\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 1\n```\n\n## 扩展说明\n\n[引自此处](https://blog.csdn.net/u010687392/article/details/42388585)\n\n- 子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。\n\n- new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。\n所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。","slug":"Java-子类和父类相关成员执行顺序","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd20014nctt71s5fvto","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<blockquote>\n<p>先说结论，再通过运行程序去验证。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><p>new 一个子类的初始化顺序</p>\n<p>父类静态成员变量、静态代码块 –&gt; 子类静态成员变量、静态代码块 –&gt; 父类成员变量、构造代码块 –&gt; 父类无参构造方法 –&gt; 子类成员变量、   构造代码块 –&gt; 子类无参构造方法</p>\n</li>\n<li><p>多次创建对象，静态成员变量和静态代码块都只执行一次</p>\n</li>\n<li><p>除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();</p>\n</li>\n</ul>\n<h2 id=\"程序运行\"><a href=\"#程序运行\" class=\"headerlink\" title=\"程序运行\"></a>程序运行</h2><p><strong>打印类（用于打印结果）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>父类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t10</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类静态成员变量 0&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t11</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类成员变量  0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t14</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类构造代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t12</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类静态代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t16</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t15</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类构造代码块 1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t13</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类静态成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Parent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类无参构造方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Parent</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类有参构造方法 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">g</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类静态成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>子类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类静态成员变量 0&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类成员变量 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类构造代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类静态代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t6</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类构造代码块 1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类静态成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类无参构造方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类有参构造方法 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 不会调用了，因为显式调用了 super(1)</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类有参构造方法 1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ff</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">gg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类静态成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>调用类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------------------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------------------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------------------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>执行了调用类后，打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h2><p><a href=\"https://blog.csdn.net/u010687392/article/details/42388585\">引自此处</a></p>\n<ul>\n<li><p>子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。</p>\n</li>\n<li><p>new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。<br>所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。</p>\n</li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<blockquote>\n<p>先说结论，再通过运行程序去验证。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><p>new 一个子类的初始化顺序</p>\n<p>父类静态成员变量、静态代码块 –&gt; 子类静态成员变量、静态代码块 –&gt; 父类成员变量、构造代码块 –&gt; 父类无参构造方法 –&gt; 子类成员变量、   构造代码块 –&gt; 子类无参构造方法</p>\n</li>\n<li><p>多次创建对象，静态成员变量和静态代码块都只执行一次</p>\n</li>\n<li><p>除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();</p>\n</li>\n</ul>\n<h2 id=\"程序运行\"><a href=\"#程序运行\" class=\"headerlink\" title=\"程序运行\"></a>程序运行</h2><p><strong>打印类（用于打印结果）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>父类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t10</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类静态成员变量 0&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t11</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类成员变量  0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t14</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类构造代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t12</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类静态代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t16</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t15</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类构造代码块 1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t13</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;父类静态成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Parent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类无参构造方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Parent</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类有参构造方法 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">g</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;父类静态成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>子类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类静态成员变量 0&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类成员变量 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类构造代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类静态代码块 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Test</span> <span class=\"variable\">t6</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">t5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类构造代码块 1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Test</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&quot;子类静态成员变量 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类无参构造方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类有参构造方法 0&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 不会调用了，因为显式调用了 super(1)</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类有参构造方法 1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ff</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">gg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类静态成员方法&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>调用类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------------------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------------------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------------------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>执行了调用类后，打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h2><p><a href=\"https://blog.csdn.net/u010687392/article/details/42388585\">引自此处</a></p>\n<ul>\n<li><p>子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。</p>\n</li>\n<li><p>new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。<br>所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。</p>\n</li>\n</ul>\n"},{"title":"Kotlin 扩展函数 run , with , let , also 和 apply","date":"2018-10-16T13:41:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n## 函数定义与使用\n### run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun runTest1() {\n    var name = \"AA\"\n    run {\n        val name = \"BB\"\n        Log.e(TAG, name) // BB\n    }\n    Log.d(TAG, name) // AA\n}\n```\n\n> run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。\n\n```Java\nfun runTest2() {\n    var success = true\n    var result = run {\n        if (success) {\n            \"200\"\n        } else {\n            \"404\"\n        }\n    }\n    Log.d(TAG, result) // 200\n}\n```\n\n> **run() 返回作用域中的最后一个对象**。\n\n### T.run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun tRunTest() {\n    val result = \"ABCDEF\".run {\n        Log.d(TAG, \"字符串的长度为$length\") // 字符串的长度为6\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> T.run() 中通过 this 来获取 \"ABCDEF\" 对象，然后输出 length . **T.run() 返回作用域中的最后一个对象**。\n\n### with()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n```\n\n**示例**\n\n```Java\nfun withTest() {\n    val result = with(\"ABCDEF\") {\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **with() 返回作用域中的最后一个对象**。\n\n### T.let()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n```\n\n**示例**\n\n```Java\nfun letTest() {\n    val result = \"ABCDEF\".let {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **T.let() 返回作用域中的最后一个对象**。\n\n### T.also()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun alsoTest() {\n    val  result = \"ABCDEF\".also {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.also() 返回原来的对象不变**。\n\n### T.apply()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun applyTest() {\n    val result = \"ABCDEF\".apply {\n        this.substring(2) // this 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.apply() 返回原来的对象不变**。\n\n## 函数特点\n### T.run()、T.run()、T.also()、T.apply() 函数\n\n> xxx 表示函数名\n\n```Java\nclass MyClass {\n    fun test() {\n        val str = \"AA\"\n        val result = str.xxx {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误   | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |\n\n\n### run() 与 with(T) 函数\n\n```Java\nclass MyClass {\n    fun runTest() {\n        var result = run {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n\n    fun withTest() {\n        val str = \"AA\"\n        var result = with(str) {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this） | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n\n### 函数特点汇总\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误  | 作用域中的最后一个对象  |\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |","source":"_posts/Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply.md","raw":"---\ntitle: Kotlin 扩展函数 run , with , let , also 和 apply\ndate: 2018-10-16 21:41:00\ncategories: \"Kotlin\"\ntags:\n     - Android\n     - Kotlin\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n## 函数定义与使用\n### run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun runTest1() {\n    var name = \"AA\"\n    run {\n        val name = \"BB\"\n        Log.e(TAG, name) // BB\n    }\n    Log.d(TAG, name) // AA\n}\n```\n\n> run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。\n\n```Java\nfun runTest2() {\n    var success = true\n    var result = run {\n        if (success) {\n            \"200\"\n        } else {\n            \"404\"\n        }\n    }\n    Log.d(TAG, result) // 200\n}\n```\n\n> **run() 返回作用域中的最后一个对象**。\n\n### T.run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun tRunTest() {\n    val result = \"ABCDEF\".run {\n        Log.d(TAG, \"字符串的长度为$length\") // 字符串的长度为6\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> T.run() 中通过 this 来获取 \"ABCDEF\" 对象，然后输出 length . **T.run() 返回作用域中的最后一个对象**。\n\n### with()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n```\n\n**示例**\n\n```Java\nfun withTest() {\n    val result = with(\"ABCDEF\") {\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **with() 返回作用域中的最后一个对象**。\n\n### T.let()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n```\n\n**示例**\n\n```Java\nfun letTest() {\n    val result = \"ABCDEF\".let {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **T.let() 返回作用域中的最后一个对象**。\n\n### T.also()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun alsoTest() {\n    val  result = \"ABCDEF\".also {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.also() 返回原来的对象不变**。\n\n### T.apply()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun applyTest() {\n    val result = \"ABCDEF\".apply {\n        this.substring(2) // this 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.apply() 返回原来的对象不变**。\n\n## 函数特点\n### T.run()、T.run()、T.also()、T.apply() 函数\n\n> xxx 表示函数名\n\n```Java\nclass MyClass {\n    fun test() {\n        val str = \"AA\"\n        val result = str.xxx {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误   | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |\n\n\n### run() 与 with(T) 函数\n\n```Java\nclass MyClass {\n    fun runTest() {\n        var result = run {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n\n    fun withTest() {\n        val str = \"AA\"\n        var result = with(str) {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this） | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n\n### 函数特点汇总\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误  | 作用域中的最后一个对象  |\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |","slug":"Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd30017nctt93rx6zqe","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h2 id=\"函数定义与使用\"><a href=\"#函数定义与使用\" class=\"headerlink\" title=\"函数定义与使用\"></a>函数定义与使用</h2><h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run()\"></a>run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;R&gt; run(block: () -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">runTest1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">    run &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;BB&quot;</span></span><br><span class=\"line\">        Log.e(TAG, name) <span class=\"comment\">// BB</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, name) <span class=\"comment\">// AA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">runTest2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> run &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;200&quot;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;404&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// 200</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-run\"><a href=\"#T-run\" class=\"headerlink\" title=\"T.run()\"></a>T.run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">tRunTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.run &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;字符串的长度为$length&quot;</span>) <span class=\"comment\">// 字符串的长度为6</span></span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>T.run() 中通过 this 来获取 “ABCDEF” 对象，然后输出 length . <strong>T.run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with()\"></a>with()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver.block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">withTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> with(<span class=\"string\">&quot;ABCDEF&quot;</span>) &#123;</span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>with() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-let\"><a href=\"#T-let\" class=\"headerlink\" title=\"T.let()\"></a>T.let()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">letTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.let &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>T.let() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-also\"><a href=\"#T-also\" class=\"headerlink\" title=\"T.also()\"></a>T.also()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"meta\">@SinceKotlin(&quot;1.1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">alsoTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span>  <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.also &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>T.also() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h3 id=\"T-apply\"><a href=\"#T-apply\" class=\"headerlink\" title=\"T.apply()\"></a>T.apply()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">applyTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.apply &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.substring(<span class=\"number\">2</span>) <span class=\"comment\">// this 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>T.apply() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h2 id=\"函数特点\"><a href=\"#函数特点\" class=\"headerlink\" title=\"函数特点\"></a>函数特点</h2><h3 id=\"T-run-、T-run-、T-also-、T-apply-函数\"><a href=\"#T-run-、T-run-、T-also-、T-apply-函数\" class=\"headerlink\" title=\"T.run()、T.run()、T.also()、T.apply() 函数\"></a>T.run()、T.run()、T.also()、T.apply() 函数</h3><blockquote>\n<p>xxx 表示函数名</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    fun <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> str.xxx &#123;</span><br><span class=\"line\">            print(<span class=\"built_in\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody></table>\n<h3 id=\"run-与-with-T-函数\"><a href=\"#run-与-with-T-函数\" class=\"headerlink\" title=\"run() 与 with(T) 函数\"></a>run() 与 with(T) 函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    fun <span class=\"title function_\">runTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> run &#123;</span><br><span class=\"line\">            print(<span class=\"built_in\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun <span class=\"title function_\">withTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> with(str) &#123;</span><br><span class=\"line\">            print(<span class=\"built_in\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n</tbody></table>\n<h3 id=\"函数特点汇总\"><a href=\"#函数特点汇总\" class=\"headerlink\" title=\"函数特点汇总\"></a>函数特点汇总</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h2 id=\"函数定义与使用\"><a href=\"#函数定义与使用\" class=\"headerlink\" title=\"函数定义与使用\"></a>函数定义与使用</h2><h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run()\"></a>run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;R&gt; run(block: () -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">runTest1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">    run &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;BB&quot;</span></span><br><span class=\"line\">        Log.e(TAG, name) <span class=\"comment\">// BB</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, name) <span class=\"comment\">// AA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">runTest2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> run &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;200&quot;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;404&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// 200</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-run\"><a href=\"#T-run\" class=\"headerlink\" title=\"T.run()\"></a>T.run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">tRunTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.run &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;字符串的长度为$length&quot;</span>) <span class=\"comment\">// 字符串的长度为6</span></span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>T.run() 中通过 this 来获取 “ABCDEF” 对象，然后输出 length . <strong>T.run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with()\"></a>with()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver.block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">withTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> with(<span class=\"string\">&quot;ABCDEF&quot;</span>) &#123;</span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>with() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-let\"><a href=\"#T-let\" class=\"headerlink\" title=\"T.let()\"></a>T.let()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">letTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.let &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>T.let() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-also\"><a href=\"#T-also\" class=\"headerlink\" title=\"T.also()\"></a>T.also()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"meta\">@SinceKotlin(&quot;1.1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">alsoTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span>  <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.also &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>T.also() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h3 id=\"T-apply\"><a href=\"#T-apply\" class=\"headerlink\" title=\"T.apply()\"></a>T.apply()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun <span class=\"title function_\">applyTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEF&quot;</span>.apply &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.substring(<span class=\"number\">2</span>) <span class=\"comment\">// this 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>T.apply() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h2 id=\"函数特点\"><a href=\"#函数特点\" class=\"headerlink\" title=\"函数特点\"></a>函数特点</h2><h3 id=\"T-run-、T-run-、T-also-、T-apply-函数\"><a href=\"#T-run-、T-run-、T-also-、T-apply-函数\" class=\"headerlink\" title=\"T.run()、T.run()、T.also()、T.apply() 函数\"></a>T.run()、T.run()、T.also()、T.apply() 函数</h3><blockquote>\n<p>xxx 表示函数名</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    fun <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> str.xxx &#123;</span><br><span class=\"line\">            print(<span class=\"built_in\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody></table>\n<h3 id=\"run-与-with-T-函数\"><a href=\"#run-与-with-T-函数\" class=\"headerlink\" title=\"run() 与 with(T) 函数\"></a>run() 与 with(T) 函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    fun <span class=\"title function_\">runTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> run &#123;</span><br><span class=\"line\">            print(<span class=\"built_in\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun <span class=\"title function_\">withTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> with(str) &#123;</span><br><span class=\"line\">            print(<span class=\"built_in\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n</tbody></table>\n<h3 id=\"函数特点汇总\"><a href=\"#函数特点汇总\" class=\"headerlink\" title=\"函数特点汇总\"></a>函数特点汇总</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody></table>\n"},{"title":"Mock 测试","date":"2018-03-19T16:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。\n\n接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？\n\n有了接口文档，我们就清楚了与后端交互的**数据结构**，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。\n\n以下简单介绍 Github 上的一个 Mock 开源库的使用 - [moco](https://github.com/dreamhead/moco/)。\n\n**step 1:**\n\n下载如图所示的 jar 包，并简单命名为 moco .\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/15.png)\n\n**step 2:**\n\n把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/14.png)\n\n**config.json**\n\n```json\n[\n  {\n    \"request\": {\n      \"uri\": \"/hello\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"hello.json\"\n    }\n  },\n  {\n    \"request\": {\n      \"uri\": \"/checkAppUpgrade\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"checkAppUpgrade.json\"\n    }\n  }\n]\n```\n\n**hello.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"desc\": \"Hello World !\"\n  }\n}\n```\n\n**checkAppUpgrade.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"versonName\": \"1.2\",\n    \"versonCode\": 3,\n    \"downloadUrl\": \"http://www.baidu.com/v1.2.apk\",\n    \"desc\": \"v1.2 版本修复了重大 bug .\",\n    \"isForceUpdate\": true\n  }\n}\n```\n\n**step 3:**\n\n在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。\n\n```bash\njava -jar moco.jar http -p 8089 -c config.json\n```\n\n**step 4:**\n\n在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/16.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/17.png)\n\n> 把 localhost 换成自己电脑的 ip 就可以在手机上访问了。\n","source":"_posts/Mock-测试.md","raw":"---\ntitle: Mock 测试\ndate: 2018-3-20\ncategories: \"测试\"\ntags:\n     - 测试\n     - mock\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。\n\n接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？\n\n有了接口文档，我们就清楚了与后端交互的**数据结构**，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。\n\n以下简单介绍 Github 上的一个 Mock 开源库的使用 - [moco](https://github.com/dreamhead/moco/)。\n\n**step 1:**\n\n下载如图所示的 jar 包，并简单命名为 moco .\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/15.png)\n\n**step 2:**\n\n把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/14.png)\n\n**config.json**\n\n```json\n[\n  {\n    \"request\": {\n      \"uri\": \"/hello\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"hello.json\"\n    }\n  },\n  {\n    \"request\": {\n      \"uri\": \"/checkAppUpgrade\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"checkAppUpgrade.json\"\n    }\n  }\n]\n```\n\n**hello.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"desc\": \"Hello World !\"\n  }\n}\n```\n\n**checkAppUpgrade.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"versonName\": \"1.2\",\n    \"versonCode\": 3,\n    \"downloadUrl\": \"http://www.baidu.com/v1.2.apk\",\n    \"desc\": \"v1.2 版本修复了重大 bug .\",\n    \"isForceUpdate\": true\n  }\n}\n```\n\n**step 3:**\n\n在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。\n\n```bash\njava -jar moco.jar http -p 8089 -c config.json\n```\n\n**step 4:**\n\n在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/16.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/17.png)\n\n> 把 localhost 换成自己电脑的 ip 就可以在手机上访问了。\n","slug":"Mock-测试","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd4001bnctt91n0gris","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<p>在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。</p>\n<p>接口文档代表着一份请求&#x2F;响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？</p>\n<p>有了接口文档，我们就清楚了与后端交互的<strong>数据结构</strong>，然后可以通过 Mock 模拟请求&#x2F;响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。</p>\n<p>以下简单介绍 Github 上的一个 Mock 开源库的使用 - <a href=\"https://github.com/dreamhead/moco/\">moco</a>。</p>\n<p><strong>step 1:</strong></p>\n<p>下载如图所示的 jar 包，并简单命名为 moco .</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/15.png\" alt=\"Mou icon\"></p>\n<p><strong>step 2:</strong></p>\n<p>把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/14.png\" alt=\"Mou icon\"></p>\n<p><strong>config.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;uri&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/hello&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hello.json&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;uri&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/checkAppUpgrade&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;checkAppUpgrade.json&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>hello.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请求成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Hello World !&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>checkAppUpgrade.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请求成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;versonName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;versonCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;downloadUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://www.baidu.com/v1.2.apk&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v1.2 版本修复了重大 bug .&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;isForceUpdate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>step 3:</strong></p>\n<p>在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco.jar http -p 8089 -c config.json</span><br></pre></td></tr></table></figure>\n\n<p><strong>step 4:</strong></p>\n<p>在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/16.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/17.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>把 localhost 换成自己电脑的 ip 就可以在手机上访问了。</p>\n</blockquote>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<p>在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。</p>\n<p>接口文档代表着一份请求&#x2F;响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？</p>\n<p>有了接口文档，我们就清楚了与后端交互的<strong>数据结构</strong>，然后可以通过 Mock 模拟请求&#x2F;响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。</p>\n<p>以下简单介绍 Github 上的一个 Mock 开源库的使用 - <a href=\"https://github.com/dreamhead/moco/\">moco</a>。</p>\n<p><strong>step 1:</strong></p>\n<p>下载如图所示的 jar 包，并简单命名为 moco .</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/15.png\" alt=\"Mou icon\"></p>\n<p><strong>step 2:</strong></p>\n<p>把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/14.png\" alt=\"Mou icon\"></p>\n<p><strong>config.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;uri&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/hello&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hello.json&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;uri&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/checkAppUpgrade&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;checkAppUpgrade.json&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>hello.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请求成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Hello World !&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>checkAppUpgrade.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请求成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;versonName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;versonCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;downloadUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://www.baidu.com/v1.2.apk&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v1.2 版本修复了重大 bug .&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;isForceUpdate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>step 3:</strong></p>\n<p>在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco.jar http -p 8089 -c config.json</span><br></pre></td></tr></table></figure>\n\n<p><strong>step 4:</strong></p>\n<p>在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/16.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/17.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>把 localhost 换成自己电脑的 ip 就可以在手机上访问了。</p>\n</blockquote>\n"},{"title":"Kotlin 教程","date":"2023-04-26T13:47:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n### 基础类型\n\nJava 中存在 int, float, boolean 等基础类型，这些基础类型在 Kotlin 里将全部以对象的形式继续存在。有几点变化需要注意。\n\n```Kotlin\n// Int 无法自动转换为 Double, 需要自己先做类型转换（as Double, toDouble(), 方式很多）\nvar a: Int = 2\nvar b: Double = a.toDouble()\n\n// Char 不能直接等值于其对应的 ASCII 码值，需要类型转换\nvar c: Char = 'a'\nvar x: Int = c.toInt()\n```\n\n### 变量声明\n\nKotlin 中使用 var 定义可读可写变量，使用 val 定义只读变量（相当于 Java 当中的 final）。定义变量时，如果满足类型推断，类型可以省略。\n\n```Kotlin\nvar id = \"100\" // 类型为 String\nvar name: String = \"张三\" // 类型为 String\nval age: Int = 30\n```\n\n### 类型声明\n\n在 Kotlin 语言中，“:” 被广泛用于变量类型的定义。\n\n```Kotlin\n// 定义变量类型\nfun test() {\n    var zhangSan: User\n    var liSi: User\n}\n\n// 定义函数参数和返回值\nfun getUser(id: Int): User {\n    return User(100, \"dd\", 30)\n}\n```\n\n“:”还被用于声明类继承或接口实现。\n\n```Kotlin\nopen class User {\n    constructor()\n}\n\n// 继承 User 类\nclass VipUser : User() {\n\n}\n\ninterface DB {\n    fun addUser(user: User)\n}\n\n// 实现 DB 接口\nclass RoomDB : DB {\n    override fun addUser(user: User) {\n\n    }\n}\n```\n\n### 类型检测\n\nJava 中使用 instanceof 来判断某变量是否为某类型，而 Kotlin 中使用 is 来进行类型检测。\n\n```Kotlin\n/**\n * is 判断属于某类型\n * !is 判断不属于某类型\n * as 类型强转，失败时抛出类型强转失败异常\n * as? 类型强转，但失败时不会抛出异常而是返回 null\n */\nif (myObject is User) {\n    // 只要进来了，就代表 myObject 是 User 类型了，不需要强转就可以直接使用 User 的属性\n    myObject.id = 101\n    myObject.name = \"Hello\"\n}\n```\n\n### Any 和 Unit\n\n- **Any**: Kotlin 的顶层父类是 Any, 对应 Java 中的 Object, 但是比 Object 少了 wait()/notify() 等函数。\n- **Unit**: Kotlin 中的 Unit 对应 Java 中的 void。 \n\n### 可见性修饰符\n\n- 默认的可见性修饰符是 `public`。\n- 新增的可见性修饰符 `internal` 表示仅当前模块（AS 中的 module）可见，其它模块不能访问。\n\n### 逻辑语句\n\n#### if-else 语句\n\nKotlin 中的 if-else 基本和 Java 一致，但还是有一些特殊的地方。比如它可以作为一个逻辑表达式使用，逻辑表达式还可以以代码块的形式出现，代码块最后的表达式作为该块的返回值。\n\n```Kotlin\n// 逻辑表达式的使用\nfun getMax(x: Int, y: Int): Int {\n    var max = if (x > y) x else y\n    return max\n}\n\n// 代码块形式的逻辑表达式\nfun getMax2(x: Int, y: Int): Int {\n    var max = if (x > y) {\n        println(\"Max num is x.\")\n        x // 返回最后一行，即 x 的值\n    } else {\n        println(\"Max num is y.\")\n        y // 返回最后一行，即 y 的值\n    }\n    return max\n}\n```\n\n#### when 语句\n\nKotlin 中的 when 语句取代了 Java 中的 switch-case 语句，功能上要强大许多，可以有多种形式的条件表达。与 if-else 一样，Kotlin 中的 when 也可以作为逻辑表达式使用，也有返回值。\n\n```Kotlin\n// when 有判断参数\nfun whenDemo(obj: Any) {\n    when (obj) {\n        1 -> println(\"是数字 1\")\n        -1, 0 -> println(\"是数字 -1 或 0\")\n        in 1..10 -> println(\"是不大于 10 的正整数\")\n        \"abc\" -> println(\"是字符串 abc\")\n        is User -> {\n            println(\"是 User 对象\")\n            println(obj.name) // 直接可以使用 User 的属性了\n        }\n        else -> println(\"其它操作\")\n    }\n}\n\n// when 没有判断参数\nfun whenDemo2(position: Int) {\n    val columns = 10\n    when {\n        position % columns == 0 -> { // position 位于第一列\n            // ...\n        }\n        (position + 1) % columns == 0 -> { // position 位于最后一列\n            // ...\n        }\n    }\n}\n\n// when 有返回值\nfun whenDemo3(score: Int) {\n    val result = when (score) {\n        in 90..100 -> \"优秀\"\n        in 80..89 -> \"良好\"\n        in 60..79 -> \"及格\"\n        else -> \"不及格\"\n    }\n    println(\"你的成绩$result\")\n}\n```\n\n#### 循环\n\n```Kotlin\n// 标准函数 repeat()：\nrepeat(100) { // 执行 100 次\n}\n\n// .. 包括右边界 [0,99]\nfor (i in 0..99) {\n}\n// until 不包括右边界 [0,99]\nfor (i in 0 until 100) {\n}\n```\n\n> while 语句、continue 语句和 break 语句等逻辑都与 Java 基本一致，这里不再赘述。\n\n#### 标签\n\nKotlin 中可以对任意表达式进行标签标记，标签的格式为标识符后跟 @ 符号，例如 abc@、fooBar@ 都是有效的标签。这些标签，可以搭配 return、break、continue 等跳转行为来使用。\n\n```Kotlin\nfun labelTest() {\n    la@ for (i in 1..10) {\n        println(\"outer index $i\")\n        for (j in 1..10) {\n            println(\"inner index $j\")\n            if (j % 2 == 0) {\n                break@la\n            }\n        }\n    }\n}\n```\n\n### 数组\n\n使用 `arrayOf` 创建数组，基本数据类型使用对应的 `intArrayOf` 等。\n\n```Kotlin\nval arr1 = arrayOf<Int>()\nvar arr2 = intArrayOf()\nvar arr3 = floatArrayOf()\n```\n\n### 字符串模板\n\n```Kotlin\n// Java 中字符串模板\nString name = \"ZhangSan\";\nint age = 30;\nString introduction = String.format(\"我是s%，今年%d岁了\", name, age);\n\n// Kotlin 中字符串模板\nval name = \"ZhangSan\"\nval age = 30\nval introduction = \"我是${name}，今年${age}岁了\"\n```\n\n### 函数\n\nKotlin 中的函数通过关键字 fun 定义的，具体的参数和返回值定义结构如下。\n\n```Kotlin\nfun myFun(para1: Int, para2: String): String { ... }\n```\n\nKotlin 中的函数可以是全局函数，成员函数或者局部函数，甚至还可以作为某个对象的扩展函数临时添加。\n\n#### 全局函数/顶级函数\n\n全局函数（顶级函数）是文件级别的，以包为作用域。\n\n例如 com.zch.kotlin.biz1 包中的 Common.kt 文件中有以下方法：\n\n```Kotlin\nfun sayHello() {\n    println(\"Hello\")\n}\n```\n\n那么在当前包的其它文件中就不能有相同的方法 sayHello，否则会报错。\n\n如果 com.zch.kotlin.biz2 包中的某文件中也有以下方法：\n\n```Kotlin\nfun sayHello() {\n    println(\"Hello\")\n}\n```\n\n那么在其它文件中同时调用两者就需要加上相应的包来访问。\n\n```Kotlin\nimport com.zch.kotlin.biz1.sayHello\n\nfun hello() {\n    sayHello()\n    com.zch.kotlin.biz2.sayHello()\n}\n```\n\n#### 成员函数\n\n成员函数是在类或对象内部定义的函数。\n\n#### 局部函数\n\nKotlin 支持局部函数，即一个函数在另一个函数内部：\n\n```Kotlin\nprivate fun getUserInfo(): String {\n    val country = \"中国\"\n\n    // 函数中的函数，叫“局部函数”\n    fun getProvince(): String {\n        return \"${country}广东省\" // 局部函数可以访问外部函数的局部变量。\n    }\n\n    val name = \"ZhangSan\"\n    val age = 30\n    val userInfo = \"我是${name}，今年${age}岁了，我来自${getProvince()}。\"\n\n    return userInfo\n}\n```\n\n> 如果是频繁调用的函数，不建议声明为局部函数，因为每次调用时，就会产生一个函数对象。\n\n#### 函数参数默认值\n\n函数中的某个参数可以用 “=” 号指定其默认值，调用函数方法时可不传这个参数，但其它参数需要用 “=” 号指定。\n\n```Kotlin\nfun calculate(a: Int, b: Int = 10, c: Int) = a + b + c // 原本直接 return 的函数可以用 = 符号简化\n\nval sum = calculate(5, c = 20) // sum = 35\n```\n\n#### 扩展函数和扩展属性\n\nKotlin 支持在**包范围内**对已存在的类进行函数和属性扩展。\n\n```Kotlin\n// 给 Activity 扩展一个 log 函数\nfun Activity.log(msg: String) {\n    Log.d(\"tag\", \"Activity---$msg\")\n}\n\n// 给 Context 扩展一个 log 函数\nfun Context.log(msg: String) {\n    Log.d(\"tag\", \"Context---$msg\")\n}\n\nlog(\"hello\") // 调用 Activity.log\n(this as Context).log(\"hello2\") // 调用 Context.log\n\n// 给 ViewGroup 扩展一个 firstChild 属性\nval ViewGroup.firstChild: View get() = getChildAt(0)\n\ncontentLayout.firstChild // 调用\n```\n\n> 注意：1、扩展需要在包级范围内进行，如果写在 class 内是无效的。2、已经存在的方法或属性，是无法被扩展的，依旧会调用已有的方法。3、扩展函数是静态解析的，在编译时就确定了调用函数（没有多态）。\n\n#### infix 函数\n\n标有 `infix` 关键字的函数也可以使用中缀表示法（忽略该调用的点与圆括号）调用。中缀函数必须满足以下要求：\n\n- 它们必须是成员函数或扩展函数；\n- 它们必须只有一个参数；\n- 其参数不得接受可变数量的参数且不能有默认值。\n\n```Kotlin\ninfix fun Int.shl(x: Int): Int { …… }\n\n// 用中缀表示法调用该函数\n1 shl 2\n\n// 等同于这样\n1.shl(2)\n```\n\n```Kotlin\n// 中缀函数调用的优先级低于算术操作符、类型转换以及 rangeTo 操作符。 以下表达式是等价的：\n\n1 shl 2 + 3 等价于 1 shl (2 + 3)\n0 until n * 2 等价于 0 until (n * 2)\nxs union ys as Set<*> 等价于 xs union (ys as Set<*>)\n\n// 另一方面，中缀函数调用的优先级高于布尔操作符 && 与 ||、is- 与 in- 检测以及其他一些操作符。这些表达式也是等价的：\n\na && b xor c 等价于 a && (b xor c)\na xor b in c 等价于 (a xor b) in c\n```\n\n中缀函数总是要求指定接收者与参数。当使用中缀表示法在当前接收者上调用方法时，需要显式使用 `this`；不能像常规方法调用那样省略。这是确保非模糊解析所必需的。\n\n```Kotlin\nclass MyStringCollection {\n    infix fun add(s: String) { /*……*/ }\n\n    fun build() {\n        this add \"abc\"   // 正确\n        add(\"abc\")       // 正确\n        add \"abc\"      // 错误：必须指定接收者\n    }\n}\n```\n\n#### 内联函数\n\n- 内联函数配合「函数类型」，可以减少「函数类型」生成的对象  。\n- 使⽤ `inline` 关键字声明的函数是「内联函数」，在「编译时」会将「内联函数」中的函数体直接插⼊到调⽤处。  所以在写内联函数的时候需要注意，尽量将内联函数中的代码行数减少。\n\n`noinline` 可以禁止部分函数参数参与内联编译：\n\n```Kotlin\ninline fun foo(inlined: () -> Unit, noinline notInlined:() -> Unit) {\n    //......\n}\n```\n\n#### 匿名函数\n\n- 匿名函数的特点是可以明确指定其返回值类型。\n- 它和常规函数的定义几乎相似。他们的区别在于，匿名函数没有函数名。\n\n```Kotlin\n// 常规函数\nfun test(x : Int , y : Int) : Int = x + y\n\n// 匿名函数\nfun(x : Int , y : Int) : Int = x + y\n```\n\n#### Lambda 表达式\n\n`Lambda` 表达式的本质是 `匿名函数`，因为在其底层实现中还是通过匿名函数来实现的。但是我们在用的时候不必关心其底层实现。不过 Lambda 的出现确实是减少了代码量的编写，同时也使代码变得更加简洁明了。\n\n**1、Lambda 的特点：**\n\n- Lambda 表达式总是被大括号括着。\n- 其参数（如果存在）在符号 “->” 之前声明（参数类型可以省略）。\n- 函数体（如果存在）在符号 “->” 后面。\n\n**2、Lambda 语法：**\n\n```Kotlin\n1、无参数的情况：\nval/var 变量名 = { 操作的代码 }\n\n// 源代码\nprivate fun myFun1() {\n    println(\"无参数\")\n}\n\n// lambda 代码\nval myFun1 = { println(\"无参数\") }\n\nprivate fun test1() {\n    myFun1() // 调用\n}\n// -------------------------------------------\n2、有参数的情况：\nval/var 变量名 : (参数的类型，参数类型，...) -> 返回值类型 = {参数1，参数2，... -> 操作参数的代码 }\n可等价于\n// 此种写法：即表达式的返回值类型会根据操作的代码自推导出来。\nval/var 变量名 = { 参数1 ： 类型，参数2 : 类型, ... -> 操作参数的代码 }\n\n// 源代码\nfun myFun2(a: Int, b: Int): Int {\n    return a + b\n}\n\n// lambda\nval myFun2: (Int, Int) -> Int = { a, b -> a + b }\n// 或者\nval myFun2 = { a: Int, b: Int -> a + b }\n\nfun test2() {\n    myFun2(1, 2) // 调用\n}\n// -------------------------------------------\n3、lambda 表达式作为函数中的参数：\nfun test(a : Int, 参数名 : (参数1 ： 类型，参数2 : 类型, ... ) -> 表达式返回类型){ ... }\n\n// 源代码\nfun myFun3(a: Int, b: Int): Int {\n    return a + b\n}\n\nfun sum(num1: Int, num2: Int): Int {\n    return num1 + num2\n}\n\n// lambda\nfun myFun33(a: Int, b: (num1: Int, num2: Int) -> Int): Int {\n    return a + b.invoke(3, 5)\n}\n\nfun test3() {\n    myFun33(10, { num1: Int, num2: Int -> num1 + num2 }) // 调用\n}\n```\n\n> invoke() 函数：表示为通过函数变量调用自身，因为上面例子中的变量 b 是一个匿名函数。\n\n**3、it**\n\n当一个高阶函数中 Lambda 表达式的参数只有一个的时候可以使用 it 来使用此参数。it 可表示为单个参数的隐式名称，是 Kotlin 语言约定的。\n\n```Kotlin\nval arr = intArrayOf(1, 2, 3)\nvar sum = 0\narr.forEach {\n    sum += it\n}\n```\n\n**4、下划线（_）**\n\n在使用 Lambda 表达式的时候，可以用下划线 （_） 表示未使用的参数，表示不处理这个参数。\n\n```Kotlin\nval map = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\", \"key3\" to \"value3\")\n// 不需要 key 的时候\nmap.forEach { _, value ->\n    println(\"$value\")\n}\n```\n\n**5、带接收者的函数字面值**\n\n在 Kotlin 中，提供了指定的接受者对象调用 Lambda 表达式的功能。在函数字面值的函数体中，可以调用该接收者对象上的方法而无需任何额外的限定符。它类似于扩展函数，它允许在函数体内访问接收者对象的成员。\n\n**5.1、匿名函数作为接收者类型**\n\n匿名函数语法允许你直接指定函数字面值的接收者类型，如果你需要使用带接收者的函数类型声明一个变量，并在之后使用它，这将非常有用。\n\n```Kotlin\nval add = fun Int.( other : Int) : Int = this + other\nprintln(2.add(3)) // 输出 5\n```\n\n**5.2、Lambda 表达式作为接收者类型**\n\n要用 Lambda 表达式作为接收者类型的前提是**接收者类型可以从上下文中推断出来**。\n\n```Kotlin\nclass HTML {\n    fun body() {}\n}\n\nfun myFun5(init: HTML.() -> Unit): HTML {\n    val html = HTML() // 创建接收者对象\n    html.init()       // 将该接收者对象传给该 lambda\n    return html\n}\n\nfun test111() {\n    myFun5 { // 带接收者的 lambda 由此开始\n        body() // 调用该接收者对象的一个方法\n    }\n}\n```\n\n**6、闭包**\n\n所谓闭包，即是函数中包含函数，这里的函数我们可以包含（Lambda 表达式，匿名函数，局部函数，对象表达式）。我们熟知，函数式编程是现在和未来良好的一种编程趋势，故而 Kotlin 也有这一个特性。Java 是不支持闭包的。\n\n**6.1、携带状态**\n\n```Kotlin\n// 让函数返回一个函数，并携带状态值\nfun myFun4(b: Int): () -> Int {\n    var a = 3\n    return fun(): Int {\n        a++\n        return a + b\n    }\n}\n\nfun test4() {\n    val t = myFun4(3)\n    println(t()) // 输出 7\n    println(t()) // 输出 8\n    println(t()) // 输出 9\n}\n```\n\n**6.2、引用外部变量，并改变外部变量的值**\n\n```Kotlin\nvar sum : Int = 0\nval arr = arrayOf(1,3,5,7,9)\narr.filter { it < 7  }.forEach { sum += it }\n\nprintln(sum) // 输出 9\n```\n\n**7、Lambda 表达式简写**\n\n```Kotlin\n// 如果函数的最后⼀个参数是 lambda, 那么 lambda 表达式可以放在圆括号之外：\nlessons.forEach(){ lesson : Lesson ->\n   // ...\n}\n\n// 如果你的函数传⼊参数只有⼀个 lambda 的话，那么⼩括号可以省略的：\nlessons.forEach { lesson : Lesson ->\n   // ...\n}\n\n// 如果 lambda 表达式只有⼀个参数，那么可以省略，通过隐式的 it 来访问：\nlessons.forEach { // it\n   // ...\n}\n```\n\n#### 高阶函数\n\n在 `Kotlin` 中，高阶函数即指：将函数用作一个函数的参数或者返回值的函数。\n\n**将函数用作函数参数的情况**\n\n```Kotlin\n// sumBy 函数的源码\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n// 调用\nfun test() {\n    val str = \"abc\"\n    val sum = str.sumBy { it.toInt() }\n    println(sum) // 输出 294。因为字符 a 对应的值为 97，b 对应 98，c 对应 99。故而该值即为 97 + 98 + 99 = 294\n}\n```\n\n**将函数用作一个函数的返回值**\n\n```Kotlin\nfun <T> lock(lock: Lock, body: () -> T): T {\n    lock.lock()\n    try {\n        return body()\n    } finally {\n        lock.unlock()\n    }\n}\n\n// 调用\nfun toBeSynchronized() = sharedResource.operation()\nval result = lock(lock, ::toBeSynchronized) \n\n// 上面的写法也可以写作：\nval result = lock(lock, {sharedResource.operation()} )\n// 或者\nval result = lock(lock) {\n    sharedResource.operation()\n}\n```\n\n> ::toBeSynchronized 即为对函数 toBeSynchronized() 的引用。\n\n**自定义高阶函数**\n\n```Kotlin\n// 定义高阶函数\nprivate fun calculation(num1: Int, num2: Int, result: (Int, Int) -> Int): Int {\n    return result(num1, num2)\n}\n\n// 测试调用\nfun test() {\n    val result1 = calculation(1, 2) { num1, num2 ->\n        num1 + num2\n    }\n    val result2 = calculation(10, 20) { num1, num2 ->\n        num1 * num2\n    }\n    println(\"result1 = $result1\") // 输出：3\n    println(\"result2 = $result2\") // 输出：200\n}\n```\n\n**开发中常用的一个例子**\n\n```Kotlin\nclass ParamView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0) : LinearLayout(context, attrs, defStyleAttr) {\n\n    var onParamValueClickListener: (() -> Unit)? = null // 定义一个点击事件，给外部处理\n\n    init {\n        tvParamValue?.setOnClickListener {\n            onParamValueClickListener?.invoke()\n        }\n    }\n}\n\n// 外部 ParamView 控件处理点击事件\nparamView?.onParamValueClickListener = {\n    // 处理业务逻辑...\n}\n```\n\n#### 标准高阶函数\n\nStandard.kt 文件中提供了一系列标准的高阶函数。\n\n**函数特点汇总**\n\n| 函数        | 接收者（this） | 传参（it） | 返回值（result） |\n|:--------- |:--------- |:------ |:----------- |\n| run()     | 当前类       | 编译错误   | 作用域中的最后一个对象 |\n| T.run()   | 类T        | 编译错误   | 作用域中的最后一个对象 |\n| with()    | 类T        | 编译错误   | 作用域中的最后一个对象 |\n| T.let()   | 当前类       | 类T     | 作用域中的最后一个对象 |\n| T.also()  | 当前类       | 类T     | 类T          |\n| T.apply() | 类T        | 编译错误   | 类T          |\n\n实际应用：\n\n```Kotlin\nclass MyStandard {\n    companion object {\n        const val TAG = \"MyStandard\"\n    }\n\n    // run()\n    fun runDemo1() {\n        var name = \"AA\"\n        run {\n            val name = \"BB\"\n            Log.e(TAG, name) // BB\n        }\n        Log.d(TAG, name) // AA\n    }\n\n    // T.run()\n    fun runDemo2() {\n        val result = \"ABCDEF\".run {\n            Log.d(TAG, \"字符串的长度为 $length\") // 字符串的长度为 6\n            substring(2)\n        }\n        Log.d(TAG, result) // CDEF\n    }\n\n    // with()\n    fun withDemo() {\n        val result = with(\"ABCDEF\") {\n            substring(2)\n        }\n        Log.d(TAG, result) // CDEF\n    }\n\n    // T.let()\n    fun letDemo() {\n        val result = \"ABCDEF\".let {\n            it.substring(2) // it 代表 \"ABCDEF\"\n        }\n        Log.d(TAG, result) // CDEF\n    }\n\n    // T.also()\n    fun alsoDemo() {\n        val result = \"ABCDEF\".also {\n            it.substring(2) // it 代表 \"ABCDEF\"\n        }\n        Log.d(TAG, result) // ABCDEF\n    }\n\n    // T.apply()\n    fun applyDemo() {\n        val result = \"ABCDEF\".apply {\n            this.substring(2) // this 代表 \"ABCDEF\"\n        }\n        Log.d(TAG, result) // ABCDEF\n    }\n}\n```\n\n通常，T.run()、T.let()、T.also() 和 T.apply() 四个用的比较多，使用时可以通过简单的规则作出⼀些判断：\n\n```Kotlin\nif(需要返回自身){\n    if(作用域中使用 this 作为参数){\n        选择 apply\n    }\n    if(作用域中使用 it 作为参数){\n        选择 also\n    }\n}\nif(不需要返回自身){\n    if(作用域中使用 this 作为参数){\n        选择 run\n    }\n    if(作用域中使用 it 作为参数){\n        选择 let\n    }\n}\n```\n\n### 实化类型参数\n\n**泛型类型擦除**：JVM 中的泛型一般是通过类型擦除实现的，也就是说泛型类实例的类型实参在编译时被擦除，在运行时是不会被保留的。基于这样实现的做法是有历史原因的，最大的原因之一是为了兼容 JDK1.5 之前的版本，当然泛型类型擦除也是有好处的，在运行时丢弃了一些类型实参的信息，对于内存占用也会减少很多。\n\n正因为泛型类型擦除原因在业界 Java 的泛型又称伪泛型。因为编译后所有泛型的类型实参类型都会被替换成 Object 类型或者泛型类型形参指定上界约束类的类型。例如： List<Float>、List<String>、List<Student> 在 JVM 运行时 Float、String、Student 都被替换成 Object 类型，如果泛型定义是 List<T extends Student> 那么运行时 T 被替换成 Student 类型。\n\nKotlin 和 Java 都存在泛型类型擦除的问题，但 Kotlin 可以通过 `inline` 函数保证使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为**实化**，对应需要使用 **reified** 关键字。因此，我们可以通过配合 `inline + reified` 达到「真泛型」的效果。\n\n**1、满足实化类型参数函数的必要条件**\n\n- 必须是 inline 内联函数，使用 inline 关键字修饰。\n- 泛型类定义泛型形参时必须使用 reified 关键字修饰。\n\n**2、带实化类型参数的函数基本定义**\n\n```Kotlin\n// 定义\ninline fun <reified T> isInstanceOf(value: Any): Boolean = value is T\n\nval obj = User()\nval instanceOf = isInstanceOf<User>(obj) // 调用\n```\n\n对于以上例子，我们可以说类型形参 T 是泛型函数 isInstanceOf 的实化类型参数。\n\n**3、原理描述**\n\n编译器把实现内联函数的字节码动态插入到每次的调用点。那么实化的原理正是基于这个机制，**每次调用带实化类型参数的函数时，编译器都知道此次调用中作为泛型类型实参的具体类型。所以编译器只要在每次调用时生成对应不同类型实参调用的字节码插入到调用点即可。** 总之一句话很简单，就是带实化参数的函数每次调用都生成不同类型实参的字节码，动态插入到调用点。由于生成的字节码的类型实参引用了具体的类型，而不是类型参数所以不会存在擦除问题。\n\n**4、实化类型参数函数不能在 Java 中调用**\n\nKotlin 的实化类型参数函数主要得益于 inline 函数的内联功能，虽然 Java 可以调用普通的内联函数但是失去了内联功能，失去内联功能也就意味实化操作也就化为泡影。\n\n**5、实化类型参数函数的使用限制**\n\n- 不能使用非实化类型形参作为类型实参调用带实化类型参数的函数。\n- 不能使用实化类型参数创建该类型参数的实例对象。\n- 不能调用实化类型参数的伴生对象方法。\n- reified 关键字只能标记实化类型参数的内联函数，不能作用于类和属性。\n\n**6、实化类型参数函数使用例子**\n\n```Kotlin\ninline fun <reified T> create(): T {\n    return RETROFIT.create(T::class.java)\n}\n\nval api = create<API>() // 调用\n\ninline fun <reified T> Gson.fromJson(json: String) = fromJson(json, T::class.java)\n\nval user = Gson().fromJson<User>(json) // 调用\n```\n\n### 类与继承\n\nKotlin 中也使用 class 关键字定义类，所有类都继承于 Any 类，类似于 Java 中 Object 类的概念。类实例化的形式也与 Java 一样，但是去掉了 new 关键字。\n\n#### 构造器\n\n类的构造器分为主构造器（primary constructor）和次级构造器（secondary constructor），前者只能有一个，而后者可以有多个。如果两者都未指定，则默认为无参数的主构造器。\n\n主构造器是属于类头的一部分，用 constructor 关键字定义，如果没有被「可见性修饰符」或者「注解」标注，constructor 可省略。由于主构造器不能包含任何代码，初始化代码需要单独写在 init 代码块中，主构造器的参数只能在 init 代码块和变量初始化时使用。\n\n次级构造器也是用 constructor 关键字定义，必须要直接或间接代理主构造器。\n\n```Kotlin\nclass User(name: String) { // 主构造器\n    var id: Int = 0\n    var name: String = \"\"\n\n    init {\n        // ...\n    }\n\n    constructor(id: Int, name: String) : this(name) { // 次级构造器\n        this.id = id\n        this.name = name\n    }\n}\n```\n\n主构造器中的参数加上 val 或者 var 修饰，那么参数就变成类的成员变量，如果参数和类原来的成员变量一样，那么对应原来的成员变量就要去掉。因此，以上代码一般可以简化为以下代码。\n\n```Kotlin\nclass User(val id: Int, val name: String) {\n    init {\n        // ...\n    }\n}\n```\n\n#### 继承\n\n类继承使用符号 “:” 表示，接口实现也一样，不做原本 Java 中的 extends 和 implement 关键字区分。Kotlin 中取消了 final 关键字，所有类默认都是被 final 修饰，不能被继承。Kotlin 中新增了 open 关键字，被 open 或者 abstract 修饰的类才可以被继承。\n\n#### 单例与伴随对象\n\nKotlin 使用关键词 object 定义单例类。这里需要注意，是全小写。单例类访问直接使用类名，无构造函数。\n\n```Kotlin\nobject LogUtil {\n    fun d(msg: String) {\n        if (BuildConfig.DEBUG) {\n            Log.d(\"tag\", msg)\n        }\n    }\n}\n```\n\n> 可通过 AS 工具栏 Tools --> Kotlin --> Show Kotlin Bytecode, 点击右侧的 Decompile 来把当前 Kotlin 代码转换为 Java 代码，来验证以上 object 对象是否转换成 Java 中的单例类。\n\nJava 中使用 static 标识一个类里的静态属性或方法。Kotlin 中没有 static 关键字，改为使用伴随对象，用 companion 修饰单例类 object, 来实现静态属性或方法功能。\n\n```Kotlin\nclass LoginCache {\n    companion object {\n        const val USER_NAME = \"user_name\"\n        const val PASSWORD = \"password\"\n\n        fun saveLoginInfo(userName: String, password: String) {\n\n        }\n    }\n}\n\nLoginCache.saveLoginInfo(\"ZhangSan\",\"123456\") // 调用\n```\n\n#### 内部类\n\n在 Kotlin 中，内部类默认是静态内部类，通过 `inner` 关键字声明为嵌套内部类。\n\n#### 匿名内部类\n\n形式：\n\n```Kotlin\nobject : OnItemCLickListener {\n}\n```\n\n应用：\n\n```Kotlin\nbtnLogin.setOnClickListener(object :View.OnClickListener{\n    override fun onClick(v: View?) {\n\n    }\n})\n\n// 以上匿名内部类转换成的 lambda 表达式如下：\nbtnLogin.setOnClickListener {\n\n}\n```\n\n### const\n\n- const 必须修饰 val。\n- const 只允许在 top-level 级别和 object 中声明。\n\n```Kotlin\nobject LogUtil {\n    const val TAG: String = \"LogUtil\"\n    val msg: String = \"msg\"\n}\n```\n\n以上 Kotlin 代码转换成的 Java 代码如下：\n\n```Java\n// 省略了部分不大相关代码\npublic final class LogUtil {\n    public static final String TAG = \"LogUtil\";\n    private static final String msg;\n\n    public final String getMsg() {\n        return msg;\n    }\n    // ...\n}\n```\n\n可以看出，const val 可见性为 public static final, 可以直接访问。val 可见性为 private static final, 并且 val 会生成对应属性的 getter 方法，通过方法调用访问。当定义常量时，出于效率考虑，应该使用 const val 方式，避免频繁函数调用。const 修饰的静态变量又称为**编译器常量**。\n\n### 声明抽象类/接口/枚举/注解\n\n```Kotlin\n// 声明抽象类\nabstract class\n// 声明接⼝\ninterface\n// 声明注解\nannotation class\n// 声明枚举\nenmu class\n```\n\n### 受检异常\n\nKotlin 不需要使用 `try-catch` 强制捕获异常。\n\n### 获取 Class 对象\n\n```Kotlin\n使用 [类名::class] 获取的是 Kotlin 的类型 KClass\n使用 [类名::class.java] 获取的是 Java 的类型\n\nstartActivity(Intent(this, MainActivity::class.java))\n```\n\n### setter/getter\n\n在 Kotlin 声明属性的时候（没有使用 private 修饰），会自动生成一个私有属性和一对公开的 setter/getter 方法。在写 setter/getter 的时候使⽤ field 来代替内部的私有属性（防⽌递归栈溢出）。\n\n```Kotlin\nclass Person {\n    var name: String = \"\"\n        get() = field // 默认实现方式，可省略\n        set(value) { // 默认实现方式，可省略\n            field = value\n        }\n    var age: Int = 0\n        get() = 18 // 获取的值一直都是 18，不会改变\n        set(value) {\n            field = if (value < 0) 1 else value\n        }\n}\n```\n\n### JvmXxx 相关注解\n\n#### JvmField\n\n通过 `@JvmField` 注解可以让编译器只生成一个 public 的成员属性，不生成对应的 setter/getter 方法。\n\n#### JvmName\n\n顶层函数在文件中定义函数和属性，会直接生成静态的成员，在 Java 中通过「文件名Kt」来访问，同时可以通过 `@file:JvmName` 注解来修改这个类名。注解要写在包名前面才会起作用。\n\n```Kotlin\n@file:JvmName(\"AppCache\")\n\npackage com.zch.kotlin.biz1\n\nvar mToken: String? = \"\"\nfun saveToken(token: String?) {\n    mToken = token\n}\n```\n\n```Java\n// java 中访问方式\npublic void test() {\n    AppCacheKt.saveToken(\"abc123\"); // 原来的访问方式\n    AppCache.saveToken(\"abc123\"); // 加了 @file:JvmName 注解后的访问方式\n}\n```\n\n#### JvmStatic\n\n如果将命名对象或伴生对象中定义的函数注解为 `@JvmStatic` ，Kotlin 会为这些函数生成静态方法。\n\n`命名对象中的 @JvmStatic`\n\n```Kotlin\nobject SizeUtil {\n    @JvmStatic\n    fun dp2px() {\n    }\n\n    fun sp2px() {}\n}\n```\n\n```Java\n// java 方法\npublic void testSizeUtil() {\n    // 之前的访问方式\n    SizeUtil.INSTANCE.dp2px();\n    SizeUtil.INSTANCE.sp2px();\n\n    // 加了 @JvmStatic 注解后，dp2px 变成了静态方法\n    SizeUtil.dp2px();\n}\n```\n\n`伴生对象中的 @JvmStatic`\n\n```Kotlin\nclass Util {\n    companion object {\n        @JvmStatic\n        fun sayYes() {\n        }\n\n        fun sayNo() {\n        }\n    }\n}\n```\n\n```Java\n// java 方法\npublic void testUtil(){\n    // 之前的访问方式\n    Util.Companion.sayYes();\n    Util.Companion.sayNo();\n\n    /**\n     * 加了 @JvmStatic 注解后，Util 生成了静态方法 sayYes，\n     * 该静态方法直接访问 Companion 的 sayYes()\n     */\n    Util.sayYes();\n}\n```\n\n> `@JvmStatic` 注解也可以应用于对象或伴生对象的属性，使其 getter 和 setter 方法成为该对象或包含伴生对象的类的静态成员。\n\n#### JvmOverloads\n\n在 Kotlin 中调用默认参数值的方法或者构造函数是完全没问题的，Java 中调用相应 Kotlin 方法时，是必须输入所有参数的值的，Kotlin 中默认参数我们无法使用。而当加上 `@JvmOverloads`, Kotlin 编译器生成的字节码中有对应的重载方法，我们就可以通过 Java 的重载方式来使用 Kotlin 的代码了，不必要输入所有的参数。\n\n```Kotlin\nclass ParamView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0) : LinearLayout(context, attrs, defStyleAttr) {\n\n}\n```\n\n以上 Kotlin 的自定义控件加上 `@JvmOverloads` 后，相当于 Java 中的以下代码：\n\n```Java\npublic class ParamView extends LinearLayout {\n\n    public ParamView(Context context) {\n        this(context, null);\n    }\n\n    public ParamView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public ParamView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n}\n```\n\n> Kotlin 中构造函数、顶级函数、类中方法，静态方法（@Jvmstatic 修饰）均可采用 `@JvmOverloads` 生成对应重载方法。\n\n### 注解使用处目标\n\n当某个元素可能会包含多种内容（例如构造属性，成员属性），使用注解时可以通过「注解使⽤处⽬标」，让注解对⽬标发⽣作⽤，例如 @file: 、 @get: 、@set: 等。  \n\n```Kotlin\nclass App : Application() {\n    companion object {\n        @JvmStatic\n        @get:JvmName(\"instance\")\n        lateinit var instance: Application\n            private set\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n        instance = this\n    }\n}\n```\n\n```Java\nApp.Companion.getInstance(); // java 中原来调用方式\nApp.instance(); // java 中现在调用方式\n```\n\n### Elvis 操作符\n\n可通过 `?:` 的操作来简化 `if null` 操作。\n\n```Kotlin\n// lesson.date 为空时使⽤默认值\nval date = lesson.date?: \"⽇期待定\"\n// lesson.state 为空时提前返回函数\nval state = lesson.state?: return\n// lesson.content 为空时抛出异常\nval content = lesson.content ?: throw IllegalArgumentException(\"content expected\")\n```\n\n### 空指针安全\n\nKotlin 中，当我们定义一个变量时，其默认就是非空类型。如果你直接尝试给他赋值为 null, 编译器会直接报错。Kotlin 中将符号 “?” 定义为安全调用操作符。变量类型后面跟 ? 号定义，表明这是一个可空类型。同样的，在调用子属性和函数时，也可以用字符 ? 进行安全调用。Kotlin 的编译器会在写代码时就检查非空情况。\n\nKotlin 还提供 “!!” 双感叹号操作符来强制调用对象的属性和方法，无视其是否非空。这是一个挺危险的操作符，除非有特殊需求，否则为了远离 NPE, 还是少用为妙。\n\n```Kotlin\nvar tvContent: TextView // 非空类型\nvar tvContent: TextView? // 可空类型\n\n!! // 强行调用符\n? // 安全调用符\n```\n\n```Kotlin\nvar s1: String = \"abc\"\ns1 = null // 这里编译器会报错\n\nvar s2: String? = \"abc\"\ns2 = null // 编译器不会报错\n\nvar l1 = s1.length // 可正常编译\nvar l2 = s2.length // 没有做非空判断，编译器检查报错\n\nif (s2 != null) s2.length // Java 式的判空方案\ns2?.length // Kotlin 的安全调用操作符 ?。当 s2 为 null 时，s2?.length 也为 null\n\ns2!!.length // 可能会导致 NPE\n```\n\n### lateinit 关键字\n\n```Kotlin\n/**\n * 1、lateinit 只能修饰 var 可读可写变量。\n * 2、lateinit 关键字声明的变量类型必须是不可空类型。\n * 3、lateinit 声明的变量不能有初始值。\n * 4、lateinit 声明的变量不能是基本数据类型。\n * 5、在构造器中初始化的属性不需要 lateinit 关键字。\n */\nprivate lateinit var tvContent: TextView\n```\n\n### data class\n\n数据类通常都是由多个属性和对应的 getter、setter 组成。当有大量多属性时，不仅这些类会因为大量的 getter 和 setter 方法而行数爆炸，也使整个工程方法数骤增。\n\nKotlin 中做了这层特性优化，提供了数据类的简单实现。不用再写 getter、setter 方法，这些都由编译器背后去做，你得到的是一个清爽干净的数据类。数据类用 `data class` 声明。\n\n```Kotlin\ndata class Student(\n    var id: Int,\n    var name: String,\n    var age: Int\n)\n```\n\n把这个数据类反编译成 Java 代码可知，数据类除了为我们生成了 getter、setter（val 声明的变量不生成 setter 方法）、构造函数外，还有以下方法。\n\n```Kotlin\nequals() / hashCode()\ntoString()\ncomponentN()...\ncopy()\n```\n\n`copy 函数`\n\n```Kotlin\npublic final Student copy(int id, String name, int age) {\n    return new Student(id, name, age);\n}\n```\n\n当要复制一个对象，只改变一些属性，但其余不变，copy() 就是为此而生。\n\n`componentN 函数-解构声明（Destructuring Declarations）`\n\n```Kotlin\npublic final int component1() {\n    return this.id;\n}\n\npublic final String component2() {\n    return this.name;\n}\n\npublic final int component3() {\n    return this.age;\n}\n```\n\n编译器为数据类（data class）自动声明 componentN() 函数，可直接用解构声明。\n\n```Kotlin\nval student = Student(101, \"ZhangSan\", 30)\nval (id, name, age) = student // 自动赋值给 id, name, age\nprintln(\"id=$id, name=$name, age=$age\")\n```\n\n### 相等性\n\n`两个等号==和三个等号===`\n\n两个等号 `==`：比较的是**对象的内容**是否相同，相当于 Java 的 equals()。`==` 的否定形式为 `!=` 。\n\n三个等号 `===`：比较的是**对象的地址**是否相同（即判断是否为同一对象），相当于 Java 的 ==。`===` 的否定形式为 `!==` 。\n\n```Kotlin\nval student1 = Student(101, \"ZhangSan\", 30)\nval student2 = Student(101, \"ZhangSan\", 30)\nif (student1 == student2) { // true\n    // ...\n}\nif (student1 === student2) { // false\n    // ...\n}\n```\n\n### operator\n\n通过 operator 修饰「特定函数名」的函数，例如 plus 、get, 可以达到重载运算符的效果。\n\n| 表达式   | 翻译为        |\n| ----- | ---------- |\n| a + b | a.plus(b)  |\n| a - b | a.minus(b) |\n| a * b | a.times(b) |\n| a / b | a.div(b)   |\n\n### 委托\n\n委托，也就是委托模式，它是 23 种经典设计模式中的一种，又名`代理模式`，在委托模式中，有 2 个对象参与同一个请求的处理，接受请求的对象将请求委托给另一个对象来处理。委托模式中，有三个角色：约束、委托对象和被委托对象。Kotlin 直接支持委托模式，更加优雅，简洁。Kotlin 通过关键字 `by` 实现委托。\n\n- **约束**：约束是接口或者抽象类，它定义了通用的业务类型，也就是需要被代理的业务。\n- **被委托对象**：具体的业务逻辑执行者。\n- **委托对象**：负责对真正角色的应用，将约束类定义的业务委托给具体的委托对象。\n\n#### 类委托\n\n类的委托即一个类中定义的方法实际是调用另一个类的对象的方法来实现的。\n\n```Kotlin\n// 约束类，我们约定的业务\ninterface IGamePlayer {\n    fun play() // 打游戏\n}\n\n// 被委托对象，实现了我们约定的业务\nclass RealGamePlayer(private val name: String) : IGamePlayer {\n    override fun play() {\n        println(\"${name}开始打游戏\")\n    }\n}\n\n// 委托对象，通过关键字 by 建立委托类\nclass DelegateGamePlayer(private val player: IGamePlayer) : IGamePlayer by player\n\nfun main(args: Array<String>) {\n    val realGamePlayer = RealGamePlayer(\"张三\")\n    val delegateGamePlayer = DelegateGamePlayer(realGamePlayer)\n    delegateGamePlayer.play() // 输出：张三开始打游戏\n}\n```\n\n在 DelegateGamePlayer 声明中，by 子句表示，将 player 保存在 DelegateGamePlayer 的对象实例内部，而且编译器将会生成继承自 IGamePlayer 接口的所有方法，并将调用转发给 player。\n\n>  可以通过类委托的模式来减少继承。\n\n#### 属性委托\n\n属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类的属性统一管理。\n\n属性委托语法格式：\n\n```Kotlin\nval/var <属性名>: <类型> by <表达式>\n```\n\n- var/val：属性类型(可变/只读)。\n- 属性名：属性名称。\n- 类型：属性的数据类型。\n- 表达式：委托代理类。\n\nby 关键字之后的表达式就是委托，属性的 get() 方法（以及 set() 方法）将被委托给这个对象的 getValue() 和 setValue() 方法。属性委托不必实现任何接口，但必须提供 getValue() 函数（对于 var 属性，还需要 setValue() 函数）。\n\n```Kotlin\n/**\n * 被委托类（委托代理类）\n * 该类需要包含 getValue() 方法和 setValue() 方法，且参数 thisRef 为进行委托的类的对象，property 为进行委托的属性的对象。\n */\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"$thisRef, 这里委托了 ${property.name} 属性\"\n    }\n\n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n        println(\"$thisRef 的 ${property.name} 属性赋值为 $value\")\n    }\n}\n\nfun main(args: Array<String>) {\n    var token: String by Delegate()\n    println(token) // 访问该属性，调用 getValue() 函数\n\n    token = \"xxx\"   // 调用 setValue() 函数\n    println(token)\n}\n```\n\n其中的参数解释如下：\n\n- `thisRef` —— 必须与属性所有者类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型。\n- `property` —— 必须是类型 `KProperty<*>` 或其超类型。\n- `value` —— 必须与属性同类型或者是它的子类型。\n\n#### 属性委托的另一种实现方式\n\nKotlin 标准库中声明了 2 个含所需 `operator` 方法的 `ReadOnlyProperty / ReadWriteProperty` 接口。\n\n```Kotlin\ninterface ReadOnlyProperty<in R, out T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n}\n\ninterface ReadWriteProperty<in R, T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n    operator fun setValue(thisRef: R, property: KProperty<*>, value: T)\n}\n```\n\n`被委托类` 实现这两个接口其中之一就可以了，`val` 属性实现 `ReadOnlyProperty`, `var` 属性实现 `ReadWriteProperty`。 \n\n```Kotlin\nclass Delegate2 : ReadWriteProperty<Any?, String> {\n    override fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"\"\n    }\n\n    override fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n    }\n}\n\nvar token2: String by Delegate2()\n```\n\n#### 标准库中提供的几个委托\n\n- 延迟属性（lazy）: 其值只在首次访问时计算。\n- 可观察属性（observable）: 监听器会收到有关此属性变更的通知。\n- 把多个属性储存在一个映射（map）中，而不是每个存在单独的字段中。\n\n**1、延迟属性 lazy**\n\nlazy() 是一个函数，接受一个 Lambda 表达式作为参数，返回一个 Lazy <T> 实例的函数，返回的实例可以作为实现延迟属性的委托：第一次调用 get() 会执行已传递给 lazy() 的 lamda 表达式并记录结果，后续调用 get() 只是返回记录的结果。\n\n```Kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\") // 第一次调用输出，第二次调用不执行\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue) // 第一次执行，执行两次输出表达式\n    println(lazyValue) // 第二次执行，只输出返回值\n}\n\n// 执行输出结果\ncomputed!\nHello\nHello\n```\n\n**2、可观察属性 Observable**\n\nobservable 可以用于实现观察者模式。\n\nDelegates.observable() 函数接受两个参数：第一个是初始化值，第二个是属性值被修改时的回调处理器 onChange。回调处理器有三个参数：被赋值的属性、旧值和新值：\n\n```Kotlin\nimport kotlin.properties.Delegates\n\nclass User {\n    var name: String by Delegates.observable(\"A\") { property, oldValue, newValue ->\n        println(\"旧值：$oldValue -> 新值：$newValue\")\n    }\n}\n\nfun main(args: Array<String>) {\n    val user = User()\n    user.name = \"B\"\n    user.name = \"C\"\n}\n\n// 执行输出结果\n旧值：A -> 新值：B\n旧值：B -> 新值：C\n```\n\n**vetoable 函数**：`vetoable` 与 `observable` 一样，可以观察属性值的变化，不同的是，`vetoable` 可以通过`处理器函数来决定属性值是否生效`。\n\n```Kotlin\n// 声明一个 Int 类型的属性 vetoableProp, 如果新的值比旧值大，则生效，否则不生效。\nvar vetoableProp: Int by Delegates.vetoable(0){ _, oldValue, newValue ->\n    // 如果新的值大于旧值，则生效\n    newValue > oldValue\n}\n```\n\n**3、把属性储存在映射中**\n\n一个常见的用例是在一个映射（map）里存储属性的值。 这经常出现在像解析 JSON 或者做其他“动态”事情的应用中。 在这种情况下，你可以使用映射实例自身作为委托来实现委托属性。\n\n```Kotlin\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int  by map\n}\n\nfun main(args: Array<String>) {\n    // 构造函数接受一个映射参数\n    val user = User(mapOf(\n        \"name\" to \"张三\",\n        \"age\"  to 18\n    ))\n\n    // 读取映射值\n    println(user.name)\n    println(user.age)\n}\n```\n\n### 集合中函数式 API 操作符\n\n#### 筛选过滤类\n\n##### slice 系列\n\n操作符可以取集合中一部分元素或者某个元素，最后组合成一个新元素。\n\n- **`slice(indices: IntRange)`**：指定切片的起始位置和终止位置，将范围内的元素切出加入到新集合。\n\n  ```kotlin\n  val list = listOf(1, 2, 3, 4, 5).slice(IntRange(2, 4))\n  println(list)\n  \n  // 打印结果：\n  [3, 4, 5]\n  ```\n\n- **`slice(indices: Iterable<Int>)`**：指定下标分别切出对应的元素，放入新集合中。\n\n  ```kotlin\n  val list = listOf(1, 2, 3, 4, 5).slice(IntRange(2, 4))\n  println(list)\n  \n  val list2 = listOf(1, 2, 3, 4, 5).slice(listOf(1, 3))\n  println(list2)\n  \n  // 打印结果：\n  [3, 4, 5]\n  [2, 4]\n  ```\n\n##### filter 系列\n\n- **`filter(predicate: (T) -> Boolean)`**：从一个集合筛选出符合条件的元素，并以一个新集合返回。\n\n  ```kotlin\n  val list = listOf(1, 2, 3, 4, 5).filter { it % 2 == 0 }\n  println(list)\n  \n  // 打印结果：\n  [2, 4]\n  ```\n\n- **`filterTo(destination: C, predicate: (T) -> Boolean)`**：从多个集合筛选出符合条件的元素，并最终用一个集合进行收集从每个集合筛选出的元素。\n\n  ```kotlin\n  val numberList1 = listOf(3, 6, 9, 12, 15)\n  val numberList2 = listOf(5, 10, 15, 20, 25)\n  val numberList3 = listOf(10, 20, 30, 40, 50)\n  \n  // filterTo 的 destination 是一个可变集合类型，所以这里使用 mutableListOf 初始化\n  val newNumberList = mutableListOf<Int>().apply {\n      numberList1.filterTo(this) {\n          it % 5 == 0\n      }\n      numberList2.filterTo(this) {\n          it % 5 == 0\n      }\n      numberList3.filterTo(this) {\n          it % 20 == 0\n      }\n  }\n  println(newNumberList)\n  \n  // 打印结果：\n  [15, 5, 10, 15, 20, 25, 20, 40]\n  ```\n\n- **`filterIndexed(predicate: (index: Int, T) -> Boolean)`**：需要集合元素 `index` 参与筛选条件。\n\n  ```kotlin\n  val result = listOf(3, 6, 9, 12, 15).filterIndexed { index, item ->\n      index > 2 && item % 2 == 0\n  }\n  println(result)\n  \n  // 打印结果：\n  [12]\n  ```\n\n- **`filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean)`**：从多个集合筛选出符合条件的元素，筛选条件需要 `index`，并最终用一个集合进行收集从每个集合筛选出的元素。\n\n  ```kotlin\n  val result = mutableListOf<Int>()\n  listOf(0, 1, 2, 12, 4).filterIndexedTo(result) { index, item ->\n      index == item\n  }\n  println(result)\n  \n  // 打印结果：\n  [0, 1, 2, 4]\n  ```\n\n- **`filterIsInstance()`**：一个抽象类集合中含有多种子类型的元素，可以很方便筛选对应子类型的元素，并组成一个集合返回。\n\n  ```kotlin\n  val list = mutableListOf(1, \"2\", 3, \"4\", 5f, 6.0, \"7\")\n  val result = list.filterIsInstance<Int>()\n  println(result)\n  \n  // 打印结果：\n  [1, 3]\n  ```\n\n- **`filterIsInstanceTo(destination: C)`**：适用于筛选多个集合的情况。\n\n  ```kotlin\n  val list = mutableListOf(1, \"2\", 3, \"4\", 5f, 6.0, \"7\")\n  val result = mutableListOf<String>()\n  list.filterIsInstanceTo(result)\n  println(result)\n  \n  // 打印结果：\n  [2, 4, 7]\n  ```\n\n- **`filterNot(predicate: (T) -> Boolean)`**、**`filterNotTo(destination: C, predicate: (T) -> Boolean)`**：从一个集合筛选出符合条件之外的元素，并以一个新集合返回。它是 filter 操作符取反操作。\n\n- **`filterNotNull()`**、**`filterNotNullTo(destination: C)`**：filterNotNull 操作符可以过滤集合中为 null 的元素。同理 filterNotNullTo 才是真正过滤操作，但是需要从外部传入一个可变集合。\n\n##### drop 系列\n\n- **`drop(n: Int)`**：把集合元素去除一部分，drop 是顺序地删除，n 则表示顺序删除几个元素，最后返回剩余元素集合。\n\n  ```kotlin\n  println(listOf(1, 2, 3, 4, 5).drop(3))\n  \n  // 打印结果：\n  [4, 5]\n  ```\n\n- **`dropLast(n: Int)`**：根据传入数值 n，表示从右到左倒序地删除 n 个集合中的元素，并返回集合中剩余的元素。\n\n  ```kotlin\n  println(listOf(1, 2, 3, 4, 5).dropLast(3))\n  \n  // 打印结果：\n  [1, 2]\n  ```\n\n- **`dropWhile(predicate: (T) -> Boolean)`**：从集合的第一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).dropWhile { it < 20 })\n  \n  // 打印结果：\n  [32, 40, 5]\n  ```\n\n- **`dropLastWhile(predicate: (T) -> Boolean)`**：从集合的最后一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。\n\n  ```kotlin\n   println(listOf(1, 2, 32, 40, 5).dropLastWhile { it < 20 })\n  \n  // 打印结果：\n  [1, 2, 32, 40]\n  ```\n\n\n##### take 系列\n\n- **`take(n: Int)`**：从原集合的第一项开始顺序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。换句话说就是取集合前 n 个元素组成新的集合返回。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).take(3))\n  \n  // 打印结果：\n  [1, 2, 32]\n  ```\n\n- **`takeLast(n: Int)`**：从原集合的最后一项开始倒序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).takeLast(3))\n  \n  // 打印结果：\n  [32, 40, 5]\n  ```\n\n- **`takeLastWhile(predicate: (T) -> Boolean)`**：从集合的最后一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).takeLastWhile { it < 20 })\n  \n  // 打印结果：\n  [5]\n  ```\n\n- **`takeWhile(predicate: (T) -> Boolean)`**：从集合的第一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).takeWhile { it < 20 })\n  \n  // 打印结果：\n  [1, 2]\n  ```\n\n##### distinct 系列\n\n- `distinct`：去除集合中的重复元素。\n\n  ```kotlin\n  println(listOf(1, 2, 2, 1, 3).distinct())\n  \n  // 打印结果：\n  [1, 2, 3]\n  ```\n\n- **`distinctBy(selector: (T) -> K)`**：根据操作元素后的结果去除重复元素。\n\n  ```kotlin\n  println(listOf(1, 2, 4, 3, 6).distinctBy { it % 2 })\n  \n  // 打印结果：\n  [1, 2]\n  ```\n\n#### 并集类操作符\n\n##### any、all、count、none 系列\n\n- **`any()`**：判断是不是一个集合，若是，则再判断集合是否为空。若为空则返回 false，反之返回 true。若不是集合，则返回 hasNext。\n\n  ```kotlin\n  println(listOf(1, 2).any())\n  \n  // 打印结果：\n  true\n  ```\n\n- **`any(predicate: (T) -> Boolean)`**：判断集合中是否存在满足条件的元素。若存在则返回 true，反之返回 false。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).any { it > 30 })\n  \n  // 打印结果：\n  true\n  ```\n\n- **`all(predicate: (T) -> Boolean)`**：判断集合中的所有元素是否都满足条件。若是则返回 true，反之则返回 false。\n\n  ```kotlin\n  println(listOf(0, 2, 32, 40, 50).all { it % 2 == 0 })\n  \n  // 打印结果：\n  true\n  ```\n\n- **`count()`**、**`count(predicate: (T) -> Boolean)`**：返回集合中的元素个数或查询集合中满足条件的元素个数。\n\n  ```kotlin\n  println(listOf(0, 2, 32, 40, 50).count())\n  println(listOf(0, 2, 32, 40, 50).count { it > 10 })\n  \n  // 打印结果：\n  5\n  3\n  ```\n\n- **`none()`**、**`none(predicate: (T) -> Boolean)`**：如果一个集合是空集合，返回 true 或者集合中没有满足条件的元素，则返回 true。\n\n  ```kotlin\n  println(listOf(0, 2, 32, 40, 50).none()) \n  println(listOf(0, 2, 32, 40, 50).none { it > 50 })\n  \n  // 打印结果：\n  false\n  true\n  ```\n\n##### fold 系列\n\n- **`fold(initial: R, operation: (acc: R, T) -> R)`**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素。\n\n  ```kotlin\n  println(listOf(0, 2, 4, 6).fold(10) { result, element ->\n      result + element\n  })\n  \n  // 打印结果：\n  22\n  ```\n\n- **`foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R)`**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。\n\n  ```kotlin\n  println(listOf(\"h\", \"e\", \"l\", \"l\", \"o\").foldIndexed(\"Say\") { index, result, element ->\n      \"$result $element$index\"\n  })\n  \n  // 打印结果：\n  Say h0 e1 l2 l3 o4\n  ```\n\n- **`foldRight(initial: R, operation: (T, acc: R) -> R)`**：在一个初始值的基础上，从最后项到第一项通过一个函数累计所有的元素，与 fold 类似，不过是从最后一项开始累计。\n\n  ```kotlin\n  println(listOf(\"1\", \"2\", \"3\").foldRight(\"Say\") { element, result ->\n      \"$result $element\"\n  })\n  \n  // 打印结果：\n  Say 3 2 1\n  ```\n\n- **`foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R)`**：在一个初始值的基础上，从最后一项到第一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。\n\n  ```kotlin\n  println(listOf(\"1\", \"2\", \"3\").foldRightIndexed(\"Say\") { index, element, result ->\n      \"$result $element-$index\"\n  })\n  \n  // 打印结果：\n  Say 3-2 2-1 1-0\n  ```\n\n##### forEach 系列\n\n- **`forEach(action: (T) -> Unit)`**：集合元素的遍历操作符。\n\n  ```kotlin\n  listOf(\"1\", \"2\", \"3\").forEach {\n      print(it)\n  }\n  \n  // 打印结果：\n  123\n  ```\n\n- **`forEachIndexed(action: (index: Int, T) -> Unit)`**：集合中带元素下标的遍历操作。\n\n  ```kotlin\n  listOf(\"1\", \"2\", \"3\").forEachIndexed { index, s ->\n      print(\"$index-$s \")\n  }\n  \n  // 打印结果：\n  0-1 1-2 2-3\n  ```\n\n##### max、min 系列\n\n- **`maxOrNull()`**：获取集合中最大的元素，若为空元素集合，则返回 null。\n\n  ```kotlin\n  println(listOf(\"B\", \"C\", \"A\").maxOrNull())\n  \n  // 打印结果：\n  C\n  ```\n\n- **`maxByOrNull(selector: (T) -> R)`**：根据给定的函数返回最大的一项，如果没有则返回 null。\n\n  ```kotlin\n  println(listOf(-2, 1, 0).maxByOrNull {\n      it * -3\n  })\n  \n  // 打印结果：\n  -2\n  ```\n\n- **`maxWithOrNull(comparator: Comparator<in T>)`**：接受一个 Comparator 对象并且根据此 Comparator 对象返回最大元素。\n\n  ```kotlin\n  println(listOf(\"-20\", \"-102\", \"0\").maxWithOrNull(compareBy {\n      it.length\n  }))\n  \n  // 打印结果：\n  -102\n  ```\n\n\n> min 操作符作用与 max 相反，包括 minBy 和 minWith。\n\n##### reduce 系列\n\n- **`reduce(operation: (acc: S, T) -> S)`**：从集合中的第一项到最后一项的累计操作，与 fold 操作符的区别是没有初始值。\n\n  ```kotlin\n  println(listOf(\"Nice\", \"to\", \"meet\", \"you\").reduce { result, element ->\n      \"$result $element\"\n  })\n  \n  // 打印结果：\n  Nice to meet you\n  ```\n\n  > 其中 reduceIndexed，reduceRight，reduceRightIndexed 操作符都与前述的 fold 相关操作符类似，只是没有初始值。\n\n- **`reduceOrNull(operation: (acc: S, T) -> S)`**：从集合中的第一项到最后一项的累计操作，如果集合为空，返回 null。\n\n  > reduceRightOrNull 操作符作用等价于 reduceRight，不同的是当集合为空，返回 null。\n\n##### sum 系列\n\n- **`sum()`**：计算集合中所有元素累加的结果。\n\n  ```kotlin\n  println(listOf(1, 2, 3).sum())\n  \n  // 打印结果：\n  6\n  ```\n\n- **`sumOf(selector: (T) -> Int)`**：计算集合所有元素通过某个函数转换后数据之和。\n\n  ```kotlin\n  println(listOf(1, 2, 3).sumOf { it * 2 })\n  \n  // 打印结果：\n  12\n  ```\n\n#### 映射类操作符\n\n##### flatMap 系列\n\n- **`flatMap(transform: (T) -> Iterable<R>)`**：根据条件合并两个集合，组成一个新的集合。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  println(strList.flatMap { listOf(it.plus(\"1\")) })\n  \n  // 打印结果：\n  [A1, B1, C1]\n  ```\n\n- **`flatMapTo(destination: C, transform: (T) -> Iterable<R>)`**：多个集合的条件合并。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  val strList2 = listOf(\"a\", \"b\", \"c\")\n  val resultList = mutableListOf<String>().apply {\n      strList.flatMapTo(this) {\n          listOf(it.plus(\"1\"))\n      }\n      strList2.flatMapTo(this) {\n          listOf(it.plus(\"2\"))\n      }\n  }\n  println(resultList)\n  \n  // 打印结果：\n  [A1, B1, C1, a2, b2, c2]\n  ```\n\n##### group 系列\n\n- **`groupBy(keySelector: (T) -> K)`**：分组操作符，根据条件将集合拆分为一个 Map 类型集合。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.groupBy { if (it.startsWith(\"Java\")) \"MyJava\" else \"MyKotlin\" })\n  \n  // 打印结果：\n  {MyJava=[Java, JavaScript], MyKotlin=[Kotlin, C, C++]}\n  ```\n\n- **`groupByTo(destination: M, keySelector: (T) -> K)`**：分组操作，适用于多个集合的分组操作。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  val strList2 = listOf(\"15\", \"223\", \"45\", \"520\", \"18\")\n  val mutableMap = mutableMapOf<String, MutableList<String>>().apply {\n      strList.groupByTo(this) {\n          if (it.startsWith(\"Java\")) \"Java\" else \"Not Java\"\n      }\n      strList2.groupByTo(this) {\n          if (it.contains(\"2\")) \"2\" else \"Not 2\"\n      }\n  }\n  println(mutableMap)\n  \n  // 打印结果：\n  {Java=[Java, JavaScript], Not Java=[Kotlin, C, C++], Not 2=[15, 45, 18], 2=[223, 520]}\n  ```\n\n- **`groupingBy(crossinline keySelector: (T) -> K)`**：对元素进行分组，然后一次将操作应用于所有分组。适用于对集合复杂分组的情况。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.groupingBy { it.startsWith(\"Java\") }.eachCount())\n  \n  // 打印结果：\n  {true=2, false=3}\n  ```\n\n  `Grouping` 支持以下操作：\n\n  - eachCount() 计算每个组中的元素。\n  - fold() 与 reduce() 对每个组分别执行 fold 与 reduce 操作，作为一个单独的集合并返回结果。\n  - aggregate() 随后将给定操作应用于每个组中的所有元素并返回结果。 这是对 `Grouping` 执行任何操作的通用方法。当折叠或缩小不够时，可使用它来实现自定义操作。\n\n##### map 系列\n\n- **`map(transform: (T) -> R)`**：集合变换，遍历每个元素并执行给定表达式，最终形成新的集合。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.map { it.plus(\"-1\") })\n  \n  // 打印结果：\n  [Java-1, Kotlin-1, C-1, C++-1, JavaScript-1]\n  ```\n\n- **`mapTo(destination: C, transform: (T) -> R)`**：多个集合的元素转换。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  val strList2 = listOf(\"a\", \"b\", \"c\")\n  println(mutableListOf<String>().apply {\n      strList.mapTo(this) { it.plus(\"-1\") }\n      strList2.mapTo(this) { it.plus(\"-2\") }\n  })\n  \n  // 打印结果：\n  [A-1, B-1, C-1, a-2, b-2, c-2]\n  ```\n\n- **`mapIndexed(transform: (index: Int, T) -> R)`**：带有元素下标的集合转换。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  println(strList.mapIndexed { index, s -> \"$index-$s\" })\n  \n  // 打印结果：\n  [0-A, 1-B, 2-C]\n  ```\n\n- **`mapIndexedTo(destination: C, transform: (index: Int, T) -> R)`**：带有元素下标的多个集合转换。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  val strList2 = listOf(\"a\", \"b\", \"c\")\n  println(mutableListOf<String>().apply {\n      strList.mapIndexedTo(this) { index, s -> \"$index-$s\" }\n      strList2.mapIndexedTo(this) { index, s -> \"$index-$s\" }\n  })\n  \n  // 打印结果：\n  [0-A, 1-B, 2-C, 0-a, 1-b, 2-c]\n  ```\n\n- **`mapNotNull(transform: (T) -> R?)`**：同 `map` 函数的作用相同，不过其过滤了集合转换后为 null 的元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.mapNotNull { if (it.startsWith(\"Java\")) null else it })\n  \n  // 打印结果：\n  [Kotlin, C, C++]\n  ```\n\n- **`mapNotNullTo(destination: C, transform: (T) -> R?)`**：同 mapNotNull 函数的作用相同，它适用于多集合操作场景。\n\n- **`mapIndexedNotNull` 和 `mapIndexedNotNullTo`**：同理。\n\n#### 元素类操作符\n\n##### element 系列\n\n- **`elementAt(index: Int)`**：获取集合指定下标的元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.elementAt(1)) // 打印：Kotlin\n  ```\n\n- **`elementAtOrElse(index: Int, defaultValue: (Int) -> T)`**：获取对应下标的集合元素。若下标越界，返回默认值。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.elementAtOrElse(10) { \"unknown\" }) // 打印：unknown\n  ```\n\n- **`elementAtOrNull(index: Int)`**：获取对应下标的集合元素。若下标越界，返回 null。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.elementAtOrNull(10)) // 打印：null\n  ```\n\n##### first、last 系列\n\n- **`first()`**：获取集合第一个元素，若集合为空集合，这会抛出 NoSuchElementException 异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.first()) // 打印：Java\n  ```\n\n- **`first(predicate: (T) -> Boolean)`**：获取集合中指定条件的第一个元素。若不满足条件，抛异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.first { it.length > 5 }) // 打印：Kotlin\n  ```\n\n- **`firstOrNull()`**：获取集合第一个元素，若集合为空集合，返回 null。\n\n- **`firstOrNull{}`**：获取集合满足条件的首个元素，若无则返回 null。\n\n> 与 `first` 等操作符对应的是 `last` 等相关操作符，即取集合最后一个元素等。\n\n##### find 系列\n\n- **`find(predicate: (T) -> Boolean)`**：获取集合满足条件的首个元素，若无则返回 null，其实就是 firstOrNull{}。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.find { it.length > 5 }) // 打印：Kotlin\n  ```\n\n- **`findLast(predicate: (T) -> Boolean)`**：获取集合满足条件的最后一个元素，若无则返回 null，其实就是 lastOrNull{}。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.findLast { it.length > 5 }) // 打印：JavaScript\n  ```\n\n##### single 系列\n\n- **`single()`**：当集合中只有一个元素时，返回该元素，否则抛异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.single()) // 打印：java.lang.IllegalArgumentException: List has more than one element.\n  ```\n\n- **`single(predicate: (T) -> Boolean)`**：找到集合中满足条件的元素，若只有单个元素满足条件，则返回该元素，否则抛异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.single { it.startsWith(\"K\") }) // 打印：Kotlin\n  ```\n\n> **`singleOrNull` 或 `singleOrNull{}` 操作符** 只是将前述的抛异常改为返回 null。\n\n##### component 系列\n\n- **`component1()` ... `component5()`**：用于获取第 1 到第 5 个元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.component3()) // 打印：C\n  ```\n\n##### indexOf 系列\n\n- **`indexOf(element: T)`**：返回指定元素的下标，若不存在，则返回 -1。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.indexOf(\"C\")) // 打印：2\n  ```\n\n- **`indexOfFirst(predicate: (T) -> Boolean)`**：返回满足条件的第一个元素的下标，若不存在，则返回 -1。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.indexOfFirst { it.length > 5 }) // 打印：1\n  ```\n\n- **`indexOfLast(predicate: (T) -> Boolean)`**：返回满足条件的最后一个元素的下标，若不存在，则返回 -1。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.indexOfLast { it.length > 5 }) // 打印：4\n  ```\n\n#### 排序类操作符\n\n##### reverse 系列\n\n- **`reversed()`**：反转集合元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.reversed()) // 打印：[JavaScript, C++, C, Kotlin, Java]\n  ```\n\n##### sort 系列\n\n- **`sorted()`**：对集合中的元素自然升序排序。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sorted()) // 打印：[C, C++, Java, JavaScript, Kotlin]\n  ```\n\n- **`sortedDescending()`**：与 sorted 操作符相反，为倒序。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sortedDescending()) // 打印：[Kotlin, JavaScript, Java, C++, C]\n  ```\n\n- **`sortedBy(crossinline selector: (T) -> R?)`**：根据条件升序，即把不满足条件的放在前面，满足条件的放在后面。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sortedBy { it.length }) // 打印：[C, C++, Java, Kotlin, JavaScript]\n  ```\n\n- **`sortedByDescending(crossinline selector: (T) -> R?)`**：与 sortedBy 操作符相反，为倒序。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sortedByDescending { it.length }) // 打印：[JavaScript, Kotlin, Java, C++, C]\n  ```\n\n#### 生成类操作符\n\n##### partition 系列\n\n- **`partition(predicate: (T) -> Boolean)`**：将一个集合按条件拆分为两个 pair 组成的新集合。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.partition { it.startsWith(\"Java\") }) // 打印：([Java, JavaScript], [Kotlin, C, C++])\n  ```\n\n##### plus 系列\n\n- **`plus(element: T)`**：合并两个集合中的元素，组成一个新的集合。也可以使用符号 `+`。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.plus(listOf(1, 2, 3))) // 打印：[Java, Kotlin, C, C++, JavaScript, 1, 2, 3]\n  ```\n\n- **`plusElement(element: T)`**：往集合中添加一个元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.plusElement(\"CSS\")) // 打印：[Java, Kotlin, C, C++, JavaScript, CSS]\n  ```\n\n##### zip 系列\n\n- **`zip(other: Array<out R>)`**：由两个集合按照相同的下标组成一个新集合。该新集合的类型是：`List<Pair>`。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.zip(listOf(1, 2, 3))) // 打印：[(Java, 1), (Kotlin, 2), (C, 3)]\n  ```\n\n- **`zipWithNext(transform: (a: T, b: T) -> R)`**：集合中相邻元素组成 `pairs`。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.zipWithNext()) // 打印：[(Java, Kotlin), (Kotlin, C), (C, C++), (C++, JavaScript)]\n  ```\n\n  ","source":"_posts/Kotlin-教程.md","raw":"---\ntitle: Kotlin 教程\ndate: 2023-04-26 21:47:00\ncategories: \"Kotlin\"\ntags:\n     - Android\n     - Kotlin\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n### 基础类型\n\nJava 中存在 int, float, boolean 等基础类型，这些基础类型在 Kotlin 里将全部以对象的形式继续存在。有几点变化需要注意。\n\n```Kotlin\n// Int 无法自动转换为 Double, 需要自己先做类型转换（as Double, toDouble(), 方式很多）\nvar a: Int = 2\nvar b: Double = a.toDouble()\n\n// Char 不能直接等值于其对应的 ASCII 码值，需要类型转换\nvar c: Char = 'a'\nvar x: Int = c.toInt()\n```\n\n### 变量声明\n\nKotlin 中使用 var 定义可读可写变量，使用 val 定义只读变量（相当于 Java 当中的 final）。定义变量时，如果满足类型推断，类型可以省略。\n\n```Kotlin\nvar id = \"100\" // 类型为 String\nvar name: String = \"张三\" // 类型为 String\nval age: Int = 30\n```\n\n### 类型声明\n\n在 Kotlin 语言中，“:” 被广泛用于变量类型的定义。\n\n```Kotlin\n// 定义变量类型\nfun test() {\n    var zhangSan: User\n    var liSi: User\n}\n\n// 定义函数参数和返回值\nfun getUser(id: Int): User {\n    return User(100, \"dd\", 30)\n}\n```\n\n“:”还被用于声明类继承或接口实现。\n\n```Kotlin\nopen class User {\n    constructor()\n}\n\n// 继承 User 类\nclass VipUser : User() {\n\n}\n\ninterface DB {\n    fun addUser(user: User)\n}\n\n// 实现 DB 接口\nclass RoomDB : DB {\n    override fun addUser(user: User) {\n\n    }\n}\n```\n\n### 类型检测\n\nJava 中使用 instanceof 来判断某变量是否为某类型，而 Kotlin 中使用 is 来进行类型检测。\n\n```Kotlin\n/**\n * is 判断属于某类型\n * !is 判断不属于某类型\n * as 类型强转，失败时抛出类型强转失败异常\n * as? 类型强转，但失败时不会抛出异常而是返回 null\n */\nif (myObject is User) {\n    // 只要进来了，就代表 myObject 是 User 类型了，不需要强转就可以直接使用 User 的属性\n    myObject.id = 101\n    myObject.name = \"Hello\"\n}\n```\n\n### Any 和 Unit\n\n- **Any**: Kotlin 的顶层父类是 Any, 对应 Java 中的 Object, 但是比 Object 少了 wait()/notify() 等函数。\n- **Unit**: Kotlin 中的 Unit 对应 Java 中的 void。 \n\n### 可见性修饰符\n\n- 默认的可见性修饰符是 `public`。\n- 新增的可见性修饰符 `internal` 表示仅当前模块（AS 中的 module）可见，其它模块不能访问。\n\n### 逻辑语句\n\n#### if-else 语句\n\nKotlin 中的 if-else 基本和 Java 一致，但还是有一些特殊的地方。比如它可以作为一个逻辑表达式使用，逻辑表达式还可以以代码块的形式出现，代码块最后的表达式作为该块的返回值。\n\n```Kotlin\n// 逻辑表达式的使用\nfun getMax(x: Int, y: Int): Int {\n    var max = if (x > y) x else y\n    return max\n}\n\n// 代码块形式的逻辑表达式\nfun getMax2(x: Int, y: Int): Int {\n    var max = if (x > y) {\n        println(\"Max num is x.\")\n        x // 返回最后一行，即 x 的值\n    } else {\n        println(\"Max num is y.\")\n        y // 返回最后一行，即 y 的值\n    }\n    return max\n}\n```\n\n#### when 语句\n\nKotlin 中的 when 语句取代了 Java 中的 switch-case 语句，功能上要强大许多，可以有多种形式的条件表达。与 if-else 一样，Kotlin 中的 when 也可以作为逻辑表达式使用，也有返回值。\n\n```Kotlin\n// when 有判断参数\nfun whenDemo(obj: Any) {\n    when (obj) {\n        1 -> println(\"是数字 1\")\n        -1, 0 -> println(\"是数字 -1 或 0\")\n        in 1..10 -> println(\"是不大于 10 的正整数\")\n        \"abc\" -> println(\"是字符串 abc\")\n        is User -> {\n            println(\"是 User 对象\")\n            println(obj.name) // 直接可以使用 User 的属性了\n        }\n        else -> println(\"其它操作\")\n    }\n}\n\n// when 没有判断参数\nfun whenDemo2(position: Int) {\n    val columns = 10\n    when {\n        position % columns == 0 -> { // position 位于第一列\n            // ...\n        }\n        (position + 1) % columns == 0 -> { // position 位于最后一列\n            // ...\n        }\n    }\n}\n\n// when 有返回值\nfun whenDemo3(score: Int) {\n    val result = when (score) {\n        in 90..100 -> \"优秀\"\n        in 80..89 -> \"良好\"\n        in 60..79 -> \"及格\"\n        else -> \"不及格\"\n    }\n    println(\"你的成绩$result\")\n}\n```\n\n#### 循环\n\n```Kotlin\n// 标准函数 repeat()：\nrepeat(100) { // 执行 100 次\n}\n\n// .. 包括右边界 [0,99]\nfor (i in 0..99) {\n}\n// until 不包括右边界 [0,99]\nfor (i in 0 until 100) {\n}\n```\n\n> while 语句、continue 语句和 break 语句等逻辑都与 Java 基本一致，这里不再赘述。\n\n#### 标签\n\nKotlin 中可以对任意表达式进行标签标记，标签的格式为标识符后跟 @ 符号，例如 abc@、fooBar@ 都是有效的标签。这些标签，可以搭配 return、break、continue 等跳转行为来使用。\n\n```Kotlin\nfun labelTest() {\n    la@ for (i in 1..10) {\n        println(\"outer index $i\")\n        for (j in 1..10) {\n            println(\"inner index $j\")\n            if (j % 2 == 0) {\n                break@la\n            }\n        }\n    }\n}\n```\n\n### 数组\n\n使用 `arrayOf` 创建数组，基本数据类型使用对应的 `intArrayOf` 等。\n\n```Kotlin\nval arr1 = arrayOf<Int>()\nvar arr2 = intArrayOf()\nvar arr3 = floatArrayOf()\n```\n\n### 字符串模板\n\n```Kotlin\n// Java 中字符串模板\nString name = \"ZhangSan\";\nint age = 30;\nString introduction = String.format(\"我是s%，今年%d岁了\", name, age);\n\n// Kotlin 中字符串模板\nval name = \"ZhangSan\"\nval age = 30\nval introduction = \"我是${name}，今年${age}岁了\"\n```\n\n### 函数\n\nKotlin 中的函数通过关键字 fun 定义的，具体的参数和返回值定义结构如下。\n\n```Kotlin\nfun myFun(para1: Int, para2: String): String { ... }\n```\n\nKotlin 中的函数可以是全局函数，成员函数或者局部函数，甚至还可以作为某个对象的扩展函数临时添加。\n\n#### 全局函数/顶级函数\n\n全局函数（顶级函数）是文件级别的，以包为作用域。\n\n例如 com.zch.kotlin.biz1 包中的 Common.kt 文件中有以下方法：\n\n```Kotlin\nfun sayHello() {\n    println(\"Hello\")\n}\n```\n\n那么在当前包的其它文件中就不能有相同的方法 sayHello，否则会报错。\n\n如果 com.zch.kotlin.biz2 包中的某文件中也有以下方法：\n\n```Kotlin\nfun sayHello() {\n    println(\"Hello\")\n}\n```\n\n那么在其它文件中同时调用两者就需要加上相应的包来访问。\n\n```Kotlin\nimport com.zch.kotlin.biz1.sayHello\n\nfun hello() {\n    sayHello()\n    com.zch.kotlin.biz2.sayHello()\n}\n```\n\n#### 成员函数\n\n成员函数是在类或对象内部定义的函数。\n\n#### 局部函数\n\nKotlin 支持局部函数，即一个函数在另一个函数内部：\n\n```Kotlin\nprivate fun getUserInfo(): String {\n    val country = \"中国\"\n\n    // 函数中的函数，叫“局部函数”\n    fun getProvince(): String {\n        return \"${country}广东省\" // 局部函数可以访问外部函数的局部变量。\n    }\n\n    val name = \"ZhangSan\"\n    val age = 30\n    val userInfo = \"我是${name}，今年${age}岁了，我来自${getProvince()}。\"\n\n    return userInfo\n}\n```\n\n> 如果是频繁调用的函数，不建议声明为局部函数，因为每次调用时，就会产生一个函数对象。\n\n#### 函数参数默认值\n\n函数中的某个参数可以用 “=” 号指定其默认值，调用函数方法时可不传这个参数，但其它参数需要用 “=” 号指定。\n\n```Kotlin\nfun calculate(a: Int, b: Int = 10, c: Int) = a + b + c // 原本直接 return 的函数可以用 = 符号简化\n\nval sum = calculate(5, c = 20) // sum = 35\n```\n\n#### 扩展函数和扩展属性\n\nKotlin 支持在**包范围内**对已存在的类进行函数和属性扩展。\n\n```Kotlin\n// 给 Activity 扩展一个 log 函数\nfun Activity.log(msg: String) {\n    Log.d(\"tag\", \"Activity---$msg\")\n}\n\n// 给 Context 扩展一个 log 函数\nfun Context.log(msg: String) {\n    Log.d(\"tag\", \"Context---$msg\")\n}\n\nlog(\"hello\") // 调用 Activity.log\n(this as Context).log(\"hello2\") // 调用 Context.log\n\n// 给 ViewGroup 扩展一个 firstChild 属性\nval ViewGroup.firstChild: View get() = getChildAt(0)\n\ncontentLayout.firstChild // 调用\n```\n\n> 注意：1、扩展需要在包级范围内进行，如果写在 class 内是无效的。2、已经存在的方法或属性，是无法被扩展的，依旧会调用已有的方法。3、扩展函数是静态解析的，在编译时就确定了调用函数（没有多态）。\n\n#### infix 函数\n\n标有 `infix` 关键字的函数也可以使用中缀表示法（忽略该调用的点与圆括号）调用。中缀函数必须满足以下要求：\n\n- 它们必须是成员函数或扩展函数；\n- 它们必须只有一个参数；\n- 其参数不得接受可变数量的参数且不能有默认值。\n\n```Kotlin\ninfix fun Int.shl(x: Int): Int { …… }\n\n// 用中缀表示法调用该函数\n1 shl 2\n\n// 等同于这样\n1.shl(2)\n```\n\n```Kotlin\n// 中缀函数调用的优先级低于算术操作符、类型转换以及 rangeTo 操作符。 以下表达式是等价的：\n\n1 shl 2 + 3 等价于 1 shl (2 + 3)\n0 until n * 2 等价于 0 until (n * 2)\nxs union ys as Set<*> 等价于 xs union (ys as Set<*>)\n\n// 另一方面，中缀函数调用的优先级高于布尔操作符 && 与 ||、is- 与 in- 检测以及其他一些操作符。这些表达式也是等价的：\n\na && b xor c 等价于 a && (b xor c)\na xor b in c 等价于 (a xor b) in c\n```\n\n中缀函数总是要求指定接收者与参数。当使用中缀表示法在当前接收者上调用方法时，需要显式使用 `this`；不能像常规方法调用那样省略。这是确保非模糊解析所必需的。\n\n```Kotlin\nclass MyStringCollection {\n    infix fun add(s: String) { /*……*/ }\n\n    fun build() {\n        this add \"abc\"   // 正确\n        add(\"abc\")       // 正确\n        add \"abc\"      // 错误：必须指定接收者\n    }\n}\n```\n\n#### 内联函数\n\n- 内联函数配合「函数类型」，可以减少「函数类型」生成的对象  。\n- 使⽤ `inline` 关键字声明的函数是「内联函数」，在「编译时」会将「内联函数」中的函数体直接插⼊到调⽤处。  所以在写内联函数的时候需要注意，尽量将内联函数中的代码行数减少。\n\n`noinline` 可以禁止部分函数参数参与内联编译：\n\n```Kotlin\ninline fun foo(inlined: () -> Unit, noinline notInlined:() -> Unit) {\n    //......\n}\n```\n\n#### 匿名函数\n\n- 匿名函数的特点是可以明确指定其返回值类型。\n- 它和常规函数的定义几乎相似。他们的区别在于，匿名函数没有函数名。\n\n```Kotlin\n// 常规函数\nfun test(x : Int , y : Int) : Int = x + y\n\n// 匿名函数\nfun(x : Int , y : Int) : Int = x + y\n```\n\n#### Lambda 表达式\n\n`Lambda` 表达式的本质是 `匿名函数`，因为在其底层实现中还是通过匿名函数来实现的。但是我们在用的时候不必关心其底层实现。不过 Lambda 的出现确实是减少了代码量的编写，同时也使代码变得更加简洁明了。\n\n**1、Lambda 的特点：**\n\n- Lambda 表达式总是被大括号括着。\n- 其参数（如果存在）在符号 “->” 之前声明（参数类型可以省略）。\n- 函数体（如果存在）在符号 “->” 后面。\n\n**2、Lambda 语法：**\n\n```Kotlin\n1、无参数的情况：\nval/var 变量名 = { 操作的代码 }\n\n// 源代码\nprivate fun myFun1() {\n    println(\"无参数\")\n}\n\n// lambda 代码\nval myFun1 = { println(\"无参数\") }\n\nprivate fun test1() {\n    myFun1() // 调用\n}\n// -------------------------------------------\n2、有参数的情况：\nval/var 变量名 : (参数的类型，参数类型，...) -> 返回值类型 = {参数1，参数2，... -> 操作参数的代码 }\n可等价于\n// 此种写法：即表达式的返回值类型会根据操作的代码自推导出来。\nval/var 变量名 = { 参数1 ： 类型，参数2 : 类型, ... -> 操作参数的代码 }\n\n// 源代码\nfun myFun2(a: Int, b: Int): Int {\n    return a + b\n}\n\n// lambda\nval myFun2: (Int, Int) -> Int = { a, b -> a + b }\n// 或者\nval myFun2 = { a: Int, b: Int -> a + b }\n\nfun test2() {\n    myFun2(1, 2) // 调用\n}\n// -------------------------------------------\n3、lambda 表达式作为函数中的参数：\nfun test(a : Int, 参数名 : (参数1 ： 类型，参数2 : 类型, ... ) -> 表达式返回类型){ ... }\n\n// 源代码\nfun myFun3(a: Int, b: Int): Int {\n    return a + b\n}\n\nfun sum(num1: Int, num2: Int): Int {\n    return num1 + num2\n}\n\n// lambda\nfun myFun33(a: Int, b: (num1: Int, num2: Int) -> Int): Int {\n    return a + b.invoke(3, 5)\n}\n\nfun test3() {\n    myFun33(10, { num1: Int, num2: Int -> num1 + num2 }) // 调用\n}\n```\n\n> invoke() 函数：表示为通过函数变量调用自身，因为上面例子中的变量 b 是一个匿名函数。\n\n**3、it**\n\n当一个高阶函数中 Lambda 表达式的参数只有一个的时候可以使用 it 来使用此参数。it 可表示为单个参数的隐式名称，是 Kotlin 语言约定的。\n\n```Kotlin\nval arr = intArrayOf(1, 2, 3)\nvar sum = 0\narr.forEach {\n    sum += it\n}\n```\n\n**4、下划线（_）**\n\n在使用 Lambda 表达式的时候，可以用下划线 （_） 表示未使用的参数，表示不处理这个参数。\n\n```Kotlin\nval map = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\", \"key3\" to \"value3\")\n// 不需要 key 的时候\nmap.forEach { _, value ->\n    println(\"$value\")\n}\n```\n\n**5、带接收者的函数字面值**\n\n在 Kotlin 中，提供了指定的接受者对象调用 Lambda 表达式的功能。在函数字面值的函数体中，可以调用该接收者对象上的方法而无需任何额外的限定符。它类似于扩展函数，它允许在函数体内访问接收者对象的成员。\n\n**5.1、匿名函数作为接收者类型**\n\n匿名函数语法允许你直接指定函数字面值的接收者类型，如果你需要使用带接收者的函数类型声明一个变量，并在之后使用它，这将非常有用。\n\n```Kotlin\nval add = fun Int.( other : Int) : Int = this + other\nprintln(2.add(3)) // 输出 5\n```\n\n**5.2、Lambda 表达式作为接收者类型**\n\n要用 Lambda 表达式作为接收者类型的前提是**接收者类型可以从上下文中推断出来**。\n\n```Kotlin\nclass HTML {\n    fun body() {}\n}\n\nfun myFun5(init: HTML.() -> Unit): HTML {\n    val html = HTML() // 创建接收者对象\n    html.init()       // 将该接收者对象传给该 lambda\n    return html\n}\n\nfun test111() {\n    myFun5 { // 带接收者的 lambda 由此开始\n        body() // 调用该接收者对象的一个方法\n    }\n}\n```\n\n**6、闭包**\n\n所谓闭包，即是函数中包含函数，这里的函数我们可以包含（Lambda 表达式，匿名函数，局部函数，对象表达式）。我们熟知，函数式编程是现在和未来良好的一种编程趋势，故而 Kotlin 也有这一个特性。Java 是不支持闭包的。\n\n**6.1、携带状态**\n\n```Kotlin\n// 让函数返回一个函数，并携带状态值\nfun myFun4(b: Int): () -> Int {\n    var a = 3\n    return fun(): Int {\n        a++\n        return a + b\n    }\n}\n\nfun test4() {\n    val t = myFun4(3)\n    println(t()) // 输出 7\n    println(t()) // 输出 8\n    println(t()) // 输出 9\n}\n```\n\n**6.2、引用外部变量，并改变外部变量的值**\n\n```Kotlin\nvar sum : Int = 0\nval arr = arrayOf(1,3,5,7,9)\narr.filter { it < 7  }.forEach { sum += it }\n\nprintln(sum) // 输出 9\n```\n\n**7、Lambda 表达式简写**\n\n```Kotlin\n// 如果函数的最后⼀个参数是 lambda, 那么 lambda 表达式可以放在圆括号之外：\nlessons.forEach(){ lesson : Lesson ->\n   // ...\n}\n\n// 如果你的函数传⼊参数只有⼀个 lambda 的话，那么⼩括号可以省略的：\nlessons.forEach { lesson : Lesson ->\n   // ...\n}\n\n// 如果 lambda 表达式只有⼀个参数，那么可以省略，通过隐式的 it 来访问：\nlessons.forEach { // it\n   // ...\n}\n```\n\n#### 高阶函数\n\n在 `Kotlin` 中，高阶函数即指：将函数用作一个函数的参数或者返回值的函数。\n\n**将函数用作函数参数的情况**\n\n```Kotlin\n// sumBy 函数的源码\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n// 调用\nfun test() {\n    val str = \"abc\"\n    val sum = str.sumBy { it.toInt() }\n    println(sum) // 输出 294。因为字符 a 对应的值为 97，b 对应 98，c 对应 99。故而该值即为 97 + 98 + 99 = 294\n}\n```\n\n**将函数用作一个函数的返回值**\n\n```Kotlin\nfun <T> lock(lock: Lock, body: () -> T): T {\n    lock.lock()\n    try {\n        return body()\n    } finally {\n        lock.unlock()\n    }\n}\n\n// 调用\nfun toBeSynchronized() = sharedResource.operation()\nval result = lock(lock, ::toBeSynchronized) \n\n// 上面的写法也可以写作：\nval result = lock(lock, {sharedResource.operation()} )\n// 或者\nval result = lock(lock) {\n    sharedResource.operation()\n}\n```\n\n> ::toBeSynchronized 即为对函数 toBeSynchronized() 的引用。\n\n**自定义高阶函数**\n\n```Kotlin\n// 定义高阶函数\nprivate fun calculation(num1: Int, num2: Int, result: (Int, Int) -> Int): Int {\n    return result(num1, num2)\n}\n\n// 测试调用\nfun test() {\n    val result1 = calculation(1, 2) { num1, num2 ->\n        num1 + num2\n    }\n    val result2 = calculation(10, 20) { num1, num2 ->\n        num1 * num2\n    }\n    println(\"result1 = $result1\") // 输出：3\n    println(\"result2 = $result2\") // 输出：200\n}\n```\n\n**开发中常用的一个例子**\n\n```Kotlin\nclass ParamView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0) : LinearLayout(context, attrs, defStyleAttr) {\n\n    var onParamValueClickListener: (() -> Unit)? = null // 定义一个点击事件，给外部处理\n\n    init {\n        tvParamValue?.setOnClickListener {\n            onParamValueClickListener?.invoke()\n        }\n    }\n}\n\n// 外部 ParamView 控件处理点击事件\nparamView?.onParamValueClickListener = {\n    // 处理业务逻辑...\n}\n```\n\n#### 标准高阶函数\n\nStandard.kt 文件中提供了一系列标准的高阶函数。\n\n**函数特点汇总**\n\n| 函数        | 接收者（this） | 传参（it） | 返回值（result） |\n|:--------- |:--------- |:------ |:----------- |\n| run()     | 当前类       | 编译错误   | 作用域中的最后一个对象 |\n| T.run()   | 类T        | 编译错误   | 作用域中的最后一个对象 |\n| with()    | 类T        | 编译错误   | 作用域中的最后一个对象 |\n| T.let()   | 当前类       | 类T     | 作用域中的最后一个对象 |\n| T.also()  | 当前类       | 类T     | 类T          |\n| T.apply() | 类T        | 编译错误   | 类T          |\n\n实际应用：\n\n```Kotlin\nclass MyStandard {\n    companion object {\n        const val TAG = \"MyStandard\"\n    }\n\n    // run()\n    fun runDemo1() {\n        var name = \"AA\"\n        run {\n            val name = \"BB\"\n            Log.e(TAG, name) // BB\n        }\n        Log.d(TAG, name) // AA\n    }\n\n    // T.run()\n    fun runDemo2() {\n        val result = \"ABCDEF\".run {\n            Log.d(TAG, \"字符串的长度为 $length\") // 字符串的长度为 6\n            substring(2)\n        }\n        Log.d(TAG, result) // CDEF\n    }\n\n    // with()\n    fun withDemo() {\n        val result = with(\"ABCDEF\") {\n            substring(2)\n        }\n        Log.d(TAG, result) // CDEF\n    }\n\n    // T.let()\n    fun letDemo() {\n        val result = \"ABCDEF\".let {\n            it.substring(2) // it 代表 \"ABCDEF\"\n        }\n        Log.d(TAG, result) // CDEF\n    }\n\n    // T.also()\n    fun alsoDemo() {\n        val result = \"ABCDEF\".also {\n            it.substring(2) // it 代表 \"ABCDEF\"\n        }\n        Log.d(TAG, result) // ABCDEF\n    }\n\n    // T.apply()\n    fun applyDemo() {\n        val result = \"ABCDEF\".apply {\n            this.substring(2) // this 代表 \"ABCDEF\"\n        }\n        Log.d(TAG, result) // ABCDEF\n    }\n}\n```\n\n通常，T.run()、T.let()、T.also() 和 T.apply() 四个用的比较多，使用时可以通过简单的规则作出⼀些判断：\n\n```Kotlin\nif(需要返回自身){\n    if(作用域中使用 this 作为参数){\n        选择 apply\n    }\n    if(作用域中使用 it 作为参数){\n        选择 also\n    }\n}\nif(不需要返回自身){\n    if(作用域中使用 this 作为参数){\n        选择 run\n    }\n    if(作用域中使用 it 作为参数){\n        选择 let\n    }\n}\n```\n\n### 实化类型参数\n\n**泛型类型擦除**：JVM 中的泛型一般是通过类型擦除实现的，也就是说泛型类实例的类型实参在编译时被擦除，在运行时是不会被保留的。基于这样实现的做法是有历史原因的，最大的原因之一是为了兼容 JDK1.5 之前的版本，当然泛型类型擦除也是有好处的，在运行时丢弃了一些类型实参的信息，对于内存占用也会减少很多。\n\n正因为泛型类型擦除原因在业界 Java 的泛型又称伪泛型。因为编译后所有泛型的类型实参类型都会被替换成 Object 类型或者泛型类型形参指定上界约束类的类型。例如： List<Float>、List<String>、List<Student> 在 JVM 运行时 Float、String、Student 都被替换成 Object 类型，如果泛型定义是 List<T extends Student> 那么运行时 T 被替换成 Student 类型。\n\nKotlin 和 Java 都存在泛型类型擦除的问题，但 Kotlin 可以通过 `inline` 函数保证使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为**实化**，对应需要使用 **reified** 关键字。因此，我们可以通过配合 `inline + reified` 达到「真泛型」的效果。\n\n**1、满足实化类型参数函数的必要条件**\n\n- 必须是 inline 内联函数，使用 inline 关键字修饰。\n- 泛型类定义泛型形参时必须使用 reified 关键字修饰。\n\n**2、带实化类型参数的函数基本定义**\n\n```Kotlin\n// 定义\ninline fun <reified T> isInstanceOf(value: Any): Boolean = value is T\n\nval obj = User()\nval instanceOf = isInstanceOf<User>(obj) // 调用\n```\n\n对于以上例子，我们可以说类型形参 T 是泛型函数 isInstanceOf 的实化类型参数。\n\n**3、原理描述**\n\n编译器把实现内联函数的字节码动态插入到每次的调用点。那么实化的原理正是基于这个机制，**每次调用带实化类型参数的函数时，编译器都知道此次调用中作为泛型类型实参的具体类型。所以编译器只要在每次调用时生成对应不同类型实参调用的字节码插入到调用点即可。** 总之一句话很简单，就是带实化参数的函数每次调用都生成不同类型实参的字节码，动态插入到调用点。由于生成的字节码的类型实参引用了具体的类型，而不是类型参数所以不会存在擦除问题。\n\n**4、实化类型参数函数不能在 Java 中调用**\n\nKotlin 的实化类型参数函数主要得益于 inline 函数的内联功能，虽然 Java 可以调用普通的内联函数但是失去了内联功能，失去内联功能也就意味实化操作也就化为泡影。\n\n**5、实化类型参数函数的使用限制**\n\n- 不能使用非实化类型形参作为类型实参调用带实化类型参数的函数。\n- 不能使用实化类型参数创建该类型参数的实例对象。\n- 不能调用实化类型参数的伴生对象方法。\n- reified 关键字只能标记实化类型参数的内联函数，不能作用于类和属性。\n\n**6、实化类型参数函数使用例子**\n\n```Kotlin\ninline fun <reified T> create(): T {\n    return RETROFIT.create(T::class.java)\n}\n\nval api = create<API>() // 调用\n\ninline fun <reified T> Gson.fromJson(json: String) = fromJson(json, T::class.java)\n\nval user = Gson().fromJson<User>(json) // 调用\n```\n\n### 类与继承\n\nKotlin 中也使用 class 关键字定义类，所有类都继承于 Any 类，类似于 Java 中 Object 类的概念。类实例化的形式也与 Java 一样，但是去掉了 new 关键字。\n\n#### 构造器\n\n类的构造器分为主构造器（primary constructor）和次级构造器（secondary constructor），前者只能有一个，而后者可以有多个。如果两者都未指定，则默认为无参数的主构造器。\n\n主构造器是属于类头的一部分，用 constructor 关键字定义，如果没有被「可见性修饰符」或者「注解」标注，constructor 可省略。由于主构造器不能包含任何代码，初始化代码需要单独写在 init 代码块中，主构造器的参数只能在 init 代码块和变量初始化时使用。\n\n次级构造器也是用 constructor 关键字定义，必须要直接或间接代理主构造器。\n\n```Kotlin\nclass User(name: String) { // 主构造器\n    var id: Int = 0\n    var name: String = \"\"\n\n    init {\n        // ...\n    }\n\n    constructor(id: Int, name: String) : this(name) { // 次级构造器\n        this.id = id\n        this.name = name\n    }\n}\n```\n\n主构造器中的参数加上 val 或者 var 修饰，那么参数就变成类的成员变量，如果参数和类原来的成员变量一样，那么对应原来的成员变量就要去掉。因此，以上代码一般可以简化为以下代码。\n\n```Kotlin\nclass User(val id: Int, val name: String) {\n    init {\n        // ...\n    }\n}\n```\n\n#### 继承\n\n类继承使用符号 “:” 表示，接口实现也一样，不做原本 Java 中的 extends 和 implement 关键字区分。Kotlin 中取消了 final 关键字，所有类默认都是被 final 修饰，不能被继承。Kotlin 中新增了 open 关键字，被 open 或者 abstract 修饰的类才可以被继承。\n\n#### 单例与伴随对象\n\nKotlin 使用关键词 object 定义单例类。这里需要注意，是全小写。单例类访问直接使用类名，无构造函数。\n\n```Kotlin\nobject LogUtil {\n    fun d(msg: String) {\n        if (BuildConfig.DEBUG) {\n            Log.d(\"tag\", msg)\n        }\n    }\n}\n```\n\n> 可通过 AS 工具栏 Tools --> Kotlin --> Show Kotlin Bytecode, 点击右侧的 Decompile 来把当前 Kotlin 代码转换为 Java 代码，来验证以上 object 对象是否转换成 Java 中的单例类。\n\nJava 中使用 static 标识一个类里的静态属性或方法。Kotlin 中没有 static 关键字，改为使用伴随对象，用 companion 修饰单例类 object, 来实现静态属性或方法功能。\n\n```Kotlin\nclass LoginCache {\n    companion object {\n        const val USER_NAME = \"user_name\"\n        const val PASSWORD = \"password\"\n\n        fun saveLoginInfo(userName: String, password: String) {\n\n        }\n    }\n}\n\nLoginCache.saveLoginInfo(\"ZhangSan\",\"123456\") // 调用\n```\n\n#### 内部类\n\n在 Kotlin 中，内部类默认是静态内部类，通过 `inner` 关键字声明为嵌套内部类。\n\n#### 匿名内部类\n\n形式：\n\n```Kotlin\nobject : OnItemCLickListener {\n}\n```\n\n应用：\n\n```Kotlin\nbtnLogin.setOnClickListener(object :View.OnClickListener{\n    override fun onClick(v: View?) {\n\n    }\n})\n\n// 以上匿名内部类转换成的 lambda 表达式如下：\nbtnLogin.setOnClickListener {\n\n}\n```\n\n### const\n\n- const 必须修饰 val。\n- const 只允许在 top-level 级别和 object 中声明。\n\n```Kotlin\nobject LogUtil {\n    const val TAG: String = \"LogUtil\"\n    val msg: String = \"msg\"\n}\n```\n\n以上 Kotlin 代码转换成的 Java 代码如下：\n\n```Java\n// 省略了部分不大相关代码\npublic final class LogUtil {\n    public static final String TAG = \"LogUtil\";\n    private static final String msg;\n\n    public final String getMsg() {\n        return msg;\n    }\n    // ...\n}\n```\n\n可以看出，const val 可见性为 public static final, 可以直接访问。val 可见性为 private static final, 并且 val 会生成对应属性的 getter 方法，通过方法调用访问。当定义常量时，出于效率考虑，应该使用 const val 方式，避免频繁函数调用。const 修饰的静态变量又称为**编译器常量**。\n\n### 声明抽象类/接口/枚举/注解\n\n```Kotlin\n// 声明抽象类\nabstract class\n// 声明接⼝\ninterface\n// 声明注解\nannotation class\n// 声明枚举\nenmu class\n```\n\n### 受检异常\n\nKotlin 不需要使用 `try-catch` 强制捕获异常。\n\n### 获取 Class 对象\n\n```Kotlin\n使用 [类名::class] 获取的是 Kotlin 的类型 KClass\n使用 [类名::class.java] 获取的是 Java 的类型\n\nstartActivity(Intent(this, MainActivity::class.java))\n```\n\n### setter/getter\n\n在 Kotlin 声明属性的时候（没有使用 private 修饰），会自动生成一个私有属性和一对公开的 setter/getter 方法。在写 setter/getter 的时候使⽤ field 来代替内部的私有属性（防⽌递归栈溢出）。\n\n```Kotlin\nclass Person {\n    var name: String = \"\"\n        get() = field // 默认实现方式，可省略\n        set(value) { // 默认实现方式，可省略\n            field = value\n        }\n    var age: Int = 0\n        get() = 18 // 获取的值一直都是 18，不会改变\n        set(value) {\n            field = if (value < 0) 1 else value\n        }\n}\n```\n\n### JvmXxx 相关注解\n\n#### JvmField\n\n通过 `@JvmField` 注解可以让编译器只生成一个 public 的成员属性，不生成对应的 setter/getter 方法。\n\n#### JvmName\n\n顶层函数在文件中定义函数和属性，会直接生成静态的成员，在 Java 中通过「文件名Kt」来访问，同时可以通过 `@file:JvmName` 注解来修改这个类名。注解要写在包名前面才会起作用。\n\n```Kotlin\n@file:JvmName(\"AppCache\")\n\npackage com.zch.kotlin.biz1\n\nvar mToken: String? = \"\"\nfun saveToken(token: String?) {\n    mToken = token\n}\n```\n\n```Java\n// java 中访问方式\npublic void test() {\n    AppCacheKt.saveToken(\"abc123\"); // 原来的访问方式\n    AppCache.saveToken(\"abc123\"); // 加了 @file:JvmName 注解后的访问方式\n}\n```\n\n#### JvmStatic\n\n如果将命名对象或伴生对象中定义的函数注解为 `@JvmStatic` ，Kotlin 会为这些函数生成静态方法。\n\n`命名对象中的 @JvmStatic`\n\n```Kotlin\nobject SizeUtil {\n    @JvmStatic\n    fun dp2px() {\n    }\n\n    fun sp2px() {}\n}\n```\n\n```Java\n// java 方法\npublic void testSizeUtil() {\n    // 之前的访问方式\n    SizeUtil.INSTANCE.dp2px();\n    SizeUtil.INSTANCE.sp2px();\n\n    // 加了 @JvmStatic 注解后，dp2px 变成了静态方法\n    SizeUtil.dp2px();\n}\n```\n\n`伴生对象中的 @JvmStatic`\n\n```Kotlin\nclass Util {\n    companion object {\n        @JvmStatic\n        fun sayYes() {\n        }\n\n        fun sayNo() {\n        }\n    }\n}\n```\n\n```Java\n// java 方法\npublic void testUtil(){\n    // 之前的访问方式\n    Util.Companion.sayYes();\n    Util.Companion.sayNo();\n\n    /**\n     * 加了 @JvmStatic 注解后，Util 生成了静态方法 sayYes，\n     * 该静态方法直接访问 Companion 的 sayYes()\n     */\n    Util.sayYes();\n}\n```\n\n> `@JvmStatic` 注解也可以应用于对象或伴生对象的属性，使其 getter 和 setter 方法成为该对象或包含伴生对象的类的静态成员。\n\n#### JvmOverloads\n\n在 Kotlin 中调用默认参数值的方法或者构造函数是完全没问题的，Java 中调用相应 Kotlin 方法时，是必须输入所有参数的值的，Kotlin 中默认参数我们无法使用。而当加上 `@JvmOverloads`, Kotlin 编译器生成的字节码中有对应的重载方法，我们就可以通过 Java 的重载方式来使用 Kotlin 的代码了，不必要输入所有的参数。\n\n```Kotlin\nclass ParamView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0) : LinearLayout(context, attrs, defStyleAttr) {\n\n}\n```\n\n以上 Kotlin 的自定义控件加上 `@JvmOverloads` 后，相当于 Java 中的以下代码：\n\n```Java\npublic class ParamView extends LinearLayout {\n\n    public ParamView(Context context) {\n        this(context, null);\n    }\n\n    public ParamView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public ParamView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n}\n```\n\n> Kotlin 中构造函数、顶级函数、类中方法，静态方法（@Jvmstatic 修饰）均可采用 `@JvmOverloads` 生成对应重载方法。\n\n### 注解使用处目标\n\n当某个元素可能会包含多种内容（例如构造属性，成员属性），使用注解时可以通过「注解使⽤处⽬标」，让注解对⽬标发⽣作⽤，例如 @file: 、 @get: 、@set: 等。  \n\n```Kotlin\nclass App : Application() {\n    companion object {\n        @JvmStatic\n        @get:JvmName(\"instance\")\n        lateinit var instance: Application\n            private set\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n        instance = this\n    }\n}\n```\n\n```Java\nApp.Companion.getInstance(); // java 中原来调用方式\nApp.instance(); // java 中现在调用方式\n```\n\n### Elvis 操作符\n\n可通过 `?:` 的操作来简化 `if null` 操作。\n\n```Kotlin\n// lesson.date 为空时使⽤默认值\nval date = lesson.date?: \"⽇期待定\"\n// lesson.state 为空时提前返回函数\nval state = lesson.state?: return\n// lesson.content 为空时抛出异常\nval content = lesson.content ?: throw IllegalArgumentException(\"content expected\")\n```\n\n### 空指针安全\n\nKotlin 中，当我们定义一个变量时，其默认就是非空类型。如果你直接尝试给他赋值为 null, 编译器会直接报错。Kotlin 中将符号 “?” 定义为安全调用操作符。变量类型后面跟 ? 号定义，表明这是一个可空类型。同样的，在调用子属性和函数时，也可以用字符 ? 进行安全调用。Kotlin 的编译器会在写代码时就检查非空情况。\n\nKotlin 还提供 “!!” 双感叹号操作符来强制调用对象的属性和方法，无视其是否非空。这是一个挺危险的操作符，除非有特殊需求，否则为了远离 NPE, 还是少用为妙。\n\n```Kotlin\nvar tvContent: TextView // 非空类型\nvar tvContent: TextView? // 可空类型\n\n!! // 强行调用符\n? // 安全调用符\n```\n\n```Kotlin\nvar s1: String = \"abc\"\ns1 = null // 这里编译器会报错\n\nvar s2: String? = \"abc\"\ns2 = null // 编译器不会报错\n\nvar l1 = s1.length // 可正常编译\nvar l2 = s2.length // 没有做非空判断，编译器检查报错\n\nif (s2 != null) s2.length // Java 式的判空方案\ns2?.length // Kotlin 的安全调用操作符 ?。当 s2 为 null 时，s2?.length 也为 null\n\ns2!!.length // 可能会导致 NPE\n```\n\n### lateinit 关键字\n\n```Kotlin\n/**\n * 1、lateinit 只能修饰 var 可读可写变量。\n * 2、lateinit 关键字声明的变量类型必须是不可空类型。\n * 3、lateinit 声明的变量不能有初始值。\n * 4、lateinit 声明的变量不能是基本数据类型。\n * 5、在构造器中初始化的属性不需要 lateinit 关键字。\n */\nprivate lateinit var tvContent: TextView\n```\n\n### data class\n\n数据类通常都是由多个属性和对应的 getter、setter 组成。当有大量多属性时，不仅这些类会因为大量的 getter 和 setter 方法而行数爆炸，也使整个工程方法数骤增。\n\nKotlin 中做了这层特性优化，提供了数据类的简单实现。不用再写 getter、setter 方法，这些都由编译器背后去做，你得到的是一个清爽干净的数据类。数据类用 `data class` 声明。\n\n```Kotlin\ndata class Student(\n    var id: Int,\n    var name: String,\n    var age: Int\n)\n```\n\n把这个数据类反编译成 Java 代码可知，数据类除了为我们生成了 getter、setter（val 声明的变量不生成 setter 方法）、构造函数外，还有以下方法。\n\n```Kotlin\nequals() / hashCode()\ntoString()\ncomponentN()...\ncopy()\n```\n\n`copy 函数`\n\n```Kotlin\npublic final Student copy(int id, String name, int age) {\n    return new Student(id, name, age);\n}\n```\n\n当要复制一个对象，只改变一些属性，但其余不变，copy() 就是为此而生。\n\n`componentN 函数-解构声明（Destructuring Declarations）`\n\n```Kotlin\npublic final int component1() {\n    return this.id;\n}\n\npublic final String component2() {\n    return this.name;\n}\n\npublic final int component3() {\n    return this.age;\n}\n```\n\n编译器为数据类（data class）自动声明 componentN() 函数，可直接用解构声明。\n\n```Kotlin\nval student = Student(101, \"ZhangSan\", 30)\nval (id, name, age) = student // 自动赋值给 id, name, age\nprintln(\"id=$id, name=$name, age=$age\")\n```\n\n### 相等性\n\n`两个等号==和三个等号===`\n\n两个等号 `==`：比较的是**对象的内容**是否相同，相当于 Java 的 equals()。`==` 的否定形式为 `!=` 。\n\n三个等号 `===`：比较的是**对象的地址**是否相同（即判断是否为同一对象），相当于 Java 的 ==。`===` 的否定形式为 `!==` 。\n\n```Kotlin\nval student1 = Student(101, \"ZhangSan\", 30)\nval student2 = Student(101, \"ZhangSan\", 30)\nif (student1 == student2) { // true\n    // ...\n}\nif (student1 === student2) { // false\n    // ...\n}\n```\n\n### operator\n\n通过 operator 修饰「特定函数名」的函数，例如 plus 、get, 可以达到重载运算符的效果。\n\n| 表达式   | 翻译为        |\n| ----- | ---------- |\n| a + b | a.plus(b)  |\n| a - b | a.minus(b) |\n| a * b | a.times(b) |\n| a / b | a.div(b)   |\n\n### 委托\n\n委托，也就是委托模式，它是 23 种经典设计模式中的一种，又名`代理模式`，在委托模式中，有 2 个对象参与同一个请求的处理，接受请求的对象将请求委托给另一个对象来处理。委托模式中，有三个角色：约束、委托对象和被委托对象。Kotlin 直接支持委托模式，更加优雅，简洁。Kotlin 通过关键字 `by` 实现委托。\n\n- **约束**：约束是接口或者抽象类，它定义了通用的业务类型，也就是需要被代理的业务。\n- **被委托对象**：具体的业务逻辑执行者。\n- **委托对象**：负责对真正角色的应用，将约束类定义的业务委托给具体的委托对象。\n\n#### 类委托\n\n类的委托即一个类中定义的方法实际是调用另一个类的对象的方法来实现的。\n\n```Kotlin\n// 约束类，我们约定的业务\ninterface IGamePlayer {\n    fun play() // 打游戏\n}\n\n// 被委托对象，实现了我们约定的业务\nclass RealGamePlayer(private val name: String) : IGamePlayer {\n    override fun play() {\n        println(\"${name}开始打游戏\")\n    }\n}\n\n// 委托对象，通过关键字 by 建立委托类\nclass DelegateGamePlayer(private val player: IGamePlayer) : IGamePlayer by player\n\nfun main(args: Array<String>) {\n    val realGamePlayer = RealGamePlayer(\"张三\")\n    val delegateGamePlayer = DelegateGamePlayer(realGamePlayer)\n    delegateGamePlayer.play() // 输出：张三开始打游戏\n}\n```\n\n在 DelegateGamePlayer 声明中，by 子句表示，将 player 保存在 DelegateGamePlayer 的对象实例内部，而且编译器将会生成继承自 IGamePlayer 接口的所有方法，并将调用转发给 player。\n\n>  可以通过类委托的模式来减少继承。\n\n#### 属性委托\n\n属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类的属性统一管理。\n\n属性委托语法格式：\n\n```Kotlin\nval/var <属性名>: <类型> by <表达式>\n```\n\n- var/val：属性类型(可变/只读)。\n- 属性名：属性名称。\n- 类型：属性的数据类型。\n- 表达式：委托代理类。\n\nby 关键字之后的表达式就是委托，属性的 get() 方法（以及 set() 方法）将被委托给这个对象的 getValue() 和 setValue() 方法。属性委托不必实现任何接口，但必须提供 getValue() 函数（对于 var 属性，还需要 setValue() 函数）。\n\n```Kotlin\n/**\n * 被委托类（委托代理类）\n * 该类需要包含 getValue() 方法和 setValue() 方法，且参数 thisRef 为进行委托的类的对象，property 为进行委托的属性的对象。\n */\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"$thisRef, 这里委托了 ${property.name} 属性\"\n    }\n\n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n        println(\"$thisRef 的 ${property.name} 属性赋值为 $value\")\n    }\n}\n\nfun main(args: Array<String>) {\n    var token: String by Delegate()\n    println(token) // 访问该属性，调用 getValue() 函数\n\n    token = \"xxx\"   // 调用 setValue() 函数\n    println(token)\n}\n```\n\n其中的参数解释如下：\n\n- `thisRef` —— 必须与属性所有者类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型。\n- `property` —— 必须是类型 `KProperty<*>` 或其超类型。\n- `value` —— 必须与属性同类型或者是它的子类型。\n\n#### 属性委托的另一种实现方式\n\nKotlin 标准库中声明了 2 个含所需 `operator` 方法的 `ReadOnlyProperty / ReadWriteProperty` 接口。\n\n```Kotlin\ninterface ReadOnlyProperty<in R, out T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n}\n\ninterface ReadWriteProperty<in R, T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n    operator fun setValue(thisRef: R, property: KProperty<*>, value: T)\n}\n```\n\n`被委托类` 实现这两个接口其中之一就可以了，`val` 属性实现 `ReadOnlyProperty`, `var` 属性实现 `ReadWriteProperty`。 \n\n```Kotlin\nclass Delegate2 : ReadWriteProperty<Any?, String> {\n    override fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"\"\n    }\n\n    override fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n    }\n}\n\nvar token2: String by Delegate2()\n```\n\n#### 标准库中提供的几个委托\n\n- 延迟属性（lazy）: 其值只在首次访问时计算。\n- 可观察属性（observable）: 监听器会收到有关此属性变更的通知。\n- 把多个属性储存在一个映射（map）中，而不是每个存在单独的字段中。\n\n**1、延迟属性 lazy**\n\nlazy() 是一个函数，接受一个 Lambda 表达式作为参数，返回一个 Lazy <T> 实例的函数，返回的实例可以作为实现延迟属性的委托：第一次调用 get() 会执行已传递给 lazy() 的 lamda 表达式并记录结果，后续调用 get() 只是返回记录的结果。\n\n```Kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\") // 第一次调用输出，第二次调用不执行\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue) // 第一次执行，执行两次输出表达式\n    println(lazyValue) // 第二次执行，只输出返回值\n}\n\n// 执行输出结果\ncomputed!\nHello\nHello\n```\n\n**2、可观察属性 Observable**\n\nobservable 可以用于实现观察者模式。\n\nDelegates.observable() 函数接受两个参数：第一个是初始化值，第二个是属性值被修改时的回调处理器 onChange。回调处理器有三个参数：被赋值的属性、旧值和新值：\n\n```Kotlin\nimport kotlin.properties.Delegates\n\nclass User {\n    var name: String by Delegates.observable(\"A\") { property, oldValue, newValue ->\n        println(\"旧值：$oldValue -> 新值：$newValue\")\n    }\n}\n\nfun main(args: Array<String>) {\n    val user = User()\n    user.name = \"B\"\n    user.name = \"C\"\n}\n\n// 执行输出结果\n旧值：A -> 新值：B\n旧值：B -> 新值：C\n```\n\n**vetoable 函数**：`vetoable` 与 `observable` 一样，可以观察属性值的变化，不同的是，`vetoable` 可以通过`处理器函数来决定属性值是否生效`。\n\n```Kotlin\n// 声明一个 Int 类型的属性 vetoableProp, 如果新的值比旧值大，则生效，否则不生效。\nvar vetoableProp: Int by Delegates.vetoable(0){ _, oldValue, newValue ->\n    // 如果新的值大于旧值，则生效\n    newValue > oldValue\n}\n```\n\n**3、把属性储存在映射中**\n\n一个常见的用例是在一个映射（map）里存储属性的值。 这经常出现在像解析 JSON 或者做其他“动态”事情的应用中。 在这种情况下，你可以使用映射实例自身作为委托来实现委托属性。\n\n```Kotlin\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int  by map\n}\n\nfun main(args: Array<String>) {\n    // 构造函数接受一个映射参数\n    val user = User(mapOf(\n        \"name\" to \"张三\",\n        \"age\"  to 18\n    ))\n\n    // 读取映射值\n    println(user.name)\n    println(user.age)\n}\n```\n\n### 集合中函数式 API 操作符\n\n#### 筛选过滤类\n\n##### slice 系列\n\n操作符可以取集合中一部分元素或者某个元素，最后组合成一个新元素。\n\n- **`slice(indices: IntRange)`**：指定切片的起始位置和终止位置，将范围内的元素切出加入到新集合。\n\n  ```kotlin\n  val list = listOf(1, 2, 3, 4, 5).slice(IntRange(2, 4))\n  println(list)\n  \n  // 打印结果：\n  [3, 4, 5]\n  ```\n\n- **`slice(indices: Iterable<Int>)`**：指定下标分别切出对应的元素，放入新集合中。\n\n  ```kotlin\n  val list = listOf(1, 2, 3, 4, 5).slice(IntRange(2, 4))\n  println(list)\n  \n  val list2 = listOf(1, 2, 3, 4, 5).slice(listOf(1, 3))\n  println(list2)\n  \n  // 打印结果：\n  [3, 4, 5]\n  [2, 4]\n  ```\n\n##### filter 系列\n\n- **`filter(predicate: (T) -> Boolean)`**：从一个集合筛选出符合条件的元素，并以一个新集合返回。\n\n  ```kotlin\n  val list = listOf(1, 2, 3, 4, 5).filter { it % 2 == 0 }\n  println(list)\n  \n  // 打印结果：\n  [2, 4]\n  ```\n\n- **`filterTo(destination: C, predicate: (T) -> Boolean)`**：从多个集合筛选出符合条件的元素，并最终用一个集合进行收集从每个集合筛选出的元素。\n\n  ```kotlin\n  val numberList1 = listOf(3, 6, 9, 12, 15)\n  val numberList2 = listOf(5, 10, 15, 20, 25)\n  val numberList3 = listOf(10, 20, 30, 40, 50)\n  \n  // filterTo 的 destination 是一个可变集合类型，所以这里使用 mutableListOf 初始化\n  val newNumberList = mutableListOf<Int>().apply {\n      numberList1.filterTo(this) {\n          it % 5 == 0\n      }\n      numberList2.filterTo(this) {\n          it % 5 == 0\n      }\n      numberList3.filterTo(this) {\n          it % 20 == 0\n      }\n  }\n  println(newNumberList)\n  \n  // 打印结果：\n  [15, 5, 10, 15, 20, 25, 20, 40]\n  ```\n\n- **`filterIndexed(predicate: (index: Int, T) -> Boolean)`**：需要集合元素 `index` 参与筛选条件。\n\n  ```kotlin\n  val result = listOf(3, 6, 9, 12, 15).filterIndexed { index, item ->\n      index > 2 && item % 2 == 0\n  }\n  println(result)\n  \n  // 打印结果：\n  [12]\n  ```\n\n- **`filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean)`**：从多个集合筛选出符合条件的元素，筛选条件需要 `index`，并最终用一个集合进行收集从每个集合筛选出的元素。\n\n  ```kotlin\n  val result = mutableListOf<Int>()\n  listOf(0, 1, 2, 12, 4).filterIndexedTo(result) { index, item ->\n      index == item\n  }\n  println(result)\n  \n  // 打印结果：\n  [0, 1, 2, 4]\n  ```\n\n- **`filterIsInstance()`**：一个抽象类集合中含有多种子类型的元素，可以很方便筛选对应子类型的元素，并组成一个集合返回。\n\n  ```kotlin\n  val list = mutableListOf(1, \"2\", 3, \"4\", 5f, 6.0, \"7\")\n  val result = list.filterIsInstance<Int>()\n  println(result)\n  \n  // 打印结果：\n  [1, 3]\n  ```\n\n- **`filterIsInstanceTo(destination: C)`**：适用于筛选多个集合的情况。\n\n  ```kotlin\n  val list = mutableListOf(1, \"2\", 3, \"4\", 5f, 6.0, \"7\")\n  val result = mutableListOf<String>()\n  list.filterIsInstanceTo(result)\n  println(result)\n  \n  // 打印结果：\n  [2, 4, 7]\n  ```\n\n- **`filterNot(predicate: (T) -> Boolean)`**、**`filterNotTo(destination: C, predicate: (T) -> Boolean)`**：从一个集合筛选出符合条件之外的元素，并以一个新集合返回。它是 filter 操作符取反操作。\n\n- **`filterNotNull()`**、**`filterNotNullTo(destination: C)`**：filterNotNull 操作符可以过滤集合中为 null 的元素。同理 filterNotNullTo 才是真正过滤操作，但是需要从外部传入一个可变集合。\n\n##### drop 系列\n\n- **`drop(n: Int)`**：把集合元素去除一部分，drop 是顺序地删除，n 则表示顺序删除几个元素，最后返回剩余元素集合。\n\n  ```kotlin\n  println(listOf(1, 2, 3, 4, 5).drop(3))\n  \n  // 打印结果：\n  [4, 5]\n  ```\n\n- **`dropLast(n: Int)`**：根据传入数值 n，表示从右到左倒序地删除 n 个集合中的元素，并返回集合中剩余的元素。\n\n  ```kotlin\n  println(listOf(1, 2, 3, 4, 5).dropLast(3))\n  \n  // 打印结果：\n  [1, 2]\n  ```\n\n- **`dropWhile(predicate: (T) -> Boolean)`**：从集合的第一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).dropWhile { it < 20 })\n  \n  // 打印结果：\n  [32, 40, 5]\n  ```\n\n- **`dropLastWhile(predicate: (T) -> Boolean)`**：从集合的最后一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。\n\n  ```kotlin\n   println(listOf(1, 2, 32, 40, 5).dropLastWhile { it < 20 })\n  \n  // 打印结果：\n  [1, 2, 32, 40]\n  ```\n\n\n##### take 系列\n\n- **`take(n: Int)`**：从原集合的第一项开始顺序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。换句话说就是取集合前 n 个元素组成新的集合返回。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).take(3))\n  \n  // 打印结果：\n  [1, 2, 32]\n  ```\n\n- **`takeLast(n: Int)`**：从原集合的最后一项开始倒序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).takeLast(3))\n  \n  // 打印结果：\n  [32, 40, 5]\n  ```\n\n- **`takeLastWhile(predicate: (T) -> Boolean)`**：从集合的最后一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).takeLastWhile { it < 20 })\n  \n  // 打印结果：\n  [5]\n  ```\n\n- **`takeWhile(predicate: (T) -> Boolean)`**：从集合的第一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).takeWhile { it < 20 })\n  \n  // 打印结果：\n  [1, 2]\n  ```\n\n##### distinct 系列\n\n- `distinct`：去除集合中的重复元素。\n\n  ```kotlin\n  println(listOf(1, 2, 2, 1, 3).distinct())\n  \n  // 打印结果：\n  [1, 2, 3]\n  ```\n\n- **`distinctBy(selector: (T) -> K)`**：根据操作元素后的结果去除重复元素。\n\n  ```kotlin\n  println(listOf(1, 2, 4, 3, 6).distinctBy { it % 2 })\n  \n  // 打印结果：\n  [1, 2]\n  ```\n\n#### 并集类操作符\n\n##### any、all、count、none 系列\n\n- **`any()`**：判断是不是一个集合，若是，则再判断集合是否为空。若为空则返回 false，反之返回 true。若不是集合，则返回 hasNext。\n\n  ```kotlin\n  println(listOf(1, 2).any())\n  \n  // 打印结果：\n  true\n  ```\n\n- **`any(predicate: (T) -> Boolean)`**：判断集合中是否存在满足条件的元素。若存在则返回 true，反之返回 false。\n\n  ```kotlin\n  println(listOf(1, 2, 32, 40, 5).any { it > 30 })\n  \n  // 打印结果：\n  true\n  ```\n\n- **`all(predicate: (T) -> Boolean)`**：判断集合中的所有元素是否都满足条件。若是则返回 true，反之则返回 false。\n\n  ```kotlin\n  println(listOf(0, 2, 32, 40, 50).all { it % 2 == 0 })\n  \n  // 打印结果：\n  true\n  ```\n\n- **`count()`**、**`count(predicate: (T) -> Boolean)`**：返回集合中的元素个数或查询集合中满足条件的元素个数。\n\n  ```kotlin\n  println(listOf(0, 2, 32, 40, 50).count())\n  println(listOf(0, 2, 32, 40, 50).count { it > 10 })\n  \n  // 打印结果：\n  5\n  3\n  ```\n\n- **`none()`**、**`none(predicate: (T) -> Boolean)`**：如果一个集合是空集合，返回 true 或者集合中没有满足条件的元素，则返回 true。\n\n  ```kotlin\n  println(listOf(0, 2, 32, 40, 50).none()) \n  println(listOf(0, 2, 32, 40, 50).none { it > 50 })\n  \n  // 打印结果：\n  false\n  true\n  ```\n\n##### fold 系列\n\n- **`fold(initial: R, operation: (acc: R, T) -> R)`**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素。\n\n  ```kotlin\n  println(listOf(0, 2, 4, 6).fold(10) { result, element ->\n      result + element\n  })\n  \n  // 打印结果：\n  22\n  ```\n\n- **`foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R)`**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。\n\n  ```kotlin\n  println(listOf(\"h\", \"e\", \"l\", \"l\", \"o\").foldIndexed(\"Say\") { index, result, element ->\n      \"$result $element$index\"\n  })\n  \n  // 打印结果：\n  Say h0 e1 l2 l3 o4\n  ```\n\n- **`foldRight(initial: R, operation: (T, acc: R) -> R)`**：在一个初始值的基础上，从最后项到第一项通过一个函数累计所有的元素，与 fold 类似，不过是从最后一项开始累计。\n\n  ```kotlin\n  println(listOf(\"1\", \"2\", \"3\").foldRight(\"Say\") { element, result ->\n      \"$result $element\"\n  })\n  \n  // 打印结果：\n  Say 3 2 1\n  ```\n\n- **`foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R)`**：在一个初始值的基础上，从最后一项到第一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。\n\n  ```kotlin\n  println(listOf(\"1\", \"2\", \"3\").foldRightIndexed(\"Say\") { index, element, result ->\n      \"$result $element-$index\"\n  })\n  \n  // 打印结果：\n  Say 3-2 2-1 1-0\n  ```\n\n##### forEach 系列\n\n- **`forEach(action: (T) -> Unit)`**：集合元素的遍历操作符。\n\n  ```kotlin\n  listOf(\"1\", \"2\", \"3\").forEach {\n      print(it)\n  }\n  \n  // 打印结果：\n  123\n  ```\n\n- **`forEachIndexed(action: (index: Int, T) -> Unit)`**：集合中带元素下标的遍历操作。\n\n  ```kotlin\n  listOf(\"1\", \"2\", \"3\").forEachIndexed { index, s ->\n      print(\"$index-$s \")\n  }\n  \n  // 打印结果：\n  0-1 1-2 2-3\n  ```\n\n##### max、min 系列\n\n- **`maxOrNull()`**：获取集合中最大的元素，若为空元素集合，则返回 null。\n\n  ```kotlin\n  println(listOf(\"B\", \"C\", \"A\").maxOrNull())\n  \n  // 打印结果：\n  C\n  ```\n\n- **`maxByOrNull(selector: (T) -> R)`**：根据给定的函数返回最大的一项，如果没有则返回 null。\n\n  ```kotlin\n  println(listOf(-2, 1, 0).maxByOrNull {\n      it * -3\n  })\n  \n  // 打印结果：\n  -2\n  ```\n\n- **`maxWithOrNull(comparator: Comparator<in T>)`**：接受一个 Comparator 对象并且根据此 Comparator 对象返回最大元素。\n\n  ```kotlin\n  println(listOf(\"-20\", \"-102\", \"0\").maxWithOrNull(compareBy {\n      it.length\n  }))\n  \n  // 打印结果：\n  -102\n  ```\n\n\n> min 操作符作用与 max 相反，包括 minBy 和 minWith。\n\n##### reduce 系列\n\n- **`reduce(operation: (acc: S, T) -> S)`**：从集合中的第一项到最后一项的累计操作，与 fold 操作符的区别是没有初始值。\n\n  ```kotlin\n  println(listOf(\"Nice\", \"to\", \"meet\", \"you\").reduce { result, element ->\n      \"$result $element\"\n  })\n  \n  // 打印结果：\n  Nice to meet you\n  ```\n\n  > 其中 reduceIndexed，reduceRight，reduceRightIndexed 操作符都与前述的 fold 相关操作符类似，只是没有初始值。\n\n- **`reduceOrNull(operation: (acc: S, T) -> S)`**：从集合中的第一项到最后一项的累计操作，如果集合为空，返回 null。\n\n  > reduceRightOrNull 操作符作用等价于 reduceRight，不同的是当集合为空，返回 null。\n\n##### sum 系列\n\n- **`sum()`**：计算集合中所有元素累加的结果。\n\n  ```kotlin\n  println(listOf(1, 2, 3).sum())\n  \n  // 打印结果：\n  6\n  ```\n\n- **`sumOf(selector: (T) -> Int)`**：计算集合所有元素通过某个函数转换后数据之和。\n\n  ```kotlin\n  println(listOf(1, 2, 3).sumOf { it * 2 })\n  \n  // 打印结果：\n  12\n  ```\n\n#### 映射类操作符\n\n##### flatMap 系列\n\n- **`flatMap(transform: (T) -> Iterable<R>)`**：根据条件合并两个集合，组成一个新的集合。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  println(strList.flatMap { listOf(it.plus(\"1\")) })\n  \n  // 打印结果：\n  [A1, B1, C1]\n  ```\n\n- **`flatMapTo(destination: C, transform: (T) -> Iterable<R>)`**：多个集合的条件合并。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  val strList2 = listOf(\"a\", \"b\", \"c\")\n  val resultList = mutableListOf<String>().apply {\n      strList.flatMapTo(this) {\n          listOf(it.plus(\"1\"))\n      }\n      strList2.flatMapTo(this) {\n          listOf(it.plus(\"2\"))\n      }\n  }\n  println(resultList)\n  \n  // 打印结果：\n  [A1, B1, C1, a2, b2, c2]\n  ```\n\n##### group 系列\n\n- **`groupBy(keySelector: (T) -> K)`**：分组操作符，根据条件将集合拆分为一个 Map 类型集合。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.groupBy { if (it.startsWith(\"Java\")) \"MyJava\" else \"MyKotlin\" })\n  \n  // 打印结果：\n  {MyJava=[Java, JavaScript], MyKotlin=[Kotlin, C, C++]}\n  ```\n\n- **`groupByTo(destination: M, keySelector: (T) -> K)`**：分组操作，适用于多个集合的分组操作。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  val strList2 = listOf(\"15\", \"223\", \"45\", \"520\", \"18\")\n  val mutableMap = mutableMapOf<String, MutableList<String>>().apply {\n      strList.groupByTo(this) {\n          if (it.startsWith(\"Java\")) \"Java\" else \"Not Java\"\n      }\n      strList2.groupByTo(this) {\n          if (it.contains(\"2\")) \"2\" else \"Not 2\"\n      }\n  }\n  println(mutableMap)\n  \n  // 打印结果：\n  {Java=[Java, JavaScript], Not Java=[Kotlin, C, C++], Not 2=[15, 45, 18], 2=[223, 520]}\n  ```\n\n- **`groupingBy(crossinline keySelector: (T) -> K)`**：对元素进行分组，然后一次将操作应用于所有分组。适用于对集合复杂分组的情况。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.groupingBy { it.startsWith(\"Java\") }.eachCount())\n  \n  // 打印结果：\n  {true=2, false=3}\n  ```\n\n  `Grouping` 支持以下操作：\n\n  - eachCount() 计算每个组中的元素。\n  - fold() 与 reduce() 对每个组分别执行 fold 与 reduce 操作，作为一个单独的集合并返回结果。\n  - aggregate() 随后将给定操作应用于每个组中的所有元素并返回结果。 这是对 `Grouping` 执行任何操作的通用方法。当折叠或缩小不够时，可使用它来实现自定义操作。\n\n##### map 系列\n\n- **`map(transform: (T) -> R)`**：集合变换，遍历每个元素并执行给定表达式，最终形成新的集合。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.map { it.plus(\"-1\") })\n  \n  // 打印结果：\n  [Java-1, Kotlin-1, C-1, C++-1, JavaScript-1]\n  ```\n\n- **`mapTo(destination: C, transform: (T) -> R)`**：多个集合的元素转换。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  val strList2 = listOf(\"a\", \"b\", \"c\")\n  println(mutableListOf<String>().apply {\n      strList.mapTo(this) { it.plus(\"-1\") }\n      strList2.mapTo(this) { it.plus(\"-2\") }\n  })\n  \n  // 打印结果：\n  [A-1, B-1, C-1, a-2, b-2, c-2]\n  ```\n\n- **`mapIndexed(transform: (index: Int, T) -> R)`**：带有元素下标的集合转换。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  println(strList.mapIndexed { index, s -> \"$index-$s\" })\n  \n  // 打印结果：\n  [0-A, 1-B, 2-C]\n  ```\n\n- **`mapIndexedTo(destination: C, transform: (index: Int, T) -> R)`**：带有元素下标的多个集合转换。\n\n  ```kotlin\n  val strList = listOf(\"A\", \"B\", \"C\")\n  val strList2 = listOf(\"a\", \"b\", \"c\")\n  println(mutableListOf<String>().apply {\n      strList.mapIndexedTo(this) { index, s -> \"$index-$s\" }\n      strList2.mapIndexedTo(this) { index, s -> \"$index-$s\" }\n  })\n  \n  // 打印结果：\n  [0-A, 1-B, 2-C, 0-a, 1-b, 2-c]\n  ```\n\n- **`mapNotNull(transform: (T) -> R?)`**：同 `map` 函数的作用相同，不过其过滤了集合转换后为 null 的元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.mapNotNull { if (it.startsWith(\"Java\")) null else it })\n  \n  // 打印结果：\n  [Kotlin, C, C++]\n  ```\n\n- **`mapNotNullTo(destination: C, transform: (T) -> R?)`**：同 mapNotNull 函数的作用相同，它适用于多集合操作场景。\n\n- **`mapIndexedNotNull` 和 `mapIndexedNotNullTo`**：同理。\n\n#### 元素类操作符\n\n##### element 系列\n\n- **`elementAt(index: Int)`**：获取集合指定下标的元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.elementAt(1)) // 打印：Kotlin\n  ```\n\n- **`elementAtOrElse(index: Int, defaultValue: (Int) -> T)`**：获取对应下标的集合元素。若下标越界，返回默认值。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.elementAtOrElse(10) { \"unknown\" }) // 打印：unknown\n  ```\n\n- **`elementAtOrNull(index: Int)`**：获取对应下标的集合元素。若下标越界，返回 null。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.elementAtOrNull(10)) // 打印：null\n  ```\n\n##### first、last 系列\n\n- **`first()`**：获取集合第一个元素，若集合为空集合，这会抛出 NoSuchElementException 异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.first()) // 打印：Java\n  ```\n\n- **`first(predicate: (T) -> Boolean)`**：获取集合中指定条件的第一个元素。若不满足条件，抛异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.first { it.length > 5 }) // 打印：Kotlin\n  ```\n\n- **`firstOrNull()`**：获取集合第一个元素，若集合为空集合，返回 null。\n\n- **`firstOrNull{}`**：获取集合满足条件的首个元素，若无则返回 null。\n\n> 与 `first` 等操作符对应的是 `last` 等相关操作符，即取集合最后一个元素等。\n\n##### find 系列\n\n- **`find(predicate: (T) -> Boolean)`**：获取集合满足条件的首个元素，若无则返回 null，其实就是 firstOrNull{}。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.find { it.length > 5 }) // 打印：Kotlin\n  ```\n\n- **`findLast(predicate: (T) -> Boolean)`**：获取集合满足条件的最后一个元素，若无则返回 null，其实就是 lastOrNull{}。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.findLast { it.length > 5 }) // 打印：JavaScript\n  ```\n\n##### single 系列\n\n- **`single()`**：当集合中只有一个元素时，返回该元素，否则抛异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.single()) // 打印：java.lang.IllegalArgumentException: List has more than one element.\n  ```\n\n- **`single(predicate: (T) -> Boolean)`**：找到集合中满足条件的元素，若只有单个元素满足条件，则返回该元素，否则抛异常。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.single { it.startsWith(\"K\") }) // 打印：Kotlin\n  ```\n\n> **`singleOrNull` 或 `singleOrNull{}` 操作符** 只是将前述的抛异常改为返回 null。\n\n##### component 系列\n\n- **`component1()` ... `component5()`**：用于获取第 1 到第 5 个元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.component3()) // 打印：C\n  ```\n\n##### indexOf 系列\n\n- **`indexOf(element: T)`**：返回指定元素的下标，若不存在，则返回 -1。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.indexOf(\"C\")) // 打印：2\n  ```\n\n- **`indexOfFirst(predicate: (T) -> Boolean)`**：返回满足条件的第一个元素的下标，若不存在，则返回 -1。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.indexOfFirst { it.length > 5 }) // 打印：1\n  ```\n\n- **`indexOfLast(predicate: (T) -> Boolean)`**：返回满足条件的最后一个元素的下标，若不存在，则返回 -1。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.indexOfLast { it.length > 5 }) // 打印：4\n  ```\n\n#### 排序类操作符\n\n##### reverse 系列\n\n- **`reversed()`**：反转集合元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.reversed()) // 打印：[JavaScript, C++, C, Kotlin, Java]\n  ```\n\n##### sort 系列\n\n- **`sorted()`**：对集合中的元素自然升序排序。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sorted()) // 打印：[C, C++, Java, JavaScript, Kotlin]\n  ```\n\n- **`sortedDescending()`**：与 sorted 操作符相反，为倒序。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sortedDescending()) // 打印：[Kotlin, JavaScript, Java, C++, C]\n  ```\n\n- **`sortedBy(crossinline selector: (T) -> R?)`**：根据条件升序，即把不满足条件的放在前面，满足条件的放在后面。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sortedBy { it.length }) // 打印：[C, C++, Java, Kotlin, JavaScript]\n  ```\n\n- **`sortedByDescending(crossinline selector: (T) -> R?)`**：与 sortedBy 操作符相反，为倒序。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.sortedByDescending { it.length }) // 打印：[JavaScript, Kotlin, Java, C++, C]\n  ```\n\n#### 生成类操作符\n\n##### partition 系列\n\n- **`partition(predicate: (T) -> Boolean)`**：将一个集合按条件拆分为两个 pair 组成的新集合。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.partition { it.startsWith(\"Java\") }) // 打印：([Java, JavaScript], [Kotlin, C, C++])\n  ```\n\n##### plus 系列\n\n- **`plus(element: T)`**：合并两个集合中的元素，组成一个新的集合。也可以使用符号 `+`。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.plus(listOf(1, 2, 3))) // 打印：[Java, Kotlin, C, C++, JavaScript, 1, 2, 3]\n  ```\n\n- **`plusElement(element: T)`**：往集合中添加一个元素。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.plusElement(\"CSS\")) // 打印：[Java, Kotlin, C, C++, JavaScript, CSS]\n  ```\n\n##### zip 系列\n\n- **`zip(other: Array<out R>)`**：由两个集合按照相同的下标组成一个新集合。该新集合的类型是：`List<Pair>`。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.zip(listOf(1, 2, 3))) // 打印：[(Java, 1), (Kotlin, 2), (C, 3)]\n  ```\n\n- **`zipWithNext(transform: (a: T, b: T) -> R)`**：集合中相邻元素组成 `pairs`。\n\n  ```kotlin\n  val strList = listOf(\"Java\", \"Kotlin\", \"C\", \"C++\", \"JavaScript\")\n  println(strList.zipWithNext()) // 打印：[(Java, Kotlin), (Kotlin, C), (C, C++), (C++, JavaScript)]\n  ```\n\n  ","slug":"Kotlin-教程","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd5001enctte4nc3p41","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h3 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h3><p>Java 中存在 int, float, boolean 等基础类型，这些基础类型在 Kotlin 里将全部以对象的形式继续存在。有几点变化需要注意。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Int 无法自动转换为 Double, 需要自己先做类型转换（as Double, toDouble(), 方式很多）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b: <span class=\"built_in\">Double</span> = a.toDouble()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Char 不能直接等值于其对应的 ASCII 码值，需要类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c: <span class=\"built_in\">Char</span> = <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x: <span class=\"built_in\">Int</span> = c.toInt()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><p>Kotlin 中使用 var 定义可读可写变量，使用 val 定义只读变量（相当于 Java 当中的 final）。定义变量时，如果满足类型推断，类型可以省略。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&quot;100&quot;</span> <span class=\"comment\">// 类型为 String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name: String = <span class=\"string\">&quot;张三&quot;</span> <span class=\"comment\">// 类型为 String</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h3><p>在 Kotlin 语言中，“:” 被广泛用于变量类型的定义。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义变量类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> zhangSan: User</span><br><span class=\"line\">    <span class=\"keyword\">var</span> liSi: User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义函数参数和返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUser</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: User &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User(<span class=\"number\">100</span>, <span class=\"string\">&quot;dd&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>“:”还被用于声明类继承或接口实现。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承 User 类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VipUser</span> : <span class=\"type\">User</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">DB</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addUser</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现 DB 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RoomDB</span> : <span class=\"type\">DB</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addUser</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h3><p>Java 中使用 instanceof 来判断某变量是否为某类型，而 Kotlin 中使用 is 来进行类型检测。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * is 判断属于某类型</span></span><br><span class=\"line\"><span class=\"comment\"> * !is 判断不属于某类型</span></span><br><span class=\"line\"><span class=\"comment\"> * as 类型强转，失败时抛出类型强转失败异常</span></span><br><span class=\"line\"><span class=\"comment\"> * as? 类型强转，但失败时不会抛出异常而是返回 null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (myObject <span class=\"keyword\">is</span> User) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只要进来了，就代表 myObject 是 User 类型了，不需要强转就可以直接使用 User 的属性</span></span><br><span class=\"line\">    myObject.id = <span class=\"number\">101</span></span><br><span class=\"line\">    myObject.name = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Any-和-Unit\"><a href=\"#Any-和-Unit\" class=\"headerlink\" title=\"Any 和 Unit\"></a>Any 和 Unit</h3><ul>\n<li><strong>Any</strong>: Kotlin 的顶层父类是 Any, 对应 Java 中的 Object, 但是比 Object 少了 wait()&#x2F;notify() 等函数。</li>\n<li><strong>Unit</strong>: Kotlin 中的 Unit 对应 Java 中的 void。</li>\n</ul>\n<h3 id=\"可见性修饰符\"><a href=\"#可见性修饰符\" class=\"headerlink\" title=\"可见性修饰符\"></a>可见性修饰符</h3><ul>\n<li>默认的可见性修饰符是 <code>public</code>。</li>\n<li>新增的可见性修饰符 <code>internal</code> 表示仅当前模块（AS 中的 module）可见，其它模块不能访问。</li>\n</ul>\n<h3 id=\"逻辑语句\"><a href=\"#逻辑语句\" class=\"headerlink\" title=\"逻辑语句\"></a>逻辑语句</h3><h4 id=\"if-else-语句\"><a href=\"#if-else-语句\" class=\"headerlink\" title=\"if-else 语句\"></a>if-else 语句</h4><p>Kotlin 中的 if-else 基本和 Java 一致，但还是有一些特殊的地方。比如它可以作为一个逻辑表达式使用，逻辑表达式还可以以代码块的形式出现，代码块最后的表达式作为该块的返回值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 逻辑表达式的使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMax</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"keyword\">if</span> (x &gt; y) x <span class=\"keyword\">else</span> y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码块形式的逻辑表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMax2</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Max num is x.&quot;</span>)</span><br><span class=\"line\">        x <span class=\"comment\">// 返回最后一行，即 x 的值</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Max num is y.&quot;</span>)</span><br><span class=\"line\">        y <span class=\"comment\">// 返回最后一行，即 y 的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"when-语句\"><a href=\"#when-语句\" class=\"headerlink\" title=\"when 语句\"></a>when 语句</h4><p>Kotlin 中的 when 语句取代了 Java 中的 switch-case 语句，功能上要强大许多，可以有多种形式的条件表达。与 if-else 一样，Kotlin 中的 when 也可以作为逻辑表达式使用，也有返回值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// when 有判断参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whenDemo</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">when</span> (obj) &#123;</span><br><span class=\"line\">        <span class=\"number\">1</span> -&gt; println(<span class=\"string\">&quot;是数字 1&quot;</span>)</span><br><span class=\"line\">        -<span class=\"number\">1</span>, <span class=\"number\">0</span> -&gt; println(<span class=\"string\">&quot;是数字 -1 或 0&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt; println(<span class=\"string\">&quot;是不大于 10 的正整数&quot;</span>)</span><br><span class=\"line\">        <span class=\"string\">&quot;abc&quot;</span> -&gt; println(<span class=\"string\">&quot;是字符串 abc&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">is</span> User -&gt; &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;是 User 对象&quot;</span>)</span><br><span class=\"line\">            println(obj.name) <span class=\"comment\">// 直接可以使用 User 的属性了</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; println(<span class=\"string\">&quot;其它操作&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// when 没有判断参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whenDemo2</span><span class=\"params\">(position: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> columns = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">        position % columns == <span class=\"number\">0</span> -&gt; &#123; <span class=\"comment\">// position 位于第一列</span></span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (position + <span class=\"number\">1</span>) % columns == <span class=\"number\">0</span> -&gt; &#123; <span class=\"comment\">// position 位于最后一列</span></span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// when 有返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whenDemo3</span><span class=\"params\">(score: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">when</span> (score) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">90.</span><span class=\"number\">.100</span> -&gt; <span class=\"string\">&quot;优秀&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">80.</span><span class=\"number\">.89</span> -&gt; <span class=\"string\">&quot;良好&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">60.</span><span class=\"number\">.79</span> -&gt; <span class=\"string\">&quot;及格&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"string\">&quot;不及格&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;你的成绩<span class=\"variable\">$result</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标准函数 repeat()：</span></span><br><span class=\"line\">repeat(<span class=\"number\">100</span>) &#123; <span class=\"comment\">// 执行 100 次</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .. 包括右边界 [0,99]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.99</span>) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// until 不包括右边界 [0,99]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>while 语句、continue 语句和 break 语句等逻辑都与 Java 基本一致，这里不再赘述。</p>\n</blockquote>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>Kotlin 中可以对任意表达式进行标签标记，标签的格式为标识符后跟 @ 符号，例如 abc@、fooBar@ 都是有效的标签。这些标签，可以搭配 return、break、continue 等跳转行为来使用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">labelTest</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"symbol\">la@</span> <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;outer index <span class=\"variable\">$i</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;inner index <span class=\"variable\">$j</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span><span class=\"symbol\">@la</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>使用 <code>arrayOf</code> 创建数组，基本数据类型使用对应的 <code>intArrayOf</code> 等。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> arr1 = arrayOf&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = intArrayOf()</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = floatArrayOf()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java 中字符串模板</span></span><br><span class=\"line\">String name = <span class=\"string\">&quot;ZhangSan&quot;</span>;</span><br><span class=\"line\">int age = <span class=\"number\">30</span>;</span><br><span class=\"line\">String introduction = String.format(<span class=\"string\">&quot;我是s%，今年%d岁了&quot;</span>, name, age);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Kotlin 中字符串模板</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> name = <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> introduction = <span class=\"string\">&quot;我是<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁了&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>Kotlin 中的函数通过关键字 fun 定义的，具体的参数和返回值定义结构如下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun</span><span class=\"params\">(para1: <span class=\"type\">Int</span>, para2: <span class=\"type\">String</span>)</span></span>: String &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kotlin 中的函数可以是全局函数，成员函数或者局部函数，甚至还可以作为某个对象的扩展函数临时添加。</p>\n<h4 id=\"全局函数-顶级函数\"><a href=\"#全局函数-顶级函数\" class=\"headerlink\" title=\"全局函数&#x2F;顶级函数\"></a>全局函数&#x2F;顶级函数</h4><p>全局函数（顶级函数）是文件级别的，以包为作用域。</p>\n<p>例如 com.zch.kotlin.biz1 包中的 Common.kt 文件中有以下方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在当前包的其它文件中就不能有相同的方法 sayHello，否则会报错。</p>\n<p>如果 com.zch.kotlin.biz2 包中的某文件中也有以下方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在其它文件中同时调用两者就需要加上相应的包来访问。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.zch.kotlin.biz1.sayHello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sayHello()</span><br><span class=\"line\">    com.zch.kotlin.biz2.sayHello()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h4><p>成员函数是在类或对象内部定义的函数。</p>\n<h4 id=\"局部函数\"><a href=\"#局部函数\" class=\"headerlink\" title=\"局部函数\"></a>局部函数</h4><p>Kotlin 支持局部函数，即一个函数在另一个函数内部：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserInfo</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> country = <span class=\"string\">&quot;中国&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 函数中的函数，叫“局部函数”</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getProvince</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;country&#125;</span>广东省&quot;</span> <span class=\"comment\">// 局部函数可以访问外部函数的局部变量。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> age = <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> userInfo = <span class=\"string\">&quot;我是<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁了，我来自<span class=\"subst\">$&#123;getProvince()&#125;</span>。&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> userInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是频繁调用的函数，不建议声明为局部函数，因为每次调用时，就会产生一个函数对象。</p>\n</blockquote>\n<h4 id=\"函数参数默认值\"><a href=\"#函数参数默认值\" class=\"headerlink\" title=\"函数参数默认值\"></a>函数参数默认值</h4><p>函数中的某个参数可以用 “&#x3D;” 号指定其默认值，调用函数方法时可不传这个参数，但其它参数需要用 “&#x3D;” 号指定。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calculate</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span> = <span class=\"number\">10</span>, c: <span class=\"type\">Int</span>)</span></span> = a + b + c <span class=\"comment\">// 原本直接 return 的函数可以用 = 符号简化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> sum = calculate(<span class=\"number\">5</span>, c = <span class=\"number\">20</span>) <span class=\"comment\">// sum = 35</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展函数和扩展属性\"><a href=\"#扩展函数和扩展属性\" class=\"headerlink\" title=\"扩展函数和扩展属性\"></a>扩展函数和扩展属性</h4><p>Kotlin 支持在<strong>包范围内</strong>对已存在的类进行函数和属性扩展。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给 Activity 扩展一个 log 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Activity.<span class=\"title\">log</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;Activity---<span class=\"variable\">$msg</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 Context 扩展一个 log 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Context.<span class=\"title\">log</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;Context---<span class=\"variable\">$msg</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">&quot;hello&quot;</span>) <span class=\"comment\">// 调用 Activity.log</span></span><br><span class=\"line\">(<span class=\"keyword\">this</span> <span class=\"keyword\">as</span> Context).log(<span class=\"string\">&quot;hello2&quot;</span>) <span class=\"comment\">// 调用 Context.log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 ViewGroup 扩展一个 firstChild 属性</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> ViewGroup.firstChild: View <span class=\"keyword\">get</span>() = getChildAt(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">contentLayout.firstChild <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：1、扩展需要在包级范围内进行，如果写在 class 内是无效的。2、已经存在的方法或属性，是无法被扩展的，依旧会调用已有的方法。3、扩展函数是静态解析的，在编译时就确定了调用函数（没有多态）。</p>\n</blockquote>\n<h4 id=\"infix-函数\"><a href=\"#infix-函数\" class=\"headerlink\" title=\"infix 函数\"></a>infix 函数</h4><p>标有 <code>infix</code> 关键字的函数也可以使用中缀表示法（忽略该调用的点与圆括号）调用。中缀函数必须满足以下要求：</p>\n<ul>\n<li>它们必须是成员函数或扩展函数；</li>\n<li>它们必须只有一个参数；</li>\n<li>其参数不得接受可变数量的参数且不能有默认值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"title\">shl</span><span class=\"params\">(x: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123; …… &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用中缀表示法调用该函数</span></span><br><span class=\"line\"><span class=\"number\">1</span> shl <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于这样</span></span><br><span class=\"line\"><span class=\"number\">1.</span>shl(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中缀函数调用的优先级低于算术操作符、类型转换以及 rangeTo 操作符。 以下表达式是等价的：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> shl <span class=\"number\">2</span> + <span class=\"number\">3</span> 等价于 <span class=\"number\">1</span> shl (<span class=\"number\">2</span> + <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">0</span> until n * <span class=\"number\">2</span> 等价于 <span class=\"number\">0</span> until (n * <span class=\"number\">2</span>)</span><br><span class=\"line\">xs union ys <span class=\"keyword\">as</span> Set&lt;*&gt; 等价于 xs union (ys <span class=\"keyword\">as</span> Set&lt;*&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一方面，中缀函数调用的优先级高于布尔操作符 &amp;&amp; 与 ||、is- 与 in- 检测以及其他一些操作符。这些表达式也是等价的：</span></span><br><span class=\"line\"></span><br><span class=\"line\">a &amp;&amp; b xor c 等价于 a &amp;&amp; (b xor c)</span><br><span class=\"line\">a xor b <span class=\"keyword\">in</span> c 等价于 (a xor b) <span class=\"keyword\">in</span> c</span><br></pre></td></tr></table></figure>\n\n<p>中缀函数总是要求指定接收者与参数。当使用中缀表示法在当前接收者上调用方法时，需要显式使用 <code>this</code>；不能像常规方法调用那样省略。这是确保非模糊解析所必需的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStringCollection</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">infix</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">add</span><span class=\"params\">(s: <span class=\"type\">String</span>)</span></span> &#123; <span class=\"comment\">/*……*/</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">build</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span> add <span class=\"string\">&quot;abc&quot;</span>   <span class=\"comment\">// 正确</span></span><br><span class=\"line\">        add(<span class=\"string\">&quot;abc&quot;</span>)       <span class=\"comment\">// 正确</span></span><br><span class=\"line\">        add <span class=\"string\">&quot;abc&quot;</span>      <span class=\"comment\">// 错误：必须指定接收者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><ul>\n<li>内联函数配合「函数类型」，可以减少「函数类型」生成的对象  。</li>\n<li>使⽤ <code>inline</code> 关键字声明的函数是「内联函数」，在「编译时」会将「内联函数」中的函数体直接插⼊到调⽤处。  所以在写内联函数的时候需要注意，尽量将内联函数中的代码行数减少。</li>\n</ul>\n<p><code>noinline</code> 可以禁止部分函数参数参与内联编译：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(inlined: () -&gt; <span class=\"type\">Unit</span>, <span class=\"keyword\">noinline</span> notInlined:() -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><ul>\n<li>匿名函数的特点是可以明确指定其返回值类型。</li>\n<li>它和常规函数的定义几乎相似。他们的区别在于，匿名函数没有函数名。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常规函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(x : <span class=\"type\">Int</span> , y : <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span> = x + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匿名函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(x : <span class=\"type\">Int</span> , y : <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span> = x + y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h4><p><code>Lambda</code> 表达式的本质是 <code>匿名函数</code>，因为在其底层实现中还是通过匿名函数来实现的。但是我们在用的时候不必关心其底层实现。不过 Lambda 的出现确实是减少了代码量的编写，同时也使代码变得更加简洁明了。</p>\n<p><strong>1、Lambda 的特点：</strong></p>\n<ul>\n<li>Lambda 表达式总是被大括号括着。</li>\n<li>其参数（如果存在）在符号 “-&gt;” 之前声明（参数类型可以省略）。</li>\n<li>函数体（如果存在）在符号 “-&gt;” 后面。</li>\n</ul>\n<p><strong>2、Lambda 语法：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、无参数的情况：</span><br><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> 变量名 = &#123; 操作的代码 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;无参数&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lambda 代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFun1 = &#123; println(<span class=\"string\">&quot;无参数&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun1() <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -------------------------------------------</span></span><br><span class=\"line\"><span class=\"number\">2</span>、有参数的情况：</span><br><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> 变量名 : (参数的类型，参数类型，...) -&gt; 返回值类型 = &#123;参数<span class=\"number\">1</span>，参数<span class=\"number\">2</span>，... -&gt; 操作参数的代码 &#125;</span><br><span class=\"line\">可等价于</span><br><span class=\"line\"><span class=\"comment\">// 此种写法：即表达式的返回值类型会根据操作的代码自推导出来。</span></span><br><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> 变量名 = &#123; 参数<span class=\"number\">1</span> ： 类型，参数<span class=\"number\">2</span> : 类型, ... -&gt; 操作参数的代码 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun2</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lambda</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFun2: (<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span> = &#123; a, b -&gt; a + b &#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFun2 = &#123; a: <span class=\"built_in\">Int</span>, b: <span class=\"built_in\">Int</span> -&gt; a + b &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun2(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -------------------------------------------</span></span><br><span class=\"line\"><span class=\"number\">3</span>、lambda 表达式作为函数中的参数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(a : <span class=\"type\">Int</span>, 参数名 : (参数1 ： 类型，参数2 : 类型, ... ) -&gt; 表达式返回类型)</span></span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun3</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lambda</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun33</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: (<span class=\"type\">num1</span>: <span class=\"type\">Int</span>, <span class=\"type\">num2</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b.invoke(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun33(<span class=\"number\">10</span>, &#123; num1: <span class=\"built_in\">Int</span>, num2: <span class=\"built_in\">Int</span> -&gt; num1 + num2 &#125;) <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>invoke() 函数：表示为通过函数变量调用自身，因为上面例子中的变量 b 是一个匿名函数。</p>\n</blockquote>\n<p><strong>3、it</strong></p>\n<p>当一个高阶函数中 Lambda 表达式的参数只有一个的时候可以使用 it 来使用此参数。it 可表示为单个参数的隐式名称，是 Kotlin 语言约定的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> arr = intArrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">arr.forEach &#123;</span><br><span class=\"line\">    sum += it</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、下划线（_）</strong></p>\n<p>在使用 Lambda 表达式的时候，可以用下划线 （_） 表示未使用的参数，表示不处理这个参数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = mapOf(<span class=\"string\">&quot;key1&quot;</span> to <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span> to <span class=\"string\">&quot;value2&quot;</span>, <span class=\"string\">&quot;key3&quot;</span> to <span class=\"string\">&quot;value3&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 不需要 key 的时候</span></span><br><span class=\"line\">map.forEach &#123; _, value -&gt;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;<span class=\"variable\">$value</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、带接收者的函数字面值</strong></p>\n<p>在 Kotlin 中，提供了指定的接受者对象调用 Lambda 表达式的功能。在函数字面值的函数体中，可以调用该接收者对象上的方法而无需任何额外的限定符。它类似于扩展函数，它允许在函数体内访问接收者对象的成员。</p>\n<p><strong>5.1、匿名函数作为接收者类型</strong></p>\n<p>匿名函数语法允许你直接指定函数字面值的接收者类型，如果你需要使用带接收者的函数类型声明一个变量，并在之后使用它，这将非常有用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> add = <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"params\">( other : <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span> = <span class=\"keyword\">this</span> + other</span><br><span class=\"line\">println(<span class=\"number\">2.</span>add(<span class=\"number\">3</span>)) <span class=\"comment\">// 输出 5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>5.2、Lambda 表达式作为接收者类型</strong></p>\n<p>要用 Lambda 表达式作为接收者类型的前提是<strong>接收者类型可以从上下文中推断出来</strong>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HTML</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">body</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun5</span><span class=\"params\">(<span class=\"keyword\">init</span>: <span class=\"type\">HTML</span>.() -&gt; <span class=\"type\">Unit</span>)</span></span>: HTML &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> html = HTML() <span class=\"comment\">// 创建接收者对象</span></span><br><span class=\"line\">    html.<span class=\"keyword\">init</span>()       <span class=\"comment\">// 将该接收者对象传给该 lambda</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test111</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun5 &#123; <span class=\"comment\">// 带接收者的 lambda 由此开始</span></span><br><span class=\"line\">        body() <span class=\"comment\">// 调用该接收者对象的一个方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、闭包</strong></p>\n<p>所谓闭包，即是函数中包含函数，这里的函数我们可以包含（Lambda 表达式，匿名函数，局部函数，对象表达式）。我们熟知，函数式编程是现在和未来良好的一种编程趋势，故而 Kotlin 也有这一个特性。Java 是不支持闭包的。</p>\n<p><strong>6.1、携带状态</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让函数返回一个函数，并携带状态值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun4</span><span class=\"params\">(b: <span class=\"type\">Int</span>)</span></span>: () -&gt; <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        a++</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = myFun4(<span class=\"number\">3</span>)</span><br><span class=\"line\">    println(t()) <span class=\"comment\">// 输出 7</span></span><br><span class=\"line\">    println(t()) <span class=\"comment\">// 输出 8</span></span><br><span class=\"line\">    println(t()) <span class=\"comment\">// 输出 9</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6.2、引用外部变量，并改变外部变量的值</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum : <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> arr = arrayOf(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">arr.filter &#123; it &lt; <span class=\"number\">7</span>  &#125;.forEach &#123; sum += it &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println(sum) <span class=\"comment\">// 输出 9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>7、Lambda 表达式简写</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果函数的最后⼀个参数是 lambda, 那么 lambda 表达式可以放在圆括号之外：</span></span><br><span class=\"line\">lessons.forEach()&#123; lesson : Lesson -&gt;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你的函数传⼊参数只有⼀个 lambda 的话，那么⼩括号可以省略的：</span></span><br><span class=\"line\">lessons.forEach &#123; lesson : Lesson -&gt;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 lambda 表达式只有⼀个参数，那么可以省略，通过隐式的 it 来访问：</span></span><br><span class=\"line\">lessons.forEach &#123; <span class=\"comment\">// it</span></span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>在 <code>Kotlin</code> 中，高阶函数即指：将函数用作一个函数的参数或者返回值的函数。</p>\n<p><strong>将函数用作函数参数的情况</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sumBy 函数的源码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> CharSequence.<span class=\"title\">sumBy</span><span class=\"params\">(selector: (<span class=\"type\">Char</span>) -&gt; <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        sum += selector(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = str.sumBy &#123; it.toInt() &#125;</span><br><span class=\"line\">    println(sum) <span class=\"comment\">// 输出 294。因为字符 a 对应的值为 97，b 对应 98，c 对应 99。故而该值即为 97 + 98 + 99 = 294</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>将函数用作一个函数的返回值</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">lock</span><span class=\"params\">(lock: <span class=\"type\">Lock</span>, body: () -&gt; <span class=\"type\">T</span>)</span></span>: T &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> body()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toBeSynchronized</span><span class=\"params\">()</span></span> = sharedResource.operation()</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, ::toBeSynchronized) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面的写法也可以写作：</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, &#123;sharedResource.operation()&#125; )</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> result = lock(lock) &#123;</span><br><span class=\"line\">    sharedResource.operation()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>::toBeSynchronized 即为对函数 toBeSynchronized() 的引用。</p>\n</blockquote>\n<p><strong>自定义高阶函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义高阶函数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calculation</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>, result: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result(num1, num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result1 = calculation(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &#123; num1, num2 -&gt;</span><br><span class=\"line\">        num1 + num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result2 = calculation(<span class=\"number\">10</span>, <span class=\"number\">20</span>) &#123; num1, num2 -&gt;</span><br><span class=\"line\">        num1 * num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;result1 = <span class=\"variable\">$result1</span>&quot;</span>) <span class=\"comment\">// 输出：3</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;result2 = <span class=\"variable\">$result2</span>&quot;</span>) <span class=\"comment\">// 输出：200</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>开发中常用的一个例子</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ParamView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(context: Context, attrs: AttributeSet? = <span class=\"literal\">null</span>, defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>) : LinearLayout(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> onParamValueClickListener: (() -&gt; <span class=\"built_in\">Unit</span>)? = <span class=\"literal\">null</span> <span class=\"comment\">// 定义一个点击事件，给外部处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        tvParamValue?.setOnClickListener &#123;</span><br><span class=\"line\">            onParamValueClickListener?.invoke()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外部 ParamView 控件处理点击事件</span></span><br><span class=\"line\">paramView?.onParamValueClickListener = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理业务逻辑...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标准高阶函数\"><a href=\"#标准高阶函数\" class=\"headerlink\" title=\"标准高阶函数\"></a>标准高阶函数</h4><p>Standard.kt 文件中提供了一系列标准的高阶函数。</p>\n<p><strong>函数特点汇总</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">接收者（this）</th>\n<th align=\"left\">传参（it）</th>\n<th align=\"left\">返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">run()</td>\n<td align=\"left\">当前类</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">T.run()</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">with()</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">T.let()</td>\n<td align=\"left\">当前类</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">T.also()</td>\n<td align=\"left\">当前类</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">类T</td>\n</tr>\n<tr>\n<td align=\"left\">T.apply()</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">类T</td>\n</tr>\n</tbody></table>\n<p>实际应用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStandard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">&quot;MyStandard&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// run()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runDemo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">        run &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> name = <span class=\"string\">&quot;BB&quot;</span></span><br><span class=\"line\">            Log.e(TAG, name) <span class=\"comment\">// BB</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, name) <span class=\"comment\">// AA</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.run()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runDemo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.run &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;字符串的长度为 <span class=\"variable\">$length</span>&quot;</span>) <span class=\"comment\">// 字符串的长度为 6</span></span><br><span class=\"line\">            substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// with()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">withDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = with(<span class=\"string\">&quot;ABCDEF&quot;</span>) &#123;</span><br><span class=\"line\">            substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.let()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">letDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.let &#123;</span><br><span class=\"line\">            it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.also()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">alsoDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.also &#123;</span><br><span class=\"line\">            it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.apply()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">applyDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.apply &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.substring(<span class=\"number\">2</span>) <span class=\"comment\">// this 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常，T.run()、T.let()、T.also() 和 T.apply() 四个用的比较多，使用时可以通过简单的规则作出⼀些判断：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(需要返回自身)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 <span class=\"keyword\">this</span> 作为参数)&#123;</span><br><span class=\"line\">        选择 apply</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 it 作为参数)&#123;</span><br><span class=\"line\">        选择 also</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(不需要返回自身)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 <span class=\"keyword\">this</span> 作为参数)&#123;</span><br><span class=\"line\">        选择 run</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 it 作为参数)&#123;</span><br><span class=\"line\">        选择 let</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实化类型参数\"><a href=\"#实化类型参数\" class=\"headerlink\" title=\"实化类型参数\"></a>实化类型参数</h3><p><strong>泛型类型擦除</strong>：JVM 中的泛型一般是通过类型擦除实现的，也就是说泛型类实例的类型实参在编译时被擦除，在运行时是不会被保留的。基于这样实现的做法是有历史原因的，最大的原因之一是为了兼容 JDK1.5 之前的版本，当然泛型类型擦除也是有好处的，在运行时丢弃了一些类型实参的信息，对于内存占用也会减少很多。</p>\n<p>正因为泛型类型擦除原因在业界 Java 的泛型又称伪泛型。因为编译后所有泛型的类型实参类型都会被替换成 Object 类型或者泛型类型形参指定上界约束类的类型。例如： List<Float>、List<String>、List<Student> 在 JVM 运行时 Float、String、Student 都被替换成 Object 类型，如果泛型定义是 List<T extends Student> 那么运行时 T 被替换成 Student 类型。</p>\n<p>Kotlin 和 Java 都存在泛型类型擦除的问题，但 Kotlin 可以通过 <code>inline</code> 函数保证使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为<strong>实化</strong>，对应需要使用 <strong>reified</strong> 关键字。因此，我们可以通过配合 <code>inline + reified</code> 达到「真泛型」的效果。</p>\n<p><strong>1、满足实化类型参数函数的必要条件</strong></p>\n<ul>\n<li>必须是 inline 内联函数，使用 inline 关键字修饰。</li>\n<li>泛型类定义泛型形参时必须使用 reified 关键字修饰。</li>\n</ul>\n<p><strong>2、带实化类型参数的函数基本定义</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">isInstanceOf</span><span class=\"params\">(value: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Boolean</span> = value <span class=\"keyword\">is</span> T</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> obj = User()</span><br><span class=\"line\"><span class=\"keyword\">val</span> instanceOf = isInstanceOf&lt;User&gt;(obj) <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<p>对于以上例子，我们可以说类型形参 T 是泛型函数 isInstanceOf 的实化类型参数。</p>\n<p><strong>3、原理描述</strong></p>\n<p>编译器把实现内联函数的字节码动态插入到每次的调用点。那么实化的原理正是基于这个机制，<strong>每次调用带实化类型参数的函数时，编译器都知道此次调用中作为泛型类型实参的具体类型。所以编译器只要在每次调用时生成对应不同类型实参调用的字节码插入到调用点即可。</strong> 总之一句话很简单，就是带实化参数的函数每次调用都生成不同类型实参的字节码，动态插入到调用点。由于生成的字节码的类型实参引用了具体的类型，而不是类型参数所以不会存在擦除问题。</p>\n<p><strong>4、实化类型参数函数不能在 Java 中调用</strong></p>\n<p>Kotlin 的实化类型参数函数主要得益于 inline 函数的内联功能，虽然 Java 可以调用普通的内联函数但是失去了内联功能，失去内联功能也就意味实化操作也就化为泡影。</p>\n<p><strong>5、实化类型参数函数的使用限制</strong></p>\n<ul>\n<li>不能使用非实化类型形参作为类型实参调用带实化类型参数的函数。</li>\n<li>不能使用实化类型参数创建该类型参数的实例对象。</li>\n<li>不能调用实化类型参数的伴生对象方法。</li>\n<li>reified 关键字只能标记实化类型参数的内联函数，不能作用于类和属性。</li>\n</ul>\n<p><strong>6、实化类型参数函数使用例子</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>: T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RETROFIT.create(T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> api = create&lt;API&gt;() <span class=\"comment\">// 调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> Gson.<span class=\"title\">fromJson</span><span class=\"params\">(json: <span class=\"type\">String</span>)</span></span> = fromJson(json, T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = Gson().fromJson&lt;User&gt;(json) <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类与继承\"><a href=\"#类与继承\" class=\"headerlink\" title=\"类与继承\"></a>类与继承</h3><p>Kotlin 中也使用 class 关键字定义类，所有类都继承于 Any 类，类似于 Java 中 Object 类的概念。类实例化的形式也与 Java 一样，但是去掉了 new 关键字。</p>\n<h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>类的构造器分为主构造器（primary constructor）和次级构造器（secondary constructor），前者只能有一个，而后者可以有多个。如果两者都未指定，则默认为无参数的主构造器。</p>\n<p>主构造器是属于类头的一部分，用 constructor 关键字定义，如果没有被「可见性修饰符」或者「注解」标注，constructor 可省略。由于主构造器不能包含任何代码，初始化代码需要单独写在 init 代码块中，主构造器的参数只能在 init 代码块和变量初始化时使用。</p>\n<p>次级构造器也是用 constructor 关键字定义，必须要直接或间接代理主构造器。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(name: String) &#123; <span class=\"comment\">// 主构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(id: <span class=\"built_in\">Int</span>, name: String) : <span class=\"keyword\">this</span>(name) &#123; <span class=\"comment\">// 次级构造器</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主构造器中的参数加上 val 或者 var 修饰，那么参数就变成类的成员变量，如果参数和类原来的成员变量一样，那么对应原来的成员变量就要去掉。因此，以上代码一般可以简化为以下代码。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> id: <span class=\"built_in\">Int</span>, <span class=\"keyword\">val</span> name: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>类继承使用符号 “:” 表示，接口实现也一样，不做原本 Java 中的 extends 和 implement 关键字区分。Kotlin 中取消了 final 关键字，所有类默认都是被 final 修饰，不能被继承。Kotlin 中新增了 open 关键字，被 open 或者 abstract 修饰的类才可以被继承。</p>\n<h4 id=\"单例与伴随对象\"><a href=\"#单例与伴随对象\" class=\"headerlink\" title=\"单例与伴随对象\"></a>单例与伴随对象</h4><p>Kotlin 使用关键词 object 定义单例类。这里需要注意，是全小写。单例类访问直接使用类名，无构造函数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> LogUtil &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">d</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;tag&quot;</span>, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可通过 AS 工具栏 Tools –&gt; Kotlin –&gt; Show Kotlin Bytecode, 点击右侧的 Decompile 来把当前 Kotlin 代码转换为 Java 代码，来验证以上 object 对象是否转换成 Java 中的单例类。</p>\n</blockquote>\n<p>Java 中使用 static 标识一个类里的静态属性或方法。Kotlin 中没有 static 关键字，改为使用伴随对象，用 companion 修饰单例类 object, 来实现静态属性或方法功能。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> USER_NAME = <span class=\"string\">&quot;user_name&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> PASSWORD = <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveLoginInfo</span><span class=\"params\">(userName: <span class=\"type\">String</span>, password: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LoginCache.saveLoginInfo(<span class=\"string\">&quot;ZhangSan&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>) <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h4><p>在 Kotlin 中，内部类默认是静态内部类，通过 <code>inner</code> 关键字声明为嵌套内部类。</p>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><p>形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> : OnItemCLickListener &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btnLogin.setOnClickListener(<span class=\"keyword\">object</span> :View.OnClickListener&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClick</span><span class=\"params\">(v: <span class=\"type\">View</span>?)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上匿名内部类转换成的 lambda 表达式如下：</span></span><br><span class=\"line\">btnLogin.setOnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><ul>\n<li>const 必须修饰 val。</li>\n<li>const 只允许在 top-level 级别和 object 中声明。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> LogUtil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG: String = <span class=\"string\">&quot;LogUtil&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: String = <span class=\"string\">&quot;msg&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上 Kotlin 代码转换成的 Java 代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略了部分不大相关代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;LogUtil&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title function_\">getMsg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，const val 可见性为 public static final, 可以直接访问。val 可见性为 private static final, 并且 val 会生成对应属性的 getter 方法，通过方法调用访问。当定义常量时，出于效率考虑，应该使用 const val 方式，避免频繁函数调用。const 修饰的静态变量又称为<strong>编译器常量</strong>。</p>\n<h3 id=\"声明抽象类-接口-枚举-注解\"><a href=\"#声明抽象类-接口-枚举-注解\" class=\"headerlink\" title=\"声明抽象类&#x2F;接口&#x2F;枚举&#x2F;注解\"></a>声明抽象类&#x2F;接口&#x2F;枚举&#x2F;注解</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span></span><br><span class=\"line\"><span class=\"comment\">// 声明接⼝</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span></span><br><span class=\"line\"><span class=\"comment\">// 声明注解</span></span><br><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"keyword\">class</span></span><br><span class=\"line\"><span class=\"comment\">// 声明枚举</span></span><br><span class=\"line\">enmu <span class=\"keyword\">class</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"受检异常\"><a href=\"#受检异常\" class=\"headerlink\" title=\"受检异常\"></a>受检异常</h3><p>Kotlin 不需要使用 <code>try-catch</code> 强制捕获异常。</p>\n<h3 id=\"获取-Class-对象\"><a href=\"#获取-Class-对象\" class=\"headerlink\" title=\"获取 Class 对象\"></a>获取 Class 对象</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 [类名::<span class=\"keyword\">class</span>] 获取的是 Kotlin 的类型 KClass</span><br><span class=\"line\">使用 [类名::<span class=\"keyword\">class</span>.java] 获取的是 Java 的类型</span><br><span class=\"line\"></span><br><span class=\"line\">startActivity(Intent(<span class=\"keyword\">this</span>, MainActivity::<span class=\"keyword\">class</span>.java))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setter-getter\"><a href=\"#setter-getter\" class=\"headerlink\" title=\"setter&#x2F;getter\"></a>setter&#x2F;getter</h3><p>在 Kotlin 声明属性的时候（没有使用 private 修饰），会自动生成一个私有属性和一对公开的 setter&#x2F;getter 方法。在写 setter&#x2F;getter 的时候使⽤ field 来代替内部的私有属性（防⽌递归栈溢出）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field <span class=\"comment\">// 默认实现方式，可省略</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123; <span class=\"comment\">// 默认实现方式，可省略</span></span><br><span class=\"line\">            field = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"number\">18</span> <span class=\"comment\">// 获取的值一直都是 18，不会改变</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            field = <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JvmXxx-相关注解\"><a href=\"#JvmXxx-相关注解\" class=\"headerlink\" title=\"JvmXxx 相关注解\"></a>JvmXxx 相关注解</h3><h4 id=\"JvmField\"><a href=\"#JvmField\" class=\"headerlink\" title=\"JvmField\"></a>JvmField</h4><p>通过 <code>@JvmField</code> 注解可以让编译器只生成一个 public 的成员属性，不生成对应的 setter&#x2F;getter 方法。</p>\n<h4 id=\"JvmName\"><a href=\"#JvmName\" class=\"headerlink\" title=\"JvmName\"></a>JvmName</h4><p>顶层函数在文件中定义函数和属性，会直接生成静态的成员，在 Java 中通过「文件名Kt」来访问，同时可以通过 <code>@file:JvmName</code> 注解来修改这个类名。注解要写在包名前面才会起作用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@file:JvmName</span>(<span class=\"string\">&quot;AppCache&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.zch.kotlin.biz1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mToken: String? = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveToken</span><span class=\"params\">(token: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">    mToken = token</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java 中访问方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    AppCacheKt.saveToken(<span class=\"string\">&quot;abc123&quot;</span>); <span class=\"comment\">// 原来的访问方式</span></span><br><span class=\"line\">    AppCache.saveToken(<span class=\"string\">&quot;abc123&quot;</span>); <span class=\"comment\">// 加了 @file:JvmName 注解后的访问方式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JvmStatic\"><a href=\"#JvmStatic\" class=\"headerlink\" title=\"JvmStatic\"></a>JvmStatic</h4><p>如果将命名对象或伴生对象中定义的函数注解为 <code>@JvmStatic</code> ，Kotlin 会为这些函数生成静态方法。</p>\n<p><code>命名对象中的 @JvmStatic</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> SizeUtil &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">dp2px</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sp2px</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSizeUtil</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 之前的访问方式</span></span><br><span class=\"line\">    SizeUtil.INSTANCE.dp2px();</span><br><span class=\"line\">    SizeUtil.INSTANCE.sp2px();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加了 @JvmStatic 注解后，dp2px 变成了静态方法</span></span><br><span class=\"line\">    SizeUtil.dp2px();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>伴生对象中的 @JvmStatic</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayYes</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayNo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUtil</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 之前的访问方式</span></span><br><span class=\"line\">    Util.Companion.sayYes();</span><br><span class=\"line\">    Util.Companion.sayNo();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加了 <span class=\"doctag\">@JvmStatic</span> 注解后，Util 生成了静态方法 sayYes，</span></span><br><span class=\"line\"><span class=\"comment\">     * 该静态方法直接访问 Companion 的 sayYes()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Util.sayYes();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>@JvmStatic</code> 注解也可以应用于对象或伴生对象的属性，使其 getter 和 setter 方法成为该对象或包含伴生对象的类的静态成员。</p>\n</blockquote>\n<h4 id=\"JvmOverloads\"><a href=\"#JvmOverloads\" class=\"headerlink\" title=\"JvmOverloads\"></a>JvmOverloads</h4><p>在 Kotlin 中调用默认参数值的方法或者构造函数是完全没问题的，Java 中调用相应 Kotlin 方法时，是必须输入所有参数的值的，Kotlin 中默认参数我们无法使用。而当加上 <code>@JvmOverloads</code>, Kotlin 编译器生成的字节码中有对应的重载方法，我们就可以通过 Java 的重载方式来使用 Kotlin 的代码了，不必要输入所有的参数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ParamView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(context: Context, attrs: AttributeSet? = <span class=\"literal\">null</span>, defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>) : LinearLayout(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上 Kotlin 的自定义控件加上 <code>@JvmOverloads</code> 后，相当于 Java 中的以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParamView</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LinearLayout</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ParamView</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(context, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ParamView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ParamView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"type\">int</span> defStyleAttr)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Kotlin 中构造函数、顶级函数、类中方法，静态方法（@Jvmstatic 修饰）均可采用 <code>@JvmOverloads</code> 生成对应重载方法。</p>\n</blockquote>\n<h3 id=\"注解使用处目标\"><a href=\"#注解使用处目标\" class=\"headerlink\" title=\"注解使用处目标\"></a>注解使用处目标</h3><p>当某个元素可能会包含多种内容（例如构造属性，成员属性），使用注解时可以通过「注解使⽤处⽬标」，让注解对⽬标发⽣作⽤，例如 @file: 、 @get: 、@set: 等。  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> : <span class=\"type\">Application</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">        <span class=\"meta\">@get:JvmName</span>(<span class=\"string\">&quot;instance&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> instance: Application</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate()</span><br><span class=\"line\">        instance = <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App.Companion.getInstance(); <span class=\"comment\">// java 中原来调用方式</span></span><br><span class=\"line\">App.instance(); <span class=\"comment\">// java 中现在调用方式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Elvis-操作符\"><a href=\"#Elvis-操作符\" class=\"headerlink\" title=\"Elvis 操作符\"></a>Elvis 操作符</h3><p>可通过 <code>?:</code> 的操作来简化 <code>if null</code> 操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lesson.date 为空时使⽤默认值</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> date = lesson.date?: <span class=\"string\">&quot;⽇期待定&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// lesson.state 为空时提前返回函数</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> state = lesson.state?: <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"comment\">// lesson.content 为空时抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> content = lesson.content ?: <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">&quot;content expected&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"空指针安全\"><a href=\"#空指针安全\" class=\"headerlink\" title=\"空指针安全\"></a>空指针安全</h3><p>Kotlin 中，当我们定义一个变量时，其默认就是非空类型。如果你直接尝试给他赋值为 null, 编译器会直接报错。Kotlin 中将符号 “?” 定义为安全调用操作符。变量类型后面跟 ? 号定义，表明这是一个可空类型。同样的，在调用子属性和函数时，也可以用字符 ? 进行安全调用。Kotlin 的编译器会在写代码时就检查非空情况。</p>\n<p>Kotlin 还提供 “!!” 双感叹号操作符来强制调用对象的属性和方法，无视其是否非空。这是一个挺危险的操作符，除非有特殊需求，否则为了远离 NPE, 还是少用为妙。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tvContent: TextView <span class=\"comment\">// 非空类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tvContent: TextView? <span class=\"comment\">// 可空类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">!! <span class=\"comment\">// 强行调用符</span></span><br><span class=\"line\">? <span class=\"comment\">// 安全调用符</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1: String = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">s1 = <span class=\"literal\">null</span> <span class=\"comment\">// 这里编译器会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2: String? = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">s2 = <span class=\"literal\">null</span> <span class=\"comment\">// 编译器不会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> l1 = s1.length <span class=\"comment\">// 可正常编译</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> l2 = s2.length <span class=\"comment\">// 没有做非空判断，编译器检查报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (s2 != <span class=\"literal\">null</span>) s2.length <span class=\"comment\">// Java 式的判空方案</span></span><br><span class=\"line\">s2?.length <span class=\"comment\">// Kotlin 的安全调用操作符 ?。当 s2 为 null 时，s2?.length 也为 null</span></span><br><span class=\"line\"></span><br><span class=\"line\">s2!!.length <span class=\"comment\">// 可能会导致 NPE</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lateinit-关键字\"><a href=\"#lateinit-关键字\" class=\"headerlink\" title=\"lateinit 关键字\"></a>lateinit 关键字</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、lateinit 只能修饰 var 可读可写变量。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、lateinit 关键字声明的变量类型必须是不可空类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、lateinit 声明的变量不能有初始值。</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、lateinit 声明的变量不能是基本数据类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * 5、在构造器中初始化的属性不需要 lateinit 关键字。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> tvContent: TextView</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h3><p>数据类通常都是由多个属性和对应的 getter、setter 组成。当有大量多属性时，不仅这些类会因为大量的 getter 和 setter 方法而行数爆炸，也使整个工程方法数骤增。</p>\n<p>Kotlin 中做了这层特性优化，提供了数据类的简单实现。不用再写 getter、setter 方法，这些都由编译器背后去做，你得到的是一个清爽干净的数据类。数据类用 <code>data class</code> 声明。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>把这个数据类反编译成 Java 代码可知，数据类除了为我们生成了 getter、setter（val 声明的变量不生成 setter 方法）、构造函数外，还有以下方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">equals() / hashCode()</span><br><span class=\"line\">toString()</span><br><span class=\"line\">componentN()...</span><br><span class=\"line\">copy()</span><br></pre></td></tr></table></figure>\n\n<p><code>copy 函数</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Student copy(int id, String name, int age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new Student(id, name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当要复制一个对象，只改变一些属性，但其余不变，copy() 就是为此而生。</p>\n<p><code>componentN 函数-解构声明（Destructuring Declarations）</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> int component1() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String component2() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> int component3() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器为数据类（data class）自动声明 componentN() 函数，可直接用解构声明。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> student = Student(<span class=\"number\">101</span>, <span class=\"string\">&quot;ZhangSan&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> (id, name, age) = student <span class=\"comment\">// 自动赋值给 id, name, age</span></span><br><span class=\"line\">println(<span class=\"string\">&quot;id=<span class=\"variable\">$id</span>, name=<span class=\"variable\">$name</span>, age=<span class=\"variable\">$age</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相等性\"><a href=\"#相等性\" class=\"headerlink\" title=\"相等性\"></a>相等性</h3><p><code>两个等号==和三个等号===</code></p>\n<p>两个等号 <code>==</code>：比较的是<strong>对象的内容</strong>是否相同，相当于 Java 的 equals()。<code>==</code> 的否定形式为 <code>!=</code> 。</p>\n<p>三个等号 <code>===</code>：比较的是<strong>对象的地址</strong>是否相同（即判断是否为同一对象），相当于 Java 的 &#x3D;&#x3D;。<code>===</code> 的否定形式为 <code>!==</code> 。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> student1 = Student(<span class=\"number\">101</span>, <span class=\"string\">&quot;ZhangSan&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> student2 = Student(<span class=\"number\">101</span>, <span class=\"string\">&quot;ZhangSan&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (student1 == student2) &#123; <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (student1 === student2) &#123; <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"operator\"><a href=\"#operator\" class=\"headerlink\" title=\"operator\"></a>operator</h3><p>通过 operator 修饰「特定函数名」的函数，例如 plus 、get, 可以达到重载运算符的效果。</p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>翻译为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a + b</td>\n<td>a.plus(b)</td>\n</tr>\n<tr>\n<td>a - b</td>\n<td>a.minus(b)</td>\n</tr>\n<tr>\n<td>a * b</td>\n<td>a.times(b)</td>\n</tr>\n<tr>\n<td>a &#x2F; b</td>\n<td>a.div(b)</td>\n</tr>\n</tbody></table>\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>委托，也就是委托模式，它是 23 种经典设计模式中的一种，又名<code>代理模式</code>，在委托模式中，有 2 个对象参与同一个请求的处理，接受请求的对象将请求委托给另一个对象来处理。委托模式中，有三个角色：约束、委托对象和被委托对象。Kotlin 直接支持委托模式，更加优雅，简洁。Kotlin 通过关键字 <code>by</code> 实现委托。</p>\n<ul>\n<li><strong>约束</strong>：约束是接口或者抽象类，它定义了通用的业务类型，也就是需要被代理的业务。</li>\n<li><strong>被委托对象</strong>：具体的业务逻辑执行者。</li>\n<li><strong>委托对象</strong>：负责对真正角色的应用，将约束类定义的业务委托给具体的委托对象。</li>\n</ul>\n<h4 id=\"类委托\"><a href=\"#类委托\" class=\"headerlink\" title=\"类委托\"></a>类委托</h4><p>类的委托即一个类中定义的方法实际是调用另一个类的对象的方法来实现的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 约束类，我们约定的业务</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IGamePlayer</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">play</span><span class=\"params\">()</span></span> <span class=\"comment\">// 打游戏</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被委托对象，实现了我们约定的业务</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RealGamePlayer</span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> name: String) : IGamePlayer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">play</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;name&#125;</span>开始打游戏&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 委托对象，通过关键字 by 建立委托类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DelegateGamePlayer</span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> player: IGamePlayer) : IGamePlayer <span class=\"keyword\">by</span> player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> realGamePlayer = RealGamePlayer(<span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> delegateGamePlayer = DelegateGamePlayer(realGamePlayer)</span><br><span class=\"line\">    delegateGamePlayer.play() <span class=\"comment\">// 输出：张三开始打游戏</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 DelegateGamePlayer 声明中，by 子句表示，将 player 保存在 DelegateGamePlayer 的对象实例内部，而且编译器将会生成继承自 IGamePlayer 接口的所有方法，并将调用转发给 player。</p>\n<blockquote>\n<p> 可以通过类委托的模式来减少继承。</p>\n</blockquote>\n<h4 id=\"属性委托\"><a href=\"#属性委托\" class=\"headerlink\" title=\"属性委托\"></a>属性委托</h4><p>属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类的属性统一管理。</p>\n<p>属性委托语法格式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> &lt;属性名&gt;: &lt;类型&gt; <span class=\"keyword\">by</span> &lt;表达式&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>var&#x2F;val：属性类型(可变&#x2F;只读)。</li>\n<li>属性名：属性名称。</li>\n<li>类型：属性的数据类型。</li>\n<li>表达式：委托代理类。</li>\n</ul>\n<p>by 关键字之后的表达式就是委托，属性的 get() 方法（以及 set() 方法）将被委托给这个对象的 getValue() 和 setValue() 方法。属性委托不必实现任何接口，但必须提供 getValue() 函数（对于 var 属性，还需要 setValue() 函数）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被委托类（委托代理类）</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类需要包含 getValue() 方法和 setValue() 方法，且参数 thisRef 为进行委托的类的对象，property 为进行委托的属性的对象。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Delegate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"variable\">$thisRef</span>, 这里委托了 <span class=\"subst\">$&#123;property.name&#125;</span> 属性&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"variable\">$thisRef</span> 的 <span class=\"subst\">$&#123;property.name&#125;</span> 属性赋值为 <span class=\"variable\">$value</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token: String <span class=\"keyword\">by</span> Delegate()</span><br><span class=\"line\">    println(token) <span class=\"comment\">// 访问该属性，调用 getValue() 函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    token = <span class=\"string\">&quot;xxx&quot;</span>   <span class=\"comment\">// 调用 setValue() 函数</span></span><br><span class=\"line\">    println(token)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的参数解释如下：</p>\n<ul>\n<li><code>thisRef</code> —— 必须与属性所有者类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型。</li>\n<li><code>property</code> —— 必须是类型 <code>KProperty&lt;*&gt;</code> 或其超类型。</li>\n<li><code>value</code> —— 必须与属性同类型或者是它的子类型。</li>\n</ul>\n<h4 id=\"属性委托的另一种实现方式\"><a href=\"#属性委托的另一种实现方式\" class=\"headerlink\" title=\"属性委托的另一种实现方式\"></a>属性委托的另一种实现方式</h4><p>Kotlin 标准库中声明了 2 个含所需 <code>operator</code> 方法的 <code>ReadOnlyProperty / ReadWriteProperty</code> 接口。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ReadOnlyProperty</span>&lt;<span class=\"type\">in R, out T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ReadWriteProperty</span>&lt;<span class=\"type\">in R, T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>被委托类</code> 实现这两个接口其中之一就可以了，<code>val</code> 属性实现 <code>ReadOnlyProperty</code>, <code>var</code> 属性实现 <code>ReadWriteProperty</code>。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Delegate2</span> : <span class=\"type\">ReadWriteProperty</span>&lt;<span class=\"type\">Any?, String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> token2: String <span class=\"keyword\">by</span> Delegate2()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标准库中提供的几个委托\"><a href=\"#标准库中提供的几个委托\" class=\"headerlink\" title=\"标准库中提供的几个委托\"></a>标准库中提供的几个委托</h4><ul>\n<li>延迟属性（lazy）: 其值只在首次访问时计算。</li>\n<li>可观察属性（observable）: 监听器会收到有关此属性变更的通知。</li>\n<li>把多个属性储存在一个映射（map）中，而不是每个存在单独的字段中。</li>\n</ul>\n<p><strong>1、延迟属性 lazy</strong></p>\n<p>lazy() 是一个函数，接受一个 Lambda 表达式作为参数，返回一个 Lazy <T> 实例的函数，返回的实例可以作为实现延迟属性的委托：第一次调用 get() 会执行已传递给 lazy() 的 lamda 表达式并记录结果，后续调用 get() 只是返回记录的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;computed!&quot;</span>) <span class=\"comment\">// 第一次调用输出，第二次调用不执行</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    println(lazyValue) <span class=\"comment\">// 第一次执行，执行两次输出表达式</span></span><br><span class=\"line\">    println(lazyValue) <span class=\"comment\">// 第二次执行，只输出返回值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行输出结果</span></span><br><span class=\"line\">computed!</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、可观察属性 Observable</strong></p>\n<p>observable 可以用于实现观察者模式。</p>\n<p>Delegates.observable() 函数接受两个参数：第一个是初始化值，第二个是属性值被修改时的回调处理器 onChange。回调处理器有三个参数：被赋值的属性、旧值和新值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> kotlin.properties.Delegates</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> Delegates.observable(<span class=\"string\">&quot;A&quot;</span>) &#123; property, oldValue, newValue -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;旧值：<span class=\"variable\">$oldValue</span> -&gt; 新值：<span class=\"variable\">$newValue</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> user = User()</span><br><span class=\"line\">    user.name = <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">    user.name = <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行输出结果</span></span><br><span class=\"line\">旧值：A -&gt; 新值：B</span><br><span class=\"line\">旧值：B -&gt; 新值：C</span><br></pre></td></tr></table></figure>\n\n<p><strong>vetoable 函数</strong>：<code>vetoable</code> 与 <code>observable</code> 一样，可以观察属性值的变化，不同的是，<code>vetoable</code> 可以通过<code>处理器函数来决定属性值是否生效</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个 Int 类型的属性 vetoableProp, 如果新的值比旧值大，则生效，否则不生效。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vetoableProp: <span class=\"built_in\">Int</span> <span class=\"keyword\">by</span> Delegates.vetoable(<span class=\"number\">0</span>)&#123; _, oldValue, newValue -&gt;</span><br><span class=\"line\">    <span class=\"comment\">// 如果新的值大于旧值，则生效</span></span><br><span class=\"line\">    newValue &gt; oldValue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、把属性储存在映射中</strong></p>\n<p>一个常见的用例是在一个映射（map）里存储属性的值。 这经常出现在像解析 JSON 或者做其他“动态”事情的应用中。 在这种情况下，你可以使用映射实例自身作为委托来实现委托属性。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> map: Map&lt;String, Any?&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String <span class=\"keyword\">by</span> map</span><br><span class=\"line\">    <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>  <span class=\"keyword\">by</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数接受一个映射参数</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> user = User(mapOf(</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;age&quot;</span>  to <span class=\"number\">18</span></span><br><span class=\"line\">    ))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取映射值</span></span><br><span class=\"line\">    println(user.name)</span><br><span class=\"line\">    println(user.age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集合中函数式-API-操作符\"><a href=\"#集合中函数式-API-操作符\" class=\"headerlink\" title=\"集合中函数式 API 操作符\"></a>集合中函数式 API 操作符</h3><h4 id=\"筛选过滤类\"><a href=\"#筛选过滤类\" class=\"headerlink\" title=\"筛选过滤类\"></a>筛选过滤类</h4><h5 id=\"slice-系列\"><a href=\"#slice-系列\" class=\"headerlink\" title=\"slice 系列\"></a>slice 系列</h5><p>操作符可以取集合中一部分元素或者某个元素，最后组合成一个新元素。</p>\n<ul>\n<li><p>**<code>slice(indices: IntRange)</code>**：指定切片的起始位置和终止位置，将范围内的元素切出加入到新集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).slice(IntRange(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">println(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>slice(indices: Iterable&lt;Int&gt;)</code>**：指定下标分别切出对应的元素，放入新集合中。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).slice(IntRange(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">println(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> list2 = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).slice(listOf(<span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">println(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"filter-系列\"><a href=\"#filter-系列\" class=\"headerlink\" title=\"filter 系列\"></a>filter 系列</h5><ul>\n<li><p>**<code>filter(predicate: (T) -&gt; Boolean)</code>**：从一个集合筛选出符合条件的元素，并以一个新集合返回。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).filter &#123; it % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">println(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterTo(destination: C, predicate: (T) -&gt; Boolean)</code>**：从多个集合筛选出符合条件的元素，并最终用一个集合进行收集从每个集合筛选出的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numberList1 = listOf(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> numberList2 = listOf(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> numberList3 = listOf(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// filterTo 的 destination 是一个可变集合类型，所以这里使用 mutableListOf 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> newNumberList = mutableListOf&lt;<span class=\"built_in\">Int</span>&gt;().apply &#123;</span><br><span class=\"line\">    numberList1.filterTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        it % <span class=\"number\">5</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    numberList2.filterTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        it % <span class=\"number\">5</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    numberList3.filterTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        it % <span class=\"number\">20</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(newNumberList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>, <span class=\"number\">20</span>, <span class=\"number\">40</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIndexed(predicate: (index: Int, T) -&gt; Boolean)</code>**：需要集合元素 <code>index</code> 参与筛选条件。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = listOf(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>).filterIndexed &#123; index, item -&gt;</span><br><span class=\"line\">    index &gt; <span class=\"number\">2</span> &amp;&amp; item % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">12</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIndexedTo(destination: C, predicate: (index: Int, T) -&gt; Boolean)</code>**：从多个集合筛选出符合条件的元素，筛选条件需要 <code>index</code>，并最终用一个集合进行收集从每个集合筛选出的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = mutableListOf&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">listOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>).filterIndexedTo(result) &#123; index, item -&gt;</span><br><span class=\"line\">    index == item</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIsInstance()</code>**：一个抽象类集合中含有多种子类型的元素，可以很方便筛选对应子类型的元素，并组成一个集合返回。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = mutableListOf(<span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"number\">5f</span>, <span class=\"number\">6.0</span>, <span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = list.filterIsInstance&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIsInstanceTo(destination: C)</code>**：适用于筛选多个集合的情况。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = mutableListOf(<span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"number\">5f</span>, <span class=\"number\">6.0</span>, <span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = mutableListOf&lt;String&gt;()</span><br><span class=\"line\">list.filterIsInstanceTo(result)</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterNot(predicate: (T) -&gt; Boolean)</code><strong>、</strong><code>filterNotTo(destination: C, predicate: (T) -&gt; Boolean)</code>**：从一个集合筛选出符合条件之外的元素，并以一个新集合返回。它是 filter 操作符取反操作。</p>\n</li>\n<li><p>**<code>filterNotNull()</code><strong>、</strong><code>filterNotNullTo(destination: C)</code>**：filterNotNull 操作符可以过滤集合中为 null 的元素。同理 filterNotNullTo 才是真正过滤操作，但是需要从外部传入一个可变集合。</p>\n</li>\n</ul>\n<h5 id=\"drop-系列\"><a href=\"#drop-系列\" class=\"headerlink\" title=\"drop 系列\"></a>drop 系列</h5><ul>\n<li><p>**<code>drop(n: Int)</code>**：把集合元素去除一部分，drop 是顺序地删除，n 则表示顺序删除几个元素，最后返回剩余元素集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).drop(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>dropLast(n: Int)</code>**：根据传入数值 n，表示从右到左倒序地删除 n 个集合中的元素，并返回集合中剩余的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).dropLast(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>dropWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的第一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).dropWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>dropLastWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的最后一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).dropLastWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"take-系列\"><a href=\"#take-系列\" class=\"headerlink\" title=\"take 系列\"></a>take 系列</h5><ul>\n<li><p>**<code>take(n: Int)</code>**：从原集合的第一项开始顺序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。换句话说就是取集合前 n 个元素组成新的集合返回。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).take(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>takeLast(n: Int)</code>**：从原集合的最后一项开始倒序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).takeLast(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>takeLastWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的最后一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).takeLastWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>takeWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的第一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).takeWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"distinct-系列\"><a href=\"#distinct-系列\" class=\"headerlink\" title=\"distinct 系列\"></a>distinct 系列</h5><ul>\n<li><p><code>distinct</code>：去除集合中的重复元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>).distinct())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>distinctBy(selector: (T) -&gt; K)</code>**：根据操作元素后的结果去除重复元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>).distinctBy &#123; it % <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"并集类操作符\"><a href=\"#并集类操作符\" class=\"headerlink\" title=\"并集类操作符\"></a>并集类操作符</h4><h5 id=\"any、all、count、none-系列\"><a href=\"#any、all、count、none-系列\" class=\"headerlink\" title=\"any、all、count、none 系列\"></a>any、all、count、none 系列</h5><ul>\n<li><p>**<code>any()</code>**：判断是不是一个集合，若是，则再判断集合是否为空。若为空则返回 false，反之返回 true。若不是集合，则返回 hasNext。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>).any())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>any(predicate: (T) -&gt; Boolean)</code>**：判断集合中是否存在满足条件的元素。若存在则返回 true，反之返回 false。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).any &#123; it &gt; <span class=\"number\">30</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>all(predicate: (T) -&gt; Boolean)</code>**：判断集合中的所有元素是否都满足条件。若是则返回 true，反之则返回 false。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).all &#123; it % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>count()</code><strong>、</strong><code>count(predicate: (T) -&gt; Boolean)</code>**：返回集合中的元素个数或查询集合中满足条件的元素个数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).count())</span><br><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).count &#123; it &gt; <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>none()</code><strong>、</strong><code>none(predicate: (T) -&gt; Boolean)</code>**：如果一个集合是空集合，返回 true 或者集合中没有满足条件的元素，则返回 true。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).none()) </span><br><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).none &#123; it &gt; <span class=\"number\">50</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"fold-系列\"><a href=\"#fold-系列\" class=\"headerlink\" title=\"fold 系列\"></a>fold 系列</h5><ul>\n<li><p>**<code>fold(initial: R, operation: (acc: R, T) -&gt; R)</code>**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>).fold(<span class=\"number\">10</span>) &#123; result, element -&gt;</span><br><span class=\"line\">    result + element</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>foldIndexed(initial: R, operation: (index: Int, acc: R, T) -&gt; R)</code>**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;h&quot;</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;o&quot;</span>).foldIndexed(<span class=\"string\">&quot;Say&quot;</span>) &#123; index, result, element -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span><span class=\"variable\">$index</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Say h0 e1 l2 l3 o4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>foldRight(initial: R, operation: (T, acc: R) -&gt; R)</code>**：在一个初始值的基础上，从最后项到第一项通过一个函数累计所有的元素，与 fold 类似，不过是从最后一项开始累计。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).foldRight(<span class=\"string\">&quot;Say&quot;</span>) &#123; element, result -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Say <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -&gt; R)</code>**：在一个初始值的基础上，从最后一项到第一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).foldRightIndexed(<span class=\"string\">&quot;Say&quot;</span>) &#123; index, element, result -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span>-<span class=\"variable\">$index</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Say <span class=\"number\">3</span>-<span class=\"number\">2</span> <span class=\"number\">2</span>-<span class=\"number\">1</span> <span class=\"number\">1</span>-<span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"forEach-系列\"><a href=\"#forEach-系列\" class=\"headerlink\" title=\"forEach 系列\"></a>forEach 系列</h5><ul>\n<li><p>**<code>forEach(action: (T) -&gt; Unit)</code>**：集合元素的遍历操作符。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).forEach &#123;</span><br><span class=\"line\">    print(it)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>forEachIndexed(action: (index: Int, T) -&gt; Unit)</code>**：集合中带元素下标的遍历操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).forEachIndexed &#123; index, s -&gt;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span> &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">0</span>-<span class=\"number\">1</span> <span class=\"number\">1</span>-<span class=\"number\">2</span> <span class=\"number\">2</span>-<span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"max、min-系列\"><a href=\"#max、min-系列\" class=\"headerlink\" title=\"max、min 系列\"></a>max、min 系列</h5><ul>\n<li><p>**<code>maxOrNull()</code>**：获取集合中最大的元素，若为空元素集合，则返回 null。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;A&quot;</span>).maxOrNull())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>maxByOrNull(selector: (T) -&gt; R)</code>**：根据给定的函数返回最大的一项，如果没有则返回 null。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(-<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>).maxByOrNull &#123;</span><br><span class=\"line\">    it * -<span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">-<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>maxWithOrNull(comparator: Comparator&lt;in T&gt;)</code>**：接受一个 Comparator 对象并且根据此 Comparator 对象返回最大元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;-20&quot;</span>, <span class=\"string\">&quot;-102&quot;</span>, <span class=\"string\">&quot;0&quot;</span>).maxWithOrNull(compareBy &#123;</span><br><span class=\"line\">    it.length</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">-<span class=\"number\">102</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>min 操作符作用与 max 相反，包括 minBy 和 minWith。</p>\n</blockquote>\n<h5 id=\"reduce-系列\"><a href=\"#reduce-系列\" class=\"headerlink\" title=\"reduce 系列\"></a>reduce 系列</h5><ul>\n<li><p>**<code>reduce(operation: (acc: S, T) -&gt; S)</code>**：从集合中的第一项到最后一项的累计操作，与 fold 操作符的区别是没有初始值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;Nice&quot;</span>, <span class=\"string\">&quot;to&quot;</span>, <span class=\"string\">&quot;meet&quot;</span>, <span class=\"string\">&quot;you&quot;</span>).reduce &#123; result, element -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Nice to meet you</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中 reduceIndexed，reduceRight，reduceRightIndexed 操作符都与前述的 fold 相关操作符类似，只是没有初始值。</p>\n</blockquote>\n</li>\n<li><p>**<code>reduceOrNull(operation: (acc: S, T) -&gt; S)</code>**：从集合中的第一项到最后一项的累计操作，如果集合为空，返回 null。</p>\n<blockquote>\n<p>reduceRightOrNull 操作符作用等价于 reduceRight，不同的是当集合为空，返回 null。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"sum-系列\"><a href=\"#sum-系列\" class=\"headerlink\" title=\"sum 系列\"></a>sum 系列</h5><ul>\n<li><p>**<code>sum()</code>**：计算集合中所有元素累加的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).sum())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sumOf(selector: (T) -&gt; Int)</code>**：计算集合所有元素通过某个函数转换后数据之和。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).sumOf &#123; it * <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"映射类操作符\"><a href=\"#映射类操作符\" class=\"headerlink\" title=\"映射类操作符\"></a>映射类操作符</h4><h5 id=\"flatMap-系列\"><a href=\"#flatMap-系列\" class=\"headerlink\" title=\"flatMap 系列\"></a>flatMap 系列</h5><ul>\n<li><p>**<code>flatMap(transform: (T) -&gt; Iterable&lt;R&gt;)</code>**：根据条件合并两个集合，组成一个新的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">println(strList.flatMap &#123; listOf(it.plus(<span class=\"string\">&quot;1&quot;</span>)) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[A1, B1, C1]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>flatMapTo(destination: C, transform: (T) -&gt; Iterable&lt;R&gt;)</code>**：多个集合的条件合并。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> resultList = mutableListOf&lt;String&gt;().apply &#123;</span><br><span class=\"line\">    strList.flatMapTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        listOf(it.plus(<span class=\"string\">&quot;1&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strList2.flatMapTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        listOf(it.plus(<span class=\"string\">&quot;2&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(resultList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[A1, B1, C1, a2, b2, c2]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"group-系列\"><a href=\"#group-系列\" class=\"headerlink\" title=\"group 系列\"></a>group 系列</h5><ul>\n<li><p>**<code>groupBy(keySelector: (T) -&gt; K)</code>**：分组操作符，根据条件将集合拆分为一个 Map 类型集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.groupBy &#123; <span class=\"keyword\">if</span> (it.startsWith(<span class=\"string\">&quot;Java&quot;</span>)) <span class=\"string\">&quot;MyJava&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;MyKotlin&quot;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">&#123;MyJava=[Java, JavaScript], MyKotlin=[Kotlin, C, C++]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>groupByTo(destination: M, keySelector: (T) -&gt; K)</code>**：分组操作，适用于多个集合的分组操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;15&quot;</span>, <span class=\"string\">&quot;223&quot;</span>, <span class=\"string\">&quot;45&quot;</span>, <span class=\"string\">&quot;520&quot;</span>, <span class=\"string\">&quot;18&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> mutableMap = mutableMapOf&lt;String, MutableList&lt;String&gt;&gt;().apply &#123;</span><br><span class=\"line\">    strList.groupByTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it.startsWith(<span class=\"string\">&quot;Java&quot;</span>)) <span class=\"string\">&quot;Java&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;Not Java&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strList2.groupByTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it.contains(<span class=\"string\">&quot;2&quot;</span>)) <span class=\"string\">&quot;2&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;Not 2&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(mutableMap)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">&#123;Java=[Java, JavaScript], Not Java=[Kotlin, C, C++], Not <span class=\"number\">2</span>=[<span class=\"number\">15</span>, <span class=\"number\">45</span>, <span class=\"number\">18</span>], <span class=\"number\">2</span>=[<span class=\"number\">223</span>, <span class=\"number\">520</span>]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>groupingBy(crossinline keySelector: (T) -&gt; K)</code>**：对元素进行分组，然后一次将操作应用于所有分组。适用于对集合复杂分组的情况。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.groupingBy &#123; it.startsWith(<span class=\"string\">&quot;Java&quot;</span>) &#125;.eachCount())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">&#123;<span class=\"literal\">true</span>=<span class=\"number\">2</span>, <span class=\"literal\">false</span>=<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Grouping</code> 支持以下操作：</p>\n<ul>\n<li>eachCount() 计算每个组中的元素。</li>\n<li>fold() 与 reduce() 对每个组分别执行 fold 与 reduce 操作，作为一个单独的集合并返回结果。</li>\n<li>aggregate() 随后将给定操作应用于每个组中的所有元素并返回结果。 这是对 <code>Grouping</code> 执行任何操作的通用方法。当折叠或缩小不够时，可使用它来实现自定义操作。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"map-系列\"><a href=\"#map-系列\" class=\"headerlink\" title=\"map 系列\"></a>map 系列</h5><ul>\n<li><p>**<code>map(transform: (T) -&gt; R)</code>**：集合变换，遍历每个元素并执行给定表达式，最终形成新的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.map &#123; it.plus(<span class=\"string\">&quot;-1&quot;</span>) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[Java-<span class=\"number\">1</span>, Kotlin-<span class=\"number\">1</span>, C-<span class=\"number\">1</span>, C++-<span class=\"number\">1</span>, JavaScript-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapTo(destination: C, transform: (T) -&gt; R)</code>**：多个集合的元素转换。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">println(mutableListOf&lt;String&gt;().apply &#123;</span><br><span class=\"line\">    strList.mapTo(<span class=\"keyword\">this</span>) &#123; it.plus(<span class=\"string\">&quot;-1&quot;</span>) &#125;</span><br><span class=\"line\">    strList2.mapTo(<span class=\"keyword\">this</span>) &#123; it.plus(<span class=\"string\">&quot;-2&quot;</span>) &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[A-<span class=\"number\">1</span>, B-<span class=\"number\">1</span>, C-<span class=\"number\">1</span>, a-<span class=\"number\">2</span>, b-<span class=\"number\">2</span>, c-<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapIndexed(transform: (index: Int, T) -&gt; R)</code>**：带有元素下标的集合转换。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">println(strList.mapIndexed &#123; index, s -&gt; <span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span>&quot;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>-A, <span class=\"number\">1</span>-B, <span class=\"number\">2</span>-C]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapIndexedTo(destination: C, transform: (index: Int, T) -&gt; R)</code>**：带有元素下标的多个集合转换。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">println(mutableListOf&lt;String&gt;().apply &#123;</span><br><span class=\"line\">    strList.mapIndexedTo(<span class=\"keyword\">this</span>) &#123; index, s -&gt; <span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span>&quot;</span> &#125;</span><br><span class=\"line\">    strList2.mapIndexedTo(<span class=\"keyword\">this</span>) &#123; index, s -&gt; <span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span>&quot;</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>-A, <span class=\"number\">1</span>-B, <span class=\"number\">2</span>-C, <span class=\"number\">0</span>-a, <span class=\"number\">1</span>-b, <span class=\"number\">2</span>-c]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapNotNull(transform: (T) -&gt; R?)</code>**：同 <code>map</code> 函数的作用相同，不过其过滤了集合转换后为 null 的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.mapNotNull &#123; <span class=\"keyword\">if</span> (it.startsWith(<span class=\"string\">&quot;Java&quot;</span>)) <span class=\"literal\">null</span> <span class=\"keyword\">else</span> it &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[Kotlin, C, C++]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapNotNullTo(destination: C, transform: (T) -&gt; R?)</code>**：同 mapNotNull 函数的作用相同，它适用于多集合操作场景。</p>\n</li>\n<li><p>**<code>mapIndexedNotNull</code> 和 <code>mapIndexedNotNullTo</code>**：同理。</p>\n</li>\n</ul>\n<h4 id=\"元素类操作符\"><a href=\"#元素类操作符\" class=\"headerlink\" title=\"元素类操作符\"></a>元素类操作符</h4><h5 id=\"element-系列\"><a href=\"#element-系列\" class=\"headerlink\" title=\"element 系列\"></a>element 系列</h5><ul>\n<li><p>**<code>elementAt(index: Int)</code>**：获取集合指定下标的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.elementAt(<span class=\"number\">1</span>)) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>elementAtOrElse(index: Int, defaultValue: (Int) -&gt; T)</code>**：获取对应下标的集合元素。若下标越界，返回默认值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.elementAtOrElse(<span class=\"number\">10</span>) &#123; <span class=\"string\">&quot;unknown&quot;</span> &#125;) <span class=\"comment\">// 打印：unknown</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>elementAtOrNull(index: Int)</code>**：获取对应下标的集合元素。若下标越界，返回 null。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.elementAtOrNull(<span class=\"number\">10</span>)) <span class=\"comment\">// 打印：null</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"first、last-系列\"><a href=\"#first、last-系列\" class=\"headerlink\" title=\"first、last 系列\"></a>first、last 系列</h5><ul>\n<li><p>**<code>first()</code>**：获取集合第一个元素，若集合为空集合，这会抛出 NoSuchElementException 异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.first()) <span class=\"comment\">// 打印：Java</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>first(predicate: (T) -&gt; Boolean)</code>**：获取集合中指定条件的第一个元素。若不满足条件，抛异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.first &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>firstOrNull()</code>**：获取集合第一个元素，若集合为空集合，返回 null。</p>\n</li>\n<li><p>**<code>firstOrNull&#123;&#125;</code>**：获取集合满足条件的首个元素，若无则返回 null。</p>\n</li>\n</ul>\n<blockquote>\n<p>与 <code>first</code> 等操作符对应的是 <code>last</code> 等相关操作符，即取集合最后一个元素等。</p>\n</blockquote>\n<h5 id=\"find-系列\"><a href=\"#find-系列\" class=\"headerlink\" title=\"find 系列\"></a>find 系列</h5><ul>\n<li><p>**<code>find(predicate: (T) -&gt; Boolean)</code>**：获取集合满足条件的首个元素，若无则返回 null，其实就是 firstOrNull{}。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.find &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>findLast(predicate: (T) -&gt; Boolean)</code>**：获取集合满足条件的最后一个元素，若无则返回 null，其实就是 lastOrNull{}。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.findLast &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：JavaScript</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"single-系列\"><a href=\"#single-系列\" class=\"headerlink\" title=\"single 系列\"></a>single 系列</h5><ul>\n<li><p>**<code>single()</code>**：当集合中只有一个元素时，返回该元素，否则抛异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.single()) <span class=\"comment\">// 打印：java.lang.IllegalArgumentException: List has more than one element.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>single(predicate: (T) -&gt; Boolean)</code>**：找到集合中满足条件的元素，若只有单个元素满足条件，则返回该元素，否则抛异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.single &#123; it.startsWith(<span class=\"string\">&quot;K&quot;</span>) &#125;) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><strong><code>singleOrNull</code> 或 <code>singleOrNull&#123;&#125;</code> 操作符</strong> 只是将前述的抛异常改为返回 null。</p>\n</blockquote>\n<h5 id=\"component-系列\"><a href=\"#component-系列\" class=\"headerlink\" title=\"component 系列\"></a>component 系列</h5><ul>\n<li><p>**<code>component1()</code> … <code>component5()</code>**：用于获取第 1 到第 5 个元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.component3()) <span class=\"comment\">// 打印：C</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"indexOf-系列\"><a href=\"#indexOf-系列\" class=\"headerlink\" title=\"indexOf 系列\"></a>indexOf 系列</h5><ul>\n<li><p>**<code>indexOf(element: T)</code>**：返回指定元素的下标，若不存在，则返回 -1。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.indexOf(<span class=\"string\">&quot;C&quot;</span>)) <span class=\"comment\">// 打印：2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>indexOfFirst(predicate: (T) -&gt; Boolean)</code>**：返回满足条件的第一个元素的下标，若不存在，则返回 -1。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.indexOfFirst &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>indexOfLast(predicate: (T) -&gt; Boolean)</code>**：返回满足条件的最后一个元素的下标，若不存在，则返回 -1。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.indexOfLast &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：4</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"排序类操作符\"><a href=\"#排序类操作符\" class=\"headerlink\" title=\"排序类操作符\"></a>排序类操作符</h4><h5 id=\"reverse-系列\"><a href=\"#reverse-系列\" class=\"headerlink\" title=\"reverse 系列\"></a>reverse 系列</h5><ul>\n<li><p>**<code>reversed()</code>**：反转集合元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.reversed()) <span class=\"comment\">// 打印：[JavaScript, C++, C, Kotlin, Java]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"sort-系列\"><a href=\"#sort-系列\" class=\"headerlink\" title=\"sort 系列\"></a>sort 系列</h5><ul>\n<li><p>**<code>sorted()</code>**：对集合中的元素自然升序排序。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sorted()) <span class=\"comment\">// 打印：[C, C++, Java, JavaScript, Kotlin]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sortedDescending()</code>**：与 sorted 操作符相反，为倒序。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sortedDescending()) <span class=\"comment\">// 打印：[Kotlin, JavaScript, Java, C++, C]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sortedBy(crossinline selector: (T) -&gt; R?)</code>**：根据条件升序，即把不满足条件的放在前面，满足条件的放在后面。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sortedBy &#123; it.length &#125;) <span class=\"comment\">// 打印：[C, C++, Java, Kotlin, JavaScript]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sortedByDescending(crossinline selector: (T) -&gt; R?)</code>**：与 sortedBy 操作符相反，为倒序。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sortedByDescending &#123; it.length &#125;) <span class=\"comment\">// 打印：[JavaScript, Kotlin, Java, C++, C]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"生成类操作符\"><a href=\"#生成类操作符\" class=\"headerlink\" title=\"生成类操作符\"></a>生成类操作符</h4><h5 id=\"partition-系列\"><a href=\"#partition-系列\" class=\"headerlink\" title=\"partition 系列\"></a>partition 系列</h5><ul>\n<li><p>**<code>partition(predicate: (T) -&gt; Boolean)</code>**：将一个集合按条件拆分为两个 pair 组成的新集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.partition &#123; it.startsWith(<span class=\"string\">&quot;Java&quot;</span>) &#125;) <span class=\"comment\">// 打印：([Java, JavaScript], [Kotlin, C, C++])</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"plus-系列\"><a href=\"#plus-系列\" class=\"headerlink\" title=\"plus 系列\"></a>plus 系列</h5><ul>\n<li><p>**<code>plus(element: T)</code>**：合并两个集合中的元素，组成一个新的集合。也可以使用符号 <code>+</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.plus(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))) <span class=\"comment\">// 打印：[Java, Kotlin, C, C++, JavaScript, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>plusElement(element: T)</code>**：往集合中添加一个元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.plusElement(<span class=\"string\">&quot;CSS&quot;</span>)) <span class=\"comment\">// 打印：[Java, Kotlin, C, C++, JavaScript, CSS]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"zip-系列\"><a href=\"#zip-系列\" class=\"headerlink\" title=\"zip 系列\"></a>zip 系列</h5><ul>\n<li><p>**<code>zip(other: Array&lt;out R&gt;)</code>**：由两个集合按照相同的下标组成一个新集合。该新集合的类型是：<code>List&lt;Pair&gt;</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.zip(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))) <span class=\"comment\">// 打印：[(Java, 1), (Kotlin, 2), (C, 3)]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>zipWithNext(transform: (a: T, b: T) -&gt; R)</code>**：集合中相邻元素组成 <code>pairs</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.zipWithNext()) <span class=\"comment\">// 打印：[(Java, Kotlin), (Kotlin, C), (C, C++), (C++, JavaScript)]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<h3 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h3><p>Java 中存在 int, float, boolean 等基础类型，这些基础类型在 Kotlin 里将全部以对象的形式继续存在。有几点变化需要注意。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Int 无法自动转换为 Double, 需要自己先做类型转换（as Double, toDouble(), 方式很多）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b: <span class=\"built_in\">Double</span> = a.toDouble()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Char 不能直接等值于其对应的 ASCII 码值，需要类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c: <span class=\"built_in\">Char</span> = <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x: <span class=\"built_in\">Int</span> = c.toInt()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><p>Kotlin 中使用 var 定义可读可写变量，使用 val 定义只读变量（相当于 Java 当中的 final）。定义变量时，如果满足类型推断，类型可以省略。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&quot;100&quot;</span> <span class=\"comment\">// 类型为 String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name: String = <span class=\"string\">&quot;张三&quot;</span> <span class=\"comment\">// 类型为 String</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h3><p>在 Kotlin 语言中，“:” 被广泛用于变量类型的定义。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义变量类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> zhangSan: User</span><br><span class=\"line\">    <span class=\"keyword\">var</span> liSi: User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义函数参数和返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUser</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: User &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User(<span class=\"number\">100</span>, <span class=\"string\">&quot;dd&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>“:”还被用于声明类继承或接口实现。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承 User 类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VipUser</span> : <span class=\"type\">User</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">DB</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addUser</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现 DB 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RoomDB</span> : <span class=\"type\">DB</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addUser</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h3><p>Java 中使用 instanceof 来判断某变量是否为某类型，而 Kotlin 中使用 is 来进行类型检测。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * is 判断属于某类型</span></span><br><span class=\"line\"><span class=\"comment\"> * !is 判断不属于某类型</span></span><br><span class=\"line\"><span class=\"comment\"> * as 类型强转，失败时抛出类型强转失败异常</span></span><br><span class=\"line\"><span class=\"comment\"> * as? 类型强转，但失败时不会抛出异常而是返回 null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (myObject <span class=\"keyword\">is</span> User) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只要进来了，就代表 myObject 是 User 类型了，不需要强转就可以直接使用 User 的属性</span></span><br><span class=\"line\">    myObject.id = <span class=\"number\">101</span></span><br><span class=\"line\">    myObject.name = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Any-和-Unit\"><a href=\"#Any-和-Unit\" class=\"headerlink\" title=\"Any 和 Unit\"></a>Any 和 Unit</h3><ul>\n<li><strong>Any</strong>: Kotlin 的顶层父类是 Any, 对应 Java 中的 Object, 但是比 Object 少了 wait()&#x2F;notify() 等函数。</li>\n<li><strong>Unit</strong>: Kotlin 中的 Unit 对应 Java 中的 void。</li>\n</ul>\n<h3 id=\"可见性修饰符\"><a href=\"#可见性修饰符\" class=\"headerlink\" title=\"可见性修饰符\"></a>可见性修饰符</h3><ul>\n<li>默认的可见性修饰符是 <code>public</code>。</li>\n<li>新增的可见性修饰符 <code>internal</code> 表示仅当前模块（AS 中的 module）可见，其它模块不能访问。</li>\n</ul>\n<h3 id=\"逻辑语句\"><a href=\"#逻辑语句\" class=\"headerlink\" title=\"逻辑语句\"></a>逻辑语句</h3><h4 id=\"if-else-语句\"><a href=\"#if-else-语句\" class=\"headerlink\" title=\"if-else 语句\"></a>if-else 语句</h4><p>Kotlin 中的 if-else 基本和 Java 一致，但还是有一些特殊的地方。比如它可以作为一个逻辑表达式使用，逻辑表达式还可以以代码块的形式出现，代码块最后的表达式作为该块的返回值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 逻辑表达式的使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMax</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"keyword\">if</span> (x &gt; y) x <span class=\"keyword\">else</span> y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码块形式的逻辑表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMax2</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Max num is x.&quot;</span>)</span><br><span class=\"line\">        x <span class=\"comment\">// 返回最后一行，即 x 的值</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Max num is y.&quot;</span>)</span><br><span class=\"line\">        y <span class=\"comment\">// 返回最后一行，即 y 的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"when-语句\"><a href=\"#when-语句\" class=\"headerlink\" title=\"when 语句\"></a>when 语句</h4><p>Kotlin 中的 when 语句取代了 Java 中的 switch-case 语句，功能上要强大许多，可以有多种形式的条件表达。与 if-else 一样，Kotlin 中的 when 也可以作为逻辑表达式使用，也有返回值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// when 有判断参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whenDemo</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">when</span> (obj) &#123;</span><br><span class=\"line\">        <span class=\"number\">1</span> -&gt; println(<span class=\"string\">&quot;是数字 1&quot;</span>)</span><br><span class=\"line\">        -<span class=\"number\">1</span>, <span class=\"number\">0</span> -&gt; println(<span class=\"string\">&quot;是数字 -1 或 0&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt; println(<span class=\"string\">&quot;是不大于 10 的正整数&quot;</span>)</span><br><span class=\"line\">        <span class=\"string\">&quot;abc&quot;</span> -&gt; println(<span class=\"string\">&quot;是字符串 abc&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">is</span> User -&gt; &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;是 User 对象&quot;</span>)</span><br><span class=\"line\">            println(obj.name) <span class=\"comment\">// 直接可以使用 User 的属性了</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; println(<span class=\"string\">&quot;其它操作&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// when 没有判断参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whenDemo2</span><span class=\"params\">(position: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> columns = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">        position % columns == <span class=\"number\">0</span> -&gt; &#123; <span class=\"comment\">// position 位于第一列</span></span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (position + <span class=\"number\">1</span>) % columns == <span class=\"number\">0</span> -&gt; &#123; <span class=\"comment\">// position 位于最后一列</span></span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// when 有返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whenDemo3</span><span class=\"params\">(score: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">when</span> (score) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">90.</span><span class=\"number\">.100</span> -&gt; <span class=\"string\">&quot;优秀&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">80.</span><span class=\"number\">.89</span> -&gt; <span class=\"string\">&quot;良好&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">60.</span><span class=\"number\">.79</span> -&gt; <span class=\"string\">&quot;及格&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"string\">&quot;不及格&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;你的成绩<span class=\"variable\">$result</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标准函数 repeat()：</span></span><br><span class=\"line\">repeat(<span class=\"number\">100</span>) &#123; <span class=\"comment\">// 执行 100 次</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .. 包括右边界 [0,99]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.99</span>) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// until 不包括右边界 [0,99]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>while 语句、continue 语句和 break 语句等逻辑都与 Java 基本一致，这里不再赘述。</p>\n</blockquote>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>Kotlin 中可以对任意表达式进行标签标记，标签的格式为标识符后跟 @ 符号，例如 abc@、fooBar@ 都是有效的标签。这些标签，可以搭配 return、break、continue 等跳转行为来使用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">labelTest</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"symbol\">la@</span> <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;outer index <span class=\"variable\">$i</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;inner index <span class=\"variable\">$j</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span><span class=\"symbol\">@la</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>使用 <code>arrayOf</code> 创建数组，基本数据类型使用对应的 <code>intArrayOf</code> 等。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> arr1 = arrayOf&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = intArrayOf()</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = floatArrayOf()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java 中字符串模板</span></span><br><span class=\"line\">String name = <span class=\"string\">&quot;ZhangSan&quot;</span>;</span><br><span class=\"line\">int age = <span class=\"number\">30</span>;</span><br><span class=\"line\">String introduction = String.format(<span class=\"string\">&quot;我是s%，今年%d岁了&quot;</span>, name, age);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Kotlin 中字符串模板</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> name = <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> introduction = <span class=\"string\">&quot;我是<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁了&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>Kotlin 中的函数通过关键字 fun 定义的，具体的参数和返回值定义结构如下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun</span><span class=\"params\">(para1: <span class=\"type\">Int</span>, para2: <span class=\"type\">String</span>)</span></span>: String &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kotlin 中的函数可以是全局函数，成员函数或者局部函数，甚至还可以作为某个对象的扩展函数临时添加。</p>\n<h4 id=\"全局函数-顶级函数\"><a href=\"#全局函数-顶级函数\" class=\"headerlink\" title=\"全局函数&#x2F;顶级函数\"></a>全局函数&#x2F;顶级函数</h4><p>全局函数（顶级函数）是文件级别的，以包为作用域。</p>\n<p>例如 com.zch.kotlin.biz1 包中的 Common.kt 文件中有以下方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在当前包的其它文件中就不能有相同的方法 sayHello，否则会报错。</p>\n<p>如果 com.zch.kotlin.biz2 包中的某文件中也有以下方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在其它文件中同时调用两者就需要加上相应的包来访问。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.zch.kotlin.biz1.sayHello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sayHello()</span><br><span class=\"line\">    com.zch.kotlin.biz2.sayHello()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h4><p>成员函数是在类或对象内部定义的函数。</p>\n<h4 id=\"局部函数\"><a href=\"#局部函数\" class=\"headerlink\" title=\"局部函数\"></a>局部函数</h4><p>Kotlin 支持局部函数，即一个函数在另一个函数内部：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserInfo</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> country = <span class=\"string\">&quot;中国&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 函数中的函数，叫“局部函数”</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getProvince</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;country&#125;</span>广东省&quot;</span> <span class=\"comment\">// 局部函数可以访问外部函数的局部变量。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> age = <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> userInfo = <span class=\"string\">&quot;我是<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁了，我来自<span class=\"subst\">$&#123;getProvince()&#125;</span>。&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> userInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是频繁调用的函数，不建议声明为局部函数，因为每次调用时，就会产生一个函数对象。</p>\n</blockquote>\n<h4 id=\"函数参数默认值\"><a href=\"#函数参数默认值\" class=\"headerlink\" title=\"函数参数默认值\"></a>函数参数默认值</h4><p>函数中的某个参数可以用 “&#x3D;” 号指定其默认值，调用函数方法时可不传这个参数，但其它参数需要用 “&#x3D;” 号指定。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calculate</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span> = <span class=\"number\">10</span>, c: <span class=\"type\">Int</span>)</span></span> = a + b + c <span class=\"comment\">// 原本直接 return 的函数可以用 = 符号简化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> sum = calculate(<span class=\"number\">5</span>, c = <span class=\"number\">20</span>) <span class=\"comment\">// sum = 35</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展函数和扩展属性\"><a href=\"#扩展函数和扩展属性\" class=\"headerlink\" title=\"扩展函数和扩展属性\"></a>扩展函数和扩展属性</h4><p>Kotlin 支持在<strong>包范围内</strong>对已存在的类进行函数和属性扩展。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给 Activity 扩展一个 log 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Activity.<span class=\"title\">log</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;Activity---<span class=\"variable\">$msg</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 Context 扩展一个 log 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Context.<span class=\"title\">log</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;Context---<span class=\"variable\">$msg</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">&quot;hello&quot;</span>) <span class=\"comment\">// 调用 Activity.log</span></span><br><span class=\"line\">(<span class=\"keyword\">this</span> <span class=\"keyword\">as</span> Context).log(<span class=\"string\">&quot;hello2&quot;</span>) <span class=\"comment\">// 调用 Context.log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 ViewGroup 扩展一个 firstChild 属性</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> ViewGroup.firstChild: View <span class=\"keyword\">get</span>() = getChildAt(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">contentLayout.firstChild <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：1、扩展需要在包级范围内进行，如果写在 class 内是无效的。2、已经存在的方法或属性，是无法被扩展的，依旧会调用已有的方法。3、扩展函数是静态解析的，在编译时就确定了调用函数（没有多态）。</p>\n</blockquote>\n<h4 id=\"infix-函数\"><a href=\"#infix-函数\" class=\"headerlink\" title=\"infix 函数\"></a>infix 函数</h4><p>标有 <code>infix</code> 关键字的函数也可以使用中缀表示法（忽略该调用的点与圆括号）调用。中缀函数必须满足以下要求：</p>\n<ul>\n<li>它们必须是成员函数或扩展函数；</li>\n<li>它们必须只有一个参数；</li>\n<li>其参数不得接受可变数量的参数且不能有默认值。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"title\">shl</span><span class=\"params\">(x: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123; …… &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用中缀表示法调用该函数</span></span><br><span class=\"line\"><span class=\"number\">1</span> shl <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于这样</span></span><br><span class=\"line\"><span class=\"number\">1.</span>shl(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中缀函数调用的优先级低于算术操作符、类型转换以及 rangeTo 操作符。 以下表达式是等价的：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> shl <span class=\"number\">2</span> + <span class=\"number\">3</span> 等价于 <span class=\"number\">1</span> shl (<span class=\"number\">2</span> + <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">0</span> until n * <span class=\"number\">2</span> 等价于 <span class=\"number\">0</span> until (n * <span class=\"number\">2</span>)</span><br><span class=\"line\">xs union ys <span class=\"keyword\">as</span> Set&lt;*&gt; 等价于 xs union (ys <span class=\"keyword\">as</span> Set&lt;*&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一方面，中缀函数调用的优先级高于布尔操作符 &amp;&amp; 与 ||、is- 与 in- 检测以及其他一些操作符。这些表达式也是等价的：</span></span><br><span class=\"line\"></span><br><span class=\"line\">a &amp;&amp; b xor c 等价于 a &amp;&amp; (b xor c)</span><br><span class=\"line\">a xor b <span class=\"keyword\">in</span> c 等价于 (a xor b) <span class=\"keyword\">in</span> c</span><br></pre></td></tr></table></figure>\n\n<p>中缀函数总是要求指定接收者与参数。当使用中缀表示法在当前接收者上调用方法时，需要显式使用 <code>this</code>；不能像常规方法调用那样省略。这是确保非模糊解析所必需的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStringCollection</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">infix</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">add</span><span class=\"params\">(s: <span class=\"type\">String</span>)</span></span> &#123; <span class=\"comment\">/*……*/</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">build</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span> add <span class=\"string\">&quot;abc&quot;</span>   <span class=\"comment\">// 正确</span></span><br><span class=\"line\">        add(<span class=\"string\">&quot;abc&quot;</span>)       <span class=\"comment\">// 正确</span></span><br><span class=\"line\">        add <span class=\"string\">&quot;abc&quot;</span>      <span class=\"comment\">// 错误：必须指定接收者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><ul>\n<li>内联函数配合「函数类型」，可以减少「函数类型」生成的对象  。</li>\n<li>使⽤ <code>inline</code> 关键字声明的函数是「内联函数」，在「编译时」会将「内联函数」中的函数体直接插⼊到调⽤处。  所以在写内联函数的时候需要注意，尽量将内联函数中的代码行数减少。</li>\n</ul>\n<p><code>noinline</code> 可以禁止部分函数参数参与内联编译：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(inlined: () -&gt; <span class=\"type\">Unit</span>, <span class=\"keyword\">noinline</span> notInlined:() -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><ul>\n<li>匿名函数的特点是可以明确指定其返回值类型。</li>\n<li>它和常规函数的定义几乎相似。他们的区别在于，匿名函数没有函数名。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常规函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(x : <span class=\"type\">Int</span> , y : <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span> = x + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匿名函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(x : <span class=\"type\">Int</span> , y : <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span> = x + y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h4><p><code>Lambda</code> 表达式的本质是 <code>匿名函数</code>，因为在其底层实现中还是通过匿名函数来实现的。但是我们在用的时候不必关心其底层实现。不过 Lambda 的出现确实是减少了代码量的编写，同时也使代码变得更加简洁明了。</p>\n<p><strong>1、Lambda 的特点：</strong></p>\n<ul>\n<li>Lambda 表达式总是被大括号括着。</li>\n<li>其参数（如果存在）在符号 “-&gt;” 之前声明（参数类型可以省略）。</li>\n<li>函数体（如果存在）在符号 “-&gt;” 后面。</li>\n</ul>\n<p><strong>2、Lambda 语法：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、无参数的情况：</span><br><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> 变量名 = &#123; 操作的代码 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;无参数&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lambda 代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFun1 = &#123; println(<span class=\"string\">&quot;无参数&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun1() <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -------------------------------------------</span></span><br><span class=\"line\"><span class=\"number\">2</span>、有参数的情况：</span><br><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> 变量名 : (参数的类型，参数类型，...) -&gt; 返回值类型 = &#123;参数<span class=\"number\">1</span>，参数<span class=\"number\">2</span>，... -&gt; 操作参数的代码 &#125;</span><br><span class=\"line\">可等价于</span><br><span class=\"line\"><span class=\"comment\">// 此种写法：即表达式的返回值类型会根据操作的代码自推导出来。</span></span><br><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> 变量名 = &#123; 参数<span class=\"number\">1</span> ： 类型，参数<span class=\"number\">2</span> : 类型, ... -&gt; 操作参数的代码 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun2</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lambda</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFun2: (<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span> = &#123; a, b -&gt; a + b &#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFun2 = &#123; a: <span class=\"built_in\">Int</span>, b: <span class=\"built_in\">Int</span> -&gt; a + b &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun2(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -------------------------------------------</span></span><br><span class=\"line\"><span class=\"number\">3</span>、lambda 表达式作为函数中的参数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(a : <span class=\"type\">Int</span>, 参数名 : (参数1 ： 类型，参数2 : 类型, ... ) -&gt; 表达式返回类型)</span></span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun3</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lambda</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun33</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: (<span class=\"type\">num1</span>: <span class=\"type\">Int</span>, <span class=\"type\">num2</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b.invoke(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun33(<span class=\"number\">10</span>, &#123; num1: <span class=\"built_in\">Int</span>, num2: <span class=\"built_in\">Int</span> -&gt; num1 + num2 &#125;) <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>invoke() 函数：表示为通过函数变量调用自身，因为上面例子中的变量 b 是一个匿名函数。</p>\n</blockquote>\n<p><strong>3、it</strong></p>\n<p>当一个高阶函数中 Lambda 表达式的参数只有一个的时候可以使用 it 来使用此参数。it 可表示为单个参数的隐式名称，是 Kotlin 语言约定的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> arr = intArrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">arr.forEach &#123;</span><br><span class=\"line\">    sum += it</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、下划线（_）</strong></p>\n<p>在使用 Lambda 表达式的时候，可以用下划线 （_） 表示未使用的参数，表示不处理这个参数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = mapOf(<span class=\"string\">&quot;key1&quot;</span> to <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span> to <span class=\"string\">&quot;value2&quot;</span>, <span class=\"string\">&quot;key3&quot;</span> to <span class=\"string\">&quot;value3&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 不需要 key 的时候</span></span><br><span class=\"line\">map.forEach &#123; _, value -&gt;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;<span class=\"variable\">$value</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、带接收者的函数字面值</strong></p>\n<p>在 Kotlin 中，提供了指定的接受者对象调用 Lambda 表达式的功能。在函数字面值的函数体中，可以调用该接收者对象上的方法而无需任何额外的限定符。它类似于扩展函数，它允许在函数体内访问接收者对象的成员。</p>\n<p><strong>5.1、匿名函数作为接收者类型</strong></p>\n<p>匿名函数语法允许你直接指定函数字面值的接收者类型，如果你需要使用带接收者的函数类型声明一个变量，并在之后使用它，这将非常有用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> add = <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"params\">( other : <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span> = <span class=\"keyword\">this</span> + other</span><br><span class=\"line\">println(<span class=\"number\">2.</span>add(<span class=\"number\">3</span>)) <span class=\"comment\">// 输出 5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>5.2、Lambda 表达式作为接收者类型</strong></p>\n<p>要用 Lambda 表达式作为接收者类型的前提是<strong>接收者类型可以从上下文中推断出来</strong>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HTML</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">body</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun5</span><span class=\"params\">(<span class=\"keyword\">init</span>: <span class=\"type\">HTML</span>.() -&gt; <span class=\"type\">Unit</span>)</span></span>: HTML &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> html = HTML() <span class=\"comment\">// 创建接收者对象</span></span><br><span class=\"line\">    html.<span class=\"keyword\">init</span>()       <span class=\"comment\">// 将该接收者对象传给该 lambda</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test111</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    myFun5 &#123; <span class=\"comment\">// 带接收者的 lambda 由此开始</span></span><br><span class=\"line\">        body() <span class=\"comment\">// 调用该接收者对象的一个方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、闭包</strong></p>\n<p>所谓闭包，即是函数中包含函数，这里的函数我们可以包含（Lambda 表达式，匿名函数，局部函数，对象表达式）。我们熟知，函数式编程是现在和未来良好的一种编程趋势，故而 Kotlin 也有这一个特性。Java 是不支持闭包的。</p>\n<p><strong>6.1、携带状态</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让函数返回一个函数，并携带状态值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">myFun4</span><span class=\"params\">(b: <span class=\"type\">Int</span>)</span></span>: () -&gt; <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        a++</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = myFun4(<span class=\"number\">3</span>)</span><br><span class=\"line\">    println(t()) <span class=\"comment\">// 输出 7</span></span><br><span class=\"line\">    println(t()) <span class=\"comment\">// 输出 8</span></span><br><span class=\"line\">    println(t()) <span class=\"comment\">// 输出 9</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6.2、引用外部变量，并改变外部变量的值</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum : <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> arr = arrayOf(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">arr.filter &#123; it &lt; <span class=\"number\">7</span>  &#125;.forEach &#123; sum += it &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println(sum) <span class=\"comment\">// 输出 9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>7、Lambda 表达式简写</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果函数的最后⼀个参数是 lambda, 那么 lambda 表达式可以放在圆括号之外：</span></span><br><span class=\"line\">lessons.forEach()&#123; lesson : Lesson -&gt;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你的函数传⼊参数只有⼀个 lambda 的话，那么⼩括号可以省略的：</span></span><br><span class=\"line\">lessons.forEach &#123; lesson : Lesson -&gt;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 lambda 表达式只有⼀个参数，那么可以省略，通过隐式的 it 来访问：</span></span><br><span class=\"line\">lessons.forEach &#123; <span class=\"comment\">// it</span></span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>在 <code>Kotlin</code> 中，高阶函数即指：将函数用作一个函数的参数或者返回值的函数。</p>\n<p><strong>将函数用作函数参数的情况</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sumBy 函数的源码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> CharSequence.<span class=\"title\">sumBy</span><span class=\"params\">(selector: (<span class=\"type\">Char</span>) -&gt; <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (element <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        sum += selector(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = str.sumBy &#123; it.toInt() &#125;</span><br><span class=\"line\">    println(sum) <span class=\"comment\">// 输出 294。因为字符 a 对应的值为 97，b 对应 98，c 对应 99。故而该值即为 97 + 98 + 99 = 294</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>将函数用作一个函数的返回值</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">lock</span><span class=\"params\">(lock: <span class=\"type\">Lock</span>, body: () -&gt; <span class=\"type\">T</span>)</span></span>: T &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> body()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toBeSynchronized</span><span class=\"params\">()</span></span> = sharedResource.operation()</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, ::toBeSynchronized) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面的写法也可以写作：</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, &#123;sharedResource.operation()&#125; )</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> result = lock(lock) &#123;</span><br><span class=\"line\">    sharedResource.operation()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>::toBeSynchronized 即为对函数 toBeSynchronized() 的引用。</p>\n</blockquote>\n<p><strong>自定义高阶函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义高阶函数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calculation</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>, result: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result(num1, num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result1 = calculation(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &#123; num1, num2 -&gt;</span><br><span class=\"line\">        num1 + num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result2 = calculation(<span class=\"number\">10</span>, <span class=\"number\">20</span>) &#123; num1, num2 -&gt;</span><br><span class=\"line\">        num1 * num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;result1 = <span class=\"variable\">$result1</span>&quot;</span>) <span class=\"comment\">// 输出：3</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;result2 = <span class=\"variable\">$result2</span>&quot;</span>) <span class=\"comment\">// 输出：200</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>开发中常用的一个例子</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ParamView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(context: Context, attrs: AttributeSet? = <span class=\"literal\">null</span>, defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>) : LinearLayout(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> onParamValueClickListener: (() -&gt; <span class=\"built_in\">Unit</span>)? = <span class=\"literal\">null</span> <span class=\"comment\">// 定义一个点击事件，给外部处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        tvParamValue?.setOnClickListener &#123;</span><br><span class=\"line\">            onParamValueClickListener?.invoke()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外部 ParamView 控件处理点击事件</span></span><br><span class=\"line\">paramView?.onParamValueClickListener = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理业务逻辑...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标准高阶函数\"><a href=\"#标准高阶函数\" class=\"headerlink\" title=\"标准高阶函数\"></a>标准高阶函数</h4><p>Standard.kt 文件中提供了一系列标准的高阶函数。</p>\n<p><strong>函数特点汇总</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">接收者（this）</th>\n<th align=\"left\">传参（it）</th>\n<th align=\"left\">返回值（result）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">run()</td>\n<td align=\"left\">当前类</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">T.run()</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">with()</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">T.let()</td>\n<td align=\"left\">当前类</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td align=\"left\">T.also()</td>\n<td align=\"left\">当前类</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">类T</td>\n</tr>\n<tr>\n<td align=\"left\">T.apply()</td>\n<td align=\"left\">类T</td>\n<td align=\"left\">编译错误</td>\n<td align=\"left\">类T</td>\n</tr>\n</tbody></table>\n<p>实际应用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStandard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">&quot;MyStandard&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// run()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runDemo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;AA&quot;</span></span><br><span class=\"line\">        run &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> name = <span class=\"string\">&quot;BB&quot;</span></span><br><span class=\"line\">            Log.e(TAG, name) <span class=\"comment\">// BB</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, name) <span class=\"comment\">// AA</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.run()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runDemo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.run &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;字符串的长度为 <span class=\"variable\">$length</span>&quot;</span>) <span class=\"comment\">// 字符串的长度为 6</span></span><br><span class=\"line\">            substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// with()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">withDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = with(<span class=\"string\">&quot;ABCDEF&quot;</span>) &#123;</span><br><span class=\"line\">            substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.let()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">letDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.let &#123;</span><br><span class=\"line\">            it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.also()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">alsoDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.also &#123;</span><br><span class=\"line\">            it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T.apply()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">applyDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = <span class=\"string\">&quot;ABCDEF&quot;</span>.apply &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.substring(<span class=\"number\">2</span>) <span class=\"comment\">// this 代表 &quot;ABCDEF&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常，T.run()、T.let()、T.also() 和 T.apply() 四个用的比较多，使用时可以通过简单的规则作出⼀些判断：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(需要返回自身)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 <span class=\"keyword\">this</span> 作为参数)&#123;</span><br><span class=\"line\">        选择 apply</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 it 作为参数)&#123;</span><br><span class=\"line\">        选择 also</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(不需要返回自身)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 <span class=\"keyword\">this</span> 作为参数)&#123;</span><br><span class=\"line\">        选择 run</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(作用域中使用 it 作为参数)&#123;</span><br><span class=\"line\">        选择 let</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实化类型参数\"><a href=\"#实化类型参数\" class=\"headerlink\" title=\"实化类型参数\"></a>实化类型参数</h3><p><strong>泛型类型擦除</strong>：JVM 中的泛型一般是通过类型擦除实现的，也就是说泛型类实例的类型实参在编译时被擦除，在运行时是不会被保留的。基于这样实现的做法是有历史原因的，最大的原因之一是为了兼容 JDK1.5 之前的版本，当然泛型类型擦除也是有好处的，在运行时丢弃了一些类型实参的信息，对于内存占用也会减少很多。</p>\n<p>正因为泛型类型擦除原因在业界 Java 的泛型又称伪泛型。因为编译后所有泛型的类型实参类型都会被替换成 Object 类型或者泛型类型形参指定上界约束类的类型。例如： List<Float>、List<String>、List<Student> 在 JVM 运行时 Float、String、Student 都被替换成 Object 类型，如果泛型定义是 List<T extends Student> 那么运行时 T 被替换成 Student 类型。</p>\n<p>Kotlin 和 Java 都存在泛型类型擦除的问题，但 Kotlin 可以通过 <code>inline</code> 函数保证使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为<strong>实化</strong>，对应需要使用 <strong>reified</strong> 关键字。因此，我们可以通过配合 <code>inline + reified</code> 达到「真泛型」的效果。</p>\n<p><strong>1、满足实化类型参数函数的必要条件</strong></p>\n<ul>\n<li>必须是 inline 内联函数，使用 inline 关键字修饰。</li>\n<li>泛型类定义泛型形参时必须使用 reified 关键字修饰。</li>\n</ul>\n<p><strong>2、带实化类型参数的函数基本定义</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">isInstanceOf</span><span class=\"params\">(value: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Boolean</span> = value <span class=\"keyword\">is</span> T</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> obj = User()</span><br><span class=\"line\"><span class=\"keyword\">val</span> instanceOf = isInstanceOf&lt;User&gt;(obj) <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<p>对于以上例子，我们可以说类型形参 T 是泛型函数 isInstanceOf 的实化类型参数。</p>\n<p><strong>3、原理描述</strong></p>\n<p>编译器把实现内联函数的字节码动态插入到每次的调用点。那么实化的原理正是基于这个机制，<strong>每次调用带实化类型参数的函数时，编译器都知道此次调用中作为泛型类型实参的具体类型。所以编译器只要在每次调用时生成对应不同类型实参调用的字节码插入到调用点即可。</strong> 总之一句话很简单，就是带实化参数的函数每次调用都生成不同类型实参的字节码，动态插入到调用点。由于生成的字节码的类型实参引用了具体的类型，而不是类型参数所以不会存在擦除问题。</p>\n<p><strong>4、实化类型参数函数不能在 Java 中调用</strong></p>\n<p>Kotlin 的实化类型参数函数主要得益于 inline 函数的内联功能，虽然 Java 可以调用普通的内联函数但是失去了内联功能，失去内联功能也就意味实化操作也就化为泡影。</p>\n<p><strong>5、实化类型参数函数的使用限制</strong></p>\n<ul>\n<li>不能使用非实化类型形参作为类型实参调用带实化类型参数的函数。</li>\n<li>不能使用实化类型参数创建该类型参数的实例对象。</li>\n<li>不能调用实化类型参数的伴生对象方法。</li>\n<li>reified 关键字只能标记实化类型参数的内联函数，不能作用于类和属性。</li>\n</ul>\n<p><strong>6、实化类型参数函数使用例子</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>: T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RETROFIT.create(T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> api = create&lt;API&gt;() <span class=\"comment\">// 调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> Gson.<span class=\"title\">fromJson</span><span class=\"params\">(json: <span class=\"type\">String</span>)</span></span> = fromJson(json, T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = Gson().fromJson&lt;User&gt;(json) <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类与继承\"><a href=\"#类与继承\" class=\"headerlink\" title=\"类与继承\"></a>类与继承</h3><p>Kotlin 中也使用 class 关键字定义类，所有类都继承于 Any 类，类似于 Java 中 Object 类的概念。类实例化的形式也与 Java 一样，但是去掉了 new 关键字。</p>\n<h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>类的构造器分为主构造器（primary constructor）和次级构造器（secondary constructor），前者只能有一个，而后者可以有多个。如果两者都未指定，则默认为无参数的主构造器。</p>\n<p>主构造器是属于类头的一部分，用 constructor 关键字定义，如果没有被「可见性修饰符」或者「注解」标注，constructor 可省略。由于主构造器不能包含任何代码，初始化代码需要单独写在 init 代码块中，主构造器的参数只能在 init 代码块和变量初始化时使用。</p>\n<p>次级构造器也是用 constructor 关键字定义，必须要直接或间接代理主构造器。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(name: String) &#123; <span class=\"comment\">// 主构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(id: <span class=\"built_in\">Int</span>, name: String) : <span class=\"keyword\">this</span>(name) &#123; <span class=\"comment\">// 次级构造器</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主构造器中的参数加上 val 或者 var 修饰，那么参数就变成类的成员变量，如果参数和类原来的成员变量一样，那么对应原来的成员变量就要去掉。因此，以上代码一般可以简化为以下代码。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> id: <span class=\"built_in\">Int</span>, <span class=\"keyword\">val</span> name: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>类继承使用符号 “:” 表示，接口实现也一样，不做原本 Java 中的 extends 和 implement 关键字区分。Kotlin 中取消了 final 关键字，所有类默认都是被 final 修饰，不能被继承。Kotlin 中新增了 open 关键字，被 open 或者 abstract 修饰的类才可以被继承。</p>\n<h4 id=\"单例与伴随对象\"><a href=\"#单例与伴随对象\" class=\"headerlink\" title=\"单例与伴随对象\"></a>单例与伴随对象</h4><p>Kotlin 使用关键词 object 定义单例类。这里需要注意，是全小写。单例类访问直接使用类名，无构造函数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> LogUtil &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">d</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;tag&quot;</span>, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可通过 AS 工具栏 Tools –&gt; Kotlin –&gt; Show Kotlin Bytecode, 点击右侧的 Decompile 来把当前 Kotlin 代码转换为 Java 代码，来验证以上 object 对象是否转换成 Java 中的单例类。</p>\n</blockquote>\n<p>Java 中使用 static 标识一个类里的静态属性或方法。Kotlin 中没有 static 关键字，改为使用伴随对象，用 companion 修饰单例类 object, 来实现静态属性或方法功能。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> USER_NAME = <span class=\"string\">&quot;user_name&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> PASSWORD = <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveLoginInfo</span><span class=\"params\">(userName: <span class=\"type\">String</span>, password: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LoginCache.saveLoginInfo(<span class=\"string\">&quot;ZhangSan&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>) <span class=\"comment\">// 调用</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h4><p>在 Kotlin 中，内部类默认是静态内部类，通过 <code>inner</code> 关键字声明为嵌套内部类。</p>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><p>形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> : OnItemCLickListener &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btnLogin.setOnClickListener(<span class=\"keyword\">object</span> :View.OnClickListener&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClick</span><span class=\"params\">(v: <span class=\"type\">View</span>?)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上匿名内部类转换成的 lambda 表达式如下：</span></span><br><span class=\"line\">btnLogin.setOnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><ul>\n<li>const 必须修饰 val。</li>\n<li>const 只允许在 top-level 级别和 object 中声明。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> LogUtil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG: String = <span class=\"string\">&quot;LogUtil&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: String = <span class=\"string\">&quot;msg&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上 Kotlin 代码转换成的 Java 代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略了部分不大相关代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;LogUtil&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title function_\">getMsg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，const val 可见性为 public static final, 可以直接访问。val 可见性为 private static final, 并且 val 会生成对应属性的 getter 方法，通过方法调用访问。当定义常量时，出于效率考虑，应该使用 const val 方式，避免频繁函数调用。const 修饰的静态变量又称为<strong>编译器常量</strong>。</p>\n<h3 id=\"声明抽象类-接口-枚举-注解\"><a href=\"#声明抽象类-接口-枚举-注解\" class=\"headerlink\" title=\"声明抽象类&#x2F;接口&#x2F;枚举&#x2F;注解\"></a>声明抽象类&#x2F;接口&#x2F;枚举&#x2F;注解</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span></span><br><span class=\"line\"><span class=\"comment\">// 声明接⼝</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span></span><br><span class=\"line\"><span class=\"comment\">// 声明注解</span></span><br><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"keyword\">class</span></span><br><span class=\"line\"><span class=\"comment\">// 声明枚举</span></span><br><span class=\"line\">enmu <span class=\"keyword\">class</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"受检异常\"><a href=\"#受检异常\" class=\"headerlink\" title=\"受检异常\"></a>受检异常</h3><p>Kotlin 不需要使用 <code>try-catch</code> 强制捕获异常。</p>\n<h3 id=\"获取-Class-对象\"><a href=\"#获取-Class-对象\" class=\"headerlink\" title=\"获取 Class 对象\"></a>获取 Class 对象</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 [类名::<span class=\"keyword\">class</span>] 获取的是 Kotlin 的类型 KClass</span><br><span class=\"line\">使用 [类名::<span class=\"keyword\">class</span>.java] 获取的是 Java 的类型</span><br><span class=\"line\"></span><br><span class=\"line\">startActivity(Intent(<span class=\"keyword\">this</span>, MainActivity::<span class=\"keyword\">class</span>.java))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setter-getter\"><a href=\"#setter-getter\" class=\"headerlink\" title=\"setter&#x2F;getter\"></a>setter&#x2F;getter</h3><p>在 Kotlin 声明属性的时候（没有使用 private 修饰），会自动生成一个私有属性和一对公开的 setter&#x2F;getter 方法。在写 setter&#x2F;getter 的时候使⽤ field 来代替内部的私有属性（防⽌递归栈溢出）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field <span class=\"comment\">// 默认实现方式，可省略</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123; <span class=\"comment\">// 默认实现方式，可省略</span></span><br><span class=\"line\">            field = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"number\">18</span> <span class=\"comment\">// 获取的值一直都是 18，不会改变</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            field = <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JvmXxx-相关注解\"><a href=\"#JvmXxx-相关注解\" class=\"headerlink\" title=\"JvmXxx 相关注解\"></a>JvmXxx 相关注解</h3><h4 id=\"JvmField\"><a href=\"#JvmField\" class=\"headerlink\" title=\"JvmField\"></a>JvmField</h4><p>通过 <code>@JvmField</code> 注解可以让编译器只生成一个 public 的成员属性，不生成对应的 setter&#x2F;getter 方法。</p>\n<h4 id=\"JvmName\"><a href=\"#JvmName\" class=\"headerlink\" title=\"JvmName\"></a>JvmName</h4><p>顶层函数在文件中定义函数和属性，会直接生成静态的成员，在 Java 中通过「文件名Kt」来访问，同时可以通过 <code>@file:JvmName</code> 注解来修改这个类名。注解要写在包名前面才会起作用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@file:JvmName</span>(<span class=\"string\">&quot;AppCache&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.zch.kotlin.biz1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mToken: String? = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveToken</span><span class=\"params\">(token: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">    mToken = token</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java 中访问方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    AppCacheKt.saveToken(<span class=\"string\">&quot;abc123&quot;</span>); <span class=\"comment\">// 原来的访问方式</span></span><br><span class=\"line\">    AppCache.saveToken(<span class=\"string\">&quot;abc123&quot;</span>); <span class=\"comment\">// 加了 @file:JvmName 注解后的访问方式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JvmStatic\"><a href=\"#JvmStatic\" class=\"headerlink\" title=\"JvmStatic\"></a>JvmStatic</h4><p>如果将命名对象或伴生对象中定义的函数注解为 <code>@JvmStatic</code> ，Kotlin 会为这些函数生成静态方法。</p>\n<p><code>命名对象中的 @JvmStatic</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> SizeUtil &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">dp2px</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sp2px</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSizeUtil</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 之前的访问方式</span></span><br><span class=\"line\">    SizeUtil.INSTANCE.dp2px();</span><br><span class=\"line\">    SizeUtil.INSTANCE.sp2px();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加了 @JvmStatic 注解后，dp2px 变成了静态方法</span></span><br><span class=\"line\">    SizeUtil.dp2px();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>伴生对象中的 @JvmStatic</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayYes</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayNo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUtil</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 之前的访问方式</span></span><br><span class=\"line\">    Util.Companion.sayYes();</span><br><span class=\"line\">    Util.Companion.sayNo();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加了 <span class=\"doctag\">@JvmStatic</span> 注解后，Util 生成了静态方法 sayYes，</span></span><br><span class=\"line\"><span class=\"comment\">     * 该静态方法直接访问 Companion 的 sayYes()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Util.sayYes();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>@JvmStatic</code> 注解也可以应用于对象或伴生对象的属性，使其 getter 和 setter 方法成为该对象或包含伴生对象的类的静态成员。</p>\n</blockquote>\n<h4 id=\"JvmOverloads\"><a href=\"#JvmOverloads\" class=\"headerlink\" title=\"JvmOverloads\"></a>JvmOverloads</h4><p>在 Kotlin 中调用默认参数值的方法或者构造函数是完全没问题的，Java 中调用相应 Kotlin 方法时，是必须输入所有参数的值的，Kotlin 中默认参数我们无法使用。而当加上 <code>@JvmOverloads</code>, Kotlin 编译器生成的字节码中有对应的重载方法，我们就可以通过 Java 的重载方式来使用 Kotlin 的代码了，不必要输入所有的参数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ParamView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(context: Context, attrs: AttributeSet? = <span class=\"literal\">null</span>, defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>) : LinearLayout(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上 Kotlin 的自定义控件加上 <code>@JvmOverloads</code> 后，相当于 Java 中的以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParamView</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LinearLayout</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ParamView</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(context, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ParamView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ParamView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"type\">int</span> defStyleAttr)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Kotlin 中构造函数、顶级函数、类中方法，静态方法（@Jvmstatic 修饰）均可采用 <code>@JvmOverloads</code> 生成对应重载方法。</p>\n</blockquote>\n<h3 id=\"注解使用处目标\"><a href=\"#注解使用处目标\" class=\"headerlink\" title=\"注解使用处目标\"></a>注解使用处目标</h3><p>当某个元素可能会包含多种内容（例如构造属性，成员属性），使用注解时可以通过「注解使⽤处⽬标」，让注解对⽬标发⽣作⽤，例如 @file: 、 @get: 、@set: 等。  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> : <span class=\"type\">Application</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">        <span class=\"meta\">@get:JvmName</span>(<span class=\"string\">&quot;instance&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> instance: Application</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate()</span><br><span class=\"line\">        instance = <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App.Companion.getInstance(); <span class=\"comment\">// java 中原来调用方式</span></span><br><span class=\"line\">App.instance(); <span class=\"comment\">// java 中现在调用方式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Elvis-操作符\"><a href=\"#Elvis-操作符\" class=\"headerlink\" title=\"Elvis 操作符\"></a>Elvis 操作符</h3><p>可通过 <code>?:</code> 的操作来简化 <code>if null</code> 操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lesson.date 为空时使⽤默认值</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> date = lesson.date?: <span class=\"string\">&quot;⽇期待定&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// lesson.state 为空时提前返回函数</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> state = lesson.state?: <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"comment\">// lesson.content 为空时抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> content = lesson.content ?: <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">&quot;content expected&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"空指针安全\"><a href=\"#空指针安全\" class=\"headerlink\" title=\"空指针安全\"></a>空指针安全</h3><p>Kotlin 中，当我们定义一个变量时，其默认就是非空类型。如果你直接尝试给他赋值为 null, 编译器会直接报错。Kotlin 中将符号 “?” 定义为安全调用操作符。变量类型后面跟 ? 号定义，表明这是一个可空类型。同样的，在调用子属性和函数时，也可以用字符 ? 进行安全调用。Kotlin 的编译器会在写代码时就检查非空情况。</p>\n<p>Kotlin 还提供 “!!” 双感叹号操作符来强制调用对象的属性和方法，无视其是否非空。这是一个挺危险的操作符，除非有特殊需求，否则为了远离 NPE, 还是少用为妙。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tvContent: TextView <span class=\"comment\">// 非空类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tvContent: TextView? <span class=\"comment\">// 可空类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">!! <span class=\"comment\">// 强行调用符</span></span><br><span class=\"line\">? <span class=\"comment\">// 安全调用符</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1: String = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">s1 = <span class=\"literal\">null</span> <span class=\"comment\">// 这里编译器会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2: String? = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">s2 = <span class=\"literal\">null</span> <span class=\"comment\">// 编译器不会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> l1 = s1.length <span class=\"comment\">// 可正常编译</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> l2 = s2.length <span class=\"comment\">// 没有做非空判断，编译器检查报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (s2 != <span class=\"literal\">null</span>) s2.length <span class=\"comment\">// Java 式的判空方案</span></span><br><span class=\"line\">s2?.length <span class=\"comment\">// Kotlin 的安全调用操作符 ?。当 s2 为 null 时，s2?.length 也为 null</span></span><br><span class=\"line\"></span><br><span class=\"line\">s2!!.length <span class=\"comment\">// 可能会导致 NPE</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lateinit-关键字\"><a href=\"#lateinit-关键字\" class=\"headerlink\" title=\"lateinit 关键字\"></a>lateinit 关键字</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、lateinit 只能修饰 var 可读可写变量。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、lateinit 关键字声明的变量类型必须是不可空类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、lateinit 声明的变量不能有初始值。</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、lateinit 声明的变量不能是基本数据类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * 5、在构造器中初始化的属性不需要 lateinit 关键字。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> tvContent: TextView</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h3><p>数据类通常都是由多个属性和对应的 getter、setter 组成。当有大量多属性时，不仅这些类会因为大量的 getter 和 setter 方法而行数爆炸，也使整个工程方法数骤增。</p>\n<p>Kotlin 中做了这层特性优化，提供了数据类的简单实现。不用再写 getter、setter 方法，这些都由编译器背后去做，你得到的是一个清爽干净的数据类。数据类用 <code>data class</code> 声明。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>把这个数据类反编译成 Java 代码可知，数据类除了为我们生成了 getter、setter（val 声明的变量不生成 setter 方法）、构造函数外，还有以下方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">equals() / hashCode()</span><br><span class=\"line\">toString()</span><br><span class=\"line\">componentN()...</span><br><span class=\"line\">copy()</span><br></pre></td></tr></table></figure>\n\n<p><code>copy 函数</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Student copy(int id, String name, int age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new Student(id, name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当要复制一个对象，只改变一些属性，但其余不变，copy() 就是为此而生。</p>\n<p><code>componentN 函数-解构声明（Destructuring Declarations）</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> int component1() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String component2() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> int component3() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器为数据类（data class）自动声明 componentN() 函数，可直接用解构声明。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> student = Student(<span class=\"number\">101</span>, <span class=\"string\">&quot;ZhangSan&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> (id, name, age) = student <span class=\"comment\">// 自动赋值给 id, name, age</span></span><br><span class=\"line\">println(<span class=\"string\">&quot;id=<span class=\"variable\">$id</span>, name=<span class=\"variable\">$name</span>, age=<span class=\"variable\">$age</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相等性\"><a href=\"#相等性\" class=\"headerlink\" title=\"相等性\"></a>相等性</h3><p><code>两个等号==和三个等号===</code></p>\n<p>两个等号 <code>==</code>：比较的是<strong>对象的内容</strong>是否相同，相当于 Java 的 equals()。<code>==</code> 的否定形式为 <code>!=</code> 。</p>\n<p>三个等号 <code>===</code>：比较的是<strong>对象的地址</strong>是否相同（即判断是否为同一对象），相当于 Java 的 &#x3D;&#x3D;。<code>===</code> 的否定形式为 <code>!==</code> 。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> student1 = Student(<span class=\"number\">101</span>, <span class=\"string\">&quot;ZhangSan&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> student2 = Student(<span class=\"number\">101</span>, <span class=\"string\">&quot;ZhangSan&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (student1 == student2) &#123; <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (student1 === student2) &#123; <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"operator\"><a href=\"#operator\" class=\"headerlink\" title=\"operator\"></a>operator</h3><p>通过 operator 修饰「特定函数名」的函数，例如 plus 、get, 可以达到重载运算符的效果。</p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>翻译为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a + b</td>\n<td>a.plus(b)</td>\n</tr>\n<tr>\n<td>a - b</td>\n<td>a.minus(b)</td>\n</tr>\n<tr>\n<td>a * b</td>\n<td>a.times(b)</td>\n</tr>\n<tr>\n<td>a &#x2F; b</td>\n<td>a.div(b)</td>\n</tr>\n</tbody></table>\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>委托，也就是委托模式，它是 23 种经典设计模式中的一种，又名<code>代理模式</code>，在委托模式中，有 2 个对象参与同一个请求的处理，接受请求的对象将请求委托给另一个对象来处理。委托模式中，有三个角色：约束、委托对象和被委托对象。Kotlin 直接支持委托模式，更加优雅，简洁。Kotlin 通过关键字 <code>by</code> 实现委托。</p>\n<ul>\n<li><strong>约束</strong>：约束是接口或者抽象类，它定义了通用的业务类型，也就是需要被代理的业务。</li>\n<li><strong>被委托对象</strong>：具体的业务逻辑执行者。</li>\n<li><strong>委托对象</strong>：负责对真正角色的应用，将约束类定义的业务委托给具体的委托对象。</li>\n</ul>\n<h4 id=\"类委托\"><a href=\"#类委托\" class=\"headerlink\" title=\"类委托\"></a>类委托</h4><p>类的委托即一个类中定义的方法实际是调用另一个类的对象的方法来实现的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 约束类，我们约定的业务</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IGamePlayer</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">play</span><span class=\"params\">()</span></span> <span class=\"comment\">// 打游戏</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被委托对象，实现了我们约定的业务</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RealGamePlayer</span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> name: String) : IGamePlayer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">play</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;name&#125;</span>开始打游戏&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 委托对象，通过关键字 by 建立委托类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DelegateGamePlayer</span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> player: IGamePlayer) : IGamePlayer <span class=\"keyword\">by</span> player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> realGamePlayer = RealGamePlayer(<span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> delegateGamePlayer = DelegateGamePlayer(realGamePlayer)</span><br><span class=\"line\">    delegateGamePlayer.play() <span class=\"comment\">// 输出：张三开始打游戏</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 DelegateGamePlayer 声明中，by 子句表示，将 player 保存在 DelegateGamePlayer 的对象实例内部，而且编译器将会生成继承自 IGamePlayer 接口的所有方法，并将调用转发给 player。</p>\n<blockquote>\n<p> 可以通过类委托的模式来减少继承。</p>\n</blockquote>\n<h4 id=\"属性委托\"><a href=\"#属性委托\" class=\"headerlink\" title=\"属性委托\"></a>属性委托</h4><p>属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类的属性统一管理。</p>\n<p>属性委托语法格式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span>/<span class=\"keyword\">var</span> &lt;属性名&gt;: &lt;类型&gt; <span class=\"keyword\">by</span> &lt;表达式&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>var&#x2F;val：属性类型(可变&#x2F;只读)。</li>\n<li>属性名：属性名称。</li>\n<li>类型：属性的数据类型。</li>\n<li>表达式：委托代理类。</li>\n</ul>\n<p>by 关键字之后的表达式就是委托，属性的 get() 方法（以及 set() 方法）将被委托给这个对象的 getValue() 和 setValue() 方法。属性委托不必实现任何接口，但必须提供 getValue() 函数（对于 var 属性，还需要 setValue() 函数）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被委托类（委托代理类）</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类需要包含 getValue() 方法和 setValue() 方法，且参数 thisRef 为进行委托的类的对象，property 为进行委托的属性的对象。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Delegate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"variable\">$thisRef</span>, 这里委托了 <span class=\"subst\">$&#123;property.name&#125;</span> 属性&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;<span class=\"variable\">$thisRef</span> 的 <span class=\"subst\">$&#123;property.name&#125;</span> 属性赋值为 <span class=\"variable\">$value</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token: String <span class=\"keyword\">by</span> Delegate()</span><br><span class=\"line\">    println(token) <span class=\"comment\">// 访问该属性，调用 getValue() 函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    token = <span class=\"string\">&quot;xxx&quot;</span>   <span class=\"comment\">// 调用 setValue() 函数</span></span><br><span class=\"line\">    println(token)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的参数解释如下：</p>\n<ul>\n<li><code>thisRef</code> —— 必须与属性所有者类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型。</li>\n<li><code>property</code> —— 必须是类型 <code>KProperty&lt;*&gt;</code> 或其超类型。</li>\n<li><code>value</code> —— 必须与属性同类型或者是它的子类型。</li>\n</ul>\n<h4 id=\"属性委托的另一种实现方式\"><a href=\"#属性委托的另一种实现方式\" class=\"headerlink\" title=\"属性委托的另一种实现方式\"></a>属性委托的另一种实现方式</h4><p>Kotlin 标准库中声明了 2 个含所需 <code>operator</code> 方法的 <code>ReadOnlyProperty / ReadWriteProperty</code> 接口。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ReadOnlyProperty</span>&lt;<span class=\"type\">in R, out T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ReadWriteProperty</span>&lt;<span class=\"type\">in R, T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>被委托类</code> 实现这两个接口其中之一就可以了，<code>val</code> 属性实现 <code>ReadOnlyProperty</code>, <code>var</code> 属性实现 <code>ReadWriteProperty</code>。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Delegate2</span> : <span class=\"type\">ReadWriteProperty</span>&lt;<span class=\"type\">Any?, String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> token2: String <span class=\"keyword\">by</span> Delegate2()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标准库中提供的几个委托\"><a href=\"#标准库中提供的几个委托\" class=\"headerlink\" title=\"标准库中提供的几个委托\"></a>标准库中提供的几个委托</h4><ul>\n<li>延迟属性（lazy）: 其值只在首次访问时计算。</li>\n<li>可观察属性（observable）: 监听器会收到有关此属性变更的通知。</li>\n<li>把多个属性储存在一个映射（map）中，而不是每个存在单独的字段中。</li>\n</ul>\n<p><strong>1、延迟属性 lazy</strong></p>\n<p>lazy() 是一个函数，接受一个 Lambda 表达式作为参数，返回一个 Lazy <T> 实例的函数，返回的实例可以作为实现延迟属性的委托：第一次调用 get() 会执行已传递给 lazy() 的 lamda 表达式并记录结果，后续调用 get() 只是返回记录的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;computed!&quot;</span>) <span class=\"comment\">// 第一次调用输出，第二次调用不执行</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    println(lazyValue) <span class=\"comment\">// 第一次执行，执行两次输出表达式</span></span><br><span class=\"line\">    println(lazyValue) <span class=\"comment\">// 第二次执行，只输出返回值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行输出结果</span></span><br><span class=\"line\">computed!</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、可观察属性 Observable</strong></p>\n<p>observable 可以用于实现观察者模式。</p>\n<p>Delegates.observable() 函数接受两个参数：第一个是初始化值，第二个是属性值被修改时的回调处理器 onChange。回调处理器有三个参数：被赋值的属性、旧值和新值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> kotlin.properties.Delegates</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> Delegates.observable(<span class=\"string\">&quot;A&quot;</span>) &#123; property, oldValue, newValue -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;旧值：<span class=\"variable\">$oldValue</span> -&gt; 新值：<span class=\"variable\">$newValue</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> user = User()</span><br><span class=\"line\">    user.name = <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">    user.name = <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行输出结果</span></span><br><span class=\"line\">旧值：A -&gt; 新值：B</span><br><span class=\"line\">旧值：B -&gt; 新值：C</span><br></pre></td></tr></table></figure>\n\n<p><strong>vetoable 函数</strong>：<code>vetoable</code> 与 <code>observable</code> 一样，可以观察属性值的变化，不同的是，<code>vetoable</code> 可以通过<code>处理器函数来决定属性值是否生效</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个 Int 类型的属性 vetoableProp, 如果新的值比旧值大，则生效，否则不生效。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vetoableProp: <span class=\"built_in\">Int</span> <span class=\"keyword\">by</span> Delegates.vetoable(<span class=\"number\">0</span>)&#123; _, oldValue, newValue -&gt;</span><br><span class=\"line\">    <span class=\"comment\">// 如果新的值大于旧值，则生效</span></span><br><span class=\"line\">    newValue &gt; oldValue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、把属性储存在映射中</strong></p>\n<p>一个常见的用例是在一个映射（map）里存储属性的值。 这经常出现在像解析 JSON 或者做其他“动态”事情的应用中。 在这种情况下，你可以使用映射实例自身作为委托来实现委托属性。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> map: Map&lt;String, Any?&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String <span class=\"keyword\">by</span> map</span><br><span class=\"line\">    <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>  <span class=\"keyword\">by</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数接受一个映射参数</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> user = User(mapOf(</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;age&quot;</span>  to <span class=\"number\">18</span></span><br><span class=\"line\">    ))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取映射值</span></span><br><span class=\"line\">    println(user.name)</span><br><span class=\"line\">    println(user.age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集合中函数式-API-操作符\"><a href=\"#集合中函数式-API-操作符\" class=\"headerlink\" title=\"集合中函数式 API 操作符\"></a>集合中函数式 API 操作符</h3><h4 id=\"筛选过滤类\"><a href=\"#筛选过滤类\" class=\"headerlink\" title=\"筛选过滤类\"></a>筛选过滤类</h4><h5 id=\"slice-系列\"><a href=\"#slice-系列\" class=\"headerlink\" title=\"slice 系列\"></a>slice 系列</h5><p>操作符可以取集合中一部分元素或者某个元素，最后组合成一个新元素。</p>\n<ul>\n<li><p>**<code>slice(indices: IntRange)</code>**：指定切片的起始位置和终止位置，将范围内的元素切出加入到新集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).slice(IntRange(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">println(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>slice(indices: Iterable&lt;Int&gt;)</code>**：指定下标分别切出对应的元素，放入新集合中。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).slice(IntRange(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">println(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> list2 = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).slice(listOf(<span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">println(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"filter-系列\"><a href=\"#filter-系列\" class=\"headerlink\" title=\"filter 系列\"></a>filter 系列</h5><ul>\n<li><p>**<code>filter(predicate: (T) -&gt; Boolean)</code>**：从一个集合筛选出符合条件的元素，并以一个新集合返回。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).filter &#123; it % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">println(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterTo(destination: C, predicate: (T) -&gt; Boolean)</code>**：从多个集合筛选出符合条件的元素，并最终用一个集合进行收集从每个集合筛选出的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numberList1 = listOf(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> numberList2 = listOf(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> numberList3 = listOf(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// filterTo 的 destination 是一个可变集合类型，所以这里使用 mutableListOf 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> newNumberList = mutableListOf&lt;<span class=\"built_in\">Int</span>&gt;().apply &#123;</span><br><span class=\"line\">    numberList1.filterTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        it % <span class=\"number\">5</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    numberList2.filterTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        it % <span class=\"number\">5</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    numberList3.filterTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        it % <span class=\"number\">20</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(newNumberList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>, <span class=\"number\">20</span>, <span class=\"number\">40</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIndexed(predicate: (index: Int, T) -&gt; Boolean)</code>**：需要集合元素 <code>index</code> 参与筛选条件。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = listOf(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>).filterIndexed &#123; index, item -&gt;</span><br><span class=\"line\">    index &gt; <span class=\"number\">2</span> &amp;&amp; item % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">12</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIndexedTo(destination: C, predicate: (index: Int, T) -&gt; Boolean)</code>**：从多个集合筛选出符合条件的元素，筛选条件需要 <code>index</code>，并最终用一个集合进行收集从每个集合筛选出的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = mutableListOf&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">listOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>).filterIndexedTo(result) &#123; index, item -&gt;</span><br><span class=\"line\">    index == item</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIsInstance()</code>**：一个抽象类集合中含有多种子类型的元素，可以很方便筛选对应子类型的元素，并组成一个集合返回。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = mutableListOf(<span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"number\">5f</span>, <span class=\"number\">6.0</span>, <span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = list.filterIsInstance&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterIsInstanceTo(destination: C)</code>**：适用于筛选多个集合的情况。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = mutableListOf(<span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"number\">5f</span>, <span class=\"number\">6.0</span>, <span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = mutableListOf&lt;String&gt;()</span><br><span class=\"line\">list.filterIsInstanceTo(result)</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>filterNot(predicate: (T) -&gt; Boolean)</code><strong>、</strong><code>filterNotTo(destination: C, predicate: (T) -&gt; Boolean)</code>**：从一个集合筛选出符合条件之外的元素，并以一个新集合返回。它是 filter 操作符取反操作。</p>\n</li>\n<li><p>**<code>filterNotNull()</code><strong>、</strong><code>filterNotNullTo(destination: C)</code>**：filterNotNull 操作符可以过滤集合中为 null 的元素。同理 filterNotNullTo 才是真正过滤操作，但是需要从外部传入一个可变集合。</p>\n</li>\n</ul>\n<h5 id=\"drop-系列\"><a href=\"#drop-系列\" class=\"headerlink\" title=\"drop 系列\"></a>drop 系列</h5><ul>\n<li><p>**<code>drop(n: Int)</code>**：把集合元素去除一部分，drop 是顺序地删除，n 则表示顺序删除几个元素，最后返回剩余元素集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).drop(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>dropLast(n: Int)</code>**：根据传入数值 n，表示从右到左倒序地删除 n 个集合中的元素，并返回集合中剩余的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).dropLast(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>dropWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的第一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).dropWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>dropLastWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的最后一项开始去掉满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，返回剩余元素（可能剩余元素有满足条件的元素）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).dropLastWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"take-系列\"><a href=\"#take-系列\" class=\"headerlink\" title=\"take 系列\"></a>take 系列</h5><ul>\n<li><p>**<code>take(n: Int)</code>**：从原集合的第一项开始顺序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。换句话说就是取集合前 n 个元素组成新的集合返回。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).take(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>takeLast(n: Int)</code>**：从原集合的最后一项开始倒序取集合的元素，取 n 个元素，最后返回取出这些元素的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).takeLast(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>takeLastWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的最后一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).takeLastWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>takeWhile(predicate: (T) -&gt; Boolean)</code>**：从集合的第一项开始取出满足条件元素，这样操作一直持续到出现第一个不满足条件元素出现为止，暂停取元素，返回取出元素的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).takeWhile &#123; it &lt; <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"distinct-系列\"><a href=\"#distinct-系列\" class=\"headerlink\" title=\"distinct 系列\"></a>distinct 系列</h5><ul>\n<li><p><code>distinct</code>：去除集合中的重复元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>).distinct())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>distinctBy(selector: (T) -&gt; K)</code>**：根据操作元素后的结果去除重复元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>).distinctBy &#123; it % <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"并集类操作符\"><a href=\"#并集类操作符\" class=\"headerlink\" title=\"并集类操作符\"></a>并集类操作符</h4><h5 id=\"any、all、count、none-系列\"><a href=\"#any、all、count、none-系列\" class=\"headerlink\" title=\"any、all、count、none 系列\"></a>any、all、count、none 系列</h5><ul>\n<li><p>**<code>any()</code>**：判断是不是一个集合，若是，则再判断集合是否为空。若为空则返回 false，反之返回 true。若不是集合，则返回 hasNext。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>).any())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>any(predicate: (T) -&gt; Boolean)</code>**：判断集合中是否存在满足条件的元素。若存在则返回 true，反之返回 false。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>).any &#123; it &gt; <span class=\"number\">30</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>all(predicate: (T) -&gt; Boolean)</code>**：判断集合中的所有元素是否都满足条件。若是则返回 true，反之则返回 false。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).all &#123; it % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>count()</code><strong>、</strong><code>count(predicate: (T) -&gt; Boolean)</code>**：返回集合中的元素个数或查询集合中满足条件的元素个数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).count())</span><br><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).count &#123; it &gt; <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>none()</code><strong>、</strong><code>none(predicate: (T) -&gt; Boolean)</code>**：如果一个集合是空集合，返回 true 或者集合中没有满足条件的元素，则返回 true。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).none()) </span><br><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>).none &#123; it &gt; <span class=\"number\">50</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"fold-系列\"><a href=\"#fold-系列\" class=\"headerlink\" title=\"fold 系列\"></a>fold 系列</h5><ul>\n<li><p>**<code>fold(initial: R, operation: (acc: R, T) -&gt; R)</code>**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>).fold(<span class=\"number\">10</span>) &#123; result, element -&gt;</span><br><span class=\"line\">    result + element</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>foldIndexed(initial: R, operation: (index: Int, acc: R, T) -&gt; R)</code>**：在一个初始值的基础上，从第一项到最后一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;h&quot;</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;o&quot;</span>).foldIndexed(<span class=\"string\">&quot;Say&quot;</span>) &#123; index, result, element -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span><span class=\"variable\">$index</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Say h0 e1 l2 l3 o4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>foldRight(initial: R, operation: (T, acc: R) -&gt; R)</code>**：在一个初始值的基础上，从最后项到第一项通过一个函数累计所有的元素，与 fold 类似，不过是从最后一项开始累计。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).foldRight(<span class=\"string\">&quot;Say&quot;</span>) &#123; element, result -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Say <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -&gt; R)</code>**：在一个初始值的基础上，从最后一项到第一项通过一个函数累计所有的元素，该函数的参数可以包含元素索引。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).foldRightIndexed(<span class=\"string\">&quot;Say&quot;</span>) &#123; index, element, result -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span>-<span class=\"variable\">$index</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Say <span class=\"number\">3</span>-<span class=\"number\">2</span> <span class=\"number\">2</span>-<span class=\"number\">1</span> <span class=\"number\">1</span>-<span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"forEach-系列\"><a href=\"#forEach-系列\" class=\"headerlink\" title=\"forEach 系列\"></a>forEach 系列</h5><ul>\n<li><p>**<code>forEach(action: (T) -&gt; Unit)</code>**：集合元素的遍历操作符。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).forEach &#123;</span><br><span class=\"line\">    print(it)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>forEachIndexed(action: (index: Int, T) -&gt; Unit)</code>**：集合中带元素下标的遍历操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listOf(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>).forEachIndexed &#123; index, s -&gt;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span> &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">0</span>-<span class=\"number\">1</span> <span class=\"number\">1</span>-<span class=\"number\">2</span> <span class=\"number\">2</span>-<span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"max、min-系列\"><a href=\"#max、min-系列\" class=\"headerlink\" title=\"max、min 系列\"></a>max、min 系列</h5><ul>\n<li><p>**<code>maxOrNull()</code>**：获取集合中最大的元素，若为空元素集合，则返回 null。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;A&quot;</span>).maxOrNull())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>maxByOrNull(selector: (T) -&gt; R)</code>**：根据给定的函数返回最大的一项，如果没有则返回 null。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(-<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>).maxByOrNull &#123;</span><br><span class=\"line\">    it * -<span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">-<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>maxWithOrNull(comparator: Comparator&lt;in T&gt;)</code>**：接受一个 Comparator 对象并且根据此 Comparator 对象返回最大元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;-20&quot;</span>, <span class=\"string\">&quot;-102&quot;</span>, <span class=\"string\">&quot;0&quot;</span>).maxWithOrNull(compareBy &#123;</span><br><span class=\"line\">    it.length</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">-<span class=\"number\">102</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>min 操作符作用与 max 相反，包括 minBy 和 minWith。</p>\n</blockquote>\n<h5 id=\"reduce-系列\"><a href=\"#reduce-系列\" class=\"headerlink\" title=\"reduce 系列\"></a>reduce 系列</h5><ul>\n<li><p>**<code>reduce(operation: (acc: S, T) -&gt; S)</code>**：从集合中的第一项到最后一项的累计操作，与 fold 操作符的区别是没有初始值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"string\">&quot;Nice&quot;</span>, <span class=\"string\">&quot;to&quot;</span>, <span class=\"string\">&quot;meet&quot;</span>, <span class=\"string\">&quot;you&quot;</span>).reduce &#123; result, element -&gt;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$result</span> <span class=\"variable\">$element</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">Nice to meet you</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中 reduceIndexed，reduceRight，reduceRightIndexed 操作符都与前述的 fold 相关操作符类似，只是没有初始值。</p>\n</blockquote>\n</li>\n<li><p>**<code>reduceOrNull(operation: (acc: S, T) -&gt; S)</code>**：从集合中的第一项到最后一项的累计操作，如果集合为空，返回 null。</p>\n<blockquote>\n<p>reduceRightOrNull 操作符作用等价于 reduceRight，不同的是当集合为空，返回 null。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"sum-系列\"><a href=\"#sum-系列\" class=\"headerlink\" title=\"sum 系列\"></a>sum 系列</h5><ul>\n<li><p>**<code>sum()</code>**：计算集合中所有元素累加的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).sum())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sumOf(selector: (T) -&gt; Int)</code>**：计算集合所有元素通过某个函数转换后数据之和。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).sumOf &#123; it * <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"映射类操作符\"><a href=\"#映射类操作符\" class=\"headerlink\" title=\"映射类操作符\"></a>映射类操作符</h4><h5 id=\"flatMap-系列\"><a href=\"#flatMap-系列\" class=\"headerlink\" title=\"flatMap 系列\"></a>flatMap 系列</h5><ul>\n<li><p>**<code>flatMap(transform: (T) -&gt; Iterable&lt;R&gt;)</code>**：根据条件合并两个集合，组成一个新的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">println(strList.flatMap &#123; listOf(it.plus(<span class=\"string\">&quot;1&quot;</span>)) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[A1, B1, C1]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>flatMapTo(destination: C, transform: (T) -&gt; Iterable&lt;R&gt;)</code>**：多个集合的条件合并。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> resultList = mutableListOf&lt;String&gt;().apply &#123;</span><br><span class=\"line\">    strList.flatMapTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        listOf(it.plus(<span class=\"string\">&quot;1&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strList2.flatMapTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        listOf(it.plus(<span class=\"string\">&quot;2&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(resultList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[A1, B1, C1, a2, b2, c2]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"group-系列\"><a href=\"#group-系列\" class=\"headerlink\" title=\"group 系列\"></a>group 系列</h5><ul>\n<li><p>**<code>groupBy(keySelector: (T) -&gt; K)</code>**：分组操作符，根据条件将集合拆分为一个 Map 类型集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.groupBy &#123; <span class=\"keyword\">if</span> (it.startsWith(<span class=\"string\">&quot;Java&quot;</span>)) <span class=\"string\">&quot;MyJava&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;MyKotlin&quot;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">&#123;MyJava=[Java, JavaScript], MyKotlin=[Kotlin, C, C++]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>groupByTo(destination: M, keySelector: (T) -&gt; K)</code>**：分组操作，适用于多个集合的分组操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;15&quot;</span>, <span class=\"string\">&quot;223&quot;</span>, <span class=\"string\">&quot;45&quot;</span>, <span class=\"string\">&quot;520&quot;</span>, <span class=\"string\">&quot;18&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> mutableMap = mutableMapOf&lt;String, MutableList&lt;String&gt;&gt;().apply &#123;</span><br><span class=\"line\">    strList.groupByTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it.startsWith(<span class=\"string\">&quot;Java&quot;</span>)) <span class=\"string\">&quot;Java&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;Not Java&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strList2.groupByTo(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it.contains(<span class=\"string\">&quot;2&quot;</span>)) <span class=\"string\">&quot;2&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;Not 2&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(mutableMap)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">&#123;Java=[Java, JavaScript], Not Java=[Kotlin, C, C++], Not <span class=\"number\">2</span>=[<span class=\"number\">15</span>, <span class=\"number\">45</span>, <span class=\"number\">18</span>], <span class=\"number\">2</span>=[<span class=\"number\">223</span>, <span class=\"number\">520</span>]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>groupingBy(crossinline keySelector: (T) -&gt; K)</code>**：对元素进行分组，然后一次将操作应用于所有分组。适用于对集合复杂分组的情况。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.groupingBy &#123; it.startsWith(<span class=\"string\">&quot;Java&quot;</span>) &#125;.eachCount())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">&#123;<span class=\"literal\">true</span>=<span class=\"number\">2</span>, <span class=\"literal\">false</span>=<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Grouping</code> 支持以下操作：</p>\n<ul>\n<li>eachCount() 计算每个组中的元素。</li>\n<li>fold() 与 reduce() 对每个组分别执行 fold 与 reduce 操作，作为一个单独的集合并返回结果。</li>\n<li>aggregate() 随后将给定操作应用于每个组中的所有元素并返回结果。 这是对 <code>Grouping</code> 执行任何操作的通用方法。当折叠或缩小不够时，可使用它来实现自定义操作。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"map-系列\"><a href=\"#map-系列\" class=\"headerlink\" title=\"map 系列\"></a>map 系列</h5><ul>\n<li><p>**<code>map(transform: (T) -&gt; R)</code>**：集合变换，遍历每个元素并执行给定表达式，最终形成新的集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.map &#123; it.plus(<span class=\"string\">&quot;-1&quot;</span>) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[Java-<span class=\"number\">1</span>, Kotlin-<span class=\"number\">1</span>, C-<span class=\"number\">1</span>, C++-<span class=\"number\">1</span>, JavaScript-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapTo(destination: C, transform: (T) -&gt; R)</code>**：多个集合的元素转换。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">println(mutableListOf&lt;String&gt;().apply &#123;</span><br><span class=\"line\">    strList.mapTo(<span class=\"keyword\">this</span>) &#123; it.plus(<span class=\"string\">&quot;-1&quot;</span>) &#125;</span><br><span class=\"line\">    strList2.mapTo(<span class=\"keyword\">this</span>) &#123; it.plus(<span class=\"string\">&quot;-2&quot;</span>) &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[A-<span class=\"number\">1</span>, B-<span class=\"number\">1</span>, C-<span class=\"number\">1</span>, a-<span class=\"number\">2</span>, b-<span class=\"number\">2</span>, c-<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapIndexed(transform: (index: Int, T) -&gt; R)</code>**：带有元素下标的集合转换。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">println(strList.mapIndexed &#123; index, s -&gt; <span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span>&quot;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>-A, <span class=\"number\">1</span>-B, <span class=\"number\">2</span>-C]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapIndexedTo(destination: C, transform: (index: Int, T) -&gt; R)</code>**：带有元素下标的多个集合转换。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> strList2 = listOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">println(mutableListOf&lt;String&gt;().apply &#123;</span><br><span class=\"line\">    strList.mapIndexedTo(<span class=\"keyword\">this</span>) &#123; index, s -&gt; <span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span>&quot;</span> &#125;</span><br><span class=\"line\">    strList2.mapIndexedTo(<span class=\"keyword\">this</span>) &#123; index, s -&gt; <span class=\"string\">&quot;<span class=\"variable\">$index</span>-<span class=\"variable\">$s</span>&quot;</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>-A, <span class=\"number\">1</span>-B, <span class=\"number\">2</span>-C, <span class=\"number\">0</span>-a, <span class=\"number\">1</span>-b, <span class=\"number\">2</span>-c]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapNotNull(transform: (T) -&gt; R?)</code>**：同 <code>map</code> 函数的作用相同，不过其过滤了集合转换后为 null 的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.mapNotNull &#123; <span class=\"keyword\">if</span> (it.startsWith(<span class=\"string\">&quot;Java&quot;</span>)) <span class=\"literal\">null</span> <span class=\"keyword\">else</span> it &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果：</span></span><br><span class=\"line\">[Kotlin, C, C++]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>mapNotNullTo(destination: C, transform: (T) -&gt; R?)</code>**：同 mapNotNull 函数的作用相同，它适用于多集合操作场景。</p>\n</li>\n<li><p>**<code>mapIndexedNotNull</code> 和 <code>mapIndexedNotNullTo</code>**：同理。</p>\n</li>\n</ul>\n<h4 id=\"元素类操作符\"><a href=\"#元素类操作符\" class=\"headerlink\" title=\"元素类操作符\"></a>元素类操作符</h4><h5 id=\"element-系列\"><a href=\"#element-系列\" class=\"headerlink\" title=\"element 系列\"></a>element 系列</h5><ul>\n<li><p>**<code>elementAt(index: Int)</code>**：获取集合指定下标的元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.elementAt(<span class=\"number\">1</span>)) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>elementAtOrElse(index: Int, defaultValue: (Int) -&gt; T)</code>**：获取对应下标的集合元素。若下标越界，返回默认值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.elementAtOrElse(<span class=\"number\">10</span>) &#123; <span class=\"string\">&quot;unknown&quot;</span> &#125;) <span class=\"comment\">// 打印：unknown</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>elementAtOrNull(index: Int)</code>**：获取对应下标的集合元素。若下标越界，返回 null。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.elementAtOrNull(<span class=\"number\">10</span>)) <span class=\"comment\">// 打印：null</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"first、last-系列\"><a href=\"#first、last-系列\" class=\"headerlink\" title=\"first、last 系列\"></a>first、last 系列</h5><ul>\n<li><p>**<code>first()</code>**：获取集合第一个元素，若集合为空集合，这会抛出 NoSuchElementException 异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.first()) <span class=\"comment\">// 打印：Java</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>first(predicate: (T) -&gt; Boolean)</code>**：获取集合中指定条件的第一个元素。若不满足条件，抛异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.first &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>firstOrNull()</code>**：获取集合第一个元素，若集合为空集合，返回 null。</p>\n</li>\n<li><p>**<code>firstOrNull&#123;&#125;</code>**：获取集合满足条件的首个元素，若无则返回 null。</p>\n</li>\n</ul>\n<blockquote>\n<p>与 <code>first</code> 等操作符对应的是 <code>last</code> 等相关操作符，即取集合最后一个元素等。</p>\n</blockquote>\n<h5 id=\"find-系列\"><a href=\"#find-系列\" class=\"headerlink\" title=\"find 系列\"></a>find 系列</h5><ul>\n<li><p>**<code>find(predicate: (T) -&gt; Boolean)</code>**：获取集合满足条件的首个元素，若无则返回 null，其实就是 firstOrNull{}。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.find &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>findLast(predicate: (T) -&gt; Boolean)</code>**：获取集合满足条件的最后一个元素，若无则返回 null，其实就是 lastOrNull{}。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.findLast &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：JavaScript</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"single-系列\"><a href=\"#single-系列\" class=\"headerlink\" title=\"single 系列\"></a>single 系列</h5><ul>\n<li><p>**<code>single()</code>**：当集合中只有一个元素时，返回该元素，否则抛异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.single()) <span class=\"comment\">// 打印：java.lang.IllegalArgumentException: List has more than one element.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>single(predicate: (T) -&gt; Boolean)</code>**：找到集合中满足条件的元素，若只有单个元素满足条件，则返回该元素，否则抛异常。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.single &#123; it.startsWith(<span class=\"string\">&quot;K&quot;</span>) &#125;) <span class=\"comment\">// 打印：Kotlin</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><strong><code>singleOrNull</code> 或 <code>singleOrNull&#123;&#125;</code> 操作符</strong> 只是将前述的抛异常改为返回 null。</p>\n</blockquote>\n<h5 id=\"component-系列\"><a href=\"#component-系列\" class=\"headerlink\" title=\"component 系列\"></a>component 系列</h5><ul>\n<li><p>**<code>component1()</code> … <code>component5()</code>**：用于获取第 1 到第 5 个元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.component3()) <span class=\"comment\">// 打印：C</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"indexOf-系列\"><a href=\"#indexOf-系列\" class=\"headerlink\" title=\"indexOf 系列\"></a>indexOf 系列</h5><ul>\n<li><p>**<code>indexOf(element: T)</code>**：返回指定元素的下标，若不存在，则返回 -1。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.indexOf(<span class=\"string\">&quot;C&quot;</span>)) <span class=\"comment\">// 打印：2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>indexOfFirst(predicate: (T) -&gt; Boolean)</code>**：返回满足条件的第一个元素的下标，若不存在，则返回 -1。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.indexOfFirst &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>indexOfLast(predicate: (T) -&gt; Boolean)</code>**：返回满足条件的最后一个元素的下标，若不存在，则返回 -1。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.indexOfLast &#123; it.length &gt; <span class=\"number\">5</span> &#125;) <span class=\"comment\">// 打印：4</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"排序类操作符\"><a href=\"#排序类操作符\" class=\"headerlink\" title=\"排序类操作符\"></a>排序类操作符</h4><h5 id=\"reverse-系列\"><a href=\"#reverse-系列\" class=\"headerlink\" title=\"reverse 系列\"></a>reverse 系列</h5><ul>\n<li><p>**<code>reversed()</code>**：反转集合元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.reversed()) <span class=\"comment\">// 打印：[JavaScript, C++, C, Kotlin, Java]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"sort-系列\"><a href=\"#sort-系列\" class=\"headerlink\" title=\"sort 系列\"></a>sort 系列</h5><ul>\n<li><p>**<code>sorted()</code>**：对集合中的元素自然升序排序。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sorted()) <span class=\"comment\">// 打印：[C, C++, Java, JavaScript, Kotlin]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sortedDescending()</code>**：与 sorted 操作符相反，为倒序。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sortedDescending()) <span class=\"comment\">// 打印：[Kotlin, JavaScript, Java, C++, C]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sortedBy(crossinline selector: (T) -&gt; R?)</code>**：根据条件升序，即把不满足条件的放在前面，满足条件的放在后面。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sortedBy &#123; it.length &#125;) <span class=\"comment\">// 打印：[C, C++, Java, Kotlin, JavaScript]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>sortedByDescending(crossinline selector: (T) -&gt; R?)</code>**：与 sortedBy 操作符相反，为倒序。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.sortedByDescending &#123; it.length &#125;) <span class=\"comment\">// 打印：[JavaScript, Kotlin, Java, C++, C]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"生成类操作符\"><a href=\"#生成类操作符\" class=\"headerlink\" title=\"生成类操作符\"></a>生成类操作符</h4><h5 id=\"partition-系列\"><a href=\"#partition-系列\" class=\"headerlink\" title=\"partition 系列\"></a>partition 系列</h5><ul>\n<li><p>**<code>partition(predicate: (T) -&gt; Boolean)</code>**：将一个集合按条件拆分为两个 pair 组成的新集合。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.partition &#123; it.startsWith(<span class=\"string\">&quot;Java&quot;</span>) &#125;) <span class=\"comment\">// 打印：([Java, JavaScript], [Kotlin, C, C++])</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"plus-系列\"><a href=\"#plus-系列\" class=\"headerlink\" title=\"plus 系列\"></a>plus 系列</h5><ul>\n<li><p>**<code>plus(element: T)</code>**：合并两个集合中的元素，组成一个新的集合。也可以使用符号 <code>+</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.plus(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))) <span class=\"comment\">// 打印：[Java, Kotlin, C, C++, JavaScript, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>plusElement(element: T)</code>**：往集合中添加一个元素。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.plusElement(<span class=\"string\">&quot;CSS&quot;</span>)) <span class=\"comment\">// 打印：[Java, Kotlin, C, C++, JavaScript, CSS]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"zip-系列\"><a href=\"#zip-系列\" class=\"headerlink\" title=\"zip 系列\"></a>zip 系列</h5><ul>\n<li><p>**<code>zip(other: Array&lt;out R&gt;)</code>**：由两个集合按照相同的下标组成一个新集合。该新集合的类型是：<code>List&lt;Pair&gt;</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.zip(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))) <span class=\"comment\">// 打印：[(Java, 1), (Kotlin, 2), (C, 3)]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>zipWithNext(transform: (a: T, b: T) -&gt; R)</code>**：集合中相邻元素组成 <code>pairs</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> strList = listOf(<span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>)</span><br><span class=\"line\">println(strList.zipWithNext()) <span class=\"comment\">// 打印：[(Java, Kotlin), (Kotlin, C), (C, C++), (C++, JavaScript)]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Pair 了解一下","date":"2019-01-30T03:05:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n### 介绍\n\n**Pair** 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 `first` 与 `second` .\n\n```Java\npublic class Pair<F, S> {\n    public final F first;\n    public final S second;\n\n    public Pair(F first, S second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof Pair)) {\n            return false;\n        }\n        Pair<?, ?> p = (Pair<?, ?>) o;\n        return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n    }\n\n    // ...\n\n    public static <A, B> Pair <A, B> create(A a, B b) {\n        return new Pair<A, B>(a, b);\n    }\n}\n```\n\n### 用法\n\n它的使用也是非常简单的：\n\n```Java\n// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建\nPair pair1 = new Pair<Integer, String>(1, \"111\"); // 第一种方式创建\nPair pair2 = Pair.create(1, 111); // 第二种方式创建\nPair pair3 = Pair.create(1, 111);\n\nLog.e(TAG, pair1.first.toString()); // 1\nLog.e(TAG, pair1.second.toString()); // 111\nLog.e(TAG, pair1.second.equals(\"111\") + \"\"); // true\nLog.e(TAG, pair1.second.equals(111) + \"\"); // false\n\nLog.e(TAG, pair1.equals(pair2) + \"\"); // false\nLog.e(TAG, pair2.equals(pair3) + \"\"); // true\n```\n\n从以上示例可知：\n\n- Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；\n- Pair 的 equals 比较的是 first 与 second 值是否同时 equals .\n\n说到 `equals` , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。\n\n```Java\n// android.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    }\n    Pair<?, ?> p = (Pair<?, ?>) o;\n    return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n}\n\n// android.support.v4.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> p = (Pair)o;\n        return ObjectsCompat.equals(p.first, this.first) && ObjectsCompat.equals(p.second, this.second);\n    }\n}\n```\n\nObjectsCompat 类里面的 equals 方法：\n\n```Java\npublic static boolean equals(@Nullable Object a, @Nullable Object b) {\n    if (VERSION.SDK_INT >= 19) {\n        return Objects.equals(a, b);\n    } else {\n        return a == b || a != null && a.equals(b);\n    }\n}\n```\n\nObjects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。\n\n### 使用场景\n\n在**既要以键值对的方式存储数据列表，同时在输出时保持顺序**的情况下，我们可以使用 Pair 搭配 ArrayList 实现。\n\n**场景一：**\n\n假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。\n\n```Java\nArrayList<Pair<String,String>> dataList = new ArrayList();\n```\n\n**场景二：**\n\n记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。\n\n```Java\nArrayList<Pair<Long,Message>> dataList = new ArrayList();\n```","source":"_posts/Pair-了解一下.md","raw":"---\ntitle: Pair 了解一下\ndate: 2019-1-30 11:05:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n### 介绍\n\n**Pair** 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 `first` 与 `second` .\n\n```Java\npublic class Pair<F, S> {\n    public final F first;\n    public final S second;\n\n    public Pair(F first, S second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof Pair)) {\n            return false;\n        }\n        Pair<?, ?> p = (Pair<?, ?>) o;\n        return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n    }\n\n    // ...\n\n    public static <A, B> Pair <A, B> create(A a, B b) {\n        return new Pair<A, B>(a, b);\n    }\n}\n```\n\n### 用法\n\n它的使用也是非常简单的：\n\n```Java\n// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建\nPair pair1 = new Pair<Integer, String>(1, \"111\"); // 第一种方式创建\nPair pair2 = Pair.create(1, 111); // 第二种方式创建\nPair pair3 = Pair.create(1, 111);\n\nLog.e(TAG, pair1.first.toString()); // 1\nLog.e(TAG, pair1.second.toString()); // 111\nLog.e(TAG, pair1.second.equals(\"111\") + \"\"); // true\nLog.e(TAG, pair1.second.equals(111) + \"\"); // false\n\nLog.e(TAG, pair1.equals(pair2) + \"\"); // false\nLog.e(TAG, pair2.equals(pair3) + \"\"); // true\n```\n\n从以上示例可知：\n\n- Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；\n- Pair 的 equals 比较的是 first 与 second 值是否同时 equals .\n\n说到 `equals` , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。\n\n```Java\n// android.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    }\n    Pair<?, ?> p = (Pair<?, ?>) o;\n    return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n}\n\n// android.support.v4.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> p = (Pair)o;\n        return ObjectsCompat.equals(p.first, this.first) && ObjectsCompat.equals(p.second, this.second);\n    }\n}\n```\n\nObjectsCompat 类里面的 equals 方法：\n\n```Java\npublic static boolean equals(@Nullable Object a, @Nullable Object b) {\n    if (VERSION.SDK_INT >= 19) {\n        return Objects.equals(a, b);\n    } else {\n        return a == b || a != null && a.equals(b);\n    }\n}\n```\n\nObjects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。\n\n### 使用场景\n\n在**既要以键值对的方式存储数据列表，同时在输出时保持顺序**的情况下，我们可以使用 Pair 搭配 ArrayList 实现。\n\n**场景一：**\n\n假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。\n\n```Java\nArrayList<Pair<String,String>> dataList = new ArrayList();\n```\n\n**场景二：**\n\n记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。\n\n```Java\nArrayList<Pair<Long,Message>> dataList = new ArrayList();\n```","slug":"Pair-了解一下","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd6001incttacp0c2cs","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>Pair</strong> 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 <code>first</code> 与 <code>second</code> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span>&lt;F, S&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> F first;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> S second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">(F first, S second)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.first = first;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.second = second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;A, B&gt; Pair &lt;A, B&gt; create(A a, B b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;A, B&gt;(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>它的使用也是非常简单的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建</span></span><br><span class=\"line\"><span class=\"type\">Pair</span> <span class=\"variable\">pair1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;Integer, String&gt;(<span class=\"number\">1</span>, <span class=\"string\">&quot;111&quot;</span>); <span class=\"comment\">// 第一种方式创建</span></span><br><span class=\"line\"><span class=\"type\">Pair</span> <span class=\"variable\">pair2</span> <span class=\"operator\">=</span> Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>); <span class=\"comment\">// 第二种方式创建</span></span><br><span class=\"line\"><span class=\"type\">Pair</span> <span class=\"variable\">pair3</span> <span class=\"operator\">=</span> Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.first.toString()); <span class=\"comment\">// 1</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.toString()); <span class=\"comment\">// 111</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"string\">&quot;111&quot;</span>) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"number\">111</span>) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.equals(pair2) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">Log.e(TAG, pair2.equals(pair3) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>从以上示例可知：</p>\n<ul>\n<li>Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；</li>\n<li>Pair 的 equals 比较的是 first 与 second 值是否同时 equals .</li>\n</ul>\n<p>说到 <code>equals</code> , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// android.util 包下</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// android.support.v4.util 包下</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair)o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ObjectsCompat.equals(p.first, <span class=\"built_in\">this</span>.first) &amp;&amp; ObjectsCompat.equals(p.second, <span class=\"built_in\">this</span>.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ObjectsCompat 类里面的 equals 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object a, <span class=\"meta\">@Nullable</span> Object b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(a, b);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a == b || a != <span class=\"literal\">null</span> &amp;&amp; a.equals(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Objects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在<strong>既要以键值对的方式存储数据列表，同时在输出时保持顺序</strong>的情况下，我们可以使用 Pair 搭配 ArrayList 实现。</p>\n<p><strong>场景一：</strong></p>\n<p>假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;String,String&gt;&gt; dataList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>场景二：</strong></p>\n<p>记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;Long,Message&gt;&gt; dataList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>Pair</strong> 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 <code>first</code> 与 <code>second</code> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span>&lt;F, S&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> F first;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> S second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">(F first, S second)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.first = first;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.second = second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;A, B&gt; Pair &lt;A, B&gt; create(A a, B b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;A, B&gt;(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>它的使用也是非常简单的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建</span></span><br><span class=\"line\"><span class=\"type\">Pair</span> <span class=\"variable\">pair1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;Integer, String&gt;(<span class=\"number\">1</span>, <span class=\"string\">&quot;111&quot;</span>); <span class=\"comment\">// 第一种方式创建</span></span><br><span class=\"line\"><span class=\"type\">Pair</span> <span class=\"variable\">pair2</span> <span class=\"operator\">=</span> Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>); <span class=\"comment\">// 第二种方式创建</span></span><br><span class=\"line\"><span class=\"type\">Pair</span> <span class=\"variable\">pair3</span> <span class=\"operator\">=</span> Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.first.toString()); <span class=\"comment\">// 1</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.toString()); <span class=\"comment\">// 111</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"string\">&quot;111&quot;</span>) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"number\">111</span>) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.equals(pair2) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">Log.e(TAG, pair2.equals(pair3) + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>从以上示例可知：</p>\n<ul>\n<li>Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；</li>\n<li>Pair 的 equals 比较的是 first 与 second 值是否同时 equals .</li>\n</ul>\n<p>说到 <code>equals</code> , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// android.util 包下</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// android.support.v4.util 包下</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair)o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ObjectsCompat.equals(p.first, <span class=\"built_in\">this</span>.first) &amp;&amp; ObjectsCompat.equals(p.second, <span class=\"built_in\">this</span>.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ObjectsCompat 类里面的 equals 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object a, <span class=\"meta\">@Nullable</span> Object b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(a, b);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a == b || a != <span class=\"literal\">null</span> &amp;&amp; a.equals(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Objects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在<strong>既要以键值对的方式存储数据列表，同时在输出时保持顺序</strong>的情况下，我们可以使用 Pair 搭配 ArrayList 实现。</p>\n<p><strong>场景一：</strong></p>\n<p>假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;String,String&gt;&gt; dataList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>场景二：</strong></p>\n<p>记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;Long,Message&gt;&gt; dataList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br></pre></td></tr></table></figure>"},{"title":"Kotlin 泛型中的 in 和 out","date":"2019-03-27T03:15:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 `in` 和 `out` 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。\n\n那啥叫逆变？啥叫协变？可以参考下维基百科的定义：[协变与逆变](https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98)\n\n### in & out 怎么记？\n\n**out（协变）**\n\n如果泛型类**只将**泛型类型作为函数的返回（输出），那么使用 out：\n\n```Kotlin\ninterface Production<out T> {\n    fun produce(): T\n}\n```\n\n可以称之为生产类/接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：\n\n**produce = output = out**\n\n**in（逆变）**\n\n如果泛型类**只将**泛型类型作为函数的入参（输入），那么使用 in：\n\n```Kotlin\ninterface Consumer<in T> {\n    fun consume(item: T)\n}\n```\n\n可以称之为消费者类/接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：\n\n**consume = input = in**\n\n**invariant（不变）**\n\n如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：\n\n```Kotlin\ninterface ProductionConsumer<T> {\n    fun produce(): T\n    fun consume(item: T)\n}\n```\n\n### 为啥要使用 in & out ？\n\n举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。\n\n```Kotlin\nopen class Food\nopen class FastFood : Food() \nclass Burger : FastFood()\n```\n\n#### 汉堡生产者\n\n根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：\n\n```Kotlin\nclass FoodStore : Production<Food> {\n    override fun produce(): Food {\n        println(\"Produce food\")\n        return Food()\n    }\n}\n\nclass FastFoodStore : Production<FastFood> {\n    override fun produce(): FastFood {\n        println(\"Produce fast food\")\n        return FastFood()\n    }\n}\n\nclass InOutBurger : Production<Burger> {\n    override fun produce(): Burger {\n        println(\"Produce burger\")\n        return Burger()\n    }\n}\n```\n\n现在，我们可以这样赋值：\n\n```Kotlin\nval production1 : Production<Food> = FoodStore()\nval production2 : Production<Food> = FastFoodStore()\nval production3 : Production<Food> = InOutBurger()\n```\n\n显然，汉堡商店属于快餐商店，也属于食物商店。\n\n> **因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。**\n\n如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：\n\n```Kotlin\nval production1 : Production<Burger> = FoodStore()  // Error\nval production2 : Production<Burger> = FastFoodStore()  // Error\nval production3 : Production<Burger> = InOutBurger()\n```\n\n#### 汉堡消费者\n\n根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：\n\n```Kotlin\nclass Everybody : Consumer<Food> {\n    override fun consume(item: Food) {\n        println(\"Eat food\")\n    }\n}\n\nclass ModernPeople : Consumer<FastFood> {\n    override fun consume(item: FastFood) {\n        println(\"Eat fast food\")\n    }\n}\n\nclass American : Consumer<Burger> {\n    override fun consume(item: Burger) {\n        println(\"Eat burger\")\n    }\n}\n```\n\n我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：\n\n```Kotlin\nval consumer1 : Consumer<Burger> = Everybody()\nval consumer2 : Consumer<Burger> = ModernPeople()\nval consumer3 : Consumer<Burger> = American()\n```\n\n不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。\n\n> **因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。**\n\n反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。\n\n```Kotlin\nval consumer1 : Consumer<Food> = Everybody()\nval consumer2 : Consumer<Food> = ModernPeople()  // Error\nval consumer3 : Consumer<Food> = American()  // Error\n```\n\n### 记住 in & out 的另一种方式\n\n- 父类泛型对象可以赋值给子类泛型对象，用 in；\n- 子类泛型对象可以赋值给父类泛型对象，用 out。\n\n\n\n参考资料：\n\n[In and out type variant of Kotlin](https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c)\n\n[Kotlin 泛型中的 in 和 out](https://zhuanlan.zhihu.com/p/32583310)","source":"_posts/Kotlin-泛型中的-in-和-out.md","raw":"---\ntitle: Kotlin 泛型中的 in 和 out\ndate: 2019-03-27 11:15:00\ncategories: \"Kotlin\"\ntags:\n     - Android\n     - Kotlin\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 `in` 和 `out` 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。\n\n那啥叫逆变？啥叫协变？可以参考下维基百科的定义：[协变与逆变](https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98)\n\n### in & out 怎么记？\n\n**out（协变）**\n\n如果泛型类**只将**泛型类型作为函数的返回（输出），那么使用 out：\n\n```Kotlin\ninterface Production<out T> {\n    fun produce(): T\n}\n```\n\n可以称之为生产类/接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：\n\n**produce = output = out**\n\n**in（逆变）**\n\n如果泛型类**只将**泛型类型作为函数的入参（输入），那么使用 in：\n\n```Kotlin\ninterface Consumer<in T> {\n    fun consume(item: T)\n}\n```\n\n可以称之为消费者类/接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：\n\n**consume = input = in**\n\n**invariant（不变）**\n\n如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：\n\n```Kotlin\ninterface ProductionConsumer<T> {\n    fun produce(): T\n    fun consume(item: T)\n}\n```\n\n### 为啥要使用 in & out ？\n\n举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。\n\n```Kotlin\nopen class Food\nopen class FastFood : Food() \nclass Burger : FastFood()\n```\n\n#### 汉堡生产者\n\n根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：\n\n```Kotlin\nclass FoodStore : Production<Food> {\n    override fun produce(): Food {\n        println(\"Produce food\")\n        return Food()\n    }\n}\n\nclass FastFoodStore : Production<FastFood> {\n    override fun produce(): FastFood {\n        println(\"Produce fast food\")\n        return FastFood()\n    }\n}\n\nclass InOutBurger : Production<Burger> {\n    override fun produce(): Burger {\n        println(\"Produce burger\")\n        return Burger()\n    }\n}\n```\n\n现在，我们可以这样赋值：\n\n```Kotlin\nval production1 : Production<Food> = FoodStore()\nval production2 : Production<Food> = FastFoodStore()\nval production3 : Production<Food> = InOutBurger()\n```\n\n显然，汉堡商店属于快餐商店，也属于食物商店。\n\n> **因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。**\n\n如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：\n\n```Kotlin\nval production1 : Production<Burger> = FoodStore()  // Error\nval production2 : Production<Burger> = FastFoodStore()  // Error\nval production3 : Production<Burger> = InOutBurger()\n```\n\n#### 汉堡消费者\n\n根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：\n\n```Kotlin\nclass Everybody : Consumer<Food> {\n    override fun consume(item: Food) {\n        println(\"Eat food\")\n    }\n}\n\nclass ModernPeople : Consumer<FastFood> {\n    override fun consume(item: FastFood) {\n        println(\"Eat fast food\")\n    }\n}\n\nclass American : Consumer<Burger> {\n    override fun consume(item: Burger) {\n        println(\"Eat burger\")\n    }\n}\n```\n\n我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：\n\n```Kotlin\nval consumer1 : Consumer<Burger> = Everybody()\nval consumer2 : Consumer<Burger> = ModernPeople()\nval consumer3 : Consumer<Burger> = American()\n```\n\n不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。\n\n> **因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。**\n\n反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。\n\n```Kotlin\nval consumer1 : Consumer<Food> = Everybody()\nval consumer2 : Consumer<Food> = ModernPeople()  // Error\nval consumer3 : Consumer<Food> = American()  // Error\n```\n\n### 记住 in & out 的另一种方式\n\n- 父类泛型对象可以赋值给子类泛型对象，用 in；\n- 子类泛型对象可以赋值给父类泛型对象，用 out。\n\n\n\n参考资料：\n\n[In and out type variant of Kotlin](https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c)\n\n[Kotlin 泛型中的 in 和 out](https://zhuanlan.zhihu.com/p/32583310)","slug":"Kotlin-泛型中的-in-和-out","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd7001jnctt3rx9e7zo","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<p>当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 <code>in</code> 和 <code>out</code> 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。</p>\n<p>那啥叫逆变？啥叫协变？可以参考下维基百科的定义：<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98\">协变与逆变</a></p>\n<h3 id=\"in-out-怎么记？\"><a href=\"#in-out-怎么记？\" class=\"headerlink\" title=\"in &amp; out 怎么记？\"></a>in &amp; out 怎么记？</h3><p><strong>out（协变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的返回（输出），那么使用 out：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Production</span>&lt;<span class=\"type\">out T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以称之为生产类&#x2F;接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：</p>\n<p><strong>produce &#x3D; output &#x3D; out</strong></p>\n<p><strong>in（逆变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的入参（输入），那么使用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Consumer</span>&lt;<span class=\"type\">in T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以称之为消费者类&#x2F;接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：</p>\n<p><strong>consume &#x3D; input &#x3D; in</strong></p>\n<p><strong>invariant（不变）</strong></p>\n<p>如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ProductionConsumer</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为啥要使用-in-out-？\"><a href=\"#为啥要使用-in-out-？\" class=\"headerlink\" title=\"为啥要使用 in &amp; out ？\"></a>为啥要使用 in &amp; out ？</h3><p>举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Food</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FastFood</span> : <span class=\"type\">Food</span>() </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Burger</span> : <span class=\"type\">FastFood</span>()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"汉堡生产者\"><a href=\"#汉堡生产者\" class=\"headerlink\" title=\"汉堡生产者\"></a>汉堡生产者</h4><p>根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Food</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Food &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Produce food&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Food()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FastFoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">FastFood</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: FastFood &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Produce fast food&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FastFood()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InOutBurger</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Burger</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Burger &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Produce burger&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Burger()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Food&gt; = FoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Food&gt; = FastFoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Food&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n\n<p>显然，汉堡商店属于快餐商店，也属于食物商店。</p>\n<blockquote>\n<p><strong>因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。</strong></p>\n</blockquote>\n<p>如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Burger&gt; = FoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Burger&gt; = FastFoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Burger&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"汉堡消费者\"><a href=\"#汉堡消费者\" class=\"headerlink\" title=\"汉堡消费者\"></a>汉堡消费者</h4><p>根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Everybody</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Food</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Food</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Eat food&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ModernPeople</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">FastFood</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">FastFood</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Eat fast food&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">American</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Burger</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Burger</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Eat burger&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Burger&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Burger&gt; = ModernPeople()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Burger&gt; = American()</span><br></pre></td></tr></table></figure>\n\n<p>不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。</p>\n<blockquote>\n<p><strong>因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。</strong></p>\n</blockquote>\n<p>反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Food&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Food&gt; = ModernPeople()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Food&gt; = American()  <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记住-in-out-的另一种方式\"><a href=\"#记住-in-out-的另一种方式\" class=\"headerlink\" title=\"记住 in &amp; out 的另一种方式\"></a>记住 in &amp; out 的另一种方式</h3><ul>\n<li>父类泛型对象可以赋值给子类泛型对象，用 in；</li>\n<li>子类泛型对象可以赋值给父类泛型对象，用 out。</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c\">In and out type variant of Kotlin</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32583310\">Kotlin 泛型中的 in 和 out</a></p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n\n\n<p>当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 <code>in</code> 和 <code>out</code> 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。</p>\n<p>那啥叫逆变？啥叫协变？可以参考下维基百科的定义：<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98\">协变与逆变</a></p>\n<h3 id=\"in-out-怎么记？\"><a href=\"#in-out-怎么记？\" class=\"headerlink\" title=\"in &amp; out 怎么记？\"></a>in &amp; out 怎么记？</h3><p><strong>out（协变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的返回（输出），那么使用 out：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Production</span>&lt;<span class=\"type\">out T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以称之为生产类&#x2F;接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：</p>\n<p><strong>produce &#x3D; output &#x3D; out</strong></p>\n<p><strong>in（逆变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的入参（输入），那么使用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Consumer</span>&lt;<span class=\"type\">in T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以称之为消费者类&#x2F;接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：</p>\n<p><strong>consume &#x3D; input &#x3D; in</strong></p>\n<p><strong>invariant（不变）</strong></p>\n<p>如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ProductionConsumer</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为啥要使用-in-out-？\"><a href=\"#为啥要使用-in-out-？\" class=\"headerlink\" title=\"为啥要使用 in &amp; out ？\"></a>为啥要使用 in &amp; out ？</h3><p>举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Food</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FastFood</span> : <span class=\"type\">Food</span>() </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Burger</span> : <span class=\"type\">FastFood</span>()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"汉堡生产者\"><a href=\"#汉堡生产者\" class=\"headerlink\" title=\"汉堡生产者\"></a>汉堡生产者</h4><p>根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Food</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Food &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Produce food&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Food()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FastFoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">FastFood</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: FastFood &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Produce fast food&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FastFood()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InOutBurger</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Burger</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Burger &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Produce burger&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Burger()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Food&gt; = FoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Food&gt; = FastFoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Food&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n\n<p>显然，汉堡商店属于快餐商店，也属于食物商店。</p>\n<blockquote>\n<p><strong>因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。</strong></p>\n</blockquote>\n<p>如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Burger&gt; = FoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Burger&gt; = FastFoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Burger&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"汉堡消费者\"><a href=\"#汉堡消费者\" class=\"headerlink\" title=\"汉堡消费者\"></a>汉堡消费者</h4><p>根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Everybody</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Food</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Food</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Eat food&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ModernPeople</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">FastFood</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">FastFood</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Eat fast food&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">American</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Burger</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Burger</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Eat burger&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Burger&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Burger&gt; = ModernPeople()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Burger&gt; = American()</span><br></pre></td></tr></table></figure>\n\n<p>不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。</p>\n<blockquote>\n<p><strong>因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。</strong></p>\n</blockquote>\n<p>反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Food&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Food&gt; = ModernPeople()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Food&gt; = American()  <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记住-in-out-的另一种方式\"><a href=\"#记住-in-out-的另一种方式\" class=\"headerlink\" title=\"记住 in &amp; out 的另一种方式\"></a>记住 in &amp; out 的另一种方式</h3><ul>\n<li>父类泛型对象可以赋值给子类泛型对象，用 in；</li>\n<li>子类泛型对象可以赋值给父类泛型对象，用 out。</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c\">In and out type variant of Kotlin</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32583310\">Kotlin 泛型中的 in 和 out</a></p>\n"},{"title":"WebStorm 2018 版本破解","date":"2018-08-14T16:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：\n\n1. 下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2\n\n2. 下载破解补丁。[下载链接](https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg)，密码：yxb5\n\n3. 拷贝补丁到 WebStorm 安装目录的 bin 目录下\n\n4. 同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：\n\n   **-javaagent:webstorm安装路径/bin/破解补丁名字.jar**\n\n   如笔者要添加的一行代码为：\n\n   ```Java\n   -javaagent:C:/Program Files/JetBrains/WebStorm 2018.1.2/bin/JetbrainsCrack-2.8-release-enc.jar\n   ```\n\n   > 注意斜杠的方向\n\n5. 保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。","source":"_posts/WebStorm-2018-版本破解.md","raw":"---\ntitle: WebStorm 2018 版本破解\ndate: 2018-08-15\ncategories: \"工具\"\ntags:\n     - WebStorm\n     - 工具\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：\n\n1. 下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2\n\n2. 下载破解补丁。[下载链接](https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg)，密码：yxb5\n\n3. 拷贝补丁到 WebStorm 安装目录的 bin 目录下\n\n4. 同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：\n\n   **-javaagent:webstorm安装路径/bin/破解补丁名字.jar**\n\n   如笔者要添加的一行代码为：\n\n   ```Java\n   -javaagent:C:/Program Files/JetBrains/WebStorm 2018.1.2/bin/JetbrainsCrack-2.8-release-enc.jar\n   ```\n\n   > 注意斜杠的方向\n\n5. 保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。","slug":"WebStorm-2018-版本破解","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd9001oncttdb6rgajv","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<p>本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：</p>\n<ol>\n<li><p>下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2</p>\n</li>\n<li><p>下载破解补丁。<a href=\"https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg\">下载链接</a>，密码：yxb5</p>\n</li>\n<li><p>拷贝补丁到 WebStorm 安装目录的 bin 目录下</p>\n</li>\n<li><p>同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：</p>\n<p><strong>-javaagent:webstorm安装路径&#x2F;bin&#x2F;破解补丁名字.jar</strong></p>\n<p>如笔者要添加的一行代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-javaagent:C:/Program Files/JetBrains/WebStorm <span class=\"number\">2018.1</span><span class=\"number\">.2</span>/bin/JetbrainsCrack-<span class=\"number\">2.8</span>-release-enc.jar</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意斜杠的方向</p>\n</blockquote>\n</li>\n<li><p>保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。</p>\n</li>\n</ol>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<p>本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：</p>\n<ol>\n<li><p>下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2</p>\n</li>\n<li><p>下载破解补丁。<a href=\"https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg\">下载链接</a>，密码：yxb5</p>\n</li>\n<li><p>拷贝补丁到 WebStorm 安装目录的 bin 目录下</p>\n</li>\n<li><p>同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：</p>\n<p><strong>-javaagent:webstorm安装路径&#x2F;bin&#x2F;破解补丁名字.jar</strong></p>\n<p>如笔者要添加的一行代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-javaagent:C:/Program Files/JetBrains/WebStorm <span class=\"number\">2018.1</span><span class=\"number\">.2</span>/bin/JetbrainsCrack-<span class=\"number\">2.8</span>-release-enc.jar</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意斜杠的方向</p>\n</blockquote>\n</li>\n<li><p>保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。</p>\n</li>\n</ol>\n"},{"title":"localStorage 实现历史记录功能","date":"2018-09-28T16:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n我们知道 **localStorage 的生命周期是永久的**。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。\n\n**sessionStorage 的生命周期为当前窗口或者标签页**。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。\n\n> 不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。\n\n\n如此看来，localStorage 更适合用来做历史输入记录的存储。\n\n> 思路：存储的历史记录用 historyItems 表示，historyItems 以 '|' 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。\n\n**存储数据**\n\n```\nsetHistoryItem(keyword) {\n    keyword = keyword.trim();\n    let { historyItems } = localStorage;\n    if (historyItems === undefined) {\n        localStorage.historyItems = keyword;\n    } else {\n        const onlyItem = historyItems.split('|').filter(e => e != keyword);\n        if (onlyItem.length > 0) {\n            historyItems = keyword + '|' + onlyItem.join('|');\n        }\n        localStorage.historyItems = historyItems;\n    }\n}\n```\n\n**获取所有数据**\n\n```\ngetHistoryItems() {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    return localStorage.historyItems.split('|');\n}\n```\n\n**根据关键字获取数据**\n\n```\ngetHistoryItemsByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    keyword = keyword.trim();\n    let seletedHistoryItems = localStorage.historyItems.split('|').filter(e => e.indexOf(keyword) != -1);\n    return seletedHistoryItems;\n}\n```\n\n**根据关键字删除数据**\n\n```\ndeleteHistoryItemByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return;\n    }\n    let historyItems = localStorage.historyItems.split('|');\n    let index = historyItems.indexOf(keyword);\n    if (index < 0) {\n        return;\n    }\n    historyItems.splice(index, 1);\n    localStorage.historyItems = historyItems.join('|');\n}\n```\n\n**清空数据**\n\n```\nclearHistory() {\n    localStorage.removeItem('historyItems');\n}\n```","source":"_posts/localStorage-实现历史记录功能.md","raw":"---\ntitle: localStorage 实现历史记录功能\ndate: 2018-09-29\ncategories: \"前端\"\ntags:\n     - localStorage\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n我们知道 **localStorage 的生命周期是永久的**。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。\n\n**sessionStorage 的生命周期为当前窗口或者标签页**。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。\n\n> 不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。\n\n\n如此看来，localStorage 更适合用来做历史输入记录的存储。\n\n> 思路：存储的历史记录用 historyItems 表示，historyItems 以 '|' 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。\n\n**存储数据**\n\n```\nsetHistoryItem(keyword) {\n    keyword = keyword.trim();\n    let { historyItems } = localStorage;\n    if (historyItems === undefined) {\n        localStorage.historyItems = keyword;\n    } else {\n        const onlyItem = historyItems.split('|').filter(e => e != keyword);\n        if (onlyItem.length > 0) {\n            historyItems = keyword + '|' + onlyItem.join('|');\n        }\n        localStorage.historyItems = historyItems;\n    }\n}\n```\n\n**获取所有数据**\n\n```\ngetHistoryItems() {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    return localStorage.historyItems.split('|');\n}\n```\n\n**根据关键字获取数据**\n\n```\ngetHistoryItemsByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    keyword = keyword.trim();\n    let seletedHistoryItems = localStorage.historyItems.split('|').filter(e => e.indexOf(keyword) != -1);\n    return seletedHistoryItems;\n}\n```\n\n**根据关键字删除数据**\n\n```\ndeleteHistoryItemByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return;\n    }\n    let historyItems = localStorage.historyItems.split('|');\n    let index = historyItems.indexOf(keyword);\n    if (index < 0) {\n        return;\n    }\n    historyItems.splice(index, 1);\n    localStorage.historyItems = historyItems.join('|');\n}\n```\n\n**清空数据**\n\n```\nclearHistory() {\n    localStorage.removeItem('historyItems');\n}\n```","slug":"localStorage-实现历史记录功能","published":1,"updated":"2024-06-03T14:53:51.435Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rd9001pnctt7dc3b1cg","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<p>我们知道 <strong>localStorage 的生命周期是永久的</strong>。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。</p>\n<p><strong>sessionStorage 的生命周期为当前窗口或者标签页</strong>。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。</p>\n<blockquote>\n<p>不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。</p>\n</blockquote>\n<p>如此看来，localStorage 更适合用来做历史输入记录的存储。</p>\n<blockquote>\n<p>思路：存储的历史记录用 historyItems 表示，historyItems 以 ‘|’ 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。</p>\n</blockquote>\n<p><strong>存储数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHistoryItem(keyword) &#123;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let &#123; historyItems &#125; = localStorage;</span><br><span class=\"line\">    if (historyItems === undefined) &#123;</span><br><span class=\"line\">        localStorage.historyItems = keyword;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        const onlyItem = historyItems.split(&#x27;|&#x27;).filter(e =&gt; e != keyword);</span><br><span class=\"line\">        if (onlyItem.length &gt; 0) &#123;</span><br><span class=\"line\">            historyItems = keyword + &#x27;|&#x27; + onlyItem.join(&#x27;|&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        localStorage.historyItems = historyItems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取所有数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItems() &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return localStorage.historyItems.split(&#x27;|&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据关键字获取数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItemsByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let seletedHistoryItems = localStorage.historyItems.split(&#x27;|&#x27;).filter(e =&gt; e.indexOf(keyword) != -1);</span><br><span class=\"line\">    return seletedHistoryItems;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据关键字删除数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteHistoryItemByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let historyItems = localStorage.historyItems.split(&#x27;|&#x27;);</span><br><span class=\"line\">    let index = historyItems.indexOf(keyword);</span><br><span class=\"line\">    if (index &lt; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    historyItems.splice(index, 1);</span><br><span class=\"line\">    localStorage.historyItems = historyItems.join(&#x27;|&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>清空数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clearHistory() &#123;</span><br><span class=\"line\">    localStorage.removeItem(&#x27;historyItems&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<p>我们知道 <strong>localStorage 的生命周期是永久的</strong>。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。</p>\n<p><strong>sessionStorage 的生命周期为当前窗口或者标签页</strong>。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。</p>\n<blockquote>\n<p>不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。</p>\n</blockquote>\n<p>如此看来，localStorage 更适合用来做历史输入记录的存储。</p>\n<blockquote>\n<p>思路：存储的历史记录用 historyItems 表示，historyItems 以 ‘|’ 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。</p>\n</blockquote>\n<p><strong>存储数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHistoryItem(keyword) &#123;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let &#123; historyItems &#125; = localStorage;</span><br><span class=\"line\">    if (historyItems === undefined) &#123;</span><br><span class=\"line\">        localStorage.historyItems = keyword;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        const onlyItem = historyItems.split(&#x27;|&#x27;).filter(e =&gt; e != keyword);</span><br><span class=\"line\">        if (onlyItem.length &gt; 0) &#123;</span><br><span class=\"line\">            historyItems = keyword + &#x27;|&#x27; + onlyItem.join(&#x27;|&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        localStorage.historyItems = historyItems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取所有数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItems() &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return localStorage.historyItems.split(&#x27;|&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据关键字获取数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItemsByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let seletedHistoryItems = localStorage.historyItems.split(&#x27;|&#x27;).filter(e =&gt; e.indexOf(keyword) != -1);</span><br><span class=\"line\">    return seletedHistoryItems;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据关键字删除数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteHistoryItemByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let historyItems = localStorage.historyItems.split(&#x27;|&#x27;);</span><br><span class=\"line\">    let index = historyItems.indexOf(keyword);</span><br><span class=\"line\">    if (index &lt; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    historyItems.splice(index, 1);</span><br><span class=\"line\">    localStorage.historyItems = historyItems.join(&#x27;|&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>清空数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clearHistory() &#123;</span><br><span class=\"line\">    localStorage.removeItem(&#x27;historyItems&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"我的书单","date":"2018-03-06T16:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n### Java\n\n- [Java 编程思想（第 4 版）](https://book.douban.com/subject/2130190/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。\n\n- [Effective java 中文版（第 2 版）](https://book.douban.com/subject/3360807/)<font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。\n\n- [Java 并发编程实战](https://book.douban.com/subject/10484692/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  多线程并发方面不可多得的好书。\n\n- [深入理解 Java 虚拟机（第 2 版）](https://book.douban.com/subject/24722612/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  了解 Java 虚拟机的必读书籍。\n\n- [Java 程序员修炼之道](https://book.douban.com/subject/24841235/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n### Android\n\n- [Android 开发艺术探索](https://book.douban.com/subject/26599538/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 群英传](https://book.douban.com/subject/26599539/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 群英传：神兵利器](https://book.douban.com/subject/26855851/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [App 研发录：架构设计、Crash 分析和竞品技术分析](https://book.douban.com/subject/26649050/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 源码设计模式解析与实战](https://book.douban.com/subject/26644935/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 开发精要](https://book.douban.com/subject/11530748/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [kotlin-for-android-developers-zh](https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n### Web 前端\n\n- [JavaScript 权威指南 第 6 版（上、下册）](https://book.douban.com/subject/6854549/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Python\n\n- [Python 学习手册（第 4 版）](https://book.douban.com/subject/6049132/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 算法\n\n- [算法（第 4 版）](https://book.douban.com/subject/19952400/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n  Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。\n\n### 设计模式\n\n- [设计模式之禅（第 2 版）](https://book.douban.com/subject/25843319/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 其它技术书籍\n\n- [代码大全（第 2 版）](https://book.douban.com/subject/1477390/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [图解 HTTP](https://book.douban.com/subject/25863515/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [剑指 offer](https://book.douban.com/subject/6966465/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [重构 : 改善既有代码的设计](https://book.douban.com/subject/4262627/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [Maven 实战](https://book.douban.com/subject/5345682/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### 非技术书籍\n\n- [程序员的思维修炼](https://book.douban.com/subject/5372651/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [学习之道（第 2 版）](https://book.douban.com/subject/2345548/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [如何把事情做到最好](https://book.douban.com/subject/25830853/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [清醒思考的艺术](https://book.douban.com/subject/20492550/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [番茄工作法图解](https://book.douban.com/subject/5916234/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [习惯的力量](https://book.douban.com/subject/20507212/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [尽管去做](https://book.douban.com/subject/1085660/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [拖延心理学](https://book.douban.com/subject/4180711/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n\n","source":"_posts/我的书单.md","raw":"---\ntitle: 我的书单\ndate: 2018-3-7\ncategories: \"阅读笔记\"\ntags:\n     - 阅读笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n### Java\n\n- [Java 编程思想（第 4 版）](https://book.douban.com/subject/2130190/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。\n\n- [Effective java 中文版（第 2 版）](https://book.douban.com/subject/3360807/)<font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。\n\n- [Java 并发编程实战](https://book.douban.com/subject/10484692/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  多线程并发方面不可多得的好书。\n\n- [深入理解 Java 虚拟机（第 2 版）](https://book.douban.com/subject/24722612/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  了解 Java 虚拟机的必读书籍。\n\n- [Java 程序员修炼之道](https://book.douban.com/subject/24841235/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n### Android\n\n- [Android 开发艺术探索](https://book.douban.com/subject/26599538/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 群英传](https://book.douban.com/subject/26599539/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 群英传：神兵利器](https://book.douban.com/subject/26855851/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [App 研发录：架构设计、Crash 分析和竞品技术分析](https://book.douban.com/subject/26649050/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 源码设计模式解析与实战](https://book.douban.com/subject/26644935/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 开发精要](https://book.douban.com/subject/11530748/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [kotlin-for-android-developers-zh](https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n### Web 前端\n\n- [JavaScript 权威指南 第 6 版（上、下册）](https://book.douban.com/subject/6854549/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Python\n\n- [Python 学习手册（第 4 版）](https://book.douban.com/subject/6049132/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 算法\n\n- [算法（第 4 版）](https://book.douban.com/subject/19952400/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n  Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。\n\n### 设计模式\n\n- [设计模式之禅（第 2 版）](https://book.douban.com/subject/25843319/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 其它技术书籍\n\n- [代码大全（第 2 版）](https://book.douban.com/subject/1477390/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [图解 HTTP](https://book.douban.com/subject/25863515/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [剑指 offer](https://book.douban.com/subject/6966465/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [重构 : 改善既有代码的设计](https://book.douban.com/subject/4262627/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [Maven 实战](https://book.douban.com/subject/5345682/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### 非技术书籍\n\n- [程序员的思维修炼](https://book.douban.com/subject/5372651/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [学习之道（第 2 版）](https://book.douban.com/subject/2345548/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [如何把事情做到最好](https://book.douban.com/subject/25830853/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [清醒思考的艺术](https://book.douban.com/subject/20492550/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [番茄工作法图解](https://book.douban.com/subject/5916234/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [习惯的力量](https://book.douban.com/subject/20507212/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [尽管去做](https://book.douban.com/subject/1085660/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [拖延心理学](https://book.douban.com/subject/4180711/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n\n","slug":"我的书单","published":1,"updated":"2024-06-03T14:53:51.450Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rdb001unctt93am9wls","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/2130190/\">Java 编程思想（第 4 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n<p>这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/3360807/\">Effective java 中文版（第 2 版）</a><font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font></p>\n<p>这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/10484692/\">Java 并发编程实战</a><font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font></p>\n<p>多线程并发方面不可多得的好书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24722612/\">深入理解 Java 虚拟机（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n<p>了解 Java 虚拟机的必读书籍。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24841235/\">Java 程序员修炼之道</a><font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/26599538/\">Android 开发艺术探索</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26599539/\">Android 群英传</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26855851/\">Android 群英传：神兵利器</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26649050/\">App 研发录：架构设计、Crash 分析和竞品技术分析</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26644935/\">Android 源码设计模式解析与实战</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/11530748/\">Android 开发精要</a> <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details\">kotlin-for-android-developers-zh</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n</ul>\n<h3 id=\"Web-前端\"><a href=\"#Web-前端\" class=\"headerlink\" title=\"Web 前端\"></a>Web 前端</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6854549/\">JavaScript 权威指南 第 6 版（上、下册）</a> <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6049132/\">Python 学习手册（第 4 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/19952400/\">算法（第 4 版）</a> <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n<p>Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><ul>\n<li><a href=\"https://book.douban.com/subject/25843319/\">设计模式之禅（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></li>\n</ul>\n<h3 id=\"其它技术书籍\"><a href=\"#其它技术书籍\" class=\"headerlink\" title=\"其它技术书籍\"></a>其它技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1477390/\">代码大全（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25863515/\">图解 HTTP</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6966465/\">剑指 offer</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4262627/\">重构 : 改善既有代码的设计</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5345682/\">Maven 实战</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"非技术书籍\"><a href=\"#非技术书籍\" class=\"headerlink\" title=\"非技术书籍\"></a>非技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/5372651/\">程序员的思维修炼</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/2345548/\">学习之道（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25830853/\">如何把事情做到最好</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20492550/\">清醒思考的艺术</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5916234/\">番茄工作法图解</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20507212/\">习惯的力量</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/1085660/\">尽管去做</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4180711/\">拖延心理学</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n</ul>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/2130190/\">Java 编程思想（第 4 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n<p>这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/3360807/\">Effective java 中文版（第 2 版）</a><font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font></p>\n<p>这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/10484692/\">Java 并发编程实战</a><font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font></p>\n<p>多线程并发方面不可多得的好书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24722612/\">深入理解 Java 虚拟机（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n<p>了解 Java 虚拟机的必读书籍。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24841235/\">Java 程序员修炼之道</a><font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/26599538/\">Android 开发艺术探索</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26599539/\">Android 群英传</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26855851/\">Android 群英传：神兵利器</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26649050/\">App 研发录：架构设计、Crash 分析和竞品技术分析</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26644935/\">Android 源码设计模式解析与实战</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/11530748/\">Android 开发精要</a> <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details\">kotlin-for-android-developers-zh</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n</ul>\n<h3 id=\"Web-前端\"><a href=\"#Web-前端\" class=\"headerlink\" title=\"Web 前端\"></a>Web 前端</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6854549/\">JavaScript 权威指南 第 6 版（上、下册）</a> <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6049132/\">Python 学习手册（第 4 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/19952400/\">算法（第 4 版）</a> <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n<p>Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><ul>\n<li><a href=\"https://book.douban.com/subject/25843319/\">设计模式之禅（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></li>\n</ul>\n<h3 id=\"其它技术书籍\"><a href=\"#其它技术书籍\" class=\"headerlink\" title=\"其它技术书籍\"></a>其它技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1477390/\">代码大全（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25863515/\">图解 HTTP</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6966465/\">剑指 offer</a><font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4262627/\">重构 : 改善既有代码的设计</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5345682/\">Maven 实战</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"非技术书籍\"><a href=\"#非技术书籍\" class=\"headerlink\" title=\"非技术书籍\"></a>非技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/5372651/\">程序员的思维修炼</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/2345548/\">学习之道（第 2 版）</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25830853/\">如何把事情做到最好</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20492550/\">清醒思考的艺术</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5916234/\">番茄工作法图解</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20507212/\">习惯的力量</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/1085660/\">尽管去做</a><font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4180711/\">拖延心理学</a><font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font></p>\n</li>\n</ul>\n"},{"title":"剑指 Offer","date":"2017-12-08T16:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n## [二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路**\n\n从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。\n\nSolution 1 : (168 ms , 16792 K)\n\n```Java\n    public boolean Find(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int tempJ = columnCount - 1;\n        for (int i = 0; i < rowCount; i++) {\n            for (int j = tempJ; j >= 0; j--) {\n                if (target == array[i][j]) {\n//                    System.out.println(i + \" \" + j);\n                    return true;\n                }\n                if (target > array[i][j]) {\n                    break;\n                }\n                tempJ = j - 1;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\nSolution 2 : (184 ms , 16708 K)\n\n```Java\n    public boolean Find2(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int i = 0;\n        int j = columnCount - 1;\n        while (i < rowCount && i >= 0 && j < columnCount && j >= 0) {\n            if (target == array[i][j]) {\n//                System.out.println(i + \" \" + j);\n                return true;\n            }\n            if (target > array[i][j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\n## [变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n\n**思路 1：**\n\n在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。\n\n假设 n 级台阶有 f(n) 种跳法。\n\n若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； \n\n若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；\n\n……\n\n若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。\n\n总结起来就是：\n\n**f(n) = f(n - 1) + f(n - 2) + …… + f(1)**  &nbsp; &nbsp; &nbsp; ①\n\n根据递推知识，不难想到\n\nf(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②\n\n将 ② 代入 ① 得：\n\n**f(n) = 2 * f(n - 1)**\n\n即 n 级台阶有 **2 ^ (n - 1)** 种跳法。\n\nSolution 1 : (17 ms , 8624 K)\n\n```Java\n    int JumpFloorII(int target) {\n        if (target <= 0) {\n            return 0;\n        }\n        return 1 << (target - 1);\n    }\n```\n\n**思路 2：**\n\nn 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 **2^n / 2 = 2^(n - 1)** 种。\n\n\n","source":"_posts/剑指-Offer.md","raw":"---\ntitle: 剑指 Offer\ndate: 2017-12-9\ncategories: \"算法\"\ntags:\n     - 算法\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n## [二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路**\n\n从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。\n\nSolution 1 : (168 ms , 16792 K)\n\n```Java\n    public boolean Find(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int tempJ = columnCount - 1;\n        for (int i = 0; i < rowCount; i++) {\n            for (int j = tempJ; j >= 0; j--) {\n                if (target == array[i][j]) {\n//                    System.out.println(i + \" \" + j);\n                    return true;\n                }\n                if (target > array[i][j]) {\n                    break;\n                }\n                tempJ = j - 1;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\nSolution 2 : (184 ms , 16708 K)\n\n```Java\n    public boolean Find2(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int i = 0;\n        int j = columnCount - 1;\n        while (i < rowCount && i >= 0 && j < columnCount && j >= 0) {\n            if (target == array[i][j]) {\n//                System.out.println(i + \" \" + j);\n                return true;\n            }\n            if (target > array[i][j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\n## [变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n\n**思路 1：**\n\n在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。\n\n假设 n 级台阶有 f(n) 种跳法。\n\n若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； \n\n若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；\n\n……\n\n若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。\n\n总结起来就是：\n\n**f(n) = f(n - 1) + f(n - 2) + …… + f(1)**  &nbsp; &nbsp; &nbsp; ①\n\n根据递推知识，不难想到\n\nf(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②\n\n将 ② 代入 ① 得：\n\n**f(n) = 2 * f(n - 1)**\n\n即 n 级台阶有 **2 ^ (n - 1)** 种跳法。\n\nSolution 1 : (17 ms , 8624 K)\n\n```Java\n    int JumpFloorII(int target) {\n        if (target <= 0) {\n            return 0;\n        }\n        return 1 << (target - 1);\n    }\n```\n\n**思路 2：**\n\nn 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 **2^n / 2 = 2^(n - 1)** 种。\n\n\n","slug":"剑指-Offer","published":1,"updated":"2024-06-03T14:53:51.450Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rdb001xnctt9ikzd0xe","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\">二维数组中的查找</a></h2><p><strong>题目描述</strong></p>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路</strong></p>\n<p>从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。</p>\n<p>Solution 1 : (168 ms , 16792 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[][] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rowCount</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">columnCount</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tempJ</span> <span class=\"operator\">=</span> columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rowCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> tempJ; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(i + &quot; &quot; + j);</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tempJ = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;not exist .&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Solution 2 : (184 ms , 16708 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find2</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[][] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rowCount</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">columnCount</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; rowCount &amp;&amp; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; columnCount &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(i + &quot; &quot; + j);</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;not exist .&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\">变态跳台阶</a></h2><p><strong>题目描述</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>思路 1：</strong></p>\n<p>在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。</p>\n<p>假设 n 级台阶有 f(n) 种跳法。</p>\n<p>若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； </p>\n<p>若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；</p>\n<p>……</p>\n<p>若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。</p>\n<p>总结起来就是：</p>\n<p><strong>f(n) &#x3D; f(n - 1) + f(n - 2) + …… + f(1)</strong>  &nbsp; &nbsp; &nbsp; ①</p>\n<p>根据递推知识，不难想到</p>\n<p>f(n - 1) &#x3D; f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②</p>\n<p>将 ② 代入 ① 得：</p>\n<p><strong>f(n) &#x3D; 2 * f(n - 1)</strong></p>\n<p>即 n 级台阶有 <strong>2 ^ (n - 1)</strong> 种跳法。</p>\n<p>Solution 1 : (17 ms , 8624 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">JumpFloorII</span><span class=\"params\">(<span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; (target - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>思路 2：</strong></p>\n<p>n 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 <strong>2^n &#x2F; 2 &#x3D; 2^(n - 1)</strong> 种。</p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\">二维数组中的查找</a></h2><p><strong>题目描述</strong></p>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路</strong></p>\n<p>从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。</p>\n<p>Solution 1 : (168 ms , 16792 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[][] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rowCount</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">columnCount</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tempJ</span> <span class=\"operator\">=</span> columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rowCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> tempJ; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(i + &quot; &quot; + j);</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tempJ = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;not exist .&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Solution 2 : (184 ms , 16708 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find2</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[][] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rowCount</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">columnCount</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; rowCount &amp;&amp; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; columnCount &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(i + &quot; &quot; + j);</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;not exist .&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\">变态跳台阶</a></h2><p><strong>题目描述</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>思路 1：</strong></p>\n<p>在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。</p>\n<p>假设 n 级台阶有 f(n) 种跳法。</p>\n<p>若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； </p>\n<p>若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；</p>\n<p>……</p>\n<p>若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。</p>\n<p>总结起来就是：</p>\n<p><strong>f(n) &#x3D; f(n - 1) + f(n - 2) + …… + f(1)</strong>  &nbsp; &nbsp; &nbsp; ①</p>\n<p>根据递推知识，不难想到</p>\n<p>f(n - 1) &#x3D; f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②</p>\n<p>将 ② 代入 ① 得：</p>\n<p><strong>f(n) &#x3D; 2 * f(n - 1)</strong></p>\n<p>即 n 级台阶有 <strong>2 ^ (n - 1)</strong> 种跳法。</p>\n<p>Solution 1 : (17 ms , 8624 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">JumpFloorII</span><span class=\"params\">(<span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; (target - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>思路 2：</strong></p>\n<p>n 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 <strong>2^n &#x2F; 2 &#x3D; 2^(n - 1)</strong> 种。</p>\n"},{"title":"位运算总结","date":"2019-06-25T03:06:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n### 二进制的一些概念\n\n在二进制数里，最高位 0 表示正数，1 表示负数。\n\n#### 原码\n一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。\n\n```\n 5 的原码是：00000000 00000000 00000000 00000101\n-5 的原码是：10000000 00000000 00000000 00000101\n```\n\n#### 反码\n正数的反码与原码相同，负数的反码为对该数的原码**除符号位**外各位**取反**（即 0 变 1，1 变 0）。\n\n```\n正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101\n负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010\n```\n\n#### 补码\n\n正数的补码与原码相同，负数的补码为该数的反码加 1。\n\n负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：\n\n```\n11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011\n```\n\n### 位运算基础\n基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：\n\n|  符号 | 描述  | 运算规则  |\n|:----:|:-----:|:---------|\n| &    | 与    | 两个位都为 1 时，结果才为 1 |\n| &#124;   | 或    | 两个位只要有一位为 1，结果都为 1 |\n| ^    | 异或  | 两个位相同为 0，不同为 1 |\n| ~    | 取反  | 0 变 1，1 变 0 |\n| <<   | 左移  | 各二进位全部左移若干位，高位丢弃，低位补 0 |\n| >>   | 右移  | 各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）|\n\n**注意**\n\n1. 在这 6 种操作符，只有 **~** 取反是单目操作符，其它 5 种都是双目操作符。\n\n2. 位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。\n\n3. 对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。\n\n   ```Java\n   System.out.println((15) >> 2); // 3\n   System.out.println((-15) >> 2); // -4\n   ```\n   15 = 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到\n   \n   00000000 00000000 00000000 00000011 即 3。\n\n   -15 = 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到\n\n   11111111 11111111 11111111 11111100 即 -4。\n\n4. 位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。\n\n5. 位操作还有一些复合操作符，如 &=、|=、 ^=、<<=、>>=。\n\n### 常用的位运算技巧\n\n#### 判断奇偶数\n一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x & 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。\n\n如要求输出 0 到 10 之间的所有偶数：\n\n```Java\nfor (int i = 0; i < 10; i++) {\n    if ((i & 1) == 0) {\n        System.out.println(i);\n    }\n}\n```\n\n#### 交换两数\n```Java\nint a = 10;\nint b = 20;\na ^= b;\nb ^= a;\na ^= b;\nSystem.out.println(\"a=\" + a); // a=20\nSystem.out.println(\"b=\" + b); // b=10\n```\n\n**分析：**\n\n第一步，a = a ^ b ①；\n\n第二步，b = b ^ a，把 ① 代入得，b = b ^ (a ^ b)，由于 **^ 满足交换律**，所以 b = b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b = a ②；\n\n第三步，a = a ^ b，将 ①、② 代入得，a = (a ^ b) ^ a 即 a = b ③。\n\n从 ②、③ 得知，a 和 b 的值已经得到了交换。\n\n#### 变换符号\n一个数 x **取反加 1** 后就会变成 -x，即正数变为负数，负数变为正数。\n\n```Java\nint a = -5;\nint b = 10;\na = ~a + 1;\nb = ~b + 1;\nSystem.out.println(\"a=\" + a); // a=5\nSystem.out.println(\"b=\" + b); // b=-10\n```\n\n**分析：**\n\n-5 = 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：\n\n00000000 00000000 00000000 00000101 = 5\n\n> 注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。\n\n#### 求绝对值\n对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i = a >> 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return i == 0 ? a : (~a + 1);\n}\n```\n\n进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：\n\n```Java\nreturn i == 0 ? (a ^ i) : ((a ^ i) + 1);\n```\n\n上面返回值再变换下得：\n\n```Java\nreturn i == 0 ? ((a ^ i) - 0) : ((a ^ i) + 1);\n```\n\n由于 i 的值非 0 即 -1，因此上面返回值可以精简为：\n\n```Java\nreturn (a ^ i) - i;\n```\n\n通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return (a ^ i) - i;\n}\n```\n\n### 位操作与空间压缩\n当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：\n\n```Java\nboolean[] flag = new boolean[100];\n```\n\n由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 / 32 + 1）的整型数组即可完成上面的状态标记。\n\n```Java\nint[] b = new int[4]; // 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true\n```\n\n由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1/6 左右。\n\n以下是用筛素数法计算 100 以内的素数的示例代码：\n\n```Java\nprivate void printPrime() {\n    int max = 100;\n    boolean[] flag = new boolean[max];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        if (!flag[i]) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) { // 素数的倍数必然不是素数\n                flag[j] = true;\n            }\n        }\n    }\n\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？\n\n将整数 j 指定位上置为 1：\n\n> 将 1 向左移位后和其相或来达到在指定位上置 1 的效果\n\n```Java\nprivate void setOne() {\n    System.out.println();\n    int j = 0;\n    j |= (1 << 10);\n    System.out.println(Integer.toBinaryString(j));\n}\n// 输出：10000000000\n```\n\n判断整数 j 指定位上是否为 1：\n\n> 将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）\n\n```Java\nprivate void isOne() {\n    int j = 1 << 10;\n    if ((j & (1 << 10)) != 0) {\n        System.out.println(\"指定位上为 1\");\n    } else {\n        System.out.println(\"指定位上为 0\");\n    }\n}\n// 输出：指定位上为 1\n```\n\n再把这种思路扩展到一个整型数组上：\n\n```Java\nprivate void setOne2() {\n    int max = 40;\n    int[] b = new int[max / 32 + 1];\n    for (int i = 0; i < max; i += 3) {\n        b[i / 32] |= (1 << (i % 32)); // 每 3 个位设置为 1\n    }\n\n    for (int i = 0; i < max; i++) {\n        if (((b[i / 32] >> i) & 1) == 1) { // 判断是否为 1\n            System.out.print(\"1\");\n        } else {\n            System.out.print(\"0\");\n        }\n    }\n}\n// 输出：1001001001001001001001001001001001001001\n```\n\n现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：\n\n```Java\nprivate void printPrime2() {\n    int max = 100;\n    int[] b = new int[max / 32 + 1];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        int x = b[i / 32] >> (i % 32); // 通过右移，逐位判断是 0 还是 1\n        if ((x & 1) == 0) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) {\n                b[j / 32] |= (1 << (j % 32)); // 将指定位上设置为 1\n            }\n        }\n    }\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n\n","source":"_posts/位运算总结.md","raw":"---\ntitle: 位运算总结\ndate: 2019-6-25 11:06:00\ncategories: \"位运算\"\ntags:\n     - 位运算\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n### 二进制的一些概念\n\n在二进制数里，最高位 0 表示正数，1 表示负数。\n\n#### 原码\n一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。\n\n```\n 5 的原码是：00000000 00000000 00000000 00000101\n-5 的原码是：10000000 00000000 00000000 00000101\n```\n\n#### 反码\n正数的反码与原码相同，负数的反码为对该数的原码**除符号位**外各位**取反**（即 0 变 1，1 变 0）。\n\n```\n正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101\n负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010\n```\n\n#### 补码\n\n正数的补码与原码相同，负数的补码为该数的反码加 1。\n\n负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：\n\n```\n11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011\n```\n\n### 位运算基础\n基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：\n\n|  符号 | 描述  | 运算规则  |\n|:----:|:-----:|:---------|\n| &    | 与    | 两个位都为 1 时，结果才为 1 |\n| &#124;   | 或    | 两个位只要有一位为 1，结果都为 1 |\n| ^    | 异或  | 两个位相同为 0，不同为 1 |\n| ~    | 取反  | 0 变 1，1 变 0 |\n| <<   | 左移  | 各二进位全部左移若干位，高位丢弃，低位补 0 |\n| >>   | 右移  | 各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）|\n\n**注意**\n\n1. 在这 6 种操作符，只有 **~** 取反是单目操作符，其它 5 种都是双目操作符。\n\n2. 位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。\n\n3. 对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。\n\n   ```Java\n   System.out.println((15) >> 2); // 3\n   System.out.println((-15) >> 2); // -4\n   ```\n   15 = 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到\n   \n   00000000 00000000 00000000 00000011 即 3。\n\n   -15 = 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到\n\n   11111111 11111111 11111111 11111100 即 -4。\n\n4. 位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。\n\n5. 位操作还有一些复合操作符，如 &=、|=、 ^=、<<=、>>=。\n\n### 常用的位运算技巧\n\n#### 判断奇偶数\n一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x & 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。\n\n如要求输出 0 到 10 之间的所有偶数：\n\n```Java\nfor (int i = 0; i < 10; i++) {\n    if ((i & 1) == 0) {\n        System.out.println(i);\n    }\n}\n```\n\n#### 交换两数\n```Java\nint a = 10;\nint b = 20;\na ^= b;\nb ^= a;\na ^= b;\nSystem.out.println(\"a=\" + a); // a=20\nSystem.out.println(\"b=\" + b); // b=10\n```\n\n**分析：**\n\n第一步，a = a ^ b ①；\n\n第二步，b = b ^ a，把 ① 代入得，b = b ^ (a ^ b)，由于 **^ 满足交换律**，所以 b = b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b = a ②；\n\n第三步，a = a ^ b，将 ①、② 代入得，a = (a ^ b) ^ a 即 a = b ③。\n\n从 ②、③ 得知，a 和 b 的值已经得到了交换。\n\n#### 变换符号\n一个数 x **取反加 1** 后就会变成 -x，即正数变为负数，负数变为正数。\n\n```Java\nint a = -5;\nint b = 10;\na = ~a + 1;\nb = ~b + 1;\nSystem.out.println(\"a=\" + a); // a=5\nSystem.out.println(\"b=\" + b); // b=-10\n```\n\n**分析：**\n\n-5 = 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：\n\n00000000 00000000 00000000 00000101 = 5\n\n> 注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。\n\n#### 求绝对值\n对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i = a >> 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return i == 0 ? a : (~a + 1);\n}\n```\n\n进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：\n\n```Java\nreturn i == 0 ? (a ^ i) : ((a ^ i) + 1);\n```\n\n上面返回值再变换下得：\n\n```Java\nreturn i == 0 ? ((a ^ i) - 0) : ((a ^ i) + 1);\n```\n\n由于 i 的值非 0 即 -1，因此上面返回值可以精简为：\n\n```Java\nreturn (a ^ i) - i;\n```\n\n通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return (a ^ i) - i;\n}\n```\n\n### 位操作与空间压缩\n当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：\n\n```Java\nboolean[] flag = new boolean[100];\n```\n\n由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 / 32 + 1）的整型数组即可完成上面的状态标记。\n\n```Java\nint[] b = new int[4]; // 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true\n```\n\n由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1/6 左右。\n\n以下是用筛素数法计算 100 以内的素数的示例代码：\n\n```Java\nprivate void printPrime() {\n    int max = 100;\n    boolean[] flag = new boolean[max];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        if (!flag[i]) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) { // 素数的倍数必然不是素数\n                flag[j] = true;\n            }\n        }\n    }\n\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？\n\n将整数 j 指定位上置为 1：\n\n> 将 1 向左移位后和其相或来达到在指定位上置 1 的效果\n\n```Java\nprivate void setOne() {\n    System.out.println();\n    int j = 0;\n    j |= (1 << 10);\n    System.out.println(Integer.toBinaryString(j));\n}\n// 输出：10000000000\n```\n\n判断整数 j 指定位上是否为 1：\n\n> 将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）\n\n```Java\nprivate void isOne() {\n    int j = 1 << 10;\n    if ((j & (1 << 10)) != 0) {\n        System.out.println(\"指定位上为 1\");\n    } else {\n        System.out.println(\"指定位上为 0\");\n    }\n}\n// 输出：指定位上为 1\n```\n\n再把这种思路扩展到一个整型数组上：\n\n```Java\nprivate void setOne2() {\n    int max = 40;\n    int[] b = new int[max / 32 + 1];\n    for (int i = 0; i < max; i += 3) {\n        b[i / 32] |= (1 << (i % 32)); // 每 3 个位设置为 1\n    }\n\n    for (int i = 0; i < max; i++) {\n        if (((b[i / 32] >> i) & 1) == 1) { // 判断是否为 1\n            System.out.print(\"1\");\n        } else {\n            System.out.print(\"0\");\n        }\n    }\n}\n// 输出：1001001001001001001001001001001001001001\n```\n\n现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：\n\n```Java\nprivate void printPrime2() {\n    int max = 100;\n    int[] b = new int[max / 32 + 1];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        int x = b[i / 32] >> (i % 32); // 通过右移，逐位判断是 0 还是 1\n        if ((x & 1) == 0) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) {\n                b[j / 32] |= (1 << (j % 32)); // 将指定位上设置为 1\n            }\n        }\n    }\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n\n","slug":"位运算总结","published":1,"updated":"2024-06-03T14:53:51.450Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rdc0021nctt4u4n6o8x","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<h3 id=\"二进制的一些概念\"><a href=\"#二进制的一些概念\" class=\"headerlink\" title=\"二进制的一些概念\"></a>二进制的一些概念</h3><p>在二进制数里，最高位 0 表示正数，1 表示负数。</p>\n<h4 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h4><p>一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 5 的原码是：00000000 00000000 00000000 00000101</span><br><span class=\"line\">-5 的原码是：10000000 00000000 00000000 00000101</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h4><p>正数的反码与原码相同，负数的反码为对该数的原码<strong>除符号位</strong>外各位<strong>取反</strong>（即 0 变 1，1 变 0）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101</span><br><span class=\"line\">负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h4><p>正数的补码与原码相同，负数的补码为该数的反码加 1。</p>\n<p>负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位运算基础\"><a href=\"#位运算基础\" class=\"headerlink\" title=\"位运算基础\"></a>位运算基础</h3><p>基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"left\">运算规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">与</td>\n<td align=\"left\">两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td align=\"center\">&#124;</td>\n<td align=\"center\">或</td>\n<td align=\"left\">两个位只要有一位为 1，结果都为 1</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">异或</td>\n<td align=\"left\">两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">取反</td>\n<td align=\"left\">0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&lt;</td>\n<td align=\"center\">左移</td>\n<td align=\"left\">各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&gt;</td>\n<td align=\"center\">右移</td>\n<td align=\"left\">各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）</td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong></p>\n<ol>\n<li><p>在这 6 种操作符，只有 <strong>~</strong> 取反是单目操作符，其它 5 种都是双目操作符。</p>\n</li>\n<li><p>位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。</p>\n</li>\n<li><p>对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println((<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">System.out.println((-<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// -4</span></span><br></pre></td></tr></table></figure>\n<p>15 &#x3D; 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到</p>\n<p>00000000 00000000 00000000 00000011 即 3。</p>\n<p>-15 &#x3D; 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到</p>\n<p>11111111 11111111 11111111 11111100 即 -4。</p>\n</li>\n<li><p>位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。</p>\n</li>\n<li><p>位操作还有一些复合操作符，如 &amp;&#x3D;、|&#x3D;、 ^&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&#x3D;。</p>\n</li>\n</ol>\n<h3 id=\"常用的位运算技巧\"><a href=\"#常用的位运算技巧\" class=\"headerlink\" title=\"常用的位运算技巧\"></a>常用的位运算技巧</h3><h4 id=\"判断奇偶数\"><a href=\"#判断奇偶数\" class=\"headerlink\" title=\"判断奇偶数\"></a>判断奇偶数</h4><p>一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x &amp; 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。</p>\n<p>如要求输出 0 到 10 之间的所有偶数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((i &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"交换两数\"><a href=\"#交换两数\" class=\"headerlink\" title=\"交换两数\"></a>交换两数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">b ^= a;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;a=&quot;</span> + a); <span class=\"comment\">// a=20</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;b=&quot;</span> + b); <span class=\"comment\">// b=10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析：</strong></p>\n<p>第一步，a &#x3D; a ^ b ①；</p>\n<p>第二步，b &#x3D; b ^ a，把 ① 代入得，b &#x3D; b ^ (a ^ b)，由于 <strong>^ 满足交换律</strong>，所以 b &#x3D; b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b &#x3D; a ②；</p>\n<p>第三步，a &#x3D; a ^ b，将 ①、② 代入得，a &#x3D; (a ^ b) ^ a 即 a &#x3D; b ③。</p>\n<p>从 ②、③ 得知，a 和 b 的值已经得到了交换。</p>\n<h4 id=\"变换符号\"><a href=\"#变换符号\" class=\"headerlink\" title=\"变换符号\"></a>变换符号</h4><p>一个数 x <strong>取反加 1</strong> 后就会变成 -x，即正数变为负数，负数变为正数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> -<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">a = ~a + <span class=\"number\">1</span>;</span><br><span class=\"line\">b = ~b + <span class=\"number\">1</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;a=&quot;</span> + a); <span class=\"comment\">// a=5</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;b=&quot;</span> + b); <span class=\"comment\">// b=-10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析：</strong></p>\n<p>-5 &#x3D; 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：</p>\n<p>00000000 00000000 00000000 00000101 &#x3D; 5</p>\n<blockquote>\n<p>注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。</p>\n</blockquote>\n<h4 id=\"求绝对值\"><a href=\"#求绝对值\" class=\"headerlink\" title=\"求绝对值\"></a>求绝对值</h4><p>对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i &#x3D; a &gt;&gt; 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">abs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? a : (~a + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? (a ^ i) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面返回值再变换下得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? ((a ^ i) - <span class=\"number\">0</span>) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>由于 i 的值非 0 即 -1，因此上面返回值可以精简为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (a ^ i) - i;</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">abs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ i) - i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位操作与空间压缩\"><a href=\"#位操作与空间压缩\" class=\"headerlink\" title=\"位操作与空间压缩\"></a>位操作与空间压缩</h3><p>当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n\n<p>由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 &#x2F; 32 + 1）的整型数组即可完成上面的状态标记。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4</span>]; <span class=\"comment\">// 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true</span></span><br></pre></td></tr></table></figure>\n\n<p>由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1&#x2F;6 左右。</p>\n<p>以下是用筛素数法计算 100 以内的素数的示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printPrime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[max];</span><br><span class=\"line\">    <span class=\"type\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag[i]) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; max; j += i) &#123; <span class=\"comment\">// 素数的倍数必然不是素数</span></span><br><span class=\"line\">                flag[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？</p>\n<p>将整数 j 指定位上置为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和其相或来达到在指定位上置 1 的效果</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    j |= (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(Integer.toBinaryString(j));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：10000000000</span></span><br></pre></td></tr></table></figure>\n\n<p>判断整数 j 指定位上是否为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">isOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((j &amp; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;指定位上为 1&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;指定位上为 0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：指定位上为 1</span></span><br></pre></td></tr></table></figure>\n\n<p>再把这种思路扩展到一个整型数组上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOne2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; max; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        b[i / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (i % <span class=\"number\">32</span>)); <span class=\"comment\">// 每 3 个位设置为 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((b[i / <span class=\"number\">32</span>] &gt;&gt; i) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 判断是否为 1</span></span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1001001001001001001001001001001001001001</span></span><br></pre></td></tr></table></figure>\n\n<p>现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printPrime2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> b[i / <span class=\"number\">32</span>] &gt;&gt; (i % <span class=\"number\">32</span>); <span class=\"comment\">// 通过右移，逐位判断是 0 还是 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; max; j += i) &#123;</span><br><span class=\"line\">                b[j / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (j % <span class=\"number\">32</span>)); <span class=\"comment\">// 将指定位上设置为 1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n\n\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<h3 id=\"二进制的一些概念\"><a href=\"#二进制的一些概念\" class=\"headerlink\" title=\"二进制的一些概念\"></a>二进制的一些概念</h3><p>在二进制数里，最高位 0 表示正数，1 表示负数。</p>\n<h4 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h4><p>一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 5 的原码是：00000000 00000000 00000000 00000101</span><br><span class=\"line\">-5 的原码是：10000000 00000000 00000000 00000101</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h4><p>正数的反码与原码相同，负数的反码为对该数的原码<strong>除符号位</strong>外各位<strong>取反</strong>（即 0 变 1，1 变 0）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101</span><br><span class=\"line\">负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h4><p>正数的补码与原码相同，负数的补码为该数的反码加 1。</p>\n<p>负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位运算基础\"><a href=\"#位运算基础\" class=\"headerlink\" title=\"位运算基础\"></a>位运算基础</h3><p>基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"left\">运算规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">与</td>\n<td align=\"left\">两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td align=\"center\">&#124;</td>\n<td align=\"center\">或</td>\n<td align=\"left\">两个位只要有一位为 1，结果都为 1</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">异或</td>\n<td align=\"left\">两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">取反</td>\n<td align=\"left\">0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&lt;</td>\n<td align=\"center\">左移</td>\n<td align=\"left\">各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&gt;</td>\n<td align=\"center\">右移</td>\n<td align=\"left\">各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）</td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong></p>\n<ol>\n<li><p>在这 6 种操作符，只有 <strong>~</strong> 取反是单目操作符，其它 5 种都是双目操作符。</p>\n</li>\n<li><p>位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。</p>\n</li>\n<li><p>对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println((<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">System.out.println((-<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// -4</span></span><br></pre></td></tr></table></figure>\n<p>15 &#x3D; 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到</p>\n<p>00000000 00000000 00000000 00000011 即 3。</p>\n<p>-15 &#x3D; 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到</p>\n<p>11111111 11111111 11111111 11111100 即 -4。</p>\n</li>\n<li><p>位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。</p>\n</li>\n<li><p>位操作还有一些复合操作符，如 &amp;&#x3D;、|&#x3D;、 ^&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&#x3D;。</p>\n</li>\n</ol>\n<h3 id=\"常用的位运算技巧\"><a href=\"#常用的位运算技巧\" class=\"headerlink\" title=\"常用的位运算技巧\"></a>常用的位运算技巧</h3><h4 id=\"判断奇偶数\"><a href=\"#判断奇偶数\" class=\"headerlink\" title=\"判断奇偶数\"></a>判断奇偶数</h4><p>一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x &amp; 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。</p>\n<p>如要求输出 0 到 10 之间的所有偶数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((i &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"交换两数\"><a href=\"#交换两数\" class=\"headerlink\" title=\"交换两数\"></a>交换两数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">b ^= a;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;a=&quot;</span> + a); <span class=\"comment\">// a=20</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;b=&quot;</span> + b); <span class=\"comment\">// b=10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析：</strong></p>\n<p>第一步，a &#x3D; a ^ b ①；</p>\n<p>第二步，b &#x3D; b ^ a，把 ① 代入得，b &#x3D; b ^ (a ^ b)，由于 <strong>^ 满足交换律</strong>，所以 b &#x3D; b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b &#x3D; a ②；</p>\n<p>第三步，a &#x3D; a ^ b，将 ①、② 代入得，a &#x3D; (a ^ b) ^ a 即 a &#x3D; b ③。</p>\n<p>从 ②、③ 得知，a 和 b 的值已经得到了交换。</p>\n<h4 id=\"变换符号\"><a href=\"#变换符号\" class=\"headerlink\" title=\"变换符号\"></a>变换符号</h4><p>一个数 x <strong>取反加 1</strong> 后就会变成 -x，即正数变为负数，负数变为正数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> -<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">a = ~a + <span class=\"number\">1</span>;</span><br><span class=\"line\">b = ~b + <span class=\"number\">1</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;a=&quot;</span> + a); <span class=\"comment\">// a=5</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;b=&quot;</span> + b); <span class=\"comment\">// b=-10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析：</strong></p>\n<p>-5 &#x3D; 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：</p>\n<p>00000000 00000000 00000000 00000101 &#x3D; 5</p>\n<blockquote>\n<p>注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。</p>\n</blockquote>\n<h4 id=\"求绝对值\"><a href=\"#求绝对值\" class=\"headerlink\" title=\"求绝对值\"></a>求绝对值</h4><p>对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i &#x3D; a &gt;&gt; 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">abs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? a : (~a + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? (a ^ i) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面返回值再变换下得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? ((a ^ i) - <span class=\"number\">0</span>) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>由于 i 的值非 0 即 -1，因此上面返回值可以精简为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (a ^ i) - i;</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">abs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ i) - i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位操作与空间压缩\"><a href=\"#位操作与空间压缩\" class=\"headerlink\" title=\"位操作与空间压缩\"></a>位操作与空间压缩</h3><p>当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n\n<p>由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 &#x2F; 32 + 1）的整型数组即可完成上面的状态标记。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4</span>]; <span class=\"comment\">// 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true</span></span><br></pre></td></tr></table></figure>\n\n<p>由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1&#x2F;6 左右。</p>\n<p>以下是用筛素数法计算 100 以内的素数的示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printPrime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[max];</span><br><span class=\"line\">    <span class=\"type\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag[i]) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; max; j += i) &#123; <span class=\"comment\">// 素数的倍数必然不是素数</span></span><br><span class=\"line\">                flag[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？</p>\n<p>将整数 j 指定位上置为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和其相或来达到在指定位上置 1 的效果</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    j |= (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(Integer.toBinaryString(j));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：10000000000</span></span><br></pre></td></tr></table></figure>\n\n<p>判断整数 j 指定位上是否为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">isOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((j &amp; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;指定位上为 1&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;指定位上为 0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：指定位上为 1</span></span><br></pre></td></tr></table></figure>\n\n<p>再把这种思路扩展到一个整型数组上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOne2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; max; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        b[i / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (i % <span class=\"number\">32</span>)); <span class=\"comment\">// 每 3 个位设置为 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((b[i / <span class=\"number\">32</span>] &gt;&gt; i) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 判断是否为 1</span></span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1001001001001001001001001001001001001001</span></span><br></pre></td></tr></table></figure>\n\n<p>现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printPrime2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> b[i / <span class=\"number\">32</span>] &gt;&gt; (i % <span class=\"number\">32</span>); <span class=\"comment\">// 通过右移，逐位判断是 0 还是 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; max; j += i) &#123;</span><br><span class=\"line\">                b[j / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (j % <span class=\"number\">32</span>)); <span class=\"comment\">// 将指定位上设置为 1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"接口代理实现 Android Application 的多继承","date":"2018-08-03T03:57:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用**接口代理**的方式来间接地实现“多继承”了。\n\n假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplication extends Application {\n\n    @Override\n    public void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"XApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"XApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"XApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplication extends Application {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"YApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"YApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"YApplication onConfigurationChanged\");\n    }\n}\n```\n\n显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过**反射和接口回调**的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class MyApplication extends ProxyApplication {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        Log.d(\"info-->\", \"MyApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Log.d(\"info-->\", \"MyApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        Log.d(\"info-->\", \"MyApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ProxyApplication extends Application {\n\n    private IApplicationListener iApplicationListener;\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        iApplicationListener = getProxyApplication();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyCreate();\n        }\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyConfigurationChanged(newConfig);\n        }\n    }\n\n    private IApplicationListener getProxyApplication() {\n        try {\n            Class clazz = Class.forName(\"com.zch.demo.app.ApplicationImpl\");\n            return (IApplicationListener) clazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n在组合实现类 ApplicationImpl 中，我们通过反射代理的方式**调用多个 Application 的生命周期方法**。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ApplicationImpl extends Application implements IApplicationListener {\n\n    private IXApplicationListener ixApplicationListener;\n    private IYApplicationListener iyApplicationListener;\n\n    @Override\n    public void onProxyAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        ixApplicationListener = getXApplication();\n        iyApplicationListener = getYApplication();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXAttachBaseContext(base);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onProxyCreate() {\n        super.onCreate();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXCreate();\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYCreate();\n        }\n    }\n\n    @Override\n    public void onProxyConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXConfigurationChanged(newConfig);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYConfigurationChanged(newConfig);\n        }\n    }\n\n    private IXApplicationListener getXApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.XApplicationImpl\");\n            return (IXApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private IYApplicationListener getYApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.YApplicationImpl\");\n            return (IYApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n接口 IApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 XApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplicationImpl extends XApplication implements IXApplicationListener {\n\n    @Override\n    public void onXAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onXCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onXConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IXApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IXApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 YApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplicationImpl extends YApplication implements IYApplicationListener {\n\n    @Override\n    public void onYAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onYCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onYConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IYApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IYApplicationListener {\n\n    void onYAttachBaseContext(Context base);\n\n    void onYCreate();\n\n    void onYConfigurationChanged(Configuration newConfig);\n}\n```\n\n当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：\n\n```\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication onCreate\n```\n\n说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。","source":"_posts/接口代理实现-Android-Application-的多继承.md","raw":"---\ntitle: 接口代理实现 Android Application 的多继承\ndate: 2018-08-03 11:57:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用**接口代理**的方式来间接地实现“多继承”了。\n\n假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplication extends Application {\n\n    @Override\n    public void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"XApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"XApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"XApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplication extends Application {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"YApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"YApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"YApplication onConfigurationChanged\");\n    }\n}\n```\n\n显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过**反射和接口回调**的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class MyApplication extends ProxyApplication {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        Log.d(\"info-->\", \"MyApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Log.d(\"info-->\", \"MyApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        Log.d(\"info-->\", \"MyApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ProxyApplication extends Application {\n\n    private IApplicationListener iApplicationListener;\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        iApplicationListener = getProxyApplication();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyCreate();\n        }\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyConfigurationChanged(newConfig);\n        }\n    }\n\n    private IApplicationListener getProxyApplication() {\n        try {\n            Class clazz = Class.forName(\"com.zch.demo.app.ApplicationImpl\");\n            return (IApplicationListener) clazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n在组合实现类 ApplicationImpl 中，我们通过反射代理的方式**调用多个 Application 的生命周期方法**。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ApplicationImpl extends Application implements IApplicationListener {\n\n    private IXApplicationListener ixApplicationListener;\n    private IYApplicationListener iyApplicationListener;\n\n    @Override\n    public void onProxyAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        ixApplicationListener = getXApplication();\n        iyApplicationListener = getYApplication();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXAttachBaseContext(base);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onProxyCreate() {\n        super.onCreate();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXCreate();\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYCreate();\n        }\n    }\n\n    @Override\n    public void onProxyConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXConfigurationChanged(newConfig);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYConfigurationChanged(newConfig);\n        }\n    }\n\n    private IXApplicationListener getXApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.XApplicationImpl\");\n            return (IXApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private IYApplicationListener getYApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.YApplicationImpl\");\n            return (IYApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n接口 IApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 XApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplicationImpl extends XApplication implements IXApplicationListener {\n\n    @Override\n    public void onXAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onXCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onXConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IXApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IXApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 YApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplicationImpl extends YApplication implements IYApplicationListener {\n\n    @Override\n    public void onYAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onYCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onYConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IYApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IYApplicationListener {\n\n    void onYAttachBaseContext(Context base);\n\n    void onYCreate();\n\n    void onYConfigurationChanged(Configuration newConfig);\n}\n```\n\n当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：\n\n```\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication onCreate\n```\n\n说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。","slug":"接口代理实现-Android-Application-的多继承","published":1,"updated":"2024-06-03T14:53:51.450Z","comments":1,"layout":"post","photos":[],"_id":"clwz59rdd0024ncttbc3p8erp","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<p>在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用<strong>接口代理</strong>的方式来间接地实现“多继承”了。</p>\n<p>假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;XApplication attachBaseContext&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;XApplication onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;XApplication onConfigurationChanged&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">YApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;YApplication attachBaseContext&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;YApplication onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;YApplication onConfigurationChanged&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过<strong>反射和接口回调</strong>的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ProxyApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;MyApplication attachBaseContext&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;MyApplication onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;MyApplication onConfigurationChanged&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IApplicationListener iApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        iApplicationListener = getProxyApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IApplicationListener <span class=\"title function_\">getProxyApplication</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.zch.demo.app.ApplicationImpl&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组合实现类 ApplicationImpl 中，我们通过反射代理的方式<strong>调用多个 Application 的生命周期方法</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IXApplicationListener ixApplicationListener;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IYApplicationListener iyApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        ixApplicationListener = getXApplication();</span><br><span class=\"line\">        iyApplicationListener = getYApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IXApplicationListener <span class=\"title function_\">getXApplication</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">&quot;com.zch.demo.app.XApplicationImpl&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IXApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IYApplicationListener <span class=\"title function_\">getYApplication</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">&quot;com.zch.demo.app.YApplicationImpl&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IYApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口 IApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyCreate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类 XApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XApplication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IXApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onXAttachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onXCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onXConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口 IXApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IXApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyCreate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类 YApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">YApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">YApplication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IYApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onYCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口 IYApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IYApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onYCreate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication onCreate</span><br></pre></td></tr></table></figure>\n\n<p>说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。</p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n\n<p>在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用<strong>接口代理</strong>的方式来间接地实现“多继承”了。</p>\n<p>假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;XApplication attachBaseContext&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;XApplication onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;XApplication onConfigurationChanged&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">YApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;YApplication attachBaseContext&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;YApplication onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;YApplication onConfigurationChanged&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过<strong>反射和接口回调</strong>的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ProxyApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;MyApplication attachBaseContext&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;MyApplication onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;info--&gt;&quot;</span>, <span class=\"string\">&quot;MyApplication onConfigurationChanged&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IApplicationListener iApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        iApplicationListener = getProxyApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IApplicationListener <span class=\"title function_\">getProxyApplication</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.zch.demo.app.ApplicationImpl&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组合实现类 ApplicationImpl 中，我们通过反射代理的方式<strong>调用多个 Application 的生命周期方法</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IXApplicationListener ixApplicationListener;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IYApplicationListener iyApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        ixApplicationListener = getXApplication();</span><br><span class=\"line\">        iyApplicationListener = getYApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IXApplicationListener <span class=\"title function_\">getXApplication</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">&quot;com.zch.demo.app.XApplicationImpl&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IXApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IYApplicationListener <span class=\"title function_\">getYApplication</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">&quot;com.zch.demo.app.YApplicationImpl&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IYApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口 IApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyCreate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类 XApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XApplication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IXApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onXAttachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onXCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onXConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口 IXApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IXApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyCreate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类 YApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">YApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">YApplication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IYApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onYCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口 IYApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IYApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onYCreate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication onCreate</span><br></pre></td></tr></table></figure>\n\n<p>说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。</p>\n"},{"title":"鸿蒙开发教程","date":"2024-05-18T03:17:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n### HarmonyOS 项目目录介绍\n\n### ArkTS 基本语法详解\n\nHarmonyOS 4.0 以后可以使用 ArkTS 或者 HTML/CSS/JS 技术来开发 HarmonyOS 应用，而 ArkTS 是 HarmonyOS 优选的主力应用开发语言。  \n\nArkTS 围绕应用开发在 TypeScript（简称 TS）生态基础上做了进一步扩展，继承了 TS 的所有特性，是 TS 的超集。因此，在学习 ArkTS 语言之前，建议首先具\n备 TS 语言开发能力。\n\n当前，ArkTS 在 TS 的基础上主要扩展了如下能力：\n\n- **基本语法**：ArkTS 定义了声明式 UI 描述、自定义组件和动态扩展 UI 元素的能力，再配合 ArkUI 开发框架中的系统组件及其相关的事件方法、属性方法等共同构成了 UI 开发的主体。\n- **状态管理**：ArkTS 提供了多维度的状态管理机制。在 UI 开发框架中，与 UI 相关联的数据可以在组件内使用，也可以在不同组件层级间传递，比如父子组件之间、爷孙组件之间，还可以在应用全局范围内传递或跨设备传递。另外，从数据的传递形式来看，可分为只读的单向传递和可变更的双向传递。开发者可以灵活的利用这些能力来实现数据和 UI 的联动。\n- **渲染控制**：ArkTS 提供了渲染控制的能力。条件渲染可根据应用的不同状态，渲染对应状态下的 UI 内容。循环渲染可从数据源中迭代获取数据，并在每次迭代过程中创建相应的组件。数据懒加载从数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。\n\n未来，ArkTS 会结合应用开发/运行的需求持续演进，逐步提供并行和并发能力增强、系统类型增强、分布式开发范式等更多特性。  \n\n#### ArkTS 基本组成\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716005497787.jpg\" style=\"zoom:50%;\" /> \n\n- **装饰器**： 用于装饰类、结构、方法以及变量，并赋予其特殊的含义。如上述示例中 @Entry、@Component 和 @State 都是装饰器，@Component 表示自定义组件，@Entry 表示该自定义组件为入口组件，@State 表示组件中的状态变量，状态变量变化会触发 UI 刷新。  \n- **自定义组件**：可复用的 UI 单元，可组合其它组件，如上述被 @Component 装饰的 struct Index。  \n- **UI 描述**：以声明式的方式来描述 UI 的结构，例如 build() 方法中的代码块  。\n- **系统组件**：ArkUI 框架中默认内置的基础和容器组件，可直接被开发者调用，比如示例中的 Column、Text、Divider、Button。  \n- **事件方法**：组件可以通过链式调用设置多个事件的响应逻辑，如跟随在 Button 后面的 onClick()。  \n- **属性方法**：组件可以通过链式调用配置多项属性，如 fontSize()、width()、height()、backgroundColor() 等。  \n\n系统组件、属性方法、事件方法具体使用可参考[基于 ArkTS 的声明式开发范式](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V2/ts-components-summary-0000001478181369-V2)。\n\n#### ArkTS 布局结构\n\n布局的结构通常是分层级的，代表了用户界面中的整体架构。一个常见的页面结构如下所示：\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716013357130.jpg\" style=\"zoom:50%;\" /> \n\n为实现上述效果，需要在页面中声明对应的元素。其中，Page 表示页面的根节点，Column/Row 等元素为系统组件。针对不同的页面结构，ArkUI 提供了不同的布局组件来帮助我们实现对应布局的效果，例如 Row 用于实现线性布局等。  \n\n#### ArkTS 数据类型\n\nTypeScript 支持一些基础的数据类型，如布尔型、数组、字符串等。\n\n##### 数字\n\nTypeScript 里的所有数字都是浮点数，这些浮点数的类型是 `number`。除了支持十进制，还支持二进制、八进制、十六进制。  \n\n```ts\n// 数值类型\nlet num1: number = 18 // 十进制\nlet num2: number = 0b10111 // ob 二进制\nlet num3: number = 0o14 // 0o 八进制\nlet num4: number = 0x1f // 0x 十六进制\n```\n\n##### 字符串\n\nTypeScript 里使用 `string` 表示文本数据类型， 可以使用双引号（ \" ）或单引号（ ' ）表示字符串或者反引号（`）。\n\n> 反引号中可以配合 ${} 解析变量。\n\n```ts\n// 字符串类型\nlet str1: string = 'HarmonyOS Next不支持Android 应用了'\nlet str2: string = \"ArkTS\"\nlet str3: string = `马总今年${num1}岁了`\n```\n\n##### 布尔值\n\nTypeScript 中可以使用 `boolean` 来表示这个变量是布尔值，可以赋值为 true 或者 false。\n\n```ts\n// 布尔类型 true、false\nlet stateOn: boolean = true\nlet stateOff: boolean = false\n```\n\n##### 联合类型\n\n联合类型（Union Types）表示取值可以为多种类型中的一种。如果一个数据可能有多重类型，或者当下还没想好用哪个类型 ...\n\n```ts\nlet flag: string | number | boolean\nflag = '1'\nflag = 1\nflag = true\n```\n\n##### 数组\n\nTypeScrip 有两种方式可以定义数组。\n\n```ts\n// 第一种是使用数组泛型，Array<元素类型>。\nlet course1: Array<string> = ['Flutter', \"HarmonyOS\", `Golang`]\n\n// 第二种是在元素类型后面接上 []，表示由此类型元素组成的一个数组。\nlet course2: string[] = ['Flutter', \"HarmonyOS\", `Golang`]\n```\n\n##### 枚举\n\nenum 类型是对 JavaScript 标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字。\n\n```ts\nenum Color {Red, Green, Blue}\nlet c: Color = Color.Green\n```\n\n##### 元组\n\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string 和 number 类型的元组。\n\n```ts\nlet x: [string, number]\nx = ['hello', 10] // OK\nx = [10, 'hello'] // Error\n```\n\n##### Any（不推荐使用）\n\nany 类型，表示的是变量可以是任意类型，相当于关闭了 ts 的类型检测功能，不建议使用。如果是 any 类型，则允许被赋值为任意类型。\n\n```ts\nlet a: any = 666\na = \"Semlinker\" // 通过，any 类型可以被赋任意值\na = false // 通过，any 类型可以被赋任意值\na = 66 // 通过，any 类型可以被赋任意值\na = undefined // 通过，any 类型可以被赋任意值\na = null // 通过，any 类型可以被赋任意值\na = [] // 通过，any 类型可以被赋任意值\na = {} // 通过，any 类型可以被赋任意值\n```\n\n##### Unknown\n\nunknown 与 any 一样，也相当于关闭了 ts 的类型检测功能。有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 unknown 类型来标记这些变量。（同 any ）。\n\n ```ts\nlet notSure: unknown = 4\nnotSure = 'maybe a string instead'\nnotSure = false\n ```\n\n##### Void\n\n当一个函数没有返回值时，你通常会见到其返回值类型是 void。\n\n```ts\nfunction test(): void {\n  console.log('This is function is void')\n}\n```\n\n##### Null 和 Undefined\n\nTypeScript 里，null 和 undefined 两者各自有自己的类型分别叫做 null 和 undefined。  \n\n```ts\nlet u: undefined = undefined\nlet n: null = null\n```\n\n#### ArkTS 渲染控制\n\n##### if/else：条件渲染\n\n- 支持 if、else 和 else if 语句。\n- if、else if 后跟随的条件语句可以使用状态变量。\n- 允许在容器组件内使用，通过条件渲染语句构建不同的子组件。\n- 当 if、else if 后跟随的状态判断中使用的状态变量值变化时，条件渲染语句会进行更新条件可以包括 Typescript 表达式。\n\n```ts\nif (条件表达式) {\n  组件内容1\n} else {\n  组件内容2\n}\n```\n\n##### ForEach：循环渲染\n\nForEach 接口基于数组类型数据来进行循环渲染，需要与容器组件配合使用，且接口返回的组件应当是允许包含在 ForEach 父容器组件中的子组件。例如，ListItem 组件要求 ForEach 的父容器组件必须为 List 组件。\n\n```ts\n/**\n * @param arr 要遍历的数组\n * @param itemGenerator 页面的生成函数\n * @param keyGenerator 键生成函数，提供唯一标识，如果后续数组中数据发生变化，会判断元素的唯一标识是否发生变化，有变更再去做渲染，这样减少了不必要的渲染，提高了页面的渲染效率（可选参数，如果不填会会有默认的键生成函数，生成规则是用角标拼上数组元素的数据）\n */\nForEach(\n  arr:Array<any>,\n  itemGenerator:(item: any, index: number) => void,\n  keyGenerator ? : (item: any, index: number) => string\n)\n```\n\n```ts\nlet arr: number[] = [1, 2, 4, 8, 16]\n\n@Entry\n@Component\nstruct ArrayPage {\n  \n  arr2: string[] = ['HarmonyOS', 'Flutter', 'Android']\n\n  build() {\n    List({ space: 10 }) {\n      // 访问全局变量 arr 不要加 this\n      ForEach(arr, (item: number, key: number) => {\n        ListItem() {\n          Text(`${item}--${key}`)\n            .fontSize(20)\n            .width('100%')\n            .height(50)\n            .textAlign(TextAlign.Center)\n            .backgroundColor(\"#eee\")\n            .borderRadius(10)\n        }\n      }, (item: number) => item.toString())\n\n      // 访问局部变量 arr2 要加 this\n      ForEach(this.arr2, (item: string) => {\n        ListItem() {\n          Text(item)\n            .fontSize(20)\n            .width('100%')\n            .height(50)\n            .textAlign(TextAlign.Center)\n            .backgroundColor(Color.Gray)\n            .borderRadius(10)\n        }\n      }, (item: string) => item)\n    }.width('100%')\n    .height('100%')\n    .padding(10)\n  }\n}\n```\n\n> 实际开发中尽量不要使用全局变量，组件中使用全局变量不需要加 this。\n\n##### LazyForEach：数据懒加载\n\nLazyForEach 从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。当 LazyForEach 在滚动容器中使用，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会进行组件销毁回收以降低内存占用。\n\n### 布局组件\n\n#### ArkTS 通用属性\n\nArkTS 通用属性用于设置组件的宽高、边距。\n\n| 名称           | 参数说明                                                     | 描述                                                         |\n| -------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| width          | Length                                                       | 设置组件自身的宽度，缺省时使用元素自身内容需要 的宽度。若子组件的宽大于父组件的宽，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| height         | Length                                                       | 设置组件自身的高度，缺省时使用元素自身内容需要 的高度。若子组件的高大于父组件的高，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| size           | {   width ? : Length,   height ? : Length }                  | 设置高宽尺寸。                                               |\n| padding        | Padding &#124; Length                                        | 设置内边距属性。参数为 Length 类型时，四个方向内边距同时生效。默认值：0。padding 设置百分比时，上下左右内边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| margin         | Margin &#124; Length                                         | 设置外边距属性。参数为 Length 类型时，四个方向外边距同时生效。默认值：0。margin 设置百分比时，上下左右外边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| constraintSize | {   minWidth ? : Length,   maxWidth ? : Length,   minHeight ? : Length,   maxHeight ? : Length } | 设置约束尺寸，组件布局时，进行尺寸范围限制。 constraintSize 的优先级高于 Width 和 Height。若设置的 minWidth 大于 maxWidth，则 minWidth 生效， minHeight 与 maxHeight 同理。默认值：{   minWidth: 0, maxWidth:   Infinity, minHeight:   0, maxHeight:   Infinity }。 |\n\n**Length 长度类型，用于描述尺寸单位。  **\n\n| 类型     | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| string   | 需要显式指定像素单位，如 '10px'，也可设置百分比字符串，如 '100%'。 |\n| number   | 默认单位 vp。                                                |\n| Resource | 资源引用类型，引入系统资源或者应用资源中的尺寸。             |\n\n**vp 为虚拟像素单位**：vp 使用虚拟像素，使元素在不同密度的设备上具有一致的视觉体量。\n\n**fp 字体像素单位**：字体像素（font pixel）大小默认情况下与 vp 相同，即默认情况下 1 fp = 1vp。如果用户在设置中选择了更大的字体，字体的实际显示大小就会在 vp 的基础上乘以用户设置的缩放系数，即 1 fp = 1 vp * 缩放系数。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Row() {\n        // 宽度 200，高度 200，外边距 20（蓝色区域），内边距 10（白色区域）\n        Row() {\n          Row().size({\n            width: '100%', height: '100%'\n          }).backgroundColor(Color.Yellow)\n        }\n        .width(200)\n        .height(200)\n        .padding(10)\n        .margin(20)\n        .backgroundColor(Color.White)\n      }.backgroundColor(Color.Blue)\n\n      Text(`This is a text.This is a text.This is a text.This is a text.This is a text`)\n        .width('90%')\n        .backgroundColor(Color.Orange)\n        .constraintSize({ maxWidth: 200 })\n\n      // 父容器尺寸确定时，设置了 layoutWeight 的子元素在主轴布局尺寸按照权重进行分配，忽略本身尺寸设置。\n      Row() {\n        // 权重 1，占主轴剩余空间 1/3\n        Text('layoutWeight(1)')\n          .size({ height: 110 })\n          .backgroundColor(Color.Orange)\n          .textAlign(TextAlign.Center)\n          .layoutWeight(1)\n\n        // 权重 2，占主轴剩余空间 2/3\n        Text('layoutWeight(2)')\n          .size({\n            width: '30%', height: 110\n          })\n          .backgroundColor(Color.Green)\n          .textAlign(TextAlign.Center)\n          .layoutWeight(2)\n\n        // 未设置 layoutWeight 属性，组件按照自身尺寸渲染\n        Text('no layoutWeight')\n          .size({\n            width: '33%', height: 110\n          })\n          .backgroundColor(Color.Brown)\n          .textAlign(TextAlign.Center)\n      }.size({ width: '100%', height: 140 })\n      .backgroundColor(0xCCCCCC)\n    }\n    .width('100%')\n    .height('100%')\n    .margin({ top: 5 })\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Start)\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716389533793.jpg\" style=\"zoom:80%;\" /> \n\n#### Column 详解\n\nColumn 是沿垂直方向布局的容器，可以包含多个子组件，多个子组件会在垂直方向上按照顺序排列。\n\n##### Column 接口\n\n```ts\nColumn(value?: {space?: string | number})\n```\n\n参数：\n\n| 参数名 | 参数类型             | 必填 | 参数描述                                                     |\n| ------ | -------------------- | ---- | ------------------------------------------------------------ |\n| space  | string &#124; number | 否   | 纵向布局元素垂直方向间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、 FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为数字的字符串。 |\n\n##### Column 属性\n\n| 名称             | 参数类型        | 描述                                                         |\n| ---------------- | --------------- | ------------------------------------------------------------ |\n| alignItems       | HorizontalAlign | 设置子组件在水平方向上的对齐格式。默认值：HorizontalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| justifyContent8+ | FlexAlign       | 设置子组件在垂直方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Row() {\n        Image($r('app.media.app_icon')).width(100).height(100)\n      }\n      .width(140)\n      .height(140)\n      .backgroundColor(Color.Red)\n      .alignItems(VerticalAlign.Center)\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n    .margin({ top: 5 })\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Start)\n  }\n}\n```\n\n#### Row 详解\n\nRow 为沿水平方向布局容器，可以包含多个子组件，多个子组件会在水平方向上按照顺序排列。\n\n##### Row 接口\n\n```ts\nRow(value?: {space?: string | number})\n```\n\n参数：\n\n| 参数 名 | 参数类 型            | 必 填 | 参数描述                                                     |\n| ------- | -------------------- | ----- | ------------------------------------------------------------ |\n| space   | string &#124; number | 否    | 横向布局元素间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为 数字的字符串。 |\n\n##### Row 属性\n\n| 名称             | 参数类型      | 描述                                                         |\n| ---------------- | ------------- | ------------------------------------------------------------ |\n| alignItems       | VerticalAlign | 设置子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| justifyContent8+ | FlexAlign     | 设置子组件在水平方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n\n#### 自定义组件\n\n自定义组件传值。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Container()\n      Container({ color: Color.Orange, icon: $r('app.media.user') })\n      Container({ color: Color.Brown, icon: $r('app.media.settings') })\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.SpaceBetween)\n  }\n}\n\n@Component\nstruct Container {\n  color: Color = Color.Red\n  icon: Resource = $r('app.media.app_icon')\n\n  build() {\n    Row() {\n      Image(this.icon).width(100).height(100)\n    }\n    .width(140)\n    .height(140)\n    .backgroundColor(this.color)\n    .alignItems(VerticalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n```\n\n#### Row、Column 结合 layoutWeight 实现弹性布局\n\nArkTS 中使用 Row、Column 结合 layoutWeight 属性可以实现弹性布局。\n\n##### 水平弹性布局\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Row().height(100).backgroundColor(Color.Red).layoutWeight(1)\n      Row().height(100).backgroundColor(Color.Green).layoutWeight(1)\n      Row() {\n        Text('no layoutWeight').textAlign(TextAlign.Center).width('100%')\n      }.height(100).backgroundColor(Color.Orange).size({ height: 100, width: 200 })\n    }.size({ width: '100%', height: 100 })\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716388652192.jpg) \n\n##### 垂直弹性布局\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Row() {\n        Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon1.jpg\").objectFit(ImageFit.Fill)\n      }.size({ width: '100%', height: 160 })\n\n      Row({ space: 10 }) {\n        Row() {\n          Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon2.jpg\").objectFit(ImageFit.Fill)\n        }.layoutWeight(2)\n        \n        Row() {\n          Column({ space: 10 }) {\n            Row() {\n              Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon3.jpg\").objectFit(ImageFit.Fill)\n            }.layoutWeight(1).width('100%')\n\n            Row() {\n              Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon4.jpg\").objectFit(ImageFit.Fill)\n            }.layoutWeight(1).width('100%')\n          }\n        }.layoutWeight(1)\n      }.size({ width: '100%', height: 140 })\n    }\n    .margin(5)\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716472510603.jpg) \n\n#### Stack 定位组件\n\nStack 组件可以实现容器堆叠，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。\n\n##### Stack 接口\n\n```ts\nStack(value?: { alignContent?: Alignment })\n```\n\n参数：\n\n| 参数名       | 参数类型  | 必 填 | 参数描述                                                 |\n| ------------ | --------- | ----- | -------------------------------------------------------- |\n| alignContent | Alignment | 否    | 设置子组件在容器内的对齐方式。默认值：Alignment.Center。 |\n\n##### Stack 基本使用\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Stack({ alignContent: Alignment.BottomStart }) {\n        Row() {\n          Text(\"HarmonyOS\").fontSize(40).textAlign(TextAlign.Center)\n        }.width(300).height(300).backgroundColor(Color.Orange)\n\n        Row().width(100).height(100).backgroundColor(Color.Blue)\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716473605745.jpg) \n\n##### Stack 子组件中 zIndex 控制层级\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Stack({ alignContent: Alignment.BottomStart }) {\n      Column() {\n        Text(\"Stack子元素1\").fontSize(20)\n      }.width(100).height(100).backgroundColor(Color.Orange).zIndex(2)\n\n      Column() {\n        Text(\"Stack子元素2\").fontSize(20)\n      }.width(150).height(150).backgroundColor(Color.Yellow).zIndex(1)\n\n      Column() {\n        Text(\"Stack子元素3\").fontSize(20)\n      }.width(200).height(200).backgroundColor(Color.Pink)\n    }.width(350).height(350).backgroundColor(Color.Gray)\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716474425596.jpg) \n\n##### Stack 结合 List 实现动态列表\n\n要实现的功能：\n1、实现浮动按钮。\n2、点击按钮让列表的数字加一。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  @State list: number[] = [1, 2, 3]\n\n  build() {\n    Column() {\n      Stack({ alignContent: Alignment.BottomEnd }) {\n        List({ space: 10 }) {\n          ForEach(this.list, (item: number) => {\n            ListItem() {\n              Text(`${item}`)\n                .fontSize(20)\n                .width('100%')\n                .height(50)\n                .backgroundColor('#eee')\n                .textAlign(TextAlign.Center)\n            }\n          })\n        }.width('100%').height('100%').padding(10)\n\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          Text('+').fontSize(40).fontColor(Color.White)\n        }.width(55).height(55).margin({ right: 20, bottom: 20 }).onClick(() => {\n          this.doAdd()\n        })\n      }\n    }.width('100%').height('100%').alignItems(HorizontalAlign.Center)\n  }\n\n  doAdd() {\n    this.list.push(this.list[this.list.length-1] + 1)\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716475790377.jpg\" style=\"zoom: 50%;\" /> \n\n##### Stack 结合 List 实现浮动导航\n\n```ts\n@Entry\n@Component\nstruct Index {\n  @State list: number[] = [1, 2, 3]\n\n  build() {\n    Column() {\n      Stack({ alignContent: Alignment.BottomEnd }) {\n        Stack({ alignContent: Alignment.TopEnd }) {\n          List({ space: 10 }) {\n            ForEach(this.list, (item: number) => {\n              ListItem() {\n                Text(`${item}`)\n                  .fontSize(20)\n                  .width('100%')\n                  .height(50)\n                  .backgroundColor('#eee')\n                  .textAlign(TextAlign.Center)\n              }\n            })\n          }.width('100%').height('100%').padding({ left: 10, top: 70, right: 10, bottom: 10 })\n\n          Row() {\n            Text(\"导航\").fontSize(16).textAlign(TextAlign.Center).width('100%')\n          }.width('100%').height(60).backgroundColor(Color.Orange)\n        }\n\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          Text('+').fontSize(40).fontColor(Color.White)\n        }.width(55).height(55).margin({ right: 20, bottom: 20 }).onClick(() => {\n          this.doAdd()\n        })\n      }\n    }.width('100%').height('100%').alignItems(HorizontalAlign.Center)\n  }\n\n  doAdd() {\n    this.list.push(this.list[this.list.length-1] + 1)\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716477035040.jpg\" style=\"zoom:50%;\" /> \n\n#### 弹性布局（Flex）\n\nFlex 弹性布局可以更加方便的对容器中的子元素进行排列、对齐和分配剩余空间等。单行的 Flex 跟 Row 组件的表现几乎一致，单列的 Flex 则跟 Column 组件表现几乎一致。但 Row 与 Column 都是单行单列的，Flex 则可以突破了这个限制，当主轴上空间不足时，则向纵轴上去扩展显示。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716554468902.jpg\" style=\"zoom:50%;\" /> \n\n##### Flex 接口\n\n```ts\nFlex(value?: { direction?: FlexDirection, wrap?: FlexWrap, justifyContent?: FlexAlign, alignItems?: ItemAlign, alignContent?: FlexAlign })\n```\n\n标准 Flex 布局容器。从 API version 9 开始，该接口支持在 ArkTS 片中使用。\n\n##### Flex 参数\n\n| 参数名         | 参数类型      | 必 填 | 默认值            | 参数描述                                                     |\n| -------------- | ------------- | ----- | ----------------- | ------------------------------------------------------------ |\n| direction      | FlexDirection | 否    | FlexDirection.Row | 子组件在 Flex 容器上排列的方向，即主轴的方向。               |\n| wrap           | FlexWrap      | 否    | FlexWrap.NoWrap   | Flex 容器是单行/列还是多行/列排列。说明：在多行布局时，通过交叉轴方向，确认新行堆叠方向。 |\n| justifyContent | FlexAlign     | 否    | FlexAlign.Start   | 子组件在 Flex 容器主轴上的对齐格式。                         |\n| alignItems     | ItemAlign     | 否    | ItemAlign.Start   | 子组件在 Flex 容器交叉轴上的对齐格式。                       |\n| alignContent   | FlexAlign     | 否    | FlexAlign.Start   | 交叉轴中有额外的空间时，多行内容的对齐方式。仅在 wrap 为 Wrap 或 WrapReverse 下生效。 |\n\n##### Flex 轴的基本概念\n\n- **主轴**：Flex 组件布局方向的轴线，子元素默认沿着主轴排列。主轴开始的位置称为主轴起始点，结束位置称为主轴结束点。\n- **交叉轴**：垂直于主轴方向的轴线。交叉轴开始的位置称为交叉轴起始点，结束位置称为交叉轴结束点。\n\n\n\n ##### direction 参数控制布局方向\n\nFlex 布局中通过 direction 可以改变布局方向，在弹性布局中，容器的子元素可以按照任意方向排列。通过设置参数 direction，可以决定主轴的方向，从而控制子组件的排列方向。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557181764.jpg\" style=\"zoom:50%;\" /> \n\n- FlexDirection.Row：主轴为水平方向，子组件从起始端沿着水平方向开始排布。\n- FlexDirection.RowReverse：主轴为水平方向，子组件从终点端沿着 FlexDirection. Row 相反的方向开始排布。\n- FlexDirection.Column：主轴为垂直方向，子组件从起始端沿着垂直方向开始排布。\n- FlexDirection.ColumnReverse：主轴为垂直方向，子组件从终点端沿着 FlexDirection. Column 相反的方向开始排布。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ direction: FlexDirection.Row }) {\n      Text('1').width('33%').height(50).backgroundColor(Color.Red)\n      Text('2').width('33%').height(50).backgroundColor(Color.Green)\n      Text('3').width('33%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').height(70).padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg) \n\n##### wrap 参数控制布局换行\n\n弹性布局分为单行布局和多行布局。默认情况下，Flex 容器中的子元素都排在一条线（又称“轴线”） 上。wrap 属性控制当子元素主轴尺寸之和大于容器主轴尺寸时，Flex 是单行布局还是多行布局。在多行布局时，通过交叉轴方向，确认新行堆叠方向。 \n\n**FlexWrap. NoWrap**（默认值）：不换行。如果子组件的宽度总和大于父元素的宽度，则子组件会被压缩宽度。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ wrap: FlexWrap.NoWrap }) {\n      Text('1').width('50%').height(50).backgroundColor(Color.Red)\n      Text('2').width('50%').height(50).backgroundColor(Color.Green)\n      Text('3').width('50%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg) \n\n**FlexWrap. Wrap**：换行，每一行子组件按照主轴方向排列。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ wrap: FlexWrap.Wrap }) {\n      Text('1').width('50%').height(50).backgroundColor(Color.Red)\n      Text('2').width('50%').height(50).backgroundColor(Color.Green)\n      Text('3').width('50%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716558674189.jpg) \n\n**FlexWrap. WrapReverse**：换行，每一行子组件按照主轴反方向排列。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ wrap: FlexWrap.WrapReverse }) {\n      Text('1').width('50%').height(50).backgroundColor(Color.Red)\n      Text('2').width('50%').height(50).backgroundColor(Color.Green)\n      Text('3').width('50%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716558853253.jpg\" style=\"zoom:80%;\" /> \n\n##### justifyContent 配置主轴对齐方式\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716559329865.jpg\" style=\"zoom: 67%;\" /> \n\n**FlexAlign.Start**（默认值）：子组件在主轴方向起始端对齐，第一个子组件与父元素边沿对齐，其他元素与前一个元素对齐。\n\n**FlexAlign.Center**：子组件在主轴方向居中对齐。\n\n**FlexAlign.End**：子组件在主轴方向终点端对齐，最后一个子组件与父元素边沿对齐，其它元素与后一个元素对齐。\n\n**FlexAlign.SpaceBetween**：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件和最后一个子组件与父元素边沿对齐。\n\n**FlexAlign.SpaceAround**：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件到主轴起始端的距离和最后一个子组件到主轴终点端的距离是相邻元素之间距离的一半。\n\n**FlexAlign.SpaceEvenly**：Flex 主轴方向元素等间距布局，相邻子组件之间的间距、第一个子组件与主轴起始端的间距、最后一个子组件到主轴终点端的间距均相等。\n\n##### alignContent 配置内容对齐\n\n可以通过 alignContent 参数设置子组件各行在交叉轴剩余空间内的对齐方式，只在多行的 ﬂex 布局中生效（仅在 wrap 为 Wrap 或 WrapReverse 下生效），可选值有：\n\n**FlexAlign.Start**：子组件各行与交叉轴起点对齐，默认值。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ justifyContent: FlexAlign.SpaceBetween, wrap: FlexWrap.Wrap, alignContent: FlexAlign.Start }) {\n      Text('1').width('30%').height(20).backgroundColor(Color.Red)\n      Text('2').width('60%').height(20).backgroundColor(Color.Green)\n      Text('3').width('40%').height(20).backgroundColor(Color.Orange)\n      Text('4').width('30%').height(20).backgroundColor(Color.Pink)\n      Text('5').width('20%').height(20).backgroundColor(Color.Yellow)\n    }.height(100).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561030772.jpg) \n\n**FlexAlign.Center**：子组件各行在交叉轴方向居中对齐。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561257608.jpg) \n\n**FlexAlign.End**：子组件各行与交叉轴终点对齐。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561389788.jpg) \n\n**FlexAlign.SpaceBetween**：子组件各行与交叉轴两端对齐，各行间垂直间距平均分布。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561544100.jpg) \n\n**FlexAlign.SpaceAround**：子组件各行间距相等，是元素首尾行与交叉轴两端距离的两倍。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561707980.jpg\" style=\"zoom:80%;\" /> \n\n**FlexAlign.SpaceEvenly**：子组件各行间距，子组件首尾行与交叉轴两端距离都相等。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561851381.jpg\" style=\"zoom:80%;\" /> \n\n##### alignItems 参数控制交叉轴对齐方式\n\n容器和子元素都可以设置交叉轴对齐方式，且子元素设置的对齐方式优先级较高。可以通过 Flex 组件的 alignItems 参数设置子组件在交叉轴的对齐方式。\n\n**ItemAlign.Auto**：使用 Flex 容器中默认配置。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ alignItems: ItemAlign.Auto }) {\n      Text('1').width('33%').height(20).backgroundColor(Color.Red)\n      Text('2').width('33%').height(40).backgroundColor(Color.Green)\n      Text('3').width('33%').height(60).backgroundColor(Color.Orange)\n    }.height(80).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.Start**：交叉轴方向首部对齐，默认值。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.Center**：交叉轴方向居中对齐。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816486562.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.End**：交叉轴方向底部对齐。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817062907.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.Stretch**：交叉轴方向拉伸填充，在未设置尺寸时，拉伸到容器尺寸。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817484409.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign. Baseline**：交叉轴方向文本基线对齐。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817697841.jpg\" style=\"zoom:80%;\" /> \n\n##### Flex 自适应拉伸布局属性\n\nRow、Column 结合 layoutWeight 可以实现自适应拉伸弹性布局。\n\n**1、ﬂexGrow 属性**\n\n设置父容器的剩余空间分配给此属性所在组件的比例。用于“瓜分”父组件的剩余空间。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex() {\n      Text('1').flexGrow(1).height(60).backgroundColor(Color.Red)\n      Text('2').flexGrow(2).height(60).backgroundColor(Color.Green)\n      Text('no flexGrow').width(100).height(60).backgroundColor(Color.Orange)\n    }.height(80).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716819203162.jpg\" style=\"zoom:80%;\" /> \n\n父容器宽度 400vp，三个子组件原始宽度为 100vp，总和 300vp，剩余空间 100vp 根据 ﬂexGrow 值的占比分配给子组件，未设置 ﬂexGrow 的子组件不参与“瓜分”。 第一个元素以及第二个元素以 2:3 分配剩下的 100vp。第一个元素为 100vp+100vp2/5=140vp，第 二个元素为 100vp+100vp3/5=160vp。\n\n**2、ﬂexShrink 属性**\n\n当父容器空间不足时，子组件的压缩比例。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex() {\n      Text('flexShrink(3)').flexShrink(3).width(200).height(60).backgroundColor(Color.Red)\n      Text('no flexShrink').width(200).height(60).backgroundColor(Color.Green)\n      Text('flexShrink(1)').flexShrink(1).width(200).height(60).backgroundColor(Color.Orange)\n    }.width(400).height(80).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716821744026.jpg\" style=\"zoom:80%;\" /> \n\n##### Flex 应用案例\n\n弹性布局在开发场景中用例特别多，比如页面头部导航栏的均匀分布、页面框架的搭建、多行多列数据的排列等等。\n\n**1、热搜功能**\n\n```ts\n@Entry\n@Component\nstruct Index {\n  @State hotSearch: string[] = ['乒乓球', 'NBA直播', '世界杯', '广东城际铁路', 'Flutter教程', 'HarmonyOS', 'ArkTS']\n\n  build() {\n    Column() {\n      Text('热门搜索')\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n        .width('100%')\n        .textAlign(TextAlign.Start)\n        .padding(10)\n        .fontColor('#666')\n      Flex({ wrap: FlexWrap.Wrap }) {\n        ForEach(this.hotSearch, (item: string) => {\n          Text(`${item}`)\n            .fontSize(18)\n            .backgroundColor('#eee')\n            .padding({ left: 16, top: 10, right: 16, bottom: 10 })\n            .margin(10)\n            .borderRadius(12)\n        }, (item: string) => item)\n      }\n    }.width('100%').height('100%')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716910862339.jpg\" style=\"zoom:80%;\" /> \n\n**2、帮助列表**\n\n```ts\ninterface HelpListInterface {\n  title: string,\n  icon: Resource\n}\n\n@Entry\n@Component\nstruct Index {\n  @State helpList: HelpListInterface[] = [\n    {\n      title: \"我的订阅\",\n      icon: $r(\"app.media.subscribe\")\n    },\n    {\n      title: \"常见问题\",\n      icon: $r(\"app.media.problem\")\n    },\n    {\n      title: \"在线客服\",\n      icon: $r(\"app.media.customer_service\")\n    },\n    {\n      title: \"意见反馈\",\n      icon: $r(\"app.media.opinion\")\n    },\n    {\n      title: \"关怀模式\",\n      icon: $r(\"app.media.give\")\n    },\n    {\n      title: \"会员中心\",\n      icon: $r(\"app.media.user\")\n    }\n  ]\n\n  build() {\n    Column() {\n      Flex({ wrap: FlexWrap.Wrap }) {\n        ForEach(this.helpList, (item: HelpListInterface) => {\n          Column() {\n            Image(item.icon).width(42).height(42)\n            Text(`${item.title}`).fontSize(15).fontColor('#666').padding({ top: 10 })\n          }.width('25%').padding(5).margin({ bottom: 10 })\n        }, (item: HelpListInterface) => item.title)\n      }\n      .margin(10)\n      .backgroundColor('#fff')\n      .borderRadius(10)\n      .padding({ top: 15, bottom: 5 })\n    }.width('100%').height('100%').backgroundColor('#eee')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716912172452.jpg\" style=\"zoom:80%;\" /> \n\n#### 相对布局（RelativeContainer）\n\n相对布局组件，用于复杂场景中元素对齐的布局。\n\nRelativeContainer 就是采用相对布局的容器，支持容器内部的子元素设置相对位置关系。子元素支持指定兄弟元素作为锚点，也支持指定父容器作为锚点，基于锚点做相对位置布局。下图是一个 RelativeContainer 的概念图，图中的虚线表示位置的依赖关系。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716991550056.jpg\" style=\"zoom: 33%;\" /> \n\n##### 规则说明\n\n1、容器内子组件区分水平方向，垂直方向：\n\n​    （1）水平方向为 left，middle，right，对应容器的 HorizontalAlign.Start，HorizontalAlign.Center，HorizontalAlign.End。\n\n​    （2）垂直方向为 top，center，bottom，对应容器的 VerticalAlign.Top，VerticalAlign.Center，VerticalAlign.Bottom。\n\n2、子组件可以将容器或者其他子组件设为锚点：\n\n​    （1）参与相对布局的容器内组件必须设置 id，不设置 id 的组件不显示，RelativeContainer 容器的固定 id 为 **\\_\\_container\\_\\_**。\n\n​    （2）此子组件某一方向上的三个位置可以将容器或其它子组件的同方向三个位置为锚点，同方向上两个以上位置设置锚点以后会跳过第三个。\n\n​    （3）前端页面设置的子组件尺寸大小不会受到相对布局规则的影响。子组件某个方向上设置两个或以上 alignRules 时不建议设置此方向尺寸大小。\n\n​    （4）对齐后需要额外偏移可设置 **oﬀset**。\n\n3、特殊情况：\n\n​    （1）互相依赖，环形依赖时容器内子组件全部不绘制。\n\n​    （2）同方向上两个以上位置设置锚点但锚点位置逆序时，此子组件大小为 0，即不绘制。\n\n​    （3）容器不设置宽高时，容器与容器内子组件不绘制。\n\n##### RelativeContainer 的基本使用演示\n\n```tsx\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      RelativeContainer() {\n        Row()\n          .width(100)\n          .height(100)\n          .backgroundColor(Color.Orange)\n          .alignRules({\n            left: { anchor: '__container__', align: HorizontalAlign.Start },\n            top: { anchor: '__container__', align: VerticalAlign.Top }\n          })\n          .id('row1')\n          .offset({ x: 20, y: 20 })\n      }.width(200).height(200).border({ width: 2, color: Color.Green }).id('rc')\n    }.width('100%').height('100%')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716995097983.jpg\" style=\"zoom:80%;\" /> \n\ndemo","source":"_posts/鸿蒙开发教程.md","raw":"---\ntitle: 鸿蒙开发教程\ndate: 2024-05-18 11:17:00\ncategories: \"鸿蒙开发\"\ntags:\n     - 鸿蒙开发\n     - HarmonyOS\n\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n### HarmonyOS 项目目录介绍\n\n### ArkTS 基本语法详解\n\nHarmonyOS 4.0 以后可以使用 ArkTS 或者 HTML/CSS/JS 技术来开发 HarmonyOS 应用，而 ArkTS 是 HarmonyOS 优选的主力应用开发语言。  \n\nArkTS 围绕应用开发在 TypeScript（简称 TS）生态基础上做了进一步扩展，继承了 TS 的所有特性，是 TS 的超集。因此，在学习 ArkTS 语言之前，建议首先具\n备 TS 语言开发能力。\n\n当前，ArkTS 在 TS 的基础上主要扩展了如下能力：\n\n- **基本语法**：ArkTS 定义了声明式 UI 描述、自定义组件和动态扩展 UI 元素的能力，再配合 ArkUI 开发框架中的系统组件及其相关的事件方法、属性方法等共同构成了 UI 开发的主体。\n- **状态管理**：ArkTS 提供了多维度的状态管理机制。在 UI 开发框架中，与 UI 相关联的数据可以在组件内使用，也可以在不同组件层级间传递，比如父子组件之间、爷孙组件之间，还可以在应用全局范围内传递或跨设备传递。另外，从数据的传递形式来看，可分为只读的单向传递和可变更的双向传递。开发者可以灵活的利用这些能力来实现数据和 UI 的联动。\n- **渲染控制**：ArkTS 提供了渲染控制的能力。条件渲染可根据应用的不同状态，渲染对应状态下的 UI 内容。循环渲染可从数据源中迭代获取数据，并在每次迭代过程中创建相应的组件。数据懒加载从数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。\n\n未来，ArkTS 会结合应用开发/运行的需求持续演进，逐步提供并行和并发能力增强、系统类型增强、分布式开发范式等更多特性。  \n\n#### ArkTS 基本组成\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716005497787.jpg\" style=\"zoom:50%;\" /> \n\n- **装饰器**： 用于装饰类、结构、方法以及变量，并赋予其特殊的含义。如上述示例中 @Entry、@Component 和 @State 都是装饰器，@Component 表示自定义组件，@Entry 表示该自定义组件为入口组件，@State 表示组件中的状态变量，状态变量变化会触发 UI 刷新。  \n- **自定义组件**：可复用的 UI 单元，可组合其它组件，如上述被 @Component 装饰的 struct Index。  \n- **UI 描述**：以声明式的方式来描述 UI 的结构，例如 build() 方法中的代码块  。\n- **系统组件**：ArkUI 框架中默认内置的基础和容器组件，可直接被开发者调用，比如示例中的 Column、Text、Divider、Button。  \n- **事件方法**：组件可以通过链式调用设置多个事件的响应逻辑，如跟随在 Button 后面的 onClick()。  \n- **属性方法**：组件可以通过链式调用配置多项属性，如 fontSize()、width()、height()、backgroundColor() 等。  \n\n系统组件、属性方法、事件方法具体使用可参考[基于 ArkTS 的声明式开发范式](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V2/ts-components-summary-0000001478181369-V2)。\n\n#### ArkTS 布局结构\n\n布局的结构通常是分层级的，代表了用户界面中的整体架构。一个常见的页面结构如下所示：\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716013357130.jpg\" style=\"zoom:50%;\" /> \n\n为实现上述效果，需要在页面中声明对应的元素。其中，Page 表示页面的根节点，Column/Row 等元素为系统组件。针对不同的页面结构，ArkUI 提供了不同的布局组件来帮助我们实现对应布局的效果，例如 Row 用于实现线性布局等。  \n\n#### ArkTS 数据类型\n\nTypeScript 支持一些基础的数据类型，如布尔型、数组、字符串等。\n\n##### 数字\n\nTypeScript 里的所有数字都是浮点数，这些浮点数的类型是 `number`。除了支持十进制，还支持二进制、八进制、十六进制。  \n\n```ts\n// 数值类型\nlet num1: number = 18 // 十进制\nlet num2: number = 0b10111 // ob 二进制\nlet num3: number = 0o14 // 0o 八进制\nlet num4: number = 0x1f // 0x 十六进制\n```\n\n##### 字符串\n\nTypeScript 里使用 `string` 表示文本数据类型， 可以使用双引号（ \" ）或单引号（ ' ）表示字符串或者反引号（`）。\n\n> 反引号中可以配合 ${} 解析变量。\n\n```ts\n// 字符串类型\nlet str1: string = 'HarmonyOS Next不支持Android 应用了'\nlet str2: string = \"ArkTS\"\nlet str3: string = `马总今年${num1}岁了`\n```\n\n##### 布尔值\n\nTypeScript 中可以使用 `boolean` 来表示这个变量是布尔值，可以赋值为 true 或者 false。\n\n```ts\n// 布尔类型 true、false\nlet stateOn: boolean = true\nlet stateOff: boolean = false\n```\n\n##### 联合类型\n\n联合类型（Union Types）表示取值可以为多种类型中的一种。如果一个数据可能有多重类型，或者当下还没想好用哪个类型 ...\n\n```ts\nlet flag: string | number | boolean\nflag = '1'\nflag = 1\nflag = true\n```\n\n##### 数组\n\nTypeScrip 有两种方式可以定义数组。\n\n```ts\n// 第一种是使用数组泛型，Array<元素类型>。\nlet course1: Array<string> = ['Flutter', \"HarmonyOS\", `Golang`]\n\n// 第二种是在元素类型后面接上 []，表示由此类型元素组成的一个数组。\nlet course2: string[] = ['Flutter', \"HarmonyOS\", `Golang`]\n```\n\n##### 枚举\n\nenum 类型是对 JavaScript 标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字。\n\n```ts\nenum Color {Red, Green, Blue}\nlet c: Color = Color.Green\n```\n\n##### 元组\n\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string 和 number 类型的元组。\n\n```ts\nlet x: [string, number]\nx = ['hello', 10] // OK\nx = [10, 'hello'] // Error\n```\n\n##### Any（不推荐使用）\n\nany 类型，表示的是变量可以是任意类型，相当于关闭了 ts 的类型检测功能，不建议使用。如果是 any 类型，则允许被赋值为任意类型。\n\n```ts\nlet a: any = 666\na = \"Semlinker\" // 通过，any 类型可以被赋任意值\na = false // 通过，any 类型可以被赋任意值\na = 66 // 通过，any 类型可以被赋任意值\na = undefined // 通过，any 类型可以被赋任意值\na = null // 通过，any 类型可以被赋任意值\na = [] // 通过，any 类型可以被赋任意值\na = {} // 通过，any 类型可以被赋任意值\n```\n\n##### Unknown\n\nunknown 与 any 一样，也相当于关闭了 ts 的类型检测功能。有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 unknown 类型来标记这些变量。（同 any ）。\n\n ```ts\nlet notSure: unknown = 4\nnotSure = 'maybe a string instead'\nnotSure = false\n ```\n\n##### Void\n\n当一个函数没有返回值时，你通常会见到其返回值类型是 void。\n\n```ts\nfunction test(): void {\n  console.log('This is function is void')\n}\n```\n\n##### Null 和 Undefined\n\nTypeScript 里，null 和 undefined 两者各自有自己的类型分别叫做 null 和 undefined。  \n\n```ts\nlet u: undefined = undefined\nlet n: null = null\n```\n\n#### ArkTS 渲染控制\n\n##### if/else：条件渲染\n\n- 支持 if、else 和 else if 语句。\n- if、else if 后跟随的条件语句可以使用状态变量。\n- 允许在容器组件内使用，通过条件渲染语句构建不同的子组件。\n- 当 if、else if 后跟随的状态判断中使用的状态变量值变化时，条件渲染语句会进行更新条件可以包括 Typescript 表达式。\n\n```ts\nif (条件表达式) {\n  组件内容1\n} else {\n  组件内容2\n}\n```\n\n##### ForEach：循环渲染\n\nForEach 接口基于数组类型数据来进行循环渲染，需要与容器组件配合使用，且接口返回的组件应当是允许包含在 ForEach 父容器组件中的子组件。例如，ListItem 组件要求 ForEach 的父容器组件必须为 List 组件。\n\n```ts\n/**\n * @param arr 要遍历的数组\n * @param itemGenerator 页面的生成函数\n * @param keyGenerator 键生成函数，提供唯一标识，如果后续数组中数据发生变化，会判断元素的唯一标识是否发生变化，有变更再去做渲染，这样减少了不必要的渲染，提高了页面的渲染效率（可选参数，如果不填会会有默认的键生成函数，生成规则是用角标拼上数组元素的数据）\n */\nForEach(\n  arr:Array<any>,\n  itemGenerator:(item: any, index: number) => void,\n  keyGenerator ? : (item: any, index: number) => string\n)\n```\n\n```ts\nlet arr: number[] = [1, 2, 4, 8, 16]\n\n@Entry\n@Component\nstruct ArrayPage {\n  \n  arr2: string[] = ['HarmonyOS', 'Flutter', 'Android']\n\n  build() {\n    List({ space: 10 }) {\n      // 访问全局变量 arr 不要加 this\n      ForEach(arr, (item: number, key: number) => {\n        ListItem() {\n          Text(`${item}--${key}`)\n            .fontSize(20)\n            .width('100%')\n            .height(50)\n            .textAlign(TextAlign.Center)\n            .backgroundColor(\"#eee\")\n            .borderRadius(10)\n        }\n      }, (item: number) => item.toString())\n\n      // 访问局部变量 arr2 要加 this\n      ForEach(this.arr2, (item: string) => {\n        ListItem() {\n          Text(item)\n            .fontSize(20)\n            .width('100%')\n            .height(50)\n            .textAlign(TextAlign.Center)\n            .backgroundColor(Color.Gray)\n            .borderRadius(10)\n        }\n      }, (item: string) => item)\n    }.width('100%')\n    .height('100%')\n    .padding(10)\n  }\n}\n```\n\n> 实际开发中尽量不要使用全局变量，组件中使用全局变量不需要加 this。\n\n##### LazyForEach：数据懒加载\n\nLazyForEach 从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。当 LazyForEach 在滚动容器中使用，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会进行组件销毁回收以降低内存占用。\n\n### 布局组件\n\n#### ArkTS 通用属性\n\nArkTS 通用属性用于设置组件的宽高、边距。\n\n| 名称           | 参数说明                                                     | 描述                                                         |\n| -------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| width          | Length                                                       | 设置组件自身的宽度，缺省时使用元素自身内容需要 的宽度。若子组件的宽大于父组件的宽，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| height         | Length                                                       | 设置组件自身的高度，缺省时使用元素自身内容需要 的高度。若子组件的高大于父组件的高，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| size           | {   width ? : Length,   height ? : Length }                  | 设置高宽尺寸。                                               |\n| padding        | Padding &#124; Length                                        | 设置内边距属性。参数为 Length 类型时，四个方向内边距同时生效。默认值：0。padding 设置百分比时，上下左右内边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| margin         | Margin &#124; Length                                         | 设置外边距属性。参数为 Length 类型时，四个方向外边距同时生效。默认值：0。margin 设置百分比时，上下左右外边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| constraintSize | {   minWidth ? : Length,   maxWidth ? : Length,   minHeight ? : Length,   maxHeight ? : Length } | 设置约束尺寸，组件布局时，进行尺寸范围限制。 constraintSize 的优先级高于 Width 和 Height。若设置的 minWidth 大于 maxWidth，则 minWidth 生效， minHeight 与 maxHeight 同理。默认值：{   minWidth: 0, maxWidth:   Infinity, minHeight:   0, maxHeight:   Infinity }。 |\n\n**Length 长度类型，用于描述尺寸单位。  **\n\n| 类型     | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| string   | 需要显式指定像素单位，如 '10px'，也可设置百分比字符串，如 '100%'。 |\n| number   | 默认单位 vp。                                                |\n| Resource | 资源引用类型，引入系统资源或者应用资源中的尺寸。             |\n\n**vp 为虚拟像素单位**：vp 使用虚拟像素，使元素在不同密度的设备上具有一致的视觉体量。\n\n**fp 字体像素单位**：字体像素（font pixel）大小默认情况下与 vp 相同，即默认情况下 1 fp = 1vp。如果用户在设置中选择了更大的字体，字体的实际显示大小就会在 vp 的基础上乘以用户设置的缩放系数，即 1 fp = 1 vp * 缩放系数。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Row() {\n        // 宽度 200，高度 200，外边距 20（蓝色区域），内边距 10（白色区域）\n        Row() {\n          Row().size({\n            width: '100%', height: '100%'\n          }).backgroundColor(Color.Yellow)\n        }\n        .width(200)\n        .height(200)\n        .padding(10)\n        .margin(20)\n        .backgroundColor(Color.White)\n      }.backgroundColor(Color.Blue)\n\n      Text(`This is a text.This is a text.This is a text.This is a text.This is a text`)\n        .width('90%')\n        .backgroundColor(Color.Orange)\n        .constraintSize({ maxWidth: 200 })\n\n      // 父容器尺寸确定时，设置了 layoutWeight 的子元素在主轴布局尺寸按照权重进行分配，忽略本身尺寸设置。\n      Row() {\n        // 权重 1，占主轴剩余空间 1/3\n        Text('layoutWeight(1)')\n          .size({ height: 110 })\n          .backgroundColor(Color.Orange)\n          .textAlign(TextAlign.Center)\n          .layoutWeight(1)\n\n        // 权重 2，占主轴剩余空间 2/3\n        Text('layoutWeight(2)')\n          .size({\n            width: '30%', height: 110\n          })\n          .backgroundColor(Color.Green)\n          .textAlign(TextAlign.Center)\n          .layoutWeight(2)\n\n        // 未设置 layoutWeight 属性，组件按照自身尺寸渲染\n        Text('no layoutWeight')\n          .size({\n            width: '33%', height: 110\n          })\n          .backgroundColor(Color.Brown)\n          .textAlign(TextAlign.Center)\n      }.size({ width: '100%', height: 140 })\n      .backgroundColor(0xCCCCCC)\n    }\n    .width('100%')\n    .height('100%')\n    .margin({ top: 5 })\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Start)\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716389533793.jpg\" style=\"zoom:80%;\" /> \n\n#### Column 详解\n\nColumn 是沿垂直方向布局的容器，可以包含多个子组件，多个子组件会在垂直方向上按照顺序排列。\n\n##### Column 接口\n\n```ts\nColumn(value?: {space?: string | number})\n```\n\n参数：\n\n| 参数名 | 参数类型             | 必填 | 参数描述                                                     |\n| ------ | -------------------- | ---- | ------------------------------------------------------------ |\n| space  | string &#124; number | 否   | 纵向布局元素垂直方向间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、 FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为数字的字符串。 |\n\n##### Column 属性\n\n| 名称             | 参数类型        | 描述                                                         |\n| ---------------- | --------------- | ------------------------------------------------------------ |\n| alignItems       | HorizontalAlign | 设置子组件在水平方向上的对齐格式。默认值：HorizontalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| justifyContent8+ | FlexAlign       | 设置子组件在垂直方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Row() {\n        Image($r('app.media.app_icon')).width(100).height(100)\n      }\n      .width(140)\n      .height(140)\n      .backgroundColor(Color.Red)\n      .alignItems(VerticalAlign.Center)\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n    .margin({ top: 5 })\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Start)\n  }\n}\n```\n\n#### Row 详解\n\nRow 为沿水平方向布局容器，可以包含多个子组件，多个子组件会在水平方向上按照顺序排列。\n\n##### Row 接口\n\n```ts\nRow(value?: {space?: string | number})\n```\n\n参数：\n\n| 参数 名 | 参数类 型            | 必 填 | 参数描述                                                     |\n| ------- | -------------------- | ----- | ------------------------------------------------------------ |\n| space   | string &#124; number | 否    | 横向布局元素间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为 数字的字符串。 |\n\n##### Row 属性\n\n| 名称             | 参数类型      | 描述                                                         |\n| ---------------- | ------------- | ------------------------------------------------------------ |\n| alignItems       | VerticalAlign | 设置子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n| justifyContent8+ | FlexAlign     | 设置子组件在水平方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。 |\n\n#### 自定义组件\n\n自定义组件传值。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Container()\n      Container({ color: Color.Orange, icon: $r('app.media.user') })\n      Container({ color: Color.Brown, icon: $r('app.media.settings') })\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.SpaceBetween)\n  }\n}\n\n@Component\nstruct Container {\n  color: Color = Color.Red\n  icon: Resource = $r('app.media.app_icon')\n\n  build() {\n    Row() {\n      Image(this.icon).width(100).height(100)\n    }\n    .width(140)\n    .height(140)\n    .backgroundColor(this.color)\n    .alignItems(VerticalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n```\n\n#### Row、Column 结合 layoutWeight 实现弹性布局\n\nArkTS 中使用 Row、Column 结合 layoutWeight 属性可以实现弹性布局。\n\n##### 水平弹性布局\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Row().height(100).backgroundColor(Color.Red).layoutWeight(1)\n      Row().height(100).backgroundColor(Color.Green).layoutWeight(1)\n      Row() {\n        Text('no layoutWeight').textAlign(TextAlign.Center).width('100%')\n      }.height(100).backgroundColor(Color.Orange).size({ height: 100, width: 200 })\n    }.size({ width: '100%', height: 100 })\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716388652192.jpg) \n\n##### 垂直弹性布局\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Row() {\n        Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon1.jpg\").objectFit(ImageFit.Fill)\n      }.size({ width: '100%', height: 160 })\n\n      Row({ space: 10 }) {\n        Row() {\n          Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon2.jpg\").objectFit(ImageFit.Fill)\n        }.layoutWeight(2)\n        \n        Row() {\n          Column({ space: 10 }) {\n            Row() {\n              Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon3.jpg\").objectFit(ImageFit.Fill)\n            }.layoutWeight(1).width('100%')\n\n            Row() {\n              Image(\"https://gitee.com/zch0304/images/raw/master/note/test_icon4.jpg\").objectFit(ImageFit.Fill)\n            }.layoutWeight(1).width('100%')\n          }\n        }.layoutWeight(1)\n      }.size({ width: '100%', height: 140 })\n    }\n    .margin(5)\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716472510603.jpg) \n\n#### Stack 定位组件\n\nStack 组件可以实现容器堆叠，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。\n\n##### Stack 接口\n\n```ts\nStack(value?: { alignContent?: Alignment })\n```\n\n参数：\n\n| 参数名       | 参数类型  | 必 填 | 参数描述                                                 |\n| ------------ | --------- | ----- | -------------------------------------------------------- |\n| alignContent | Alignment | 否    | 设置子组件在容器内的对齐方式。默认值：Alignment.Center。 |\n\n##### Stack 基本使用\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Stack({ alignContent: Alignment.BottomStart }) {\n        Row() {\n          Text(\"HarmonyOS\").fontSize(40).textAlign(TextAlign.Center)\n        }.width(300).height(300).backgroundColor(Color.Orange)\n\n        Row().width(100).height(100).backgroundColor(Color.Blue)\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716473605745.jpg) \n\n##### Stack 子组件中 zIndex 控制层级\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Stack({ alignContent: Alignment.BottomStart }) {\n      Column() {\n        Text(\"Stack子元素1\").fontSize(20)\n      }.width(100).height(100).backgroundColor(Color.Orange).zIndex(2)\n\n      Column() {\n        Text(\"Stack子元素2\").fontSize(20)\n      }.width(150).height(150).backgroundColor(Color.Yellow).zIndex(1)\n\n      Column() {\n        Text(\"Stack子元素3\").fontSize(20)\n      }.width(200).height(200).backgroundColor(Color.Pink)\n    }.width(350).height(350).backgroundColor(Color.Gray)\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716474425596.jpg) \n\n##### Stack 结合 List 实现动态列表\n\n要实现的功能：\n1、实现浮动按钮。\n2、点击按钮让列表的数字加一。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  @State list: number[] = [1, 2, 3]\n\n  build() {\n    Column() {\n      Stack({ alignContent: Alignment.BottomEnd }) {\n        List({ space: 10 }) {\n          ForEach(this.list, (item: number) => {\n            ListItem() {\n              Text(`${item}`)\n                .fontSize(20)\n                .width('100%')\n                .height(50)\n                .backgroundColor('#eee')\n                .textAlign(TextAlign.Center)\n            }\n          })\n        }.width('100%').height('100%').padding(10)\n\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          Text('+').fontSize(40).fontColor(Color.White)\n        }.width(55).height(55).margin({ right: 20, bottom: 20 }).onClick(() => {\n          this.doAdd()\n        })\n      }\n    }.width('100%').height('100%').alignItems(HorizontalAlign.Center)\n  }\n\n  doAdd() {\n    this.list.push(this.list[this.list.length-1] + 1)\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716475790377.jpg\" style=\"zoom: 50%;\" /> \n\n##### Stack 结合 List 实现浮动导航\n\n```ts\n@Entry\n@Component\nstruct Index {\n  @State list: number[] = [1, 2, 3]\n\n  build() {\n    Column() {\n      Stack({ alignContent: Alignment.BottomEnd }) {\n        Stack({ alignContent: Alignment.TopEnd }) {\n          List({ space: 10 }) {\n            ForEach(this.list, (item: number) => {\n              ListItem() {\n                Text(`${item}`)\n                  .fontSize(20)\n                  .width('100%')\n                  .height(50)\n                  .backgroundColor('#eee')\n                  .textAlign(TextAlign.Center)\n              }\n            })\n          }.width('100%').height('100%').padding({ left: 10, top: 70, right: 10, bottom: 10 })\n\n          Row() {\n            Text(\"导航\").fontSize(16).textAlign(TextAlign.Center).width('100%')\n          }.width('100%').height(60).backgroundColor(Color.Orange)\n        }\n\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          Text('+').fontSize(40).fontColor(Color.White)\n        }.width(55).height(55).margin({ right: 20, bottom: 20 }).onClick(() => {\n          this.doAdd()\n        })\n      }\n    }.width('100%').height('100%').alignItems(HorizontalAlign.Center)\n  }\n\n  doAdd() {\n    this.list.push(this.list[this.list.length-1] + 1)\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716477035040.jpg\" style=\"zoom:50%;\" /> \n\n#### 弹性布局（Flex）\n\nFlex 弹性布局可以更加方便的对容器中的子元素进行排列、对齐和分配剩余空间等。单行的 Flex 跟 Row 组件的表现几乎一致，单列的 Flex 则跟 Column 组件表现几乎一致。但 Row 与 Column 都是单行单列的，Flex 则可以突破了这个限制，当主轴上空间不足时，则向纵轴上去扩展显示。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716554468902.jpg\" style=\"zoom:50%;\" /> \n\n##### Flex 接口\n\n```ts\nFlex(value?: { direction?: FlexDirection, wrap?: FlexWrap, justifyContent?: FlexAlign, alignItems?: ItemAlign, alignContent?: FlexAlign })\n```\n\n标准 Flex 布局容器。从 API version 9 开始，该接口支持在 ArkTS 片中使用。\n\n##### Flex 参数\n\n| 参数名         | 参数类型      | 必 填 | 默认值            | 参数描述                                                     |\n| -------------- | ------------- | ----- | ----------------- | ------------------------------------------------------------ |\n| direction      | FlexDirection | 否    | FlexDirection.Row | 子组件在 Flex 容器上排列的方向，即主轴的方向。               |\n| wrap           | FlexWrap      | 否    | FlexWrap.NoWrap   | Flex 容器是单行/列还是多行/列排列。说明：在多行布局时，通过交叉轴方向，确认新行堆叠方向。 |\n| justifyContent | FlexAlign     | 否    | FlexAlign.Start   | 子组件在 Flex 容器主轴上的对齐格式。                         |\n| alignItems     | ItemAlign     | 否    | ItemAlign.Start   | 子组件在 Flex 容器交叉轴上的对齐格式。                       |\n| alignContent   | FlexAlign     | 否    | FlexAlign.Start   | 交叉轴中有额外的空间时，多行内容的对齐方式。仅在 wrap 为 Wrap 或 WrapReverse 下生效。 |\n\n##### Flex 轴的基本概念\n\n- **主轴**：Flex 组件布局方向的轴线，子元素默认沿着主轴排列。主轴开始的位置称为主轴起始点，结束位置称为主轴结束点。\n- **交叉轴**：垂直于主轴方向的轴线。交叉轴开始的位置称为交叉轴起始点，结束位置称为交叉轴结束点。\n\n\n\n ##### direction 参数控制布局方向\n\nFlex 布局中通过 direction 可以改变布局方向，在弹性布局中，容器的子元素可以按照任意方向排列。通过设置参数 direction，可以决定主轴的方向，从而控制子组件的排列方向。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557181764.jpg\" style=\"zoom:50%;\" /> \n\n- FlexDirection.Row：主轴为水平方向，子组件从起始端沿着水平方向开始排布。\n- FlexDirection.RowReverse：主轴为水平方向，子组件从终点端沿着 FlexDirection. Row 相反的方向开始排布。\n- FlexDirection.Column：主轴为垂直方向，子组件从起始端沿着垂直方向开始排布。\n- FlexDirection.ColumnReverse：主轴为垂直方向，子组件从终点端沿着 FlexDirection. Column 相反的方向开始排布。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ direction: FlexDirection.Row }) {\n      Text('1').width('33%').height(50).backgroundColor(Color.Red)\n      Text('2').width('33%').height(50).backgroundColor(Color.Green)\n      Text('3').width('33%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').height(70).padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg) \n\n##### wrap 参数控制布局换行\n\n弹性布局分为单行布局和多行布局。默认情况下，Flex 容器中的子元素都排在一条线（又称“轴线”） 上。wrap 属性控制当子元素主轴尺寸之和大于容器主轴尺寸时，Flex 是单行布局还是多行布局。在多行布局时，通过交叉轴方向，确认新行堆叠方向。 \n\n**FlexWrap. NoWrap**（默认值）：不换行。如果子组件的宽度总和大于父元素的宽度，则子组件会被压缩宽度。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ wrap: FlexWrap.NoWrap }) {\n      Text('1').width('50%').height(50).backgroundColor(Color.Red)\n      Text('2').width('50%').height(50).backgroundColor(Color.Green)\n      Text('3').width('50%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg) \n\n**FlexWrap. Wrap**：换行，每一行子组件按照主轴方向排列。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ wrap: FlexWrap.Wrap }) {\n      Text('1').width('50%').height(50).backgroundColor(Color.Red)\n      Text('2').width('50%').height(50).backgroundColor(Color.Green)\n      Text('3').width('50%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716558674189.jpg) \n\n**FlexWrap. WrapReverse**：换行，每一行子组件按照主轴反方向排列。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ wrap: FlexWrap.WrapReverse }) {\n      Text('1').width('50%').height(50).backgroundColor(Color.Red)\n      Text('2').width('50%').height(50).backgroundColor(Color.Green)\n      Text('3').width('50%').height(50).backgroundColor(Color.Orange)\n    }.width('90%').padding(10).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716558853253.jpg\" style=\"zoom:80%;\" /> \n\n##### justifyContent 配置主轴对齐方式\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716559329865.jpg\" style=\"zoom: 67%;\" /> \n\n**FlexAlign.Start**（默认值）：子组件在主轴方向起始端对齐，第一个子组件与父元素边沿对齐，其他元素与前一个元素对齐。\n\n**FlexAlign.Center**：子组件在主轴方向居中对齐。\n\n**FlexAlign.End**：子组件在主轴方向终点端对齐，最后一个子组件与父元素边沿对齐，其它元素与后一个元素对齐。\n\n**FlexAlign.SpaceBetween**：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件和最后一个子组件与父元素边沿对齐。\n\n**FlexAlign.SpaceAround**：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件到主轴起始端的距离和最后一个子组件到主轴终点端的距离是相邻元素之间距离的一半。\n\n**FlexAlign.SpaceEvenly**：Flex 主轴方向元素等间距布局，相邻子组件之间的间距、第一个子组件与主轴起始端的间距、最后一个子组件到主轴终点端的间距均相等。\n\n##### alignContent 配置内容对齐\n\n可以通过 alignContent 参数设置子组件各行在交叉轴剩余空间内的对齐方式，只在多行的 ﬂex 布局中生效（仅在 wrap 为 Wrap 或 WrapReverse 下生效），可选值有：\n\n**FlexAlign.Start**：子组件各行与交叉轴起点对齐，默认值。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ justifyContent: FlexAlign.SpaceBetween, wrap: FlexWrap.Wrap, alignContent: FlexAlign.Start }) {\n      Text('1').width('30%').height(20).backgroundColor(Color.Red)\n      Text('2').width('60%').height(20).backgroundColor(Color.Green)\n      Text('3').width('40%').height(20).backgroundColor(Color.Orange)\n      Text('4').width('30%').height(20).backgroundColor(Color.Pink)\n      Text('5').width('20%').height(20).backgroundColor(Color.Yellow)\n    }.height(100).backgroundColor('#ccc')\n  }\n}\n```\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561030772.jpg) \n\n**FlexAlign.Center**：子组件各行在交叉轴方向居中对齐。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561257608.jpg) \n\n**FlexAlign.End**：子组件各行与交叉轴终点对齐。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561389788.jpg) \n\n**FlexAlign.SpaceBetween**：子组件各行与交叉轴两端对齐，各行间垂直间距平均分布。\n\n![](https://gitee.com/zch0304/images/raw/master/note/1716561544100.jpg) \n\n**FlexAlign.SpaceAround**：子组件各行间距相等，是元素首尾行与交叉轴两端距离的两倍。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561707980.jpg\" style=\"zoom:80%;\" /> \n\n**FlexAlign.SpaceEvenly**：子组件各行间距，子组件首尾行与交叉轴两端距离都相等。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561851381.jpg\" style=\"zoom:80%;\" /> \n\n##### alignItems 参数控制交叉轴对齐方式\n\n容器和子元素都可以设置交叉轴对齐方式，且子元素设置的对齐方式优先级较高。可以通过 Flex 组件的 alignItems 参数设置子组件在交叉轴的对齐方式。\n\n**ItemAlign.Auto**：使用 Flex 容器中默认配置。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ alignItems: ItemAlign.Auto }) {\n      Text('1').width('33%').height(20).backgroundColor(Color.Red)\n      Text('2').width('33%').height(40).backgroundColor(Color.Green)\n      Text('3').width('33%').height(60).backgroundColor(Color.Orange)\n    }.height(80).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.Start**：交叉轴方向首部对齐，默认值。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.Center**：交叉轴方向居中对齐。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816486562.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.End**：交叉轴方向底部对齐。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817062907.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign.Stretch**：交叉轴方向拉伸填充，在未设置尺寸时，拉伸到容器尺寸。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817484409.jpg\" style=\"zoom:80%;\" /> \n\n**ItemAlign. Baseline**：交叉轴方向文本基线对齐。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817697841.jpg\" style=\"zoom:80%;\" /> \n\n##### Flex 自适应拉伸布局属性\n\nRow、Column 结合 layoutWeight 可以实现自适应拉伸弹性布局。\n\n**1、ﬂexGrow 属性**\n\n设置父容器的剩余空间分配给此属性所在组件的比例。用于“瓜分”父组件的剩余空间。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex() {\n      Text('1').flexGrow(1).height(60).backgroundColor(Color.Red)\n      Text('2').flexGrow(2).height(60).backgroundColor(Color.Green)\n      Text('no flexGrow').width(100).height(60).backgroundColor(Color.Orange)\n    }.height(80).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716819203162.jpg\" style=\"zoom:80%;\" /> \n\n父容器宽度 400vp，三个子组件原始宽度为 100vp，总和 300vp，剩余空间 100vp 根据 ﬂexGrow 值的占比分配给子组件，未设置 ﬂexGrow 的子组件不参与“瓜分”。 第一个元素以及第二个元素以 2:3 分配剩下的 100vp。第一个元素为 100vp+100vp2/5=140vp，第 二个元素为 100vp+100vp3/5=160vp。\n\n**2、ﬂexShrink 属性**\n\n当父容器空间不足时，子组件的压缩比例。\n\n```ts\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex() {\n      Text('flexShrink(3)').flexShrink(3).width(200).height(60).backgroundColor(Color.Red)\n      Text('no flexShrink').width(200).height(60).backgroundColor(Color.Green)\n      Text('flexShrink(1)').flexShrink(1).width(200).height(60).backgroundColor(Color.Orange)\n    }.width(400).height(80).backgroundColor('#ccc')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716821744026.jpg\" style=\"zoom:80%;\" /> \n\n##### Flex 应用案例\n\n弹性布局在开发场景中用例特别多，比如页面头部导航栏的均匀分布、页面框架的搭建、多行多列数据的排列等等。\n\n**1、热搜功能**\n\n```ts\n@Entry\n@Component\nstruct Index {\n  @State hotSearch: string[] = ['乒乓球', 'NBA直播', '世界杯', '广东城际铁路', 'Flutter教程', 'HarmonyOS', 'ArkTS']\n\n  build() {\n    Column() {\n      Text('热门搜索')\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n        .width('100%')\n        .textAlign(TextAlign.Start)\n        .padding(10)\n        .fontColor('#666')\n      Flex({ wrap: FlexWrap.Wrap }) {\n        ForEach(this.hotSearch, (item: string) => {\n          Text(`${item}`)\n            .fontSize(18)\n            .backgroundColor('#eee')\n            .padding({ left: 16, top: 10, right: 16, bottom: 10 })\n            .margin(10)\n            .borderRadius(12)\n        }, (item: string) => item)\n      }\n    }.width('100%').height('100%')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716910862339.jpg\" style=\"zoom:80%;\" /> \n\n**2、帮助列表**\n\n```ts\ninterface HelpListInterface {\n  title: string,\n  icon: Resource\n}\n\n@Entry\n@Component\nstruct Index {\n  @State helpList: HelpListInterface[] = [\n    {\n      title: \"我的订阅\",\n      icon: $r(\"app.media.subscribe\")\n    },\n    {\n      title: \"常见问题\",\n      icon: $r(\"app.media.problem\")\n    },\n    {\n      title: \"在线客服\",\n      icon: $r(\"app.media.customer_service\")\n    },\n    {\n      title: \"意见反馈\",\n      icon: $r(\"app.media.opinion\")\n    },\n    {\n      title: \"关怀模式\",\n      icon: $r(\"app.media.give\")\n    },\n    {\n      title: \"会员中心\",\n      icon: $r(\"app.media.user\")\n    }\n  ]\n\n  build() {\n    Column() {\n      Flex({ wrap: FlexWrap.Wrap }) {\n        ForEach(this.helpList, (item: HelpListInterface) => {\n          Column() {\n            Image(item.icon).width(42).height(42)\n            Text(`${item.title}`).fontSize(15).fontColor('#666').padding({ top: 10 })\n          }.width('25%').padding(5).margin({ bottom: 10 })\n        }, (item: HelpListInterface) => item.title)\n      }\n      .margin(10)\n      .backgroundColor('#fff')\n      .borderRadius(10)\n      .padding({ top: 15, bottom: 5 })\n    }.width('100%').height('100%').backgroundColor('#eee')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716912172452.jpg\" style=\"zoom:80%;\" /> \n\n#### 相对布局（RelativeContainer）\n\n相对布局组件，用于复杂场景中元素对齐的布局。\n\nRelativeContainer 就是采用相对布局的容器，支持容器内部的子元素设置相对位置关系。子元素支持指定兄弟元素作为锚点，也支持指定父容器作为锚点，基于锚点做相对位置布局。下图是一个 RelativeContainer 的概念图，图中的虚线表示位置的依赖关系。\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716991550056.jpg\" style=\"zoom: 33%;\" /> \n\n##### 规则说明\n\n1、容器内子组件区分水平方向，垂直方向：\n\n​    （1）水平方向为 left，middle，right，对应容器的 HorizontalAlign.Start，HorizontalAlign.Center，HorizontalAlign.End。\n\n​    （2）垂直方向为 top，center，bottom，对应容器的 VerticalAlign.Top，VerticalAlign.Center，VerticalAlign.Bottom。\n\n2、子组件可以将容器或者其他子组件设为锚点：\n\n​    （1）参与相对布局的容器内组件必须设置 id，不设置 id 的组件不显示，RelativeContainer 容器的固定 id 为 **\\_\\_container\\_\\_**。\n\n​    （2）此子组件某一方向上的三个位置可以将容器或其它子组件的同方向三个位置为锚点，同方向上两个以上位置设置锚点以后会跳过第三个。\n\n​    （3）前端页面设置的子组件尺寸大小不会受到相对布局规则的影响。子组件某个方向上设置两个或以上 alignRules 时不建议设置此方向尺寸大小。\n\n​    （4）对齐后需要额外偏移可设置 **oﬀset**。\n\n3、特殊情况：\n\n​    （1）互相依赖，环形依赖时容器内子组件全部不绘制。\n\n​    （2）同方向上两个以上位置设置锚点但锚点位置逆序时，此子组件大小为 0，即不绘制。\n\n​    （3）容器不设置宽高时，容器与容器内子组件不绘制。\n\n##### RelativeContainer 的基本使用演示\n\n```tsx\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      RelativeContainer() {\n        Row()\n          .width(100)\n          .height(100)\n          .backgroundColor(Color.Orange)\n          .alignRules({\n            left: { anchor: '__container__', align: HorizontalAlign.Start },\n            top: { anchor: '__container__', align: VerticalAlign.Top }\n          })\n          .id('row1')\n          .offset({ x: 20, y: 20 })\n      }.width(200).height(200).border({ width: 2, color: Color.Green }).id('rc')\n    }.width('100%').height('100%')\n  }\n}\n```\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716995097983.jpg\" style=\"zoom:80%;\" /> \n\ndemo","slug":"鸿蒙开发教程","published":1,"updated":"2024-06-03T15:51:54.231Z","_id":"clwz59rde0026nctt4ekff2tg","comments":1,"layout":"post","photos":[],"content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n<h3 id=\"HarmonyOS-项目目录介绍\"><a href=\"#HarmonyOS-项目目录介绍\" class=\"headerlink\" title=\"HarmonyOS 项目目录介绍\"></a>HarmonyOS 项目目录介绍</h3><h3 id=\"ArkTS-基本语法详解\"><a href=\"#ArkTS-基本语法详解\" class=\"headerlink\" title=\"ArkTS 基本语法详解\"></a>ArkTS 基本语法详解</h3><p>HarmonyOS 4.0 以后可以使用 ArkTS 或者 HTML&#x2F;CSS&#x2F;JS 技术来开发 HarmonyOS 应用，而 ArkTS 是 HarmonyOS 优选的主力应用开发语言。  </p>\n<p>ArkTS 围绕应用开发在 TypeScript（简称 TS）生态基础上做了进一步扩展，继承了 TS 的所有特性，是 TS 的超集。因此，在学习 ArkTS 语言之前，建议首先具<br>备 TS 语言开发能力。</p>\n<p>当前，ArkTS 在 TS 的基础上主要扩展了如下能力：</p>\n<ul>\n<li><strong>基本语法</strong>：ArkTS 定义了声明式 UI 描述、自定义组件和动态扩展 UI 元素的能力，再配合 ArkUI 开发框架中的系统组件及其相关的事件方法、属性方法等共同构成了 UI 开发的主体。</li>\n<li><strong>状态管理</strong>：ArkTS 提供了多维度的状态管理机制。在 UI 开发框架中，与 UI 相关联的数据可以在组件内使用，也可以在不同组件层级间传递，比如父子组件之间、爷孙组件之间，还可以在应用全局范围内传递或跨设备传递。另外，从数据的传递形式来看，可分为只读的单向传递和可变更的双向传递。开发者可以灵活的利用这些能力来实现数据和 UI 的联动。</li>\n<li><strong>渲染控制</strong>：ArkTS 提供了渲染控制的能力。条件渲染可根据应用的不同状态，渲染对应状态下的 UI 内容。循环渲染可从数据源中迭代获取数据，并在每次迭代过程中创建相应的组件。数据懒加载从数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。</li>\n</ul>\n<p>未来，ArkTS 会结合应用开发&#x2F;运行的需求持续演进，逐步提供并行和并发能力增强、系统类型增强、分布式开发范式等更多特性。  </p>\n<h4 id=\"ArkTS-基本组成\"><a href=\"#ArkTS-基本组成\" class=\"headerlink\" title=\"ArkTS 基本组成\"></a>ArkTS 基本组成</h4><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716005497787.jpg\" style=\"zoom:50%;\" /> \n\n<ul>\n<li><strong>装饰器</strong>： 用于装饰类、结构、方法以及变量，并赋予其特殊的含义。如上述示例中 @Entry、@Component 和 @State 都是装饰器，@Component 表示自定义组件，@Entry 表示该自定义组件为入口组件，@State 表示组件中的状态变量，状态变量变化会触发 UI 刷新。  </li>\n<li><strong>自定义组件</strong>：可复用的 UI 单元，可组合其它组件，如上述被 @Component 装饰的 struct Index。  </li>\n<li><strong>UI 描述</strong>：以声明式的方式来描述 UI 的结构，例如 build() 方法中的代码块  。</li>\n<li><strong>系统组件</strong>：ArkUI 框架中默认内置的基础和容器组件，可直接被开发者调用，比如示例中的 Column、Text、Divider、Button。  </li>\n<li><strong>事件方法</strong>：组件可以通过链式调用设置多个事件的响应逻辑，如跟随在 Button 后面的 onClick()。  </li>\n<li><strong>属性方法</strong>：组件可以通过链式调用配置多项属性，如 fontSize()、width()、height()、backgroundColor() 等。</li>\n</ul>\n<p>系统组件、属性方法、事件方法具体使用可参考<a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V2/ts-components-summary-0000001478181369-V2\">基于 ArkTS 的声明式开发范式</a>。</p>\n<h4 id=\"ArkTS-布局结构\"><a href=\"#ArkTS-布局结构\" class=\"headerlink\" title=\"ArkTS 布局结构\"></a>ArkTS 布局结构</h4><p>布局的结构通常是分层级的，代表了用户界面中的整体架构。一个常见的页面结构如下所示：</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716013357130.jpg\" style=\"zoom:50%;\" /> \n\n<p>为实现上述效果，需要在页面中声明对应的元素。其中，Page 表示页面的根节点，Column&#x2F;Row 等元素为系统组件。针对不同的页面结构，ArkUI 提供了不同的布局组件来帮助我们实现对应布局的效果，例如 Row 用于实现线性布局等。  </p>\n<h4 id=\"ArkTS-数据类型\"><a href=\"#ArkTS-数据类型\" class=\"headerlink\" title=\"ArkTS 数据类型\"></a>ArkTS 数据类型</h4><p>TypeScript 支持一些基础的数据类型，如布尔型、数组、字符串等。</p>\n<h5 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h5><p>TypeScript 里的所有数字都是浮点数，这些浮点数的类型是 <code>number</code>。除了支持十进制，还支持二进制、八进制、十六进制。  </p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数值类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num1</span>: <span class=\"built_in\">number</span> = <span class=\"number\">18</span> <span class=\"comment\">// 十进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num2</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0b10111</span> <span class=\"comment\">// ob 二进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num3</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0o14</span> <span class=\"comment\">// 0o 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num4</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0x1f</span> <span class=\"comment\">// 0x 十六进制</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><p>TypeScript 里使用 <code>string</code> 表示文本数据类型， 可以使用双引号（ “ ）或单引号（ ‘ ）表示字符串或者反引号（&#96;）。</p>\n<blockquote>\n<p>反引号中可以配合 ${} 解析变量。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;HarmonyOS Next不支持Android 应用了&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;ArkTS&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str3</span>: <span class=\"built_in\">string</span> = <span class=\"string\">`马总今年<span class=\"subst\">$&#123;num1&#125;</span>岁了`</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h5><p>TypeScript 中可以使用 <code>boolean</code> 来表示这个变量是布尔值，可以赋值为 true 或者 false。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 布尔类型 true、false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">stateOn</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">stateOff</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h5><p>联合类型（Union Types）表示取值可以为多种类型中的一种。如果一个数据可能有多重类型，或者当下还没想好用哪个类型 …</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">flag</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">flag = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">flag = <span class=\"number\">1</span></span><br><span class=\"line\">flag = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h5><p>TypeScrip 有两种方式可以定义数组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种是使用数组泛型，Array&lt;元素类型&gt;。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">course1</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [<span class=\"string\">&#x27;Flutter&#x27;</span>, <span class=\"string\">&quot;HarmonyOS&quot;</span>, <span class=\"string\">`Golang`</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种是在元素类型后面接上 []，表示由此类型元素组成的一个数组。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">course2</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&#x27;Flutter&#x27;</span>, <span class=\"string\">&quot;HarmonyOS&quot;</span>, <span class=\"string\">`Golang`</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h5><p>enum 类型是对 JavaScript 标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;<span class=\"title class_\">Red</span>, <span class=\"title class_\">Green</span>, <span class=\"title class_\">Blue</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h5><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string 和 number 类型的元组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>]</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>] <span class=\"comment\">// OK</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&#x27;hello&#x27;</span>] <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Any（不推荐使用）\"><a href=\"#Any（不推荐使用）\" class=\"headerlink\" title=\"Any（不推荐使用）\"></a>Any（不推荐使用）</h5><p>any 类型，表示的是变量可以是任意类型，相当于关闭了 ts 的类型检测功能，不建议使用。如果是 any 类型，则允许被赋值为任意类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">any</span> = <span class=\"number\">666</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;Semlinker&quot;</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"literal\">false</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"number\">66</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"literal\">undefined</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"literal\">null</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = [] <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = &#123;&#125; <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Unknown\"><a href=\"#Unknown\" class=\"headerlink\" title=\"Unknown\"></a>Unknown</h5><p>unknown 与 any 一样，也相当于关闭了 ts 的类型检测功能。有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 unknown 类型来标记这些变量。（同 any ）。</p>\n <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">notSure</span>: <span class=\"built_in\">unknown</span> = <span class=\"number\">4</span></span><br><span class=\"line\">notSure = <span class=\"string\">&#x27;maybe a string instead&#x27;</span></span><br><span class=\"line\">notSure = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Void\"><a href=\"#Void\" class=\"headerlink\" title=\"Void\"></a>Void</h5><p>当一个函数没有返回值时，你通常会见到其返回值类型是 void。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;This is function is void&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h5><p>TypeScript 里，null 和 undefined 两者各自有自己的类型分别叫做 null 和 undefined。  </p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ArkTS-渲染控制\"><a href=\"#ArkTS-渲染控制\" class=\"headerlink\" title=\"ArkTS 渲染控制\"></a>ArkTS 渲染控制</h4><h5 id=\"if-else：条件渲染\"><a href=\"#if-else：条件渲染\" class=\"headerlink\" title=\"if&#x2F;else：条件渲染\"></a>if&#x2F;else：条件渲染</h5><ul>\n<li>支持 if、else 和 else if 语句。</li>\n<li>if、else if 后跟随的条件语句可以使用状态变量。</li>\n<li>允许在容器组件内使用，通过条件渲染语句构建不同的子组件。</li>\n<li>当 if、else if 后跟随的状态判断中使用的状态变量值变化时，条件渲染语句会进行更新条件可以包括 Typescript 表达式。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件表达式) &#123;</span><br><span class=\"line\">  组件内容<span class=\"number\">1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  组件内容<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ForEach：循环渲染\"><a href=\"#ForEach：循环渲染\" class=\"headerlink\" title=\"ForEach：循环渲染\"></a>ForEach：循环渲染</h5><p>ForEach 接口基于数组类型数据来进行循环渲染，需要与容器组件配合使用，且接口返回的组件应当是允许包含在 ForEach 父容器组件中的子组件。例如，ListItem 组件要求 ForEach 的父容器组件必须为 List 组件。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr 要遍历的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> itemGenerator 页面的生成函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> keyGenerator 键生成函数，提供唯一标识，如果后续数组中数据发生变化，会判断元素的唯一标识是否发生变化，有变更再去做渲染，这样减少了不必要的渲染，提高了页面的渲染效率（可选参数，如果不填会会有默认的键生成函数，生成规则是用角标拼上数组元素的数据）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">ForEach</span>(</span><br><span class=\"line\">  <span class=\"attr\">arr</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;,</span><br><span class=\"line\">  <span class=\"attr\">itemGenerator</span>:<span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">any</span>, index: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>,</span><br><span class=\"line\">  keyGenerator ? : <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">any</span>, index: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">string</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">ArrayPage</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">arr2</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&#x27;HarmonyOS&#x27;</span>, <span class=\"string\">&#x27;Flutter&#x27;</span>, <span class=\"string\">&#x27;Android&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">List</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 访问全局变量 arr 不要加 this</span></span><br><span class=\"line\">      <span class=\"title class_\">ForEach</span>(arr, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span>, key: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>--<span class=\"subst\">$&#123;key&#125;</span>`</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&quot;#eee&quot;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span></span>) =&gt;</span> item.<span class=\"title function_\">toString</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 访问局部变量 arr2 要加 this</span></span><br><span class=\"line\">      <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">arr2</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(item)</span><br><span class=\"line\">            .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Gray</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> item)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实际开发中尽量不要使用全局变量，组件中使用全局变量不需要加 this。</p>\n</blockquote>\n<h5 id=\"LazyForEach：数据懒加载\"><a href=\"#LazyForEach：数据懒加载\" class=\"headerlink\" title=\"LazyForEach：数据懒加载\"></a>LazyForEach：数据懒加载</h5><p>LazyForEach 从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。当 LazyForEach 在滚动容器中使用，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会进行组件销毁回收以降低内存占用。</p>\n<h3 id=\"布局组件\"><a href=\"#布局组件\" class=\"headerlink\" title=\"布局组件\"></a>布局组件</h3><h4 id=\"ArkTS-通用属性\"><a href=\"#ArkTS-通用属性\" class=\"headerlink\" title=\"ArkTS 通用属性\"></a>ArkTS 通用属性</h4><p>ArkTS 通用属性用于设置组件的宽高、边距。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>参数说明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>Length</td>\n<td>设置组件自身的宽度，缺省时使用元素自身内容需要 的宽度。若子组件的宽大于父组件的宽，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>Length</td>\n<td>设置组件自身的高度，缺省时使用元素自身内容需要 的高度。若子组件的高大于父组件的高，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>{   width ? : Length,   height ? : Length }</td>\n<td>设置高宽尺寸。</td>\n</tr>\n<tr>\n<td>padding</td>\n<td>Padding &#124; Length</td>\n<td>设置内边距属性。参数为 Length 类型时，四个方向内边距同时生效。默认值：0。padding 设置百分比时，上下左右内边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>margin</td>\n<td>Margin &#124; Length</td>\n<td>设置外边距属性。参数为 Length 类型时，四个方向外边距同时生效。默认值：0。margin 设置百分比时，上下左右外边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>constraintSize</td>\n<td>{   minWidth ? : Length,   maxWidth ? : Length,   minHeight ? : Length,   maxHeight ? : Length }</td>\n<td>设置约束尺寸，组件布局时，进行尺寸范围限制。 constraintSize 的优先级高于 Width 和 Height。若设置的 minWidth 大于 maxWidth，则 minWidth 生效， minHeight 与 maxHeight 同理。默认值：{   minWidth: 0, maxWidth:   Infinity, minHeight:   0, maxHeight:   Infinity }。</td>\n</tr>\n</tbody></table>\n<p>**Length 长度类型，用于描述尺寸单位。  **</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>需要显式指定像素单位，如 ‘10px’，也可设置百分比字符串，如 ‘100%’。</td>\n</tr>\n<tr>\n<td>number</td>\n<td>默认单位 vp。</td>\n</tr>\n<tr>\n<td>Resource</td>\n<td>资源引用类型，引入系统资源或者应用资源中的尺寸。</td>\n</tr>\n</tbody></table>\n<p><strong>vp 为虚拟像素单位</strong>：vp 使用虚拟像素，使元素在不同密度的设备上具有一致的视觉体量。</p>\n<p><strong>fp 字体像素单位</strong>：字体像素（font pixel）大小默认情况下与 vp 相同，即默认情况下 1 fp &#x3D; 1vp。如果用户在设置中选择了更大的字体，字体的实际显示大小就会在 vp 的基础上乘以用户设置的缩放系数，即 1 fp &#x3D; 1 vp * 缩放系数。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 宽度 200，高度 200，外边距 20（蓝色区域），内边距 10（白色区域）</span></span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Row</span>().<span class=\"title function_\">size</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"string\">&#x27;100%&#x27;</span></span><br><span class=\"line\">          &#125;).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Yellow</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .<span class=\"title function_\">width</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">height</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">margin</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">White</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Blue</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">`This is a text.This is a text.This is a text.This is a text.This is a text`</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">constraintSize</span>(&#123; <span class=\"attr\">maxWidth</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 父容器尺寸确定时，设置了 layoutWeight 的子元素在主轴布局尺寸按照权重进行分配，忽略本身尺寸设置。</span></span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 权重 1，占主轴剩余空间 1/3</span></span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;layoutWeight(1)&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">height</span>: <span class=\"number\">110</span> &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 权重 2，占主轴剩余空间 2/3</span></span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;layoutWeight(2)&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">size</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"string\">&#x27;30%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">110</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 未设置 layoutWeight 属性，组件按照自身尺寸渲染</span></span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no layoutWeight&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">size</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"string\">&#x27;33%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">110</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Brown</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">140</span> &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">backgroundColor</span>(<span class=\"number\">0xCCCCCC</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Start</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716389533793.jpg\" style=\"zoom:80%;\" /> \n\n<h4 id=\"Column-详解\"><a href=\"#Column-详解\" class=\"headerlink\" title=\"Column 详解\"></a>Column 详解</h4><p>Column 是沿垂直方向布局的容器，可以包含多个子组件，多个子组件会在垂直方向上按照顺序排列。</p>\n<h5 id=\"Column-接口\"><a href=\"#Column-接口\" class=\"headerlink\" title=\"Column 接口\"></a>Column 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Column</span>(value?: &#123;space?: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数类型</th>\n<th>必填</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>space</td>\n<td>string &#124; number</td>\n<td>否</td>\n<td>纵向布局元素垂直方向间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、 FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为数字的字符串。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Column-属性\"><a href=\"#Column-属性\" class=\"headerlink\" title=\"Column 属性\"></a>Column 属性</h5><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>参数类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alignItems</td>\n<td>HorizontalAlign</td>\n<td>设置子组件在水平方向上的对齐格式。默认值：HorizontalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>justifyContent8+</td>\n<td>FlexAlign</td>\n<td>设置子组件在垂直方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Image</span>($r(<span class=\"string\">&#x27;app.media.app_icon&#x27;</span>)).<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .<span class=\"title function_\">width</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">height</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">VerticalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Start</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Row-详解\"><a href=\"#Row-详解\" class=\"headerlink\" title=\"Row 详解\"></a>Row 详解</h4><p>Row 为沿水平方向布局容器，可以包含多个子组件，多个子组件会在水平方向上按照顺序排列。</p>\n<h5 id=\"Row-接口\"><a href=\"#Row-接口\" class=\"headerlink\" title=\"Row 接口\"></a>Row 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Row</span>(value?: &#123;space?: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数 名</th>\n<th>参数类 型</th>\n<th>必 填</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>space</td>\n<td>string &#124; number</td>\n<td>否</td>\n<td>横向布局元素间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为 数字的字符串。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Row-属性\"><a href=\"#Row-属性\" class=\"headerlink\" title=\"Row 属性\"></a>Row 属性</h5><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>参数类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alignItems</td>\n<td>VerticalAlign</td>\n<td>设置子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>justifyContent8+</td>\n<td>FlexAlign</td>\n<td>设置子组件在水平方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n</tbody></table>\n<h4 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h4><p>自定义组件传值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Container</span>()</span><br><span class=\"line\">      <span class=\"title class_\">Container</span>(&#123; <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>, <span class=\"attr\">icon</span>: $r(<span class=\"string\">&#x27;app.media.user&#x27;</span>) &#125;)</span><br><span class=\"line\">      <span class=\"title class_\">Container</span>(&#123; <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span>.<span class=\"property\">Brown</span>, <span class=\"attr\">icon</span>: $r(<span class=\"string\">&#x27;app.media.settings&#x27;</span>) &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">SpaceBetween</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Red</span></span><br><span class=\"line\">  <span class=\"attr\">icon</span>: <span class=\"title class_\">Resource</span> = $r(<span class=\"string\">&#x27;app.media.app_icon&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Image</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">icon</span>).<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">backgroundColor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">VerticalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Row、Column-结合-layoutWeight-实现弹性布局\"><a href=\"#Row、Column-结合-layoutWeight-实现弹性布局\" class=\"headerlink\" title=\"Row、Column 结合 layoutWeight 实现弹性布局\"></a>Row、Column 结合 layoutWeight 实现弹性布局</h4><p>ArkTS 中使用 Row、Column 结合 layoutWeight 属性可以实现弹性布局。</p>\n<h5 id=\"水平弹性布局\"><a href=\"#水平弹性布局\" class=\"headerlink\" title=\"水平弹性布局\"></a>水平弹性布局</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>().<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>).<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>().<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>).<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no layoutWeight&#x27;</span>).<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>).<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"attr\">width</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">100</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716388652192.jpg\"> </p>\n<h5 id=\"垂直弹性布局\"><a href=\"#垂直弹性布局\" class=\"headerlink\" title=\"垂直弹性布局\"></a>垂直弹性布局</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon1.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">160</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Row</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon2.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">              <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon3.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">            &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">              <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon4.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">            &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">140</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">margin</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716472510603.jpg\"> </p>\n<h4 id=\"Stack-定位组件\"><a href=\"#Stack-定位组件\" class=\"headerlink\" title=\"Stack 定位组件\"></a>Stack 定位组件</h4><p>Stack 组件可以实现容器堆叠，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。</p>\n<h5 id=\"Stack-接口\"><a href=\"#Stack-接口\" class=\"headerlink\" title=\"Stack 接口\"></a>Stack 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Stack</span>(value?: &#123; alignContent?: <span class=\"title class_\">Alignment</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数类型</th>\n<th>必 填</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alignContent</td>\n<td>Alignment</td>\n<td>否</td>\n<td>设置子组件在容器内的对齐方式。默认值：Alignment.Center。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Stack-基本使用\"><a href=\"#Stack-基本使用\" class=\"headerlink\" title=\"Stack 基本使用\"></a>Stack 基本使用</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomStart</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;HarmonyOS&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">40</span>).<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">300</span>).<span class=\"title function_\">height</span>(<span class=\"number\">300</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Row</span>().<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Blue</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716473605745.jpg\"> </p>\n<h5 id=\"Stack-子组件中-zIndex-控制层级\"><a href=\"#Stack-子组件中-zIndex-控制层级\" class=\"headerlink\" title=\"Stack 子组件中 zIndex 控制层级\"></a>Stack 子组件中 zIndex 控制层级</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomStart</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;Stack子元素1&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>).<span class=\"title function_\">zIndex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;Stack子元素2&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">150</span>).<span class=\"title function_\">height</span>(<span class=\"number\">150</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Yellow</span>).<span class=\"title function_\">zIndex</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;Stack子元素3&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">200</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Pink</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">350</span>).<span class=\"title function_\">height</span>(<span class=\"number\">350</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Gray</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716474425596.jpg\"> </p>\n<h5 id=\"Stack-结合-List-实现动态列表\"><a href=\"#Stack-结合-List-实现动态列表\" class=\"headerlink\" title=\"Stack 结合 List 实现动态列表\"></a>Stack 结合 List 实现动态列表</h5><p>要实现的功能：<br>1、实现浮动按钮。<br>2、点击按钮让列表的数字加一。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomEnd</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">List</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">              <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Button</span>(&#123; <span class=\"attr\">type</span>: <span class=\"title class_\">ButtonType</span>.<span class=\"property\">Circle</span>, <span class=\"attr\">stateEffect</span>: <span class=\"literal\">true</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;+&#x27;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">40</span>).<span class=\"title function_\">fontColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">White</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">55</span>).<span class=\"title function_\">height</span>(<span class=\"number\">55</span>).<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">right</span>: <span class=\"number\">20</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">20</span> &#125;).<span class=\"title function_\">onClick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">doAdd</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">doAdd</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>] + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716475790377.jpg\" style=\"zoom: 50%;\" /> \n\n<h5 id=\"Stack-结合-List-实现浮动导航\"><a href=\"#Stack-结合-List-实现浮动导航\" class=\"headerlink\" title=\"Stack 结合 List 实现浮动导航\"></a>Stack 结合 List 实现浮动导航</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomEnd</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">TopEnd</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">List</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">left</span>: <span class=\"number\">10</span>, <span class=\"attr\">top</span>: <span class=\"number\">70</span>, <span class=\"attr\">right</span>: <span class=\"number\">10</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;导航&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">16</span>).<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">          &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Button</span>(&#123; <span class=\"attr\">type</span>: <span class=\"title class_\">ButtonType</span>.<span class=\"property\">Circle</span>, <span class=\"attr\">stateEffect</span>: <span class=\"literal\">true</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;+&#x27;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">40</span>).<span class=\"title function_\">fontColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">White</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">55</span>).<span class=\"title function_\">height</span>(<span class=\"number\">55</span>).<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">right</span>: <span class=\"number\">20</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">20</span> &#125;).<span class=\"title function_\">onClick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">doAdd</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">doAdd</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>] + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716477035040.jpg\" style=\"zoom:50%;\" /> \n\n<h4 id=\"弹性布局（Flex）\"><a href=\"#弹性布局（Flex）\" class=\"headerlink\" title=\"弹性布局（Flex）\"></a>弹性布局（Flex）</h4><p>Flex 弹性布局可以更加方便的对容器中的子元素进行排列、对齐和分配剩余空间等。单行的 Flex 跟 Row 组件的表现几乎一致，单列的 Flex 则跟 Column 组件表现几乎一致。但 Row 与 Column 都是单行单列的，Flex 则可以突破了这个限制，当主轴上空间不足时，则向纵轴上去扩展显示。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716554468902.jpg\" style=\"zoom:50%;\" /> \n\n<h5 id=\"Flex-接口\"><a href=\"#Flex-接口\" class=\"headerlink\" title=\"Flex 接口\"></a>Flex 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Flex</span>(value?: &#123; direction?: <span class=\"title class_\">FlexDirection</span>, wrap?: <span class=\"title class_\">FlexWrap</span>, justifyContent?: <span class=\"title class_\">FlexAlign</span>, alignItems?: <span class=\"title class_\">ItemAlign</span>, alignContent?: <span class=\"title class_\">FlexAlign</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>标准 Flex 布局容器。从 API version 9 开始，该接口支持在 ArkTS 片中使用。</p>\n<h5 id=\"Flex-参数\"><a href=\"#Flex-参数\" class=\"headerlink\" title=\"Flex 参数\"></a>Flex 参数</h5><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数类型</th>\n<th>必 填</th>\n<th>默认值</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>direction</td>\n<td>FlexDirection</td>\n<td>否</td>\n<td>FlexDirection.Row</td>\n<td>子组件在 Flex 容器上排列的方向，即主轴的方向。</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>FlexWrap</td>\n<td>否</td>\n<td>FlexWrap.NoWrap</td>\n<td>Flex 容器是单行&#x2F;列还是多行&#x2F;列排列。说明：在多行布局时，通过交叉轴方向，确认新行堆叠方向。</td>\n</tr>\n<tr>\n<td>justifyContent</td>\n<td>FlexAlign</td>\n<td>否</td>\n<td>FlexAlign.Start</td>\n<td>子组件在 Flex 容器主轴上的对齐格式。</td>\n</tr>\n<tr>\n<td>alignItems</td>\n<td>ItemAlign</td>\n<td>否</td>\n<td>ItemAlign.Start</td>\n<td>子组件在 Flex 容器交叉轴上的对齐格式。</td>\n</tr>\n<tr>\n<td>alignContent</td>\n<td>FlexAlign</td>\n<td>否</td>\n<td>FlexAlign.Start</td>\n<td>交叉轴中有额外的空间时，多行内容的对齐方式。仅在 wrap 为 Wrap 或 WrapReverse 下生效。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Flex-轴的基本概念\"><a href=\"#Flex-轴的基本概念\" class=\"headerlink\" title=\"Flex 轴的基本概念\"></a>Flex 轴的基本概念</h5><ul>\n<li><strong>主轴</strong>：Flex 组件布局方向的轴线，子元素默认沿着主轴排列。主轴开始的位置称为主轴起始点，结束位置称为主轴结束点。</li>\n<li><strong>交叉轴</strong>：垂直于主轴方向的轴线。交叉轴开始的位置称为交叉轴起始点，结束位置称为交叉轴结束点。</li>\n</ul>\n<h5 id=\"direction-参数控制布局方向\"><a href=\"#direction-参数控制布局方向\" class=\"headerlink\" title=\"direction 参数控制布局方向\"></a>direction 参数控制布局方向</h5><p>Flex 布局中通过 direction 可以改变布局方向，在弹性布局中，容器的子元素可以按照任意方向排列。通过设置参数 direction，可以决定主轴的方向，从而控制子组件的排列方向。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557181764.jpg\" style=\"zoom:50%;\" /> \n\n<ul>\n<li>FlexDirection.Row：主轴为水平方向，子组件从起始端沿着水平方向开始排布。</li>\n<li>FlexDirection.RowReverse：主轴为水平方向，子组件从终点端沿着 FlexDirection. Row 相反的方向开始排布。</li>\n<li>FlexDirection.Column：主轴为垂直方向，子组件从起始端沿着垂直方向开始排布。</li>\n<li>FlexDirection.ColumnReverse：主轴为垂直方向，子组件从终点端沿着 FlexDirection. Column 相反的方向开始排布。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">direction</span>: <span class=\"title class_\">FlexDirection</span>.<span class=\"property\">Row</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">70</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg\"> </p>\n<h5 id=\"wrap-参数控制布局换行\"><a href=\"#wrap-参数控制布局换行\" class=\"headerlink\" title=\"wrap 参数控制布局换行\"></a>wrap 参数控制布局换行</h5><p>弹性布局分为单行布局和多行布局。默认情况下，Flex 容器中的子元素都排在一条线（又称“轴线”） 上。wrap 属性控制当子元素主轴尺寸之和大于容器主轴尺寸时，Flex 是单行布局还是多行布局。在多行布局时，通过交叉轴方向，确认新行堆叠方向。 </p>\n<p><strong>FlexWrap. NoWrap</strong>（默认值）：不换行。如果子组件的宽度总和大于父元素的宽度，则子组件会被压缩宽度。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">NoWrap</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg\"> </p>\n<p><strong>FlexWrap. Wrap</strong>：换行，每一行子组件按照主轴方向排列。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716558674189.jpg\"> </p>\n<p><strong>FlexWrap. WrapReverse</strong>：换行，每一行子组件按照主轴反方向排列。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">WrapReverse</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716558853253.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"justifyContent-配置主轴对齐方式\"><a href=\"#justifyContent-配置主轴对齐方式\" class=\"headerlink\" title=\"justifyContent 配置主轴对齐方式\"></a>justifyContent 配置主轴对齐方式</h5><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716559329865.jpg\" style=\"zoom: 67%;\" /> \n\n<p><strong>FlexAlign.Start</strong>（默认值）：子组件在主轴方向起始端对齐，第一个子组件与父元素边沿对齐，其他元素与前一个元素对齐。</p>\n<p><strong>FlexAlign.Center</strong>：子组件在主轴方向居中对齐。</p>\n<p><strong>FlexAlign.End</strong>：子组件在主轴方向终点端对齐，最后一个子组件与父元素边沿对齐，其它元素与后一个元素对齐。</p>\n<p><strong>FlexAlign.SpaceBetween</strong>：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件和最后一个子组件与父元素边沿对齐。</p>\n<p><strong>FlexAlign.SpaceAround</strong>：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件到主轴起始端的距离和最后一个子组件到主轴终点端的距离是相邻元素之间距离的一半。</p>\n<p><strong>FlexAlign.SpaceEvenly</strong>：Flex 主轴方向元素等间距布局，相邻子组件之间的间距、第一个子组件与主轴起始端的间距、最后一个子组件到主轴终点端的间距均相等。</p>\n<h5 id=\"alignContent-配置内容对齐\"><a href=\"#alignContent-配置内容对齐\" class=\"headerlink\" title=\"alignContent 配置内容对齐\"></a>alignContent 配置内容对齐</h5><p>可以通过 alignContent 参数设置子组件各行在交叉轴剩余空间内的对齐方式，只在多行的 ﬂex 布局中生效（仅在 wrap 为 Wrap 或 WrapReverse 下生效），可选值有：</p>\n<p><strong>FlexAlign.Start</strong>：子组件各行与交叉轴起点对齐，默认值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">justifyContent</span>: <span class=\"title class_\">FlexAlign</span>.<span class=\"property\">SpaceBetween</span>, <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span>, <span class=\"attr\">alignContent</span>: <span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Start</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;30%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;60%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;40%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;4&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;30%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Pink</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;5&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;20%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Yellow</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561030772.jpg\"> </p>\n<p><strong>FlexAlign.Center</strong>：子组件各行在交叉轴方向居中对齐。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561257608.jpg\"> </p>\n<p><strong>FlexAlign.End</strong>：子组件各行与交叉轴终点对齐。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561389788.jpg\"> </p>\n<p><strong>FlexAlign.SpaceBetween</strong>：子组件各行与交叉轴两端对齐，各行间垂直间距平均分布。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561544100.jpg\"> </p>\n<p><strong>FlexAlign.SpaceAround</strong>：子组件各行间距相等，是元素首尾行与交叉轴两端距离的两倍。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561707980.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>FlexAlign.SpaceEvenly</strong>：子组件各行间距，子组件首尾行与交叉轴两端距离都相等。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561851381.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"alignItems-参数控制交叉轴对齐方式\"><a href=\"#alignItems-参数控制交叉轴对齐方式\" class=\"headerlink\" title=\"alignItems 参数控制交叉轴对齐方式\"></a>alignItems 参数控制交叉轴对齐方式</h5><p>容器和子元素都可以设置交叉轴对齐方式，且子元素设置的对齐方式优先级较高。可以通过 Flex 组件的 alignItems 参数设置子组件在交叉轴的对齐方式。</p>\n<p><strong>ItemAlign.Auto</strong>：使用 Flex 容器中默认配置。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">alignItems</span>: <span class=\"title class_\">ItemAlign</span>.<span class=\"property\">Auto</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">40</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">80</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.Start</strong>：交叉轴方向首部对齐，默认值。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.Center</strong>：交叉轴方向居中对齐。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816486562.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.End</strong>：交叉轴方向底部对齐。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817062907.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.Stretch</strong>：交叉轴方向拉伸填充，在未设置尺寸时，拉伸到容器尺寸。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817484409.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign. Baseline</strong>：交叉轴方向文本基线对齐。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817697841.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"Flex-自适应拉伸布局属性\"><a href=\"#Flex-自适应拉伸布局属性\" class=\"headerlink\" title=\"Flex 自适应拉伸布局属性\"></a>Flex 自适应拉伸布局属性</h5><p>Row、Column 结合 layoutWeight 可以实现自适应拉伸弹性布局。</p>\n<p><strong>1、ﬂexGrow 属性</strong></p>\n<p>设置父容器的剩余空间分配给此属性所在组件的比例。用于“瓜分”父组件的剩余空间。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">flexGrow</span>(<span class=\"number\">1</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">flexGrow</span>(<span class=\"number\">2</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no flexGrow&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">80</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716819203162.jpg\" style=\"zoom:80%;\" /> \n\n<p>父容器宽度 400vp，三个子组件原始宽度为 100vp，总和 300vp，剩余空间 100vp 根据 ﬂexGrow 值的占比分配给子组件，未设置 ﬂexGrow 的子组件不参与“瓜分”。 第一个元素以及第二个元素以 2:3 分配剩下的 100vp。第一个元素为 100vp+100vp2&#x2F;5&#x3D;140vp，第 二个元素为 100vp+100vp3&#x2F;5&#x3D;160vp。</p>\n<p><strong>2、ﬂexShrink 属性</strong></p>\n<p>当父容器空间不足时，子组件的压缩比例。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;flexShrink(3)&#x27;</span>).<span class=\"title function_\">flexShrink</span>(<span class=\"number\">3</span>).<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no flexShrink&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;flexShrink(1)&#x27;</span>).<span class=\"title function_\">flexShrink</span>(<span class=\"number\">1</span>).<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">400</span>).<span class=\"title function_\">height</span>(<span class=\"number\">80</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716821744026.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"Flex-应用案例\"><a href=\"#Flex-应用案例\" class=\"headerlink\" title=\"Flex 应用案例\"></a>Flex 应用案例</h5><p>弹性布局在开发场景中用例特别多，比如页面头部导航栏的均匀分布、页面框架的搭建、多行多列数据的排列等等。</p>\n<p><strong>1、热搜功能</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">hotSearch</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&#x27;乒乓球&#x27;</span>, <span class=\"string\">&#x27;NBA直播&#x27;</span>, <span class=\"string\">&#x27;世界杯&#x27;</span>, <span class=\"string\">&#x27;广东城际铁路&#x27;</span>, <span class=\"string\">&#x27;Flutter教程&#x27;</span>, <span class=\"string\">&#x27;HarmonyOS&#x27;</span>, <span class=\"string\">&#x27;ArkTS&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;热门搜索&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">fontSize</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">fontWeight</span>(<span class=\"title class_\">FontWeight</span>.<span class=\"property\">Bold</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Start</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">fontColor</span>(<span class=\"string\">&#x27;#666&#x27;</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hotSearch</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">fontSize</span>(<span class=\"number\">18</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">left</span>: <span class=\"number\">16</span>, <span class=\"attr\">top</span>: <span class=\"number\">10</span>, <span class=\"attr\">right</span>: <span class=\"number\">16</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">margin</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">12</span>)</span><br><span class=\"line\">        &#125;, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> item)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716910862339.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>2、帮助列表</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HelpListInterface</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">icon</span>: <span class=\"title class_\">Resource</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">helpList</span>: <span class=\"title class_\">HelpListInterface</span>[] = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;我的订阅&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.subscribe&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;常见问题&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.problem&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;在线客服&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.customer_service&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;意见反馈&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.opinion&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;关怀模式&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.give&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;会员中心&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.user&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">helpList</span>, <span class=\"function\">(<span class=\"params\">item: HelpListInterface</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Image</span>(item.<span class=\"property\">icon</span>).<span class=\"title function_\">width</span>(<span class=\"number\">42</span>).<span class=\"title function_\">height</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\">            <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item.title&#125;</span>`</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">15</span>).<span class=\"title function_\">fontColor</span>(<span class=\"string\">&#x27;#666&#x27;</span>).<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">          &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;25%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">5</span>).<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">bottom</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\">(<span class=\"params\">item: HelpListInterface</span>) =&gt;</span> item.<span class=\"property\">title</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .<span class=\"title function_\">margin</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#fff&#x27;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">15</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716912172452.jpg\" style=\"zoom:80%;\" /> \n\n<h4 id=\"相对布局（RelativeContainer）\"><a href=\"#相对布局（RelativeContainer）\" class=\"headerlink\" title=\"相对布局（RelativeContainer）\"></a>相对布局（RelativeContainer）</h4><p>相对布局组件，用于复杂场景中元素对齐的布局。</p>\n<p>RelativeContainer 就是采用相对布局的容器，支持容器内部的子元素设置相对位置关系。子元素支持指定兄弟元素作为锚点，也支持指定父容器作为锚点，基于锚点做相对位置布局。下图是一个 RelativeContainer 的概念图，图中的虚线表示位置的依赖关系。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716991550056.jpg\" style=\"zoom: 33%;\" /> \n\n<h5 id=\"规则说明\"><a href=\"#规则说明\" class=\"headerlink\" title=\"规则说明\"></a>规则说明</h5><p>1、容器内子组件区分水平方向，垂直方向：</p>\n<p>​    （1）水平方向为 left，middle，right，对应容器的 HorizontalAlign.Start，HorizontalAlign.Center，HorizontalAlign.End。</p>\n<p>​    （2）垂直方向为 top，center，bottom，对应容器的 VerticalAlign.Top，VerticalAlign.Center，VerticalAlign.Bottom。</p>\n<p>2、子组件可以将容器或者其他子组件设为锚点：</p>\n<p>​    （1）参与相对布局的容器内组件必须设置 id，不设置 id 的组件不显示，RelativeContainer 容器的固定 id 为 **__container__**。</p>\n<p>​    （2）此子组件某一方向上的三个位置可以将容器或其它子组件的同方向三个位置为锚点，同方向上两个以上位置设置锚点以后会跳过第三个。</p>\n<p>​    （3）前端页面设置的子组件尺寸大小不会受到相对布局规则的影响。子组件某个方向上设置两个或以上 alignRules 时不建议设置此方向尺寸大小。</p>\n<p>​    （4）对齐后需要额外偏移可设置 <strong>oﬀset</strong>。</p>\n<p>3、特殊情况：</p>\n<p>​    （1）互相依赖，环形依赖时容器内子组件全部不绘制。</p>\n<p>​    （2）同方向上两个以上位置设置锚点但锚点位置逆序时，此子组件大小为 0，即不绘制。</p>\n<p>​    （3）容器不设置宽高时，容器与容器内子组件不绘制。</p>\n<h5 id=\"RelativeContainer-的基本使用演示\"><a href=\"#RelativeContainer-的基本使用演示\" class=\"headerlink\" title=\"RelativeContainer 的基本使用演示\"></a>RelativeContainer 的基本使用演示</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">RelativeContainer</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Row</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">width</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">height</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">alignRules</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">left</span>: &#123; <span class=\"attr\">anchor</span>: <span class=\"string\">&#x27;__container__&#x27;</span>, <span class=\"attr\">align</span>: <span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Start</span> &#125;,</span><br><span class=\"line\">            <span class=\"attr\">top</span>: &#123; <span class=\"attr\">anchor</span>: <span class=\"string\">&#x27;__container__&#x27;</span>, <span class=\"attr\">align</span>: <span class=\"title class_\">VerticalAlign</span>.<span class=\"property\">Top</span> &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">id</span>(<span class=\"string\">&#x27;row1&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">offset</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">20</span>, <span class=\"attr\">y</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">200</span>).<span class=\"title function_\">border</span>(&#123; <span class=\"attr\">width</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span> &#125;).<span class=\"title function_\">id</span>(<span class=\"string\">&#x27;rc&#x27;</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716995097983.jpg\" style=\"zoom:80%;\" /> \n\n<p>demo</p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n\n\n<h3 id=\"HarmonyOS-项目目录介绍\"><a href=\"#HarmonyOS-项目目录介绍\" class=\"headerlink\" title=\"HarmonyOS 项目目录介绍\"></a>HarmonyOS 项目目录介绍</h3><h3 id=\"ArkTS-基本语法详解\"><a href=\"#ArkTS-基本语法详解\" class=\"headerlink\" title=\"ArkTS 基本语法详解\"></a>ArkTS 基本语法详解</h3><p>HarmonyOS 4.0 以后可以使用 ArkTS 或者 HTML&#x2F;CSS&#x2F;JS 技术来开发 HarmonyOS 应用，而 ArkTS 是 HarmonyOS 优选的主力应用开发语言。  </p>\n<p>ArkTS 围绕应用开发在 TypeScript（简称 TS）生态基础上做了进一步扩展，继承了 TS 的所有特性，是 TS 的超集。因此，在学习 ArkTS 语言之前，建议首先具<br>备 TS 语言开发能力。</p>\n<p>当前，ArkTS 在 TS 的基础上主要扩展了如下能力：</p>\n<ul>\n<li><strong>基本语法</strong>：ArkTS 定义了声明式 UI 描述、自定义组件和动态扩展 UI 元素的能力，再配合 ArkUI 开发框架中的系统组件及其相关的事件方法、属性方法等共同构成了 UI 开发的主体。</li>\n<li><strong>状态管理</strong>：ArkTS 提供了多维度的状态管理机制。在 UI 开发框架中，与 UI 相关联的数据可以在组件内使用，也可以在不同组件层级间传递，比如父子组件之间、爷孙组件之间，还可以在应用全局范围内传递或跨设备传递。另外，从数据的传递形式来看，可分为只读的单向传递和可变更的双向传递。开发者可以灵活的利用这些能力来实现数据和 UI 的联动。</li>\n<li><strong>渲染控制</strong>：ArkTS 提供了渲染控制的能力。条件渲染可根据应用的不同状态，渲染对应状态下的 UI 内容。循环渲染可从数据源中迭代获取数据，并在每次迭代过程中创建相应的组件。数据懒加载从数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。</li>\n</ul>\n<p>未来，ArkTS 会结合应用开发&#x2F;运行的需求持续演进，逐步提供并行和并发能力增强、系统类型增强、分布式开发范式等更多特性。  </p>\n<h4 id=\"ArkTS-基本组成\"><a href=\"#ArkTS-基本组成\" class=\"headerlink\" title=\"ArkTS 基本组成\"></a>ArkTS 基本组成</h4><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716005497787.jpg\" style=\"zoom:50%;\" /> \n\n<ul>\n<li><strong>装饰器</strong>： 用于装饰类、结构、方法以及变量，并赋予其特殊的含义。如上述示例中 @Entry、@Component 和 @State 都是装饰器，@Component 表示自定义组件，@Entry 表示该自定义组件为入口组件，@State 表示组件中的状态变量，状态变量变化会触发 UI 刷新。  </li>\n<li><strong>自定义组件</strong>：可复用的 UI 单元，可组合其它组件，如上述被 @Component 装饰的 struct Index。  </li>\n<li><strong>UI 描述</strong>：以声明式的方式来描述 UI 的结构，例如 build() 方法中的代码块  。</li>\n<li><strong>系统组件</strong>：ArkUI 框架中默认内置的基础和容器组件，可直接被开发者调用，比如示例中的 Column、Text、Divider、Button。  </li>\n<li><strong>事件方法</strong>：组件可以通过链式调用设置多个事件的响应逻辑，如跟随在 Button 后面的 onClick()。  </li>\n<li><strong>属性方法</strong>：组件可以通过链式调用配置多项属性，如 fontSize()、width()、height()、backgroundColor() 等。</li>\n</ul>\n<p>系统组件、属性方法、事件方法具体使用可参考<a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V2/ts-components-summary-0000001478181369-V2\">基于 ArkTS 的声明式开发范式</a>。</p>\n<h4 id=\"ArkTS-布局结构\"><a href=\"#ArkTS-布局结构\" class=\"headerlink\" title=\"ArkTS 布局结构\"></a>ArkTS 布局结构</h4><p>布局的结构通常是分层级的，代表了用户界面中的整体架构。一个常见的页面结构如下所示：</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716013357130.jpg\" style=\"zoom:50%;\" /> \n\n<p>为实现上述效果，需要在页面中声明对应的元素。其中，Page 表示页面的根节点，Column&#x2F;Row 等元素为系统组件。针对不同的页面结构，ArkUI 提供了不同的布局组件来帮助我们实现对应布局的效果，例如 Row 用于实现线性布局等。  </p>\n<h4 id=\"ArkTS-数据类型\"><a href=\"#ArkTS-数据类型\" class=\"headerlink\" title=\"ArkTS 数据类型\"></a>ArkTS 数据类型</h4><p>TypeScript 支持一些基础的数据类型，如布尔型、数组、字符串等。</p>\n<h5 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h5><p>TypeScript 里的所有数字都是浮点数，这些浮点数的类型是 <code>number</code>。除了支持十进制，还支持二进制、八进制、十六进制。  </p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数值类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num1</span>: <span class=\"built_in\">number</span> = <span class=\"number\">18</span> <span class=\"comment\">// 十进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num2</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0b10111</span> <span class=\"comment\">// ob 二进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num3</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0o14</span> <span class=\"comment\">// 0o 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num4</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0x1f</span> <span class=\"comment\">// 0x 十六进制</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><p>TypeScript 里使用 <code>string</code> 表示文本数据类型， 可以使用双引号（ “ ）或单引号（ ‘ ）表示字符串或者反引号（&#96;）。</p>\n<blockquote>\n<p>反引号中可以配合 ${} 解析变量。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;HarmonyOS Next不支持Android 应用了&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;ArkTS&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str3</span>: <span class=\"built_in\">string</span> = <span class=\"string\">`马总今年<span class=\"subst\">$&#123;num1&#125;</span>岁了`</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h5><p>TypeScript 中可以使用 <code>boolean</code> 来表示这个变量是布尔值，可以赋值为 true 或者 false。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 布尔类型 true、false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">stateOn</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">stateOff</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h5><p>联合类型（Union Types）表示取值可以为多种类型中的一种。如果一个数据可能有多重类型，或者当下还没想好用哪个类型 …</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">flag</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">flag = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">flag = <span class=\"number\">1</span></span><br><span class=\"line\">flag = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h5><p>TypeScrip 有两种方式可以定义数组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种是使用数组泛型，Array&lt;元素类型&gt;。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">course1</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [<span class=\"string\">&#x27;Flutter&#x27;</span>, <span class=\"string\">&quot;HarmonyOS&quot;</span>, <span class=\"string\">`Golang`</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种是在元素类型后面接上 []，表示由此类型元素组成的一个数组。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">course2</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&#x27;Flutter&#x27;</span>, <span class=\"string\">&quot;HarmonyOS&quot;</span>, <span class=\"string\">`Golang`</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h5><p>enum 类型是对 JavaScript 标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;<span class=\"title class_\">Red</span>, <span class=\"title class_\">Green</span>, <span class=\"title class_\">Blue</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h5><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string 和 number 类型的元组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>]</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>] <span class=\"comment\">// OK</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&#x27;hello&#x27;</span>] <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Any（不推荐使用）\"><a href=\"#Any（不推荐使用）\" class=\"headerlink\" title=\"Any（不推荐使用）\"></a>Any（不推荐使用）</h5><p>any 类型，表示的是变量可以是任意类型，相当于关闭了 ts 的类型检测功能，不建议使用。如果是 any 类型，则允许被赋值为任意类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">any</span> = <span class=\"number\">666</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;Semlinker&quot;</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"literal\">false</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"number\">66</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"literal\">undefined</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = <span class=\"literal\">null</span> <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = [] <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br><span class=\"line\">a = &#123;&#125; <span class=\"comment\">// 通过，any 类型可以被赋任意值</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Unknown\"><a href=\"#Unknown\" class=\"headerlink\" title=\"Unknown\"></a>Unknown</h5><p>unknown 与 any 一样，也相当于关闭了 ts 的类型检测功能。有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 unknown 类型来标记这些变量。（同 any ）。</p>\n <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">notSure</span>: <span class=\"built_in\">unknown</span> = <span class=\"number\">4</span></span><br><span class=\"line\">notSure = <span class=\"string\">&#x27;maybe a string instead&#x27;</span></span><br><span class=\"line\">notSure = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Void\"><a href=\"#Void\" class=\"headerlink\" title=\"Void\"></a>Void</h5><p>当一个函数没有返回值时，你通常会见到其返回值类型是 void。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;This is function is void&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h5><p>TypeScript 里，null 和 undefined 两者各自有自己的类型分别叫做 null 和 undefined。  </p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ArkTS-渲染控制\"><a href=\"#ArkTS-渲染控制\" class=\"headerlink\" title=\"ArkTS 渲染控制\"></a>ArkTS 渲染控制</h4><h5 id=\"if-else：条件渲染\"><a href=\"#if-else：条件渲染\" class=\"headerlink\" title=\"if&#x2F;else：条件渲染\"></a>if&#x2F;else：条件渲染</h5><ul>\n<li>支持 if、else 和 else if 语句。</li>\n<li>if、else if 后跟随的条件语句可以使用状态变量。</li>\n<li>允许在容器组件内使用，通过条件渲染语句构建不同的子组件。</li>\n<li>当 if、else if 后跟随的状态判断中使用的状态变量值变化时，条件渲染语句会进行更新条件可以包括 Typescript 表达式。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件表达式) &#123;</span><br><span class=\"line\">  组件内容<span class=\"number\">1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  组件内容<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ForEach：循环渲染\"><a href=\"#ForEach：循环渲染\" class=\"headerlink\" title=\"ForEach：循环渲染\"></a>ForEach：循环渲染</h5><p>ForEach 接口基于数组类型数据来进行循环渲染，需要与容器组件配合使用，且接口返回的组件应当是允许包含在 ForEach 父容器组件中的子组件。例如，ListItem 组件要求 ForEach 的父容器组件必须为 List 组件。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr 要遍历的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> itemGenerator 页面的生成函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> keyGenerator 键生成函数，提供唯一标识，如果后续数组中数据发生变化，会判断元素的唯一标识是否发生变化，有变更再去做渲染，这样减少了不必要的渲染，提高了页面的渲染效率（可选参数，如果不填会会有默认的键生成函数，生成规则是用角标拼上数组元素的数据）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">ForEach</span>(</span><br><span class=\"line\">  <span class=\"attr\">arr</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;,</span><br><span class=\"line\">  <span class=\"attr\">itemGenerator</span>:<span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">any</span>, index: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>,</span><br><span class=\"line\">  keyGenerator ? : <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">any</span>, index: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">string</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">ArrayPage</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">arr2</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&#x27;HarmonyOS&#x27;</span>, <span class=\"string\">&#x27;Flutter&#x27;</span>, <span class=\"string\">&#x27;Android&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">List</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 访问全局变量 arr 不要加 this</span></span><br><span class=\"line\">      <span class=\"title class_\">ForEach</span>(arr, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span>, key: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>--<span class=\"subst\">$&#123;key&#125;</span>`</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&quot;#eee&quot;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span></span>) =&gt;</span> item.<span class=\"title function_\">toString</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 访问局部变量 arr2 要加 this</span></span><br><span class=\"line\">      <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">arr2</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(item)</span><br><span class=\"line\">            .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Gray</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> item)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实际开发中尽量不要使用全局变量，组件中使用全局变量不需要加 this。</p>\n</blockquote>\n<h5 id=\"LazyForEach：数据懒加载\"><a href=\"#LazyForEach：数据懒加载\" class=\"headerlink\" title=\"LazyForEach：数据懒加载\"></a>LazyForEach：数据懒加载</h5><p>LazyForEach 从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。当 LazyForEach 在滚动容器中使用，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会进行组件销毁回收以降低内存占用。</p>\n<h3 id=\"布局组件\"><a href=\"#布局组件\" class=\"headerlink\" title=\"布局组件\"></a>布局组件</h3><h4 id=\"ArkTS-通用属性\"><a href=\"#ArkTS-通用属性\" class=\"headerlink\" title=\"ArkTS 通用属性\"></a>ArkTS 通用属性</h4><p>ArkTS 通用属性用于设置组件的宽高、边距。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>参数说明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>Length</td>\n<td>设置组件自身的宽度，缺省时使用元素自身内容需要 的宽度。若子组件的宽大于父组件的宽，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>Length</td>\n<td>设置组件自身的高度，缺省时使用元素自身内容需要 的高度。若子组件的高大于父组件的高，则会画出父 组件的范围。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>{   width ? : Length,   height ? : Length }</td>\n<td>设置高宽尺寸。</td>\n</tr>\n<tr>\n<td>padding</td>\n<td>Padding &#124; Length</td>\n<td>设置内边距属性。参数为 Length 类型时，四个方向内边距同时生效。默认值：0。padding 设置百分比时，上下左右内边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>margin</td>\n<td>Margin &#124; Length</td>\n<td>设置外边距属性。参数为 Length 类型时，四个方向外边距同时生效。默认值：0。margin 设置百分比时，上下左右外边距均以父容器的 width 作为基础值。从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>constraintSize</td>\n<td>{   minWidth ? : Length,   maxWidth ? : Length,   minHeight ? : Length,   maxHeight ? : Length }</td>\n<td>设置约束尺寸，组件布局时，进行尺寸范围限制。 constraintSize 的优先级高于 Width 和 Height。若设置的 minWidth 大于 maxWidth，则 minWidth 生效， minHeight 与 maxHeight 同理。默认值：{   minWidth: 0, maxWidth:   Infinity, minHeight:   0, maxHeight:   Infinity }。</td>\n</tr>\n</tbody></table>\n<p>**Length 长度类型，用于描述尺寸单位。  **</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>需要显式指定像素单位，如 ‘10px’，也可设置百分比字符串，如 ‘100%’。</td>\n</tr>\n<tr>\n<td>number</td>\n<td>默认单位 vp。</td>\n</tr>\n<tr>\n<td>Resource</td>\n<td>资源引用类型，引入系统资源或者应用资源中的尺寸。</td>\n</tr>\n</tbody></table>\n<p><strong>vp 为虚拟像素单位</strong>：vp 使用虚拟像素，使元素在不同密度的设备上具有一致的视觉体量。</p>\n<p><strong>fp 字体像素单位</strong>：字体像素（font pixel）大小默认情况下与 vp 相同，即默认情况下 1 fp &#x3D; 1vp。如果用户在设置中选择了更大的字体，字体的实际显示大小就会在 vp 的基础上乘以用户设置的缩放系数，即 1 fp &#x3D; 1 vp * 缩放系数。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 宽度 200，高度 200，外边距 20（蓝色区域），内边距 10（白色区域）</span></span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Row</span>().<span class=\"title function_\">size</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"string\">&#x27;100%&#x27;</span></span><br><span class=\"line\">          &#125;).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Yellow</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .<span class=\"title function_\">width</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">height</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">margin</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">White</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Blue</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">`This is a text.This is a text.This is a text.This is a text.This is a text`</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">constraintSize</span>(&#123; <span class=\"attr\">maxWidth</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 父容器尺寸确定时，设置了 layoutWeight 的子元素在主轴布局尺寸按照权重进行分配，忽略本身尺寸设置。</span></span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 权重 1，占主轴剩余空间 1/3</span></span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;layoutWeight(1)&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">height</span>: <span class=\"number\">110</span> &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 权重 2，占主轴剩余空间 2/3</span></span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;layoutWeight(2)&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">size</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"string\">&#x27;30%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">110</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 未设置 layoutWeight 属性，组件按照自身尺寸渲染</span></span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no layoutWeight&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">size</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"string\">&#x27;33%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">110</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Brown</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">140</span> &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">backgroundColor</span>(<span class=\"number\">0xCCCCCC</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Start</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716389533793.jpg\" style=\"zoom:80%;\" /> \n\n<h4 id=\"Column-详解\"><a href=\"#Column-详解\" class=\"headerlink\" title=\"Column 详解\"></a>Column 详解</h4><p>Column 是沿垂直方向布局的容器，可以包含多个子组件，多个子组件会在垂直方向上按照顺序排列。</p>\n<h5 id=\"Column-接口\"><a href=\"#Column-接口\" class=\"headerlink\" title=\"Column 接口\"></a>Column 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Column</span>(value?: &#123;space?: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数类型</th>\n<th>必填</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>space</td>\n<td>string &#124; number</td>\n<td>否</td>\n<td>纵向布局元素垂直方向间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、 FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为数字的字符串。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Column-属性\"><a href=\"#Column-属性\" class=\"headerlink\" title=\"Column 属性\"></a>Column 属性</h5><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>参数类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alignItems</td>\n<td>HorizontalAlign</td>\n<td>设置子组件在水平方向上的对齐格式。默认值：HorizontalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>justifyContent8+</td>\n<td>FlexAlign</td>\n<td>设置子组件在垂直方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Image</span>($r(<span class=\"string\">&#x27;app.media.app_icon&#x27;</span>)).<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .<span class=\"title function_\">width</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">height</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">VerticalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Start</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Row-详解\"><a href=\"#Row-详解\" class=\"headerlink\" title=\"Row 详解\"></a>Row 详解</h4><p>Row 为沿水平方向布局容器，可以包含多个子组件，多个子组件会在水平方向上按照顺序排列。</p>\n<h5 id=\"Row-接口\"><a href=\"#Row-接口\" class=\"headerlink\" title=\"Row 接口\"></a>Row 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Row</span>(value?: &#123;space?: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数 名</th>\n<th>参数类 型</th>\n<th>必 填</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>space</td>\n<td>string &#124; number</td>\n<td>否</td>\n<td>横向布局元素间距。从 API version 9 开始，space 为负数或者 justifyContent 设置为 FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly 时不生效。默认值：0，单位 vp。说明：可选值为大于等于 0 的数字，或者可以转换为 数字的字符串。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Row-属性\"><a href=\"#Row-属性\" class=\"headerlink\" title=\"Row 属性\"></a>Row 属性</h5><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>参数类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alignItems</td>\n<td>VerticalAlign</td>\n<td>设置子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n<tr>\n<td>justifyContent8+</td>\n<td>FlexAlign</td>\n<td>设置子组件在水平方向上的对齐格式。默认值：FlexAlign.Start 从 API version 9 开始，该接口支持在 ArkTS 卡片中使用。</td>\n</tr>\n</tbody></table>\n<h4 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h4><p>自定义组件传值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Container</span>()</span><br><span class=\"line\">      <span class=\"title class_\">Container</span>(&#123; <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>, <span class=\"attr\">icon</span>: $r(<span class=\"string\">&#x27;app.media.user&#x27;</span>) &#125;)</span><br><span class=\"line\">      <span class=\"title class_\">Container</span>(&#123; <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span>.<span class=\"property\">Brown</span>, <span class=\"attr\">icon</span>: $r(<span class=\"string\">&#x27;app.media.settings&#x27;</span>) &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">SpaceBetween</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Red</span></span><br><span class=\"line\">  <span class=\"attr\">icon</span>: <span class=\"title class_\">Resource</span> = $r(<span class=\"string\">&#x27;app.media.app_icon&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Image</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">icon</span>).<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"number\">140</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">backgroundColor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">VerticalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Row、Column-结合-layoutWeight-实现弹性布局\"><a href=\"#Row、Column-结合-layoutWeight-实现弹性布局\" class=\"headerlink\" title=\"Row、Column 结合 layoutWeight 实现弹性布局\"></a>Row、Column 结合 layoutWeight 实现弹性布局</h4><p>ArkTS 中使用 Row、Column 结合 layoutWeight 属性可以实现弹性布局。</p>\n<h5 id=\"水平弹性布局\"><a href=\"#水平弹性布局\" class=\"headerlink\" title=\"水平弹性布局\"></a>水平弹性布局</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>().<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>).<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>().<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>).<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no layoutWeight&#x27;</span>).<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>).<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"attr\">width</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">100</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716388652192.jpg\"> </p>\n<h5 id=\"垂直弹性布局\"><a href=\"#垂直弹性布局\" class=\"headerlink\" title=\"垂直弹性布局\"></a>垂直弹性布局</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon1.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">160</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Row</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon2.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">              <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon3.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">            &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">              <span class=\"title class_\">Image</span>(<span class=\"string\">&quot;https://gitee.com/zch0304/images/raw/master/note/test_icon4.jpg&quot;</span>).<span class=\"title function_\">objectFit</span>(<span class=\"title class_\">ImageFit</span>.<span class=\"property\">Fill</span>)</span><br><span class=\"line\">            &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">layoutWeight</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">size</span>(&#123; <span class=\"attr\">width</span>: <span class=\"string\">&#x27;100%&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">140</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">margin</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716472510603.jpg\"> </p>\n<h4 id=\"Stack-定位组件\"><a href=\"#Stack-定位组件\" class=\"headerlink\" title=\"Stack 定位组件\"></a>Stack 定位组件</h4><p>Stack 组件可以实现容器堆叠，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。</p>\n<h5 id=\"Stack-接口\"><a href=\"#Stack-接口\" class=\"headerlink\" title=\"Stack 接口\"></a>Stack 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Stack</span>(value?: &#123; alignContent?: <span class=\"title class_\">Alignment</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数类型</th>\n<th>必 填</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alignContent</td>\n<td>Alignment</td>\n<td>否</td>\n<td>设置子组件在容器内的对齐方式。默认值：Alignment.Center。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Stack-基本使用\"><a href=\"#Stack-基本使用\" class=\"headerlink\" title=\"Stack 基本使用\"></a>Stack 基本使用</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomStart</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;HarmonyOS&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">40</span>).<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">300</span>).<span class=\"title function_\">height</span>(<span class=\"number\">300</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Row</span>().<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Blue</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">justifyContent</span>(<span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716473605745.jpg\"> </p>\n<h5 id=\"Stack-子组件中-zIndex-控制层级\"><a href=\"#Stack-子组件中-zIndex-控制层级\" class=\"headerlink\" title=\"Stack 子组件中 zIndex 控制层级\"></a>Stack 子组件中 zIndex 控制层级</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomStart</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;Stack子元素1&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>).<span class=\"title function_\">zIndex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;Stack子元素2&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">150</span>).<span class=\"title function_\">height</span>(<span class=\"number\">150</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Yellow</span>).<span class=\"title function_\">zIndex</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;Stack子元素3&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">200</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Pink</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">350</span>).<span class=\"title function_\">height</span>(<span class=\"number\">350</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Gray</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716474425596.jpg\"> </p>\n<h5 id=\"Stack-结合-List-实现动态列表\"><a href=\"#Stack-结合-List-实现动态列表\" class=\"headerlink\" title=\"Stack 结合 List 实现动态列表\"></a>Stack 结合 List 实现动态列表</h5><p>要实现的功能：<br>1、实现浮动按钮。<br>2、点击按钮让列表的数字加一。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomEnd</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">List</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">              <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Button</span>(&#123; <span class=\"attr\">type</span>: <span class=\"title class_\">ButtonType</span>.<span class=\"property\">Circle</span>, <span class=\"attr\">stateEffect</span>: <span class=\"literal\">true</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;+&#x27;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">40</span>).<span class=\"title function_\">fontColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">White</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">55</span>).<span class=\"title function_\">height</span>(<span class=\"number\">55</span>).<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">right</span>: <span class=\"number\">20</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">20</span> &#125;).<span class=\"title function_\">onClick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">doAdd</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">doAdd</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>] + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716475790377.jpg\" style=\"zoom: 50%;\" /> \n\n<h5 id=\"Stack-结合-List-实现浮动导航\"><a href=\"#Stack-结合-List-实现浮动导航\" class=\"headerlink\" title=\"Stack 结合 List 实现浮动导航\"></a>Stack 结合 List 实现浮动导航</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">BottomEnd</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Stack</span>(&#123; <span class=\"attr\">alignContent</span>: <span class=\"title class_\">Alignment</span>.<span class=\"property\">TopEnd</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">List</span>(&#123; <span class=\"attr\">space</span>: <span class=\"number\">10</span> &#125;) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title class_\">ListItem</span>() &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">fontSize</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">height</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">                  .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">left</span>: <span class=\"number\">10</span>, <span class=\"attr\">top</span>: <span class=\"number\">70</span>, <span class=\"attr\">right</span>: <span class=\"number\">10</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"title class_\">Row</span>() &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Text</span>(<span class=\"string\">&quot;导航&quot;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">16</span>).<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Center</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">          &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Button</span>(&#123; <span class=\"attr\">type</span>: <span class=\"title class_\">ButtonType</span>.<span class=\"property\">Circle</span>, <span class=\"attr\">stateEffect</span>: <span class=\"literal\">true</span> &#125;) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;+&#x27;</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">40</span>).<span class=\"title function_\">fontColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">White</span>)</span><br><span class=\"line\">        &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">55</span>).<span class=\"title function_\">height</span>(<span class=\"number\">55</span>).<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">right</span>: <span class=\"number\">20</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">20</span> &#125;).<span class=\"title function_\">onClick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">doAdd</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">alignItems</span>(<span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Center</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">doAdd</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>] + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716477035040.jpg\" style=\"zoom:50%;\" /> \n\n<h4 id=\"弹性布局（Flex）\"><a href=\"#弹性布局（Flex）\" class=\"headerlink\" title=\"弹性布局（Flex）\"></a>弹性布局（Flex）</h4><p>Flex 弹性布局可以更加方便的对容器中的子元素进行排列、对齐和分配剩余空间等。单行的 Flex 跟 Row 组件的表现几乎一致，单列的 Flex 则跟 Column 组件表现几乎一致。但 Row 与 Column 都是单行单列的，Flex 则可以突破了这个限制，当主轴上空间不足时，则向纵轴上去扩展显示。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716554468902.jpg\" style=\"zoom:50%;\" /> \n\n<h5 id=\"Flex-接口\"><a href=\"#Flex-接口\" class=\"headerlink\" title=\"Flex 接口\"></a>Flex 接口</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Flex</span>(value?: &#123; direction?: <span class=\"title class_\">FlexDirection</span>, wrap?: <span class=\"title class_\">FlexWrap</span>, justifyContent?: <span class=\"title class_\">FlexAlign</span>, alignItems?: <span class=\"title class_\">ItemAlign</span>, alignContent?: <span class=\"title class_\">FlexAlign</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>标准 Flex 布局容器。从 API version 9 开始，该接口支持在 ArkTS 片中使用。</p>\n<h5 id=\"Flex-参数\"><a href=\"#Flex-参数\" class=\"headerlink\" title=\"Flex 参数\"></a>Flex 参数</h5><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数类型</th>\n<th>必 填</th>\n<th>默认值</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>direction</td>\n<td>FlexDirection</td>\n<td>否</td>\n<td>FlexDirection.Row</td>\n<td>子组件在 Flex 容器上排列的方向，即主轴的方向。</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>FlexWrap</td>\n<td>否</td>\n<td>FlexWrap.NoWrap</td>\n<td>Flex 容器是单行&#x2F;列还是多行&#x2F;列排列。说明：在多行布局时，通过交叉轴方向，确认新行堆叠方向。</td>\n</tr>\n<tr>\n<td>justifyContent</td>\n<td>FlexAlign</td>\n<td>否</td>\n<td>FlexAlign.Start</td>\n<td>子组件在 Flex 容器主轴上的对齐格式。</td>\n</tr>\n<tr>\n<td>alignItems</td>\n<td>ItemAlign</td>\n<td>否</td>\n<td>ItemAlign.Start</td>\n<td>子组件在 Flex 容器交叉轴上的对齐格式。</td>\n</tr>\n<tr>\n<td>alignContent</td>\n<td>FlexAlign</td>\n<td>否</td>\n<td>FlexAlign.Start</td>\n<td>交叉轴中有额外的空间时，多行内容的对齐方式。仅在 wrap 为 Wrap 或 WrapReverse 下生效。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Flex-轴的基本概念\"><a href=\"#Flex-轴的基本概念\" class=\"headerlink\" title=\"Flex 轴的基本概念\"></a>Flex 轴的基本概念</h5><ul>\n<li><strong>主轴</strong>：Flex 组件布局方向的轴线，子元素默认沿着主轴排列。主轴开始的位置称为主轴起始点，结束位置称为主轴结束点。</li>\n<li><strong>交叉轴</strong>：垂直于主轴方向的轴线。交叉轴开始的位置称为交叉轴起始点，结束位置称为交叉轴结束点。</li>\n</ul>\n<h5 id=\"direction-参数控制布局方向\"><a href=\"#direction-参数控制布局方向\" class=\"headerlink\" title=\"direction 参数控制布局方向\"></a>direction 参数控制布局方向</h5><p>Flex 布局中通过 direction 可以改变布局方向，在弹性布局中，容器的子元素可以按照任意方向排列。通过设置参数 direction，可以决定主轴的方向，从而控制子组件的排列方向。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557181764.jpg\" style=\"zoom:50%;\" /> \n\n<ul>\n<li>FlexDirection.Row：主轴为水平方向，子组件从起始端沿着水平方向开始排布。</li>\n<li>FlexDirection.RowReverse：主轴为水平方向，子组件从终点端沿着 FlexDirection. Row 相反的方向开始排布。</li>\n<li>FlexDirection.Column：主轴为垂直方向，子组件从起始端沿着垂直方向开始排布。</li>\n<li>FlexDirection.ColumnReverse：主轴为垂直方向，子组件从终点端沿着 FlexDirection. Column 相反的方向开始排布。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">direction</span>: <span class=\"title class_\">FlexDirection</span>.<span class=\"property\">Row</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">70</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg\"> </p>\n<h5 id=\"wrap-参数控制布局换行\"><a href=\"#wrap-参数控制布局换行\" class=\"headerlink\" title=\"wrap 参数控制布局换行\"></a>wrap 参数控制布局换行</h5><p>弹性布局分为单行布局和多行布局。默认情况下，Flex 容器中的子元素都排在一条线（又称“轴线”） 上。wrap 属性控制当子元素主轴尺寸之和大于容器主轴尺寸时，Flex 是单行布局还是多行布局。在多行布局时，通过交叉轴方向，确认新行堆叠方向。 </p>\n<p><strong>FlexWrap. NoWrap</strong>（默认值）：不换行。如果子组件的宽度总和大于父元素的宽度，则子组件会被压缩宽度。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">NoWrap</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716557759593.jpg\"> </p>\n<p><strong>FlexWrap. Wrap</strong>：换行，每一行子组件按照主轴方向排列。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716558674189.jpg\"> </p>\n<p><strong>FlexWrap. WrapReverse</strong>：换行，每一行子组件按照主轴反方向排列。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">WrapReverse</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;50%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">50</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;90%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716558853253.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"justifyContent-配置主轴对齐方式\"><a href=\"#justifyContent-配置主轴对齐方式\" class=\"headerlink\" title=\"justifyContent 配置主轴对齐方式\"></a>justifyContent 配置主轴对齐方式</h5><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716559329865.jpg\" style=\"zoom: 67%;\" /> \n\n<p><strong>FlexAlign.Start</strong>（默认值）：子组件在主轴方向起始端对齐，第一个子组件与父元素边沿对齐，其他元素与前一个元素对齐。</p>\n<p><strong>FlexAlign.Center</strong>：子组件在主轴方向居中对齐。</p>\n<p><strong>FlexAlign.End</strong>：子组件在主轴方向终点端对齐，最后一个子组件与父元素边沿对齐，其它元素与后一个元素对齐。</p>\n<p><strong>FlexAlign.SpaceBetween</strong>：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件和最后一个子组件与父元素边沿对齐。</p>\n<p><strong>FlexAlign.SpaceAround</strong>：Flex 主轴方向均匀分配弹性元素，相邻子组件之间距离相同。第一个子组件到主轴起始端的距离和最后一个子组件到主轴终点端的距离是相邻元素之间距离的一半。</p>\n<p><strong>FlexAlign.SpaceEvenly</strong>：Flex 主轴方向元素等间距布局，相邻子组件之间的间距、第一个子组件与主轴起始端的间距、最后一个子组件到主轴终点端的间距均相等。</p>\n<h5 id=\"alignContent-配置内容对齐\"><a href=\"#alignContent-配置内容对齐\" class=\"headerlink\" title=\"alignContent 配置内容对齐\"></a>alignContent 配置内容对齐</h5><p>可以通过 alignContent 参数设置子组件各行在交叉轴剩余空间内的对齐方式，只在多行的 ﬂex 布局中生效（仅在 wrap 为 Wrap 或 WrapReverse 下生效），可选值有：</p>\n<p><strong>FlexAlign.Start</strong>：子组件各行与交叉轴起点对齐，默认值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">justifyContent</span>: <span class=\"title class_\">FlexAlign</span>.<span class=\"property\">SpaceBetween</span>, <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span>, <span class=\"attr\">alignContent</span>: <span class=\"title class_\">FlexAlign</span>.<span class=\"property\">Start</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;30%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;60%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;40%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;4&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;30%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Pink</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;5&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;20%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Yellow</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">100</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561030772.jpg\"> </p>\n<p><strong>FlexAlign.Center</strong>：子组件各行在交叉轴方向居中对齐。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561257608.jpg\"> </p>\n<p><strong>FlexAlign.End</strong>：子组件各行与交叉轴终点对齐。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561389788.jpg\"> </p>\n<p><strong>FlexAlign.SpaceBetween</strong>：子组件各行与交叉轴两端对齐，各行间垂直间距平均分布。</p>\n<p><img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561544100.jpg\"> </p>\n<p><strong>FlexAlign.SpaceAround</strong>：子组件各行间距相等，是元素首尾行与交叉轴两端距离的两倍。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561707980.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>FlexAlign.SpaceEvenly</strong>：子组件各行间距，子组件首尾行与交叉轴两端距离都相等。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716561851381.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"alignItems-参数控制交叉轴对齐方式\"><a href=\"#alignItems-参数控制交叉轴对齐方式\" class=\"headerlink\" title=\"alignItems 参数控制交叉轴对齐方式\"></a>alignItems 参数控制交叉轴对齐方式</h5><p>容器和子元素都可以设置交叉轴对齐方式，且子元素设置的对齐方式优先级较高。可以通过 Flex 组件的 alignItems 参数设置子组件在交叉轴的对齐方式。</p>\n<p><strong>ItemAlign.Auto</strong>：使用 Flex 容器中默认配置。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">alignItems</span>: <span class=\"title class_\">ItemAlign</span>.<span class=\"property\">Auto</span> &#125;) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">20</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">40</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;3&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;33%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">80</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.Start</strong>：交叉轴方向首部对齐，默认值。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816140506.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.Center</strong>：交叉轴方向居中对齐。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716816486562.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.End</strong>：交叉轴方向底部对齐。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817062907.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign.Stretch</strong>：交叉轴方向拉伸填充，在未设置尺寸时，拉伸到容器尺寸。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817484409.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>ItemAlign. Baseline</strong>：交叉轴方向文本基线对齐。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716817697841.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"Flex-自适应拉伸布局属性\"><a href=\"#Flex-自适应拉伸布局属性\" class=\"headerlink\" title=\"Flex 自适应拉伸布局属性\"></a>Flex 自适应拉伸布局属性</h5><p>Row、Column 结合 layoutWeight 可以实现自适应拉伸弹性布局。</p>\n<p><strong>1、ﬂexGrow 属性</strong></p>\n<p>设置父容器的剩余空间分配给此属性所在组件的比例。用于“瓜分”父组件的剩余空间。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;1&#x27;</span>).<span class=\"title function_\">flexGrow</span>(<span class=\"number\">1</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"title function_\">flexGrow</span>(<span class=\"number\">2</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no flexGrow&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"number\">100</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">height</span>(<span class=\"number\">80</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716819203162.jpg\" style=\"zoom:80%;\" /> \n\n<p>父容器宽度 400vp，三个子组件原始宽度为 100vp，总和 300vp，剩余空间 100vp 根据 ﬂexGrow 值的占比分配给子组件，未设置 ﬂexGrow 的子组件不参与“瓜分”。 第一个元素以及第二个元素以 2:3 分配剩下的 100vp。第一个元素为 100vp+100vp2&#x2F;5&#x3D;140vp，第 二个元素为 100vp+100vp3&#x2F;5&#x3D;160vp。</p>\n<p><strong>2、ﬂexShrink 属性</strong></p>\n<p>当父容器空间不足时，子组件的压缩比例。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Flex</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;flexShrink(3)&#x27;</span>).<span class=\"title function_\">flexShrink</span>(<span class=\"number\">3</span>).<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Red</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;no flexShrink&#x27;</span>).<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;flexShrink(1)&#x27;</span>).<span class=\"title function_\">flexShrink</span>(<span class=\"number\">1</span>).<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">60</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">400</span>).<span class=\"title function_\">height</span>(<span class=\"number\">80</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716821744026.jpg\" style=\"zoom:80%;\" /> \n\n<h5 id=\"Flex-应用案例\"><a href=\"#Flex-应用案例\" class=\"headerlink\" title=\"Flex 应用案例\"></a>Flex 应用案例</h5><p>弹性布局在开发场景中用例特别多，比如页面头部导航栏的均匀分布、页面框架的搭建、多行多列数据的排列等等。</p>\n<p><strong>1、热搜功能</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">hotSearch</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&#x27;乒乓球&#x27;</span>, <span class=\"string\">&#x27;NBA直播&#x27;</span>, <span class=\"string\">&#x27;世界杯&#x27;</span>, <span class=\"string\">&#x27;广东城际铁路&#x27;</span>, <span class=\"string\">&#x27;Flutter教程&#x27;</span>, <span class=\"string\">&#x27;HarmonyOS&#x27;</span>, <span class=\"string\">&#x27;ArkTS&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Text</span>(<span class=\"string\">&#x27;热门搜索&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">fontSize</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">fontWeight</span>(<span class=\"title class_\">FontWeight</span>.<span class=\"property\">Bold</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">textAlign</span>(<span class=\"title class_\">TextAlign</span>.<span class=\"property\">Start</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">padding</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">fontColor</span>(<span class=\"string\">&#x27;#666&#x27;</span>)</span><br><span class=\"line\">      <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hotSearch</span>, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">fontSize</span>(<span class=\"number\">18</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">left</span>: <span class=\"number\">16</span>, <span class=\"attr\">top</span>: <span class=\"number\">10</span>, <span class=\"attr\">right</span>: <span class=\"number\">16</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">margin</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">12</span>)</span><br><span class=\"line\">        &#125;, <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">string</span></span>) =&gt;</span> item)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716910862339.jpg\" style=\"zoom:80%;\" /> \n\n<p><strong>2、帮助列表</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HelpListInterface</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">icon</span>: <span class=\"title class_\">Resource</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"attr\">helpList</span>: <span class=\"title class_\">HelpListInterface</span>[] = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;我的订阅&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.subscribe&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;常见问题&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.problem&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;在线客服&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.customer_service&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;意见反馈&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.opinion&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;关怀模式&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.give&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;会员中心&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: $r(<span class=\"string\">&quot;app.media.user&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Flex</span>(&#123; <span class=\"attr\">wrap</span>: <span class=\"title class_\">FlexWrap</span>.<span class=\"property\">Wrap</span> &#125;) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ForEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">helpList</span>, <span class=\"function\">(<span class=\"params\">item: HelpListInterface</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Image</span>(item.<span class=\"property\">icon</span>).<span class=\"title function_\">width</span>(<span class=\"number\">42</span>).<span class=\"title function_\">height</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\">            <span class=\"title class_\">Text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;item.title&#125;</span>`</span>).<span class=\"title function_\">fontSize</span>(<span class=\"number\">15</span>).<span class=\"title function_\">fontColor</span>(<span class=\"string\">&#x27;#666&#x27;</span>).<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">          &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;25%&#x27;</span>).<span class=\"title function_\">padding</span>(<span class=\"number\">5</span>).<span class=\"title function_\">margin</span>(&#123; <span class=\"attr\">bottom</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\">(<span class=\"params\">item: HelpListInterface</span>) =&gt;</span> item.<span class=\"property\">title</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .<span class=\"title function_\">margin</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#fff&#x27;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">borderRadius</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">padding</span>(&#123; <span class=\"attr\">top</span>: <span class=\"number\">15</span>, <span class=\"attr\">bottom</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">backgroundColor</span>(<span class=\"string\">&#x27;#eee&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716912172452.jpg\" style=\"zoom:80%;\" /> \n\n<h4 id=\"相对布局（RelativeContainer）\"><a href=\"#相对布局（RelativeContainer）\" class=\"headerlink\" title=\"相对布局（RelativeContainer）\"></a>相对布局（RelativeContainer）</h4><p>相对布局组件，用于复杂场景中元素对齐的布局。</p>\n<p>RelativeContainer 就是采用相对布局的容器，支持容器内部的子元素设置相对位置关系。子元素支持指定兄弟元素作为锚点，也支持指定父容器作为锚点，基于锚点做相对位置布局。下图是一个 RelativeContainer 的概念图，图中的虚线表示位置的依赖关系。</p>\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716991550056.jpg\" style=\"zoom: 33%;\" /> \n\n<h5 id=\"规则说明\"><a href=\"#规则说明\" class=\"headerlink\" title=\"规则说明\"></a>规则说明</h5><p>1、容器内子组件区分水平方向，垂直方向：</p>\n<p>​    （1）水平方向为 left，middle，right，对应容器的 HorizontalAlign.Start，HorizontalAlign.Center，HorizontalAlign.End。</p>\n<p>​    （2）垂直方向为 top，center，bottom，对应容器的 VerticalAlign.Top，VerticalAlign.Center，VerticalAlign.Bottom。</p>\n<p>2、子组件可以将容器或者其他子组件设为锚点：</p>\n<p>​    （1）参与相对布局的容器内组件必须设置 id，不设置 id 的组件不显示，RelativeContainer 容器的固定 id 为 **__container__**。</p>\n<p>​    （2）此子组件某一方向上的三个位置可以将容器或其它子组件的同方向三个位置为锚点，同方向上两个以上位置设置锚点以后会跳过第三个。</p>\n<p>​    （3）前端页面设置的子组件尺寸大小不会受到相对布局规则的影响。子组件某个方向上设置两个或以上 alignRules 时不建议设置此方向尺寸大小。</p>\n<p>​    （4）对齐后需要额外偏移可设置 <strong>oﬀset</strong>。</p>\n<p>3、特殊情况：</p>\n<p>​    （1）互相依赖，环形依赖时容器内子组件全部不绘制。</p>\n<p>​    （2）同方向上两个以上位置设置锚点但锚点位置逆序时，此子组件大小为 0，即不绘制。</p>\n<p>​    （3）容器不设置宽高时，容器与容器内子组件不绘制。</p>\n<h5 id=\"RelativeContainer-的基本使用演示\"><a href=\"#RelativeContainer-的基本使用演示\" class=\"headerlink\" title=\"RelativeContainer 的基本使用演示\"></a>RelativeContainer 的基本使用演示</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entry</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">struct <span class=\"title class_\">Index</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Column</span>() &#123;</span><br><span class=\"line\">      <span class=\"title class_\">RelativeContainer</span>() &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Row</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">width</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">height</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">backgroundColor</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">Orange</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">alignRules</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">left</span>: &#123; <span class=\"attr\">anchor</span>: <span class=\"string\">&#x27;__container__&#x27;</span>, <span class=\"attr\">align</span>: <span class=\"title class_\">HorizontalAlign</span>.<span class=\"property\">Start</span> &#125;,</span><br><span class=\"line\">            <span class=\"attr\">top</span>: &#123; <span class=\"attr\">anchor</span>: <span class=\"string\">&#x27;__container__&#x27;</span>, <span class=\"attr\">align</span>: <span class=\"title class_\">VerticalAlign</span>.<span class=\"property\">Top</span> &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">id</span>(<span class=\"string\">&#x27;row1&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">offset</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">20</span>, <span class=\"attr\">y</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">      &#125;.<span class=\"title function_\">width</span>(<span class=\"number\">200</span>).<span class=\"title function_\">height</span>(<span class=\"number\">200</span>).<span class=\"title function_\">border</span>(&#123; <span class=\"attr\">width</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span> &#125;).<span class=\"title function_\">id</span>(<span class=\"string\">&#x27;rc&#x27;</span>)</span><br><span class=\"line\">    &#125;.<span class=\"title function_\">width</span>(<span class=\"string\">&#x27;100%&#x27;</span>).<span class=\"title function_\">height</span>(<span class=\"string\">&#x27;100%&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/zch0304/images/raw/master/note/1716995097983.jpg\" style=\"zoom:80%;\" /> \n\n<p>demo</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clwz59rcr0007nctthep30l23","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rcv000dncttaxns4o8s"},{"post_id":"clwz59rcj0001nctt1svm50m2","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rcx000inctt9irdbs6o"},{"post_id":"clwz59rcs0008ncttcy6mcri8","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rcx000knctt8wgbbagx"},{"post_id":"clwz59rcu000bncttcfk17n1h","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rcz000nnctt8vt549xd"},{"post_id":"clwz59rcm0003nctt5liddmek","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rcz000qncttfy6z5ikz"},{"post_id":"clwz59rcv000cnctth5d45xtn","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rd1000vncttbmcr7tup"},{"post_id":"clwz59rcw000hnctt61d87ja5","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rd1000ynctt5x21c4gu"},{"post_id":"clwz59rcq0006nctt9hnlbo62","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rd20013nctt87160yr2"},{"post_id":"clwz59rcx000jncttg61h7maw","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rd30015nctthg0r0k0l"},{"post_id":"clwz59rcy000mncttc7if80r1","category_id":"clwz59rd0000tncttdx5h1jdr","_id":"clwz59rd40019ncttcpew9ueu"},{"post_id":"clwz59rcz000pnctt1ysn9vy1","category_id":"clwz59rd0000tncttdx5h1jdr","_id":"clwz59rd6001fnctthrhbfzwl"},{"post_id":"clwz59rd0000uncttdxnn9t8s","category_id":"clwz59rd40018ncttckth6zml","_id":"clwz59rd8001lncttgpnp7gbh"},{"post_id":"clwz59rd6001incttacp0c2cs","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rda001qncttbvs97r63"},{"post_id":"clwz59rd1000xncttb9sdgh04","category_id":"clwz59rd6001gncttfq2e2ezk","_id":"clwz59rdb001vncttaij9eesf"},{"post_id":"clwz59rd9001oncttdb6rgajv","category_id":"clwz59rd0000tncttdx5h1jdr","_id":"clwz59rdc001yncttab7qbeyw"},{"post_id":"clwz59rd10011nctt90fw7h3t","category_id":"clwz59rd8001mncttaz723a4m","_id":"clwz59rdc0022nctt8qpeg4pn"},{"post_id":"clwz59rd20014nctt71s5fvto","category_id":"clwz59rda001sncttf0p3f2ja","_id":"clwz59rdf0028nctt29rz4fta"},{"post_id":"clwz59rdd0024ncttbc3p8erp","category_id":"clwz59rco0004ncttdrivfwd6","_id":"clwz59rdf002cnctth38lg6u3"},{"post_id":"clwz59rd30017nctt93rx6zqe","category_id":"clwz59rd8001mncttaz723a4m","_id":"clwz59rdf002fnctt0o04atx8"},{"post_id":"clwz59rd4001bnctt91n0gris","category_id":"clwz59rde0027nctt07kw70ri","_id":"clwz59rdg002kncttga1ig69r"},{"post_id":"clwz59rd5001enctte4nc3p41","category_id":"clwz59rd8001mncttaz723a4m","_id":"clwz59rdg002pncttey2b5r0c"},{"post_id":"clwz59rd7001jnctt3rx9e7zo","category_id":"clwz59rd8001mncttaz723a4m","_id":"clwz59rdh002snctteq153h8x"},{"post_id":"clwz59rd9001pnctt7dc3b1cg","category_id":"clwz59rdg002onctt6wkhaze1","_id":"clwz59rdh002wncttf8z96ej8"},{"post_id":"clwz59rdb001unctt93am9wls","category_id":"clwz59rdh002unctt6p6uae51","_id":"clwz59rdh002znctt6kkh1fkp"},{"post_id":"clwz59rdb001xnctt9ikzd0xe","category_id":"clwz59rdh002yncttggmld78z","_id":"clwz59rdi0035ncttd9xd506g"},{"post_id":"clwz59rdc0021nctt4u4n6o8x","category_id":"clwz59rdi0031nctt8uiy6zdp","_id":"clwz59rdj0039ncttamd6di1z"},{"post_id":"clwz59rde0026nctt4ekff2tg","category_id":"clwz59rdi0036nctt2dxf08dc","_id":"clwz59rdj003dncttg29s4l18"}],"PostTag":[{"post_id":"clwz59rcu000bncttcfk17n1h","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rcw000gncttdwm4befn"},{"post_id":"clwz59rcj0001nctt1svm50m2","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rcz000oncttfntu899j"},{"post_id":"clwz59rcj0001nctt1svm50m2","tag_id":"clwz59rct000anctt5y2qbaic","_id":"clwz59rd0000rnctta0sw93cb"},{"post_id":"clwz59rcj0001nctt1svm50m2","tag_id":"clwz59rcw000fnctt0qfy7qp0","_id":"clwz59rd1000wnctt4qds8k3e"},{"post_id":"clwz59rcx000jncttg61h7maw","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rd1000znctt0f4j6jdo"},{"post_id":"clwz59rcm0003nctt5liddmek","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rd4001ancttbzi55ntb"},{"post_id":"clwz59rcm0003nctt5liddmek","tag_id":"clwz59rd0000sncttcaf66480","_id":"clwz59rd5001cnctt6hbwhel8"},{"post_id":"clwz59rcm0003nctt5liddmek","tag_id":"clwz59rcw000fnctt0qfy7qp0","_id":"clwz59rd6001hnctt8hzza0ss"},{"post_id":"clwz59rd6001incttacp0c2cs","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rd9001nnctta27n4e0y"},{"post_id":"clwz59rcq0006nctt9hnlbo62","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rda001tncttapsm0a3r"},{"post_id":"clwz59rcq0006nctt9hnlbo62","tag_id":"clwz59rd5001dnctt0gzcgasz","_id":"clwz59rdb001wncttezsj58kv"},{"post_id":"clwz59rcq0006nctt9hnlbo62","tag_id":"clwz59rcw000fnctt0qfy7qp0","_id":"clwz59rdc0020ncttfvzxewcn"},{"post_id":"clwz59rcr0007nctthep30l23","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdf0029nctt6nhm1mlq"},{"post_id":"clwz59rcr0007nctthep30l23","tag_id":"clwz59rda001rncttaw6t21y3","_id":"clwz59rdf002ancttahlj0x6k"},{"post_id":"clwz59rcr0007nctthep30l23","tag_id":"clwz59rcw000fnctt0qfy7qp0","_id":"clwz59rdf002dncttbbyuhuk0"},{"post_id":"clwz59rdd0024ncttbc3p8erp","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdf002gncttc5r82123"},{"post_id":"clwz59rcs0008ncttcy6mcri8","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdg002incttd31v3ozj"},{"post_id":"clwz59rcs0008ncttcy6mcri8","tag_id":"clwz59rde0025nctt7g04gciu","_id":"clwz59rdg002lnctt85wu8r4n"},{"post_id":"clwz59rcv000cnctth5d45xtn","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdg002nnctt0jphbb25"},{"post_id":"clwz59rcv000cnctth5d45xtn","tag_id":"clwz59rdf002bnctt6gtv4d3b","_id":"clwz59rdg002qnctt6vp6cxua"},{"post_id":"clwz59rcw000hnctt61d87ja5","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdg002rncttc3ntht4f"},{"post_id":"clwz59rcw000hnctt61d87ja5","tag_id":"clwz59rdf002hncttcpqnbjob","_id":"clwz59rdh002vnctte1y60e1n"},{"post_id":"clwz59rcy000mncttc7if80r1","tag_id":"clwz59rdg002mnctt8rbr9tsn","_id":"clwz59rdi0032nctt7n5db1mo"},{"post_id":"clwz59rcy000mncttc7if80r1","tag_id":"clwz59rdh002tnctt6sbk75zr","_id":"clwz59rdi0033nctt39dm2e7n"},{"post_id":"clwz59rcy000mncttc7if80r1","tag_id":"clwz59rdh002xnctt2y5v6eqv","_id":"clwz59rdi0037nctt1yi5egr0"},{"post_id":"clwz59rcz000pnctt1ysn9vy1","tag_id":"clwz59rdg002mnctt8rbr9tsn","_id":"clwz59rdj003ancttg40dbavl"},{"post_id":"clwz59rcz000pnctt1ysn9vy1","tag_id":"clwz59rdh002tnctt6sbk75zr","_id":"clwz59rdj003bncttdfwbeqtn"},{"post_id":"clwz59rd0000uncttdxnn9t8s","tag_id":"clwz59rdi0038nctt5w7p9bmg","_id":"clwz59rdj003fncttghzo89s1"},{"post_id":"clwz59rd0000uncttdxnn9t8s","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdk003gncttc72xbw3j"},{"post_id":"clwz59rd0000uncttdxnn9t8s","tag_id":"clwz59rdj003cncttci595oto","_id":"clwz59rdk003inctt7bn9e3uv"},{"post_id":"clwz59rd1000xncttb9sdgh04","tag_id":"clwz59rdj003enctt74ivceo4","_id":"clwz59rdk003jncttduny0kg5"},{"post_id":"clwz59rd10011nctt90fw7h3t","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdk003lnctthljw2iww"},{"post_id":"clwz59rd10011nctt90fw7h3t","tag_id":"clwz59rdk003hnctte76z2aae","_id":"clwz59rdk003mnctthbrx3va5"},{"post_id":"clwz59rd20014nctt71s5fvto","tag_id":"clwz59rdi0038nctt5w7p9bmg","_id":"clwz59rdk003oncttboq6btka"},{"post_id":"clwz59rd30017nctt93rx6zqe","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdl003qnctt4rufexsk"},{"post_id":"clwz59rd30017nctt93rx6zqe","tag_id":"clwz59rdk003hnctte76z2aae","_id":"clwz59rdl003rnctt8v2u4k4c"},{"post_id":"clwz59rd4001bnctt91n0gris","tag_id":"clwz59rdl003pnctt1tig6mvh","_id":"clwz59rdl003uncttfrkz5kcx"},{"post_id":"clwz59rd4001bnctt91n0gris","tag_id":"clwz59rdl003sncttd10b6hoh","_id":"clwz59rdl003vnctt2rwz2pwv"},{"post_id":"clwz59rd5001enctte4nc3p41","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdm003xncttcgq09ztj"},{"post_id":"clwz59rd5001enctte4nc3p41","tag_id":"clwz59rdk003hnctte76z2aae","_id":"clwz59rdm003ynctt7sbueg97"},{"post_id":"clwz59rd7001jnctt3rx9e7zo","tag_id":"clwz59rcp0005ncttcrov79z6","_id":"clwz59rdm0040nctt2ygza0qc"},{"post_id":"clwz59rd7001jnctt3rx9e7zo","tag_id":"clwz59rdk003hnctte76z2aae","_id":"clwz59rdm0041nctt74t07xyc"},{"post_id":"clwz59rd9001oncttdb6rgajv","tag_id":"clwz59rdm003znctt4i7d94z5","_id":"clwz59rdm0044nctt7hio4txj"},{"post_id":"clwz59rd9001oncttdb6rgajv","tag_id":"clwz59rdh002tnctt6sbk75zr","_id":"clwz59rdm0045nctt5xps1tlv"},{"post_id":"clwz59rd9001pnctt7dc3b1cg","tag_id":"clwz59rdm0043nctt66wm5lkl","_id":"clwz59rdn0047ncttc3r4an8h"},{"post_id":"clwz59rdb001unctt93am9wls","tag_id":"clwz59rdm0046ncttbv1c96mo","_id":"clwz59rdn0049ncttf30za1b4"},{"post_id":"clwz59rdb001xnctt9ikzd0xe","tag_id":"clwz59rdn0048ncttd7o8h1sa","_id":"clwz59rdn004bnctt50ngcjyb"},{"post_id":"clwz59rdc0021nctt4u4n6o8x","tag_id":"clwz59rdn004anctt8jkefemy","_id":"clwz59rdn004dnctt8t784i8w"},{"post_id":"clwz59rde0026nctt4ekff2tg","tag_id":"clwz59rdn004cnctt4fbg7hzv","_id":"clwz59rdo004fncttf8h49v5r"},{"post_id":"clwz59rde0026nctt4ekff2tg","tag_id":"clwz59rdo004encttdhr53xbr","_id":"clwz59rdo004gnctt17ffbbhc"}],"Tag":[{"name":"Android","_id":"clwz59rcp0005ncttcrov79z6"},{"name":"Lifecycle","_id":"clwz59rct000anctt5y2qbaic"},{"name":"Jetpack","_id":"clwz59rcw000fnctt0qfy7qp0"},{"name":"LiveData","_id":"clwz59rd0000sncttcaf66480"},{"name":"ViewModel","_id":"clwz59rd5001dnctt0gzcgasz"},{"name":"WorkManager","_id":"clwz59rda001rncttaw6t21y3"},{"name":"Android Studio","_id":"clwz59rde0025nctt7g04gciu"},{"name":"Fragment","_id":"clwz59rdf002bnctt6gtv4d3b"},{"name":"Activity","_id":"clwz59rdf002hncttcpqnbjob"},{"name":"Chrome","_id":"clwz59rdg002mnctt8rbr9tsn"},{"name":"工具","_id":"clwz59rdh002tnctt6sbk75zr"},{"name":"调试","_id":"clwz59rdh002xnctt2y5v6eqv"},{"name":"Java","_id":"clwz59rdi0038nctt5w7p9bmg"},{"name":"二进制","_id":"clwz59rdj003cncttci595oto"},{"name":"Dart","_id":"clwz59rdj003enctt74ivceo4"},{"name":"Kotlin","_id":"clwz59rdk003hnctte76z2aae"},{"name":"测试","_id":"clwz59rdl003pnctt1tig6mvh"},{"name":"mock","_id":"clwz59rdl003sncttd10b6hoh"},{"name":"WebStorm","_id":"clwz59rdm003znctt4i7d94z5"},{"name":"localStorage","_id":"clwz59rdm0043nctt66wm5lkl"},{"name":"阅读笔记","_id":"clwz59rdm0046ncttbv1c96mo"},{"name":"算法","_id":"clwz59rdn0048ncttd7o8h1sa"},{"name":"位运算","_id":"clwz59rdn004anctt8jkefemy"},{"name":"鸿蒙开发","_id":"clwz59rdn004cnctt4fbg7hzv"},{"name":"HarmonyOS","_id":"clwz59rdo004encttdhr53xbr"}]}}