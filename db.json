{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/android.png","path":"images/android.png","modified":0,"renderable":0},{"_id":"source/images/kobe.png","path":"images/kobe.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"c3e025f8c72743f9cde53fcd2fbbee70b0952a2f","modified":1530498399235},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1529901945167},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1529901945168},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1529901945168},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1529901945172},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1529901945172},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1529901945173},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1529901945173},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1529901945174},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1529901945174},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1529901945175},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1529901945176},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1529901945177},{"_id":"themes/next/_config.yml","hash":"7fe0683a25ab39f6c232e77c1d1467ea5b723a77","modified":1544058429959},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1529901945179},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1529901945179},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1529901945296},{"_id":"source/_posts/Android-Jetpack-之-LifeCycle.md","hash":"c227d3a4398c52794ab10455eaf076e4c367e7d9","modified":1543470640254},{"_id":"source/_posts/Android-Jetpack-之-LiveData.md","hash":"7b6565620764b7d17c1e120d1c57d425c0c1d64c","modified":1544059160141},{"_id":"source/_posts/Android-Jetpack-之-ViewModel.md","hash":"2940d9bda5465252dea8cb364b88490a6a3e0eae","modified":1542846480878},{"_id":"source/_posts/Android-Jetpack-之-WorkManager.md","hash":"118bfc263dbc718b773527c00f32591aff04c7ee","modified":1591843010017},{"_id":"source/_posts/Android-Studio-的一些技巧.md","hash":"c4b5bb23a32c93154614b3a874e42a01c6a7cff2","modified":1532399266159},{"_id":"source/_posts/Android-一个应用多个数据库.md","hash":"2a88e6e303a6afa21732abb490afdfe4197d6709","modified":1529898179104},{"_id":"source/_posts/Android-之-Activity.md","hash":"8fbf997ef4cfe6b05cc62f2ecad529d3a9e20b43","modified":1591843577126},{"_id":"source/_posts/Android-之-Fragment.md","hash":"f9a8f1f8ec6ae344dace815a96865f32e1a38896","modified":1591843518911},{"_id":"source/_posts/Android-代码优化小提示.md","hash":"61a372a24758fd411955c146f8735d4340788bc4","modified":1529898179113},{"_id":"source/_posts/Android-学习.md","hash":"4c429c07e2a5d3a19908699136765ddbe5152714","modified":1530498792445},{"_id":"source/_posts/Chrome-开发者工具调试.md","hash":"1894980c1aeb777bef9266da812d65f77ee49c68","modified":1532399300542},{"_id":"source/_posts/Chrome-插件.md","hash":"367860477a3fe326b2599173deb31cf6ad4fecb2","modified":1557395438088},{"_id":"source/_posts/Java-一个方法返回多个整型值.md","hash":"d9818e7f2352f566485f4015eaa721a9fe252dc7","modified":1529898179126},{"_id":"source/_posts/Java-子类和父类相关成员执行顺序.md","hash":"e1589633f6b03325514deb3957bb90bfd34beac2","modified":1529898179132},{"_id":"source/_posts/Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply.md","hash":"00805ae0c433b4b7833f85d0da04a8ac0041af97","modified":1591844343286},{"_id":"source/_posts/Kotlin-泛型中的-in-和-out.md","hash":"6684261c80962cfb6cb08fa238b34e911cdeab6d","modified":1553669028520},{"_id":"source/_posts/Mock-测试.md","hash":"c175b9009a5423da5ad8708b7b6f60326d88a97e","modified":1532399246480},{"_id":"source/_posts/Pair-了解一下.md","hash":"c3869e3ab0b4370c3345f8a11c6ffee086db6660","modified":1548829402090},{"_id":"source/_posts/WebStorm-2018-版本破解.md","hash":"658c476101a3ba97700cc535c19d4cfac675b3f5","modified":1538183650795},{"_id":"source/_posts/localStorage-实现历史记录功能.md","hash":"ac05d33860492b5f47bdea2c44806e86177f48b6","modified":1540427706558},{"_id":"source/_posts/位运算总结.md","hash":"4c59c44834c05720f84c788614fc78e257fb2ba7","modified":1561533569687},{"_id":"source/_posts/前端学习.md","hash":"c7e23f9ded05c7a4b492b5bbccf9699d8d55aa3a","modified":1530498685387},{"_id":"source/_posts/剑指-Offer.md","hash":"f8af337361e0aedeb54c2e861061eb32d814020d","modified":1529898179142},{"_id":"source/_posts/我的书单.md","hash":"f1ce0478e76e51ff06c54666122c0354388366cf","modified":1540000736788},{"_id":"source/_posts/接口代理实现-Android-Application-的多继承.md","hash":"93c2ca37bde3ada36c132cb6f5de9a1f1de3c850","modified":1533277790876},{"_id":"source/categories/index.md","hash":"f7b22c7150dfd8ad58382732dfc46b3cd1bf2da9","modified":1530498399234},{"_id":"source/images/avatar.jpg","hash":"8da8249b1f64aa0383d50303fd8b81136facca99","modified":1557284228860},{"_id":"source/tags/index.md","hash":"ddf13a75ba7be3f21c9c955b3e3da25f9a5792f6","modified":1530498399238},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1529901945169},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1529901945170},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1529901945171},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529901945171},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1529901945180},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1529901945181},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1529901945182},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1529901945182},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1529901945183},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1529901945193},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1529901945193},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1529901945194},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1529901945195},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1529901945195},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1529901945196},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1529901945196},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1529901945197},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1529901945198},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1529901945199},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1529901945199},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1529901945204},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1529901945288},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1529901945290},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1529901945292},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1529901945292},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1529901945294},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1529901945295},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1529901945296},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1529901945297},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1529901945299},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1529901945555},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1529901945556},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1529901945557},{"_id":"source/images/android.png","hash":"bafd89bad4f5aa860389354f20c050de2dc64c02","modified":1529898179228},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945424},{"_id":"source/images/kobe.png","hash":"f8534c83ddfd100d615d9fca3576c39d36479d43","modified":1543453753112},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1529901945202},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1529901945203},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1529901945205},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1529901945207},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1529901945209},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1529901945210},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1529901945212},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1529901945212},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1529901945214},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1529919272749},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1529901945217},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1529901945221},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1529901945222},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1529901945224},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1529901945225},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1529901945273},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1529901945274},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1529901945275},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1529901945276},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1529901945277},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1529901945278},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1529901945279},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1529901945236},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1529901945237},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1529901945245},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1529901945301},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1529901945302},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1529901945303},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1529901945304},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1529901945306},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1529901945307},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1529901945308},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1529901945310},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1529901945311},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1529901945423},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1529901945425},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529901945426},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529901945427},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1529901945428},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1529901945428},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1529901945429},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1529901945430},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1529901945431},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1529901945431},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1529901945432},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529901945433},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529901945434},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529901945434},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1529901945435},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529901945435},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1529901945436},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1529901945436},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529901945437},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945243},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945243},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945397},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945397},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945399},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945420},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529901945422},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1529901945220},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1529901945219},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1529901945227},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1529901945228},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1529901945229},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1529901945231},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1529901945232},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1529901945234},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1529901945235},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1529901945247},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1529901945248},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1529901945250},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1529901945249},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1529901945251},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1529901945252},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1529901945253},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1529901945254},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1529901945255},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1529901945256},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1529901945257},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1529901945259},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1529901945260},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1529901945262},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1529901945263},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1529901945264},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1529901945266},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1529901945267},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1529901945268},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1529901945269},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1529901945271},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1529901945271},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1529901945283},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1529901945284},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1529901945286},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1529901945287},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1529901945240},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1529901945242},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1529901945244},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1529901945395},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1529901945396},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1529901945398},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1529901945399},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1529901945420},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1529901945420},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1529901945421},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1529901945422},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1529901945438},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1529901945439},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1529901945440},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1529901945440},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1529901945441},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1529901945441},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1529901945442},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1529901945443},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1529901945446},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1529901945445},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1529901945447},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529901945462},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529901945467},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1529901945469},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1529901945485},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1529901945486},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1529901945487},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1529901945486},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1529901945515},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1529901945470},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1529901945471},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1529901945491},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1529901945491},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1529901945492},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1529901945493},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1529901945494},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1529901945518},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1529901945518},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1529901945519},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1529901945520},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1529901945521},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1529901945522},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1529901945523},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1529901945524},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1529901945525},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529901945526},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529901945527},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529901945527},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529901945528},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529901945529},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529901945529},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529901945530},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529901945530},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529901945531},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529901945532},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529901945532},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529901945533},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529901945533},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1529901945534},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1529901945536},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1529901945536},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1529901945537},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1529901945547},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1529901945548},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1529901945552},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1529901945553},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1529901945554},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1529901945517},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1529901945281},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1529901945282},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1529901945316},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1529901945316},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1529901945320},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1529901945321},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1529901945322},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1529901945345},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1529901945365},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1529901945378},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1529901945379},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1529901945380},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1529901945382},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1529901945383},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1529901945392},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1529901945393},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1529901945401},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1529901945402},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1529901945402},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1529901945403},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1529901945404},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1529901945405},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1529901945406},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1529901945406},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1529901945409},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1529901945410},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1529901945411},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1529901945412},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1529901945413},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1529901945416},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1529901945417},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1529901945417},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1529901945418},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1529901945418},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1529901945419},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1529901945444},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1529901945461},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1529901945488},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529901945489},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529901945472},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529901945474},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529901945475},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529901945473},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529901945475},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529901945476},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1529901945481},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1529901945483},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1529901945484},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1529901945495},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1529901945497},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1529901945496},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1529901945545},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1529901945546},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1529901945455},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1529901945459},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529901945514},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529901945515},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1529901945551},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1529901945325},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1529901945328},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1529901945329},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1529901945330},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1529901945332},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1529901945334},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1529901945335},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1529901945337},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1529901945338},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1529901945339},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1529901945341},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1529901945342},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1529901945343},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1529901945344},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1529901945347},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1529901945348},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1529901945348},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1529901945350},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1529901945351},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1529901945352},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1529901945353},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1529901945353},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1529901945354},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1529901945354},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1529901945355},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1529901945356},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1529901945356},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1529901945357},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1529901945357},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1529901945358},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1529901945359},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1529901945360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1529901945360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1529901945361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1529901945361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1529901945362},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1529901945363},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1529901945364},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1529901945364},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1529901945366},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1529901945368},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1529901945367},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1529901945369},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1529901945369},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1529901945370},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1529901945370},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1529901945371},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1529901945371},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1529901945372},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1529901945374},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1529901945373},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1529901945374},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1529901945375},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1529901945375},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1529901945376},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1529901945376},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1529901945377},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1529901945377},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1529901945407},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1529901945408},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1529901945414},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529901945451},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529901945453},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529901945454},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529901945451},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529901945455},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1529901945458},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529901945477},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1529901945479},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1529901945478},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1529901945479},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1529901945480},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1529901945481},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529901945500},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529901945503},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529901945512},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1529901945466},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1529901945543},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1529901945509},{"_id":"public/search.xml","hash":"140b71c91a2a6541ea3f882d3683288a00cf080f","modified":1591844372384},{"_id":"public/tags/index.html","hash":"84ea4e1e2a917ce38b487031217edbbd5899fbf4","modified":1591844376515},{"_id":"public/categories/index.html","hash":"33e0e5dad303964cc7bb846e5e1c2201129f3f83","modified":1591844376529},{"_id":"public/2020/04/12/Android-Jetpack-之-WorkManager/index.html","hash":"9d359207c9acc23518f8497080efa3c948953a5a","modified":1591844376529},{"_id":"public/2019/06/25/位运算总结/index.html","hash":"df8e70de6c003a5aec836a28dea5b81fc9ee8df6","modified":1591844376529},{"_id":"public/2019/01/30/Pair-了解一下/index.html","hash":"c9641b10de79445adc4b1ba93eb5b3178632ff0a","modified":1591844376530},{"_id":"public/2019/03/27/Kotlin-泛型中的-in-和-out/index.html","hash":"c21e73cde8f5ab299bf207b35d1aeaf1b6b862dd","modified":1591844376530},{"_id":"public/2018/11/22/Android-Jetpack-之-LiveData/index.html","hash":"412d3c783a60c3150a3fea399c3fcbb10513f44a","modified":1591844376530},{"_id":"public/2018/10/27/Android-Jetpack-之-ViewModel/index.html","hash":"ab352392609c3d28da8e71b746350049a665fc61","modified":1591844376530},{"_id":"public/2018/10/16/Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply/index.html","hash":"1471074a491725ce8e28d2dcbab97b8162d36939","modified":1591844376530},{"_id":"public/2018/09/29/localStorage-实现历史记录功能/index.html","hash":"2e06688e1555b3a7a69ecd0b493e564c93d36383","modified":1591844376530},{"_id":"public/2018/08/15/WebStorm-2018-版本破解/index.html","hash":"76e5ea44502ab7a4efc0c152f874c54212bbd62b","modified":1591844376530},{"_id":"public/2018/08/03/接口代理实现-Android-Application-的多继承/index.html","hash":"1f0f5f6e96d73c20b87f5bd827b3d8bfadc893fd","modified":1591844376531},{"_id":"public/2018/07/23/Android-之-Fragment/index.html","hash":"b2fea67e76e558665b94ad9ae99072c59f3e1f6a","modified":1591844376531},{"_id":"public/2018/07/05/Android-之-Activity/index.html","hash":"47a14547f6433ecd72eb44b13685ff4898cbe8d7","modified":1591844376531},{"_id":"public/2018/06/23/Java-一个方法返回多个整型值/index.html","hash":"c252e42cf828ad1d77363db1279c771b78685106","modified":1591844376532},{"_id":"public/2018/06/02/Java-子类和父类相关成员执行顺序/index.html","hash":"2eb17026af797838588ef2d93274aa830ae6eb18","modified":1591844376532},{"_id":"public/2018/05/25/前端学习/index.html","hash":"99e4360396c037eb8ce2e4614db5e35e59fe045c","modified":1591844376532},{"_id":"public/2018/04/27/Android-学习/index.html","hash":"77c7460b76ba212c7bc12be9c4221c0e173a5ad2","modified":1591844376532},{"_id":"public/2018/03/20/Mock-测试/index.html","hash":"1d68e4b013578f37d6bf8e02349c3e6a4ccd01b4","modified":1591844376533},{"_id":"public/2018/11/06/Android-Jetpack-之-LifeCycle/index.html","hash":"9ced537a5b7576a037d84f25e97c63e9e267a248","modified":1591844376533},{"_id":"public/2018/03/07/我的书单/index.html","hash":"82c3c117628bbe8653e9846ec216093ddfff5558","modified":1591844376533},{"_id":"public/2018/03/04/Chrome-开发者工具调试/index.html","hash":"50dcd172179028ff45d012da9b892375ba47571d","modified":1591844376533},{"_id":"public/2018/01/09/Android-代码优化小提示/index.html","hash":"a4a46d1467cde89c1d1f5d11ac38c1078015a21a","modified":1591844376534},{"_id":"public/2017/12/06/Chrome-插件/index.html","hash":"986b388c890a5775d947574d436b890e4975fa0d","modified":1591844376534},{"_id":"public/2017/12/09/剑指-Offer/index.html","hash":"e5e81404884e4efb67be3d782528dd79c5a8f874","modified":1591844376534},{"_id":"public/2016/09/25/Android-Studio-的一些技巧/index.html","hash":"1eac3f3fb893b9beb306d053f809dce4558b86bd","modified":1591844376534},{"_id":"public/archives/index.html","hash":"e556acd5db661ecbf2463db56f55237b15a0b960","modified":1591844376534},{"_id":"public/archives/page/2/index.html","hash":"0196a43fa6a2269459b5ac51b5f50185061f086e","modified":1591844376534},{"_id":"public/archives/page/3/index.html","hash":"680c7cdb86a8f4b13a641c10572a826510126d47","modified":1591844376534},{"_id":"public/archives/2016/index.html","hash":"fa984083e61b4a9b7a88e5a29ecd3a6d3ed81439","modified":1591844376535},{"_id":"public/archives/2017/index.html","hash":"06ca245a830db7176dc1e97fdbc80da1f362bbf8","modified":1591844376535},{"_id":"public/2018/01/06/Android-一个应用多个数据库/index.html","hash":"c95f089704de83864733dfd355dbb9559b302cfc","modified":1591844376535},{"_id":"public/archives/2017/12/index.html","hash":"0df45b9c9cc49b5e49f671cc732fe981b25a1365","modified":1591844376535},{"_id":"public/archives/2018/index.html","hash":"ca3c5e6ca4f4da6732b731e964ac45dcd6d5fde6","modified":1591844376535},{"_id":"public/archives/2018/page/2/index.html","hash":"9d096371d0abbea972475c10fe497ca4c2c229f4","modified":1591844376536},{"_id":"public/archives/2018/01/index.html","hash":"5f58f921ef1ad8468d15226e671dd7ea2ba658fb","modified":1591844376536},{"_id":"public/archives/2018/03/index.html","hash":"61d325066c4a6b9d2e10032bbee7a39f6a352690","modified":1591844376536},{"_id":"public/archives/2018/04/index.html","hash":"db8bbf8f2345e61f88a2d44d86f299d41349ec37","modified":1591844376536},{"_id":"public/archives/2018/05/index.html","hash":"824a9eed698eba88ed8bb7e207ac7b88c8e894f0","modified":1591844376536},{"_id":"public/archives/2016/09/index.html","hash":"a4fa29c667fda7a18ddeac1ad6c4a241540a0b18","modified":1591844376537},{"_id":"public/archives/2018/06/index.html","hash":"fc5050e20c67a0f0f5f3e4be865478a7412509f2","modified":1591844376537},{"_id":"public/archives/2018/07/index.html","hash":"6242f7a717418095a25f6e46eb735d5fe23228bf","modified":1591844376537},{"_id":"public/archives/2018/08/index.html","hash":"db6a47386d7659579a1f977902d579c6b5be6bdc","modified":1591844376537},{"_id":"public/archives/2018/10/index.html","hash":"08ac6509dc38a6eb492cc4ecbf81d2c31b93246a","modified":1591844376538},{"_id":"public/archives/2018/09/index.html","hash":"b419e20e68052485430f4234d24c4df8ab7d7e6d","modified":1591844376538},{"_id":"public/archives/2018/11/index.html","hash":"8ac78915968a6940ef939eea25baf16adeee1fe3","modified":1591844376538},{"_id":"public/archives/2019/index.html","hash":"169bfdc18a950d05e4a24e592cbdad53c8c5c0b8","modified":1591844376539},{"_id":"public/archives/2020/index.html","hash":"7497a520d7c8f622a8a1637d2a2f24f2240b8db9","modified":1591844376539},{"_id":"public/archives/2019/03/index.html","hash":"385c8a6e81f55685ea7447bb50844611e36cd611","modified":1591844376539},{"_id":"public/archives/2019/01/index.html","hash":"2a75ac20b52fb1a662ae1206246239678cf26899","modified":1591844376539},{"_id":"public/archives/2020/04/index.html","hash":"f15491119aa33f422e8675976aee72ddca909b6f","modified":1591844376539},{"_id":"public/archives/2019/06/index.html","hash":"63e75cd4be6247335e53774c68b616d3eb562f8d","modified":1591844376540},{"_id":"public/categories/Android/index.html","hash":"84de46015d542811c58bc81259c833825a284808","modified":1591844376540},{"_id":"public/categories/工具/index.html","hash":"a327a64679e0a2c68a3e29f17a609ac81d02e57a","modified":1591844376540},{"_id":"public/categories/Android/page/2/index.html","hash":"e7a5669ee5180335384da43d9878fb088eda9cd8","modified":1591844376541},{"_id":"public/categories/二进制/index.html","hash":"5a188b32e73169b730fad12ead3e749203089470","modified":1591844376542},{"_id":"public/categories/Kotlin/index.html","hash":"459f1a16abc9d17a81d66f2e011c969afdf78e43","modified":1591844376542},{"_id":"public/categories/测试/index.html","hash":"5e88671a6a31fe4db1b14e046c0d28b4531659bf","modified":1591844376542},{"_id":"public/categories/Java/index.html","hash":"6c3907966e9c02967d28cde1f3f5c3c67cbfa53d","modified":1591844376542},{"_id":"public/categories/前端/index.html","hash":"a010f03b200012555e633530dd7f7900b551d7a6","modified":1591844376544},{"_id":"public/categories/算法/index.html","hash":"8afa1ae95fccace83b25986e3a997acc02d6d5a4","modified":1591844376544},{"_id":"public/categories/阅读笔记/index.html","hash":"e3416b1abaaae6f9f00b1ac496927fcd5accf0f7","modified":1591844376544},{"_id":"public/index.html","hash":"a51e4cc1973df53f64f6fd873c16efdae3edfb0a","modified":1591844376544},{"_id":"public/categories/位运算/index.html","hash":"c5c01910fa43bb600f24176c14144a2e90a41dd3","modified":1591844376544},{"_id":"public/page/2/index.html","hash":"980b45a15bf6c0ffa95d147abe6de275c8a8e1cb","modified":1591844376546},{"_id":"public/page/3/index.html","hash":"a52ca19a16651ea32d732521b5cf0c219f98579f","modified":1591844376546},{"_id":"public/tags/Android/index.html","hash":"b68e8d3e667e6cdeb41028ff461f1e0a42502073","modified":1591844376546},{"_id":"public/tags/Chrome/index.html","hash":"606584ae4d28a1a07bcfe5a5691b8fce28d5bf2f","modified":1591844376546},{"_id":"public/tags/工具/index.html","hash":"da9437a83e98fd8b3bd25a69d997ce8133490be6","modified":1591844376547},{"_id":"public/tags/调试/index.html","hash":"f0fd9248ec90f7f8efcacfbe24c25bc6aaec7abc","modified":1591844376582},{"_id":"public/tags/二进制/index.html","hash":"d2faef5f760161f03c1920a2213b30aa7547d4ff","modified":1591844376582},{"_id":"public/tags/Java/index.html","hash":"bf9186f9d810fd038e87d26090862b25213f8121","modified":1591844376582},{"_id":"public/tags/Kotlin/index.html","hash":"9ca3e26007d74dcbdb29b4ef2e14ca838e3371f7","modified":1591844376582},{"_id":"public/tags/测试/index.html","hash":"8009430304950065fbf6e9542cc977ed94a1b058","modified":1591844376582},{"_id":"public/tags/mock/index.html","hash":"6c3f624def3911ab1745e5e23f6d67429f90d870","modified":1591844376582},{"_id":"public/tags/WebStorm/index.html","hash":"520b6378a44939b8dc68a8ed5dd5b0de34e7e8e5","modified":1591844376583},{"_id":"public/tags/localStorage/index.html","hash":"bee59f34813fef395c0e5a19f0d46209ab25f2a2","modified":1591844376583},{"_id":"public/tags/前端/index.html","hash":"40e178e3645fa72b1b4be147704897d97c5be5d8","modified":1591844376583},{"_id":"public/tags/算法/index.html","hash":"d3439f1041bbb38970ccf2c2efb84ef419e4295f","modified":1591844376583},{"_id":"public/tags/Android/page/2/index.html","hash":"97b35e5bae3cea330371b38c0bdc67bc1a2f49b1","modified":1591844376583},{"_id":"public/tags/阅读笔记/index.html","hash":"960ab450bc5a82cde8291ea9ed5bcd502bd9b2f2","modified":1591844376583},{"_id":"public/tags/LiveData/index.html","hash":"9fccfda5be9d594e93c65ddabf815e663282b8f2","modified":1591844376583},{"_id":"public/tags/Jetpack/index.html","hash":"f1f30f242bc065114475f6b65a488369e231bcc8","modified":1591844376584},{"_id":"public/tags/WorkManager/index.html","hash":"73f2afe4c15e7e47b9ac51ec4bf067cf30508d14","modified":1591844376584},{"_id":"public/tags/ViewModel/index.html","hash":"dd2ef4ce144242493ff44cf9135ad3be08d22121","modified":1591844376584},{"_id":"public/tags/Android-Studio/index.html","hash":"5f0ac74f2adb117904fef96f77a1c5be12e401c9","modified":1591844376584},{"_id":"public/tags/Activity/index.html","hash":"775d4508a69474042736db23ecdbf2878723389d","modified":1591844376584},{"_id":"public/tags/Fragment/index.html","hash":"05366d70b4f8b31a5e0243dac2d5f750664a9c59","modified":1591844376584},{"_id":"public/tags/位运算/index.html","hash":"85a0ab8a12eebf1bd02e50fa0c113dfbbc39f9e4","modified":1591844376584},{"_id":"public/tags/Lifecycle/index.html","hash":"388bfff48e41d9daa14a6c389190c6b95824ee19","modified":1591844376585}],"Category":[{"name":"Android","_id":"ckba6xcsi0003mgqu06up8hs6"},{"name":"工具","_id":"ckba6xct2000dmgqu6aob04y7"},{"name":"二进制","_id":"ckba6xctc000kmgqu2uah54tc"},{"name":"Java","_id":"ckba6xctm000qmgqu7wm3ylk7"},{"name":"Kotlin","_id":"ckba6xctq000wmgquecpe9774"},{"name":"测试","_id":"ckba6xcty0016mgqulfujodjb"},{"name":"前端","_id":"ckba6xcu3001cmgquu92zcmxd"},{"name":"算法","_id":"ckba6xcu8001lmgqud7bmwwiw"},{"name":"阅读笔记","_id":"ckba6xcub001rmgqulnq3bzfn"},{"name":"位运算","_id":"ckba6xd3g002umgqu32wws569"}],"Data":[],"Page":[{"title":"标签","date":"2016-09-24T21:28:31.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2016-09-25 05:28:31\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-07-02T02:26:39.234Z","path":"categories/index.html","layout":"page","_id":"ckba6xcsd0001mgquxukpgvbt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2016-09-24T21:28:31.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-09-25 05:28:31\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-07-02T02:26:39.238Z","path":"tags/index.html","layout":"page","_id":"ckba6xd2n0029mgqu6lscj6t8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android 一个应用多个数据库","date":"2018-01-05T16:42:00.000Z","_content":"\n\n\n最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。\n\n以存储用户信息为例：\n\n- 先贴出使用代码：\n\n```Java\nmUserDAO = new UserDAO(this, account); // 此处的 account 就是要操作的数据库名称\nmUserDAO.insert(new User(account, userName));\n```\n\n- 以下为三个关键类\n\n```Java\n/**\n * 数据库帮助类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class DBHelper extends SQLiteOpenHelper {\n\n    private static final int DB_VERSION = 1;\n    public static final String TABLE_NAME = \"user\";\n\n    public DBHelper(Context context, String dbName) {\n        super(context, dbName, null, DB_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        String sql = \"create table if not exists \" + TABLE_NAME + \" (account text primary key , userName text)\";\n        db.execSQL(sql);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        String sql = \"drop table if exists \" + TABLE_NAME;\n        db.execSQL(sql);\n        onCreate(db);\n    }\n}\n```\n\n```Java\n/**\n * 用户实体类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class User {\n\n    public String account; // 用户账号，假设唯一，用它作为数据库名称（dbName）\n    public String userName;\n\n    public User(String account, String userName) {\n        this.account = account;\n        this.userName = userName;\n    }\n}\n```\n\n```Java\n/**\n * 用户数据表相关操作\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class UserDAO {\n\n    private DBHelper mDBHelper;\n\n    public UserDAO(Context context, String dbName) {\n        mDBHelper = new DBHelper(context, dbName);\n    }\n\n    /**\n     * 插入一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean insert(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            ContentValues values = new ContentValues();\n            values.put(\"account\", user.account);\n            values.put(\"userName\", user.userName);\n            db.insertOrThrow(DBHelper.TABLE_NAME, null, values);\n            db.setTransactionSuccessful();\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 删除一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean delete(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            db.delete(DBHelper.TABLE_NAME, \"account = ?\", new String[]{user.account});\n            db.setTransactionSuccessful();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取所有数据\n     *\n     * @return\n     */\n    public List<User> getUserList() {\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n\n        try {\n            db = mDBHelper.getReadableDatabase();\n            cursor = db.query(DBHelper.TABLE_NAME,\n                    new String[]{\"account\", \"userName\"},\n                    null,\n                    null,\n                    null, null, null);\n\n            if (cursor.getCount() > 0) {\n                List<User> userList = new ArrayList<>();\n                while (cursor.moveToNext()) {\n                    User user = new User(cursor.getString(cursor.getColumnIndex(\"account\")), cursor.getString(cursor.getColumnIndex(\"userName\")));\n                    userList.add(user);\n                }\n                return userList;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != cursor) {\n                try {\n                    cursor.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (null != db) {\n                try {\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n}\n```","source":"_posts/Android-一个应用多个数据库.md","raw":"---\ntitle: Android 一个应用多个数据库\ndate: 2018-1-6 00:42:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n\n\n最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。\n\n以存储用户信息为例：\n\n- 先贴出使用代码：\n\n```Java\nmUserDAO = new UserDAO(this, account); // 此处的 account 就是要操作的数据库名称\nmUserDAO.insert(new User(account, userName));\n```\n\n- 以下为三个关键类\n\n```Java\n/**\n * 数据库帮助类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class DBHelper extends SQLiteOpenHelper {\n\n    private static final int DB_VERSION = 1;\n    public static final String TABLE_NAME = \"user\";\n\n    public DBHelper(Context context, String dbName) {\n        super(context, dbName, null, DB_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        String sql = \"create table if not exists \" + TABLE_NAME + \" (account text primary key , userName text)\";\n        db.execSQL(sql);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        String sql = \"drop table if exists \" + TABLE_NAME;\n        db.execSQL(sql);\n        onCreate(db);\n    }\n}\n```\n\n```Java\n/**\n * 用户实体类\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class User {\n\n    public String account; // 用户账号，假设唯一，用它作为数据库名称（dbName）\n    public String userName;\n\n    public User(String account, String userName) {\n        this.account = account;\n        this.userName = userName;\n    }\n}\n```\n\n```Java\n/**\n * 用户数据表相关操作\n *\n * @author zch\n * @since 2018-01-05\n */\npublic class UserDAO {\n\n    private DBHelper mDBHelper;\n\n    public UserDAO(Context context, String dbName) {\n        mDBHelper = new DBHelper(context, dbName);\n    }\n\n    /**\n     * 插入一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean insert(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            ContentValues values = new ContentValues();\n            values.put(\"account\", user.account);\n            values.put(\"userName\", user.userName);\n            db.insertOrThrow(DBHelper.TABLE_NAME, null, values);\n            db.setTransactionSuccessful();\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 删除一条数据\n     *\n     * @param user\n     * @return\n     */\n    public boolean delete(User user) {\n        SQLiteDatabase db = null;\n        try {\n            db = mDBHelper.getWritableDatabase();\n            db.beginTransaction();\n            db.delete(DBHelper.TABLE_NAME, \"account = ?\", new String[]{user.account});\n            db.setTransactionSuccessful();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != db) {\n                try {\n                    db.endTransaction();\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取所有数据\n     *\n     * @return\n     */\n    public List<User> getUserList() {\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n\n        try {\n            db = mDBHelper.getReadableDatabase();\n            cursor = db.query(DBHelper.TABLE_NAME,\n                    new String[]{\"account\", \"userName\"},\n                    null,\n                    null,\n                    null, null, null);\n\n            if (cursor.getCount() > 0) {\n                List<User> userList = new ArrayList<>();\n                while (cursor.moveToNext()) {\n                    User user = new User(cursor.getString(cursor.getColumnIndex(\"account\")), cursor.getString(cursor.getColumnIndex(\"userName\")));\n                    userList.add(user);\n                }\n                return userList;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (null != cursor) {\n                try {\n                    cursor.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (null != db) {\n                try {\n                    db.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n}\n```","slug":"Android-一个应用多个数据库","published":1,"updated":"2018-06-25T03:42:59.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xcs50000mgqux5bigb7r","content":"<p>最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。</p>\n<p>以存储用户信息为例：</p>\n<ul>\n<li>先贴出使用代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mUserDAO = <span class=\"keyword\">new</span> UserDAO(<span class=\"keyword\">this</span>, account); <span class=\"comment\">// 此处的 account 就是要操作的数据库名称</span></span><br><span class=\"line\">mUserDAO.insert(<span class=\"keyword\">new</span> User(account, userName));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以下为三个关键类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库帮助类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DB_VERSION = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_NAME = <span class=\"string\">\"user\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DBHelper</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, dbName, <span class=\"keyword\">null</span>, DB_VERSION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"create table if not exists \"</span> + TABLE_NAME + <span class=\"string\">\" (account text primary key , userName text)\"</span>;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"drop table if exists \"</span> + TABLE_NAME;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String account; <span class=\"comment\">// 用户账号，假设唯一，用它作为数据库名称（dbName）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String account, String userName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.account = account;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户数据表相关操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDAO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBHelper mDBHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDAO</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        mDBHelper = <span class=\"keyword\">new</span> DBHelper(context, dbName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">            values.put(<span class=\"string\">\"account\"</span>, user.account);</span><br><span class=\"line\">            values.put(<span class=\"string\">\"userName\"</span>, user.userName);</span><br><span class=\"line\">            db.insertOrThrow(DBHelper.TABLE_NAME, <span class=\"keyword\">null</span>, values);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            db.delete(DBHelper.TABLE_NAME, <span class=\"string\">\"account = ?\"</span>, <span class=\"keyword\">new</span> String[]&#123;user.account&#125;);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getReadableDatabase();</span><br><span class=\"line\">            cursor = db.query(DBHelper.TABLE_NAME,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"account\"</span>, <span class=\"string\">\"userName\"</span>&#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cursor.getCount() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">                    User user = <span class=\"keyword\">new</span> User(cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"account\"</span>)), cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"userName\"</span>)));</span><br><span class=\"line\">                    userList.add(user);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cursor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cursor.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>最近在做一个 IM 的项目，需要存储大量数据到本地数据库。考虑到同一台手机可能会被多个账号登录使用，为了提升数据库查询的效率，以分库的方式来存储不同账号的数据（使用用户账号来作为数据库名称）。</p>\n<p>以存储用户信息为例：</p>\n<ul>\n<li>先贴出使用代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mUserDAO = <span class=\"keyword\">new</span> UserDAO(<span class=\"keyword\">this</span>, account); <span class=\"comment\">// 此处的 account 就是要操作的数据库名称</span></span><br><span class=\"line\">mUserDAO.insert(<span class=\"keyword\">new</span> User(account, userName));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以下为三个关键类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库帮助类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DB_VERSION = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_NAME = <span class=\"string\">\"user\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DBHelper</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, dbName, <span class=\"keyword\">null</span>, DB_VERSION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"create table if not exists \"</span> + TABLE_NAME + <span class=\"string\">\" (account text primary key , userName text)\"</span>;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"drop table if exists \"</span> + TABLE_NAME;</span><br><span class=\"line\">        db.execSQL(sql);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String account; <span class=\"comment\">// 用户账号，假设唯一，用它作为数据库名称（dbName）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String account, String userName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.account = account;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户数据表相关操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2018-01-05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDAO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DBHelper mDBHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDAO</span><span class=\"params\">(Context context, String dbName)</span> </span>&#123;</span><br><span class=\"line\">        mDBHelper = <span class=\"keyword\">new</span> DBHelper(context, dbName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">            values.put(<span class=\"string\">\"account\"</span>, user.account);</span><br><span class=\"line\">            values.put(<span class=\"string\">\"userName\"</span>, user.userName);</span><br><span class=\"line\">            db.insertOrThrow(DBHelper.TABLE_NAME, <span class=\"keyword\">null</span>, values);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getWritableDatabase();</span><br><span class=\"line\">            db.beginTransaction();</span><br><span class=\"line\">            db.delete(DBHelper.TABLE_NAME, <span class=\"string\">\"account = ?\"</span>, <span class=\"keyword\">new</span> String[]&#123;user.account&#125;);</span><br><span class=\"line\">            db.setTransactionSuccessful();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.endTransaction();</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            db = mDBHelper.getReadableDatabase();</span><br><span class=\"line\">            cursor = db.query(DBHelper.TABLE_NAME,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"account\"</span>, <span class=\"string\">\"userName\"</span>&#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cursor.getCount() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">                    User user = <span class=\"keyword\">new</span> User(cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"account\"</span>)), cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"userName\"</span>)));</span><br><span class=\"line\">                    userList.add(user);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cursor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cursor.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != db) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    db.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Android 学习","date":"2018-04-27T13:33:00.000Z","_content":"\n**长歌行**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">佚名</font>\n\n> 青青园中葵，朝露待日晞。\n\n> 阳春布德泽，万物生光辉。\n\n> 常恐秋节至，焜黄华叶衰。\n\n> 百川东到海，何时复西归？\n\n> 少壮不努力，老大徒伤悲！\n\n<br/>\n\n> 本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .\n\n## 基础篇\n\n- ### 四大组件\n\n  - #### Activity\n\n  - #### Service\n\n  - #### BroadcastReceiver\n\n  - #### ContentProvider\n\n* ### View\n\n## 开源库\n\n- ### 网络\n\n  - #### Okhttp\n\n  - #### Retrofit\n\n- ### 图片加载\n\n  - #### Glide\n\n  - #### Fresco\n\n  - #### Picasso\n\n  - #### Glide Bitmap Pool\n\n- ### 数据库\n\n  - #### GreenDAO\n\n  - #### ORMLite\n\n- ### 依赖注入\n\n  - #### Butter Knife\n\n  - #### Dagger 2\n\n  - #### AndroidAnnotations\n\n- ### 工具库\n\n  - #### EventBus\n\n  - #### LeakCanary\n\n  - #### Secure Preference Manager\n\n  - #### Weak handler\n\n- ### 调试工具\n\n  - #### Stetho\n\n- ### 其它\n\n  - #### [RxJava](https://github.com/zhich/RxJava-Learning)\n\n\n## 架构\n\n- ### MVP\n\n- ### MVVM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android-学习.md","raw":"---\ntitle: Android 学习\ndate: 2018-04-27 21:33:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n**长歌行**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">佚名</font>\n\n> 青青园中葵，朝露待日晞。\n\n> 阳春布德泽，万物生光辉。\n\n> 常恐秋节至，焜黄华叶衰。\n\n> 百川东到海，何时复西归？\n\n> 少壮不努力，老大徒伤悲！\n\n<br/>\n\n> 本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .\n\n## 基础篇\n\n- ### 四大组件\n\n  - #### Activity\n\n  - #### Service\n\n  - #### BroadcastReceiver\n\n  - #### ContentProvider\n\n* ### View\n\n## 开源库\n\n- ### 网络\n\n  - #### Okhttp\n\n  - #### Retrofit\n\n- ### 图片加载\n\n  - #### Glide\n\n  - #### Fresco\n\n  - #### Picasso\n\n  - #### Glide Bitmap Pool\n\n- ### 数据库\n\n  - #### GreenDAO\n\n  - #### ORMLite\n\n- ### 依赖注入\n\n  - #### Butter Knife\n\n  - #### Dagger 2\n\n  - #### AndroidAnnotations\n\n- ### 工具库\n\n  - #### EventBus\n\n  - #### LeakCanary\n\n  - #### Secure Preference Manager\n\n  - #### Weak handler\n\n- ### 调试工具\n\n  - #### Stetho\n\n- ### 其它\n\n  - #### [RxJava](https://github.com/zhich/RxJava-Learning)\n\n\n## 架构\n\n- ### MVP\n\n- ### MVVM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Android-学习","published":1,"updated":"2018-07-02T02:33:12.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xcsf0002mgqus41si9er","content":"<p><strong>长歌行</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">佚名</font></p>\n<blockquote>\n<p>青青园中葵，朝露待日晞。</p>\n</blockquote>\n<blockquote>\n<p>阳春布德泽，万物生光辉。</p>\n</blockquote>\n<blockquote>\n<p>常恐秋节至，焜黄华叶衰。</p>\n</blockquote>\n<blockquote>\n<p>百川东到海，何时复西归？</p>\n</blockquote>\n<blockquote>\n<p>少壮不努力，老大徒伤悲！</p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .</p>\n</blockquote>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><ul>\n<li><h3 id=\"四大组件\"><a href=\"#四大组件\" class=\"headerlink\" title=\"四大组件\"></a>四大组件</h3><ul>\n<li><h4 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h4></li>\n<li><h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4></li>\n<li><h4 id=\"BroadcastReceiver\"><a href=\"#BroadcastReceiver\" class=\"headerlink\" title=\"BroadcastReceiver\"></a>BroadcastReceiver</h4></li>\n<li><h4 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3></li>\n</ul>\n<h2 id=\"开源库\"><a href=\"#开源库\" class=\"headerlink\" title=\"开源库\"></a>开源库</h2><ul>\n<li><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><ul>\n<li><h4 id=\"Okhttp\"><a href=\"#Okhttp\" class=\"headerlink\" title=\"Okhttp\"></a>Okhttp</h4></li>\n<li><h4 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h4></li>\n</ul>\n</li>\n<li><h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><ul>\n<li><h4 id=\"Glide\"><a href=\"#Glide\" class=\"headerlink\" title=\"Glide\"></a>Glide</h4></li>\n<li><h4 id=\"Fresco\"><a href=\"#Fresco\" class=\"headerlink\" title=\"Fresco\"></a>Fresco</h4></li>\n<li><h4 id=\"Picasso\"><a href=\"#Picasso\" class=\"headerlink\" title=\"Picasso\"></a>Picasso</h4></li>\n<li><h4 id=\"Glide-Bitmap-Pool\"><a href=\"#Glide-Bitmap-Pool\" class=\"headerlink\" title=\"Glide Bitmap Pool\"></a>Glide Bitmap Pool</h4></li>\n</ul>\n</li>\n<li><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li><h4 id=\"GreenDAO\"><a href=\"#GreenDAO\" class=\"headerlink\" title=\"GreenDAO\"></a>GreenDAO</h4></li>\n<li><h4 id=\"ORMLite\"><a href=\"#ORMLite\" class=\"headerlink\" title=\"ORMLite\"></a>ORMLite</h4></li>\n</ul>\n</li>\n<li><h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><ul>\n<li><h4 id=\"Butter-Knife\"><a href=\"#Butter-Knife\" class=\"headerlink\" title=\"Butter Knife\"></a>Butter Knife</h4></li>\n<li><h4 id=\"Dagger-2\"><a href=\"#Dagger-2\" class=\"headerlink\" title=\"Dagger 2\"></a>Dagger 2</h4></li>\n<li><h4 id=\"AndroidAnnotations\"><a href=\"#AndroidAnnotations\" class=\"headerlink\" title=\"AndroidAnnotations\"></a>AndroidAnnotations</h4></li>\n</ul>\n</li>\n<li><h3 id=\"工具库\"><a href=\"#工具库\" class=\"headerlink\" title=\"工具库\"></a>工具库</h3><ul>\n<li><h4 id=\"EventBus\"><a href=\"#EventBus\" class=\"headerlink\" title=\"EventBus\"></a>EventBus</h4></li>\n<li><h4 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h4></li>\n<li><h4 id=\"Secure-Preference-Manager\"><a href=\"#Secure-Preference-Manager\" class=\"headerlink\" title=\"Secure Preference Manager\"></a>Secure Preference Manager</h4></li>\n<li><h4 id=\"Weak-handler\"><a href=\"#Weak-handler\" class=\"headerlink\" title=\"Weak handler\"></a>Weak handler</h4></li>\n</ul>\n</li>\n<li><h3 id=\"调试工具\"><a href=\"#调试工具\" class=\"headerlink\" title=\"调试工具\"></a>调试工具</h3><ul>\n<li><h4 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h4></li>\n</ul>\n</li>\n<li><h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><h4 id=\"RxJava\"><a href=\"#RxJava\" class=\"headerlink\" title=\"RxJava\"></a><a href=\"https://github.com/zhich/RxJava-Learning\" target=\"_blank\" rel=\"noopener\">RxJava</a></h4></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><ul>\n<li><h3 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h3></li>\n<li><h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>长歌行</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">佚名</font></p>\n<blockquote>\n<p>青青园中葵，朝露待日晞。</p>\n</blockquote>\n<blockquote>\n<p>阳春布德泽，万物生光辉。</p>\n</blockquote>\n<blockquote>\n<p>常恐秋节至，焜黄华叶衰。</p>\n</blockquote>\n<blockquote>\n<p>百川东到海，何时复西归？</p>\n</blockquote>\n<blockquote>\n<p>少壮不努力，老大徒伤悲！</p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>本文主要目的是对列出的 Android 知识点进行逐一学习。学习过程中会在 Github 上对每个知识点做些笔记，通过本文可跳转过去。本文会持续进行 update .</p>\n</blockquote>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><ul>\n<li><h3 id=\"四大组件\"><a href=\"#四大组件\" class=\"headerlink\" title=\"四大组件\"></a>四大组件</h3><ul>\n<li><h4 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h4></li>\n<li><h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4></li>\n<li><h4 id=\"BroadcastReceiver\"><a href=\"#BroadcastReceiver\" class=\"headerlink\" title=\"BroadcastReceiver\"></a>BroadcastReceiver</h4></li>\n<li><h4 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3></li>\n</ul>\n<h2 id=\"开源库\"><a href=\"#开源库\" class=\"headerlink\" title=\"开源库\"></a>开源库</h2><ul>\n<li><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><ul>\n<li><h4 id=\"Okhttp\"><a href=\"#Okhttp\" class=\"headerlink\" title=\"Okhttp\"></a>Okhttp</h4></li>\n<li><h4 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h4></li>\n</ul>\n</li>\n<li><h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><ul>\n<li><h4 id=\"Glide\"><a href=\"#Glide\" class=\"headerlink\" title=\"Glide\"></a>Glide</h4></li>\n<li><h4 id=\"Fresco\"><a href=\"#Fresco\" class=\"headerlink\" title=\"Fresco\"></a>Fresco</h4></li>\n<li><h4 id=\"Picasso\"><a href=\"#Picasso\" class=\"headerlink\" title=\"Picasso\"></a>Picasso</h4></li>\n<li><h4 id=\"Glide-Bitmap-Pool\"><a href=\"#Glide-Bitmap-Pool\" class=\"headerlink\" title=\"Glide Bitmap Pool\"></a>Glide Bitmap Pool</h4></li>\n</ul>\n</li>\n<li><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li><h4 id=\"GreenDAO\"><a href=\"#GreenDAO\" class=\"headerlink\" title=\"GreenDAO\"></a>GreenDAO</h4></li>\n<li><h4 id=\"ORMLite\"><a href=\"#ORMLite\" class=\"headerlink\" title=\"ORMLite\"></a>ORMLite</h4></li>\n</ul>\n</li>\n<li><h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><ul>\n<li><h4 id=\"Butter-Knife\"><a href=\"#Butter-Knife\" class=\"headerlink\" title=\"Butter Knife\"></a>Butter Knife</h4></li>\n<li><h4 id=\"Dagger-2\"><a href=\"#Dagger-2\" class=\"headerlink\" title=\"Dagger 2\"></a>Dagger 2</h4></li>\n<li><h4 id=\"AndroidAnnotations\"><a href=\"#AndroidAnnotations\" class=\"headerlink\" title=\"AndroidAnnotations\"></a>AndroidAnnotations</h4></li>\n</ul>\n</li>\n<li><h3 id=\"工具库\"><a href=\"#工具库\" class=\"headerlink\" title=\"工具库\"></a>工具库</h3><ul>\n<li><h4 id=\"EventBus\"><a href=\"#EventBus\" class=\"headerlink\" title=\"EventBus\"></a>EventBus</h4></li>\n<li><h4 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h4></li>\n<li><h4 id=\"Secure-Preference-Manager\"><a href=\"#Secure-Preference-Manager\" class=\"headerlink\" title=\"Secure Preference Manager\"></a>Secure Preference Manager</h4></li>\n<li><h4 id=\"Weak-handler\"><a href=\"#Weak-handler\" class=\"headerlink\" title=\"Weak handler\"></a>Weak handler</h4></li>\n</ul>\n</li>\n<li><h3 id=\"调试工具\"><a href=\"#调试工具\" class=\"headerlink\" title=\"调试工具\"></a>调试工具</h3><ul>\n<li><h4 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h4></li>\n</ul>\n</li>\n<li><h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><h4 id=\"RxJava\"><a href=\"#RxJava\" class=\"headerlink\" title=\"RxJava\"></a><a href=\"https://github.com/zhich/RxJava-Learning\" target=\"_blank\" rel=\"noopener\">RxJava</a></h4></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><ul>\n<li><h3 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h3></li>\n<li><h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3></li>\n</ul>\n"},{"title":"Chrome 开发者工具调试","date":"2018-03-03T16:00:00.000Z","_content":"\n\n\n\n\n\n### Chrome 开发者工具面板简介\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/3.png)\n\n- 箭头图标\n\n  用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。\n\n- 设备图标\n\n  可以选择不同的终端设备、不同的尺寸比例进行模拟开发。\n\n- Elements\n\n  查找网页源代码 HTML 中的任一元素，手动修改任一元素的**属性**和**样式**且能实时在浏览器里面得到反馈。\n\n- Console\n\n  记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .\n\n- Sources\n\n  用于**查看**和**调试**当前页面所加载的脚本的源文件。\n\n- Network\n\n  用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。\n\n- Performance\n\n- Memory\n\n- Application\n\n  记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。\n\n- Security\n\n  判断当前网站的安全性，查看有效证书等。\n\n- Audits\n\n  对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。\n\n### Elements\n\n可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。\n\n- 双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。\n\n- 点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/4.png)\n\n- 点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。\n\n> 注意：**以上对页面上的修改并不会作用到源码上**，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。\n\n### Console\n\n#### 在控制台输出日志\n**在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中**\n\n- console.log\n\n  打印一般的基础日志信息，当要打印的基础日志太多时可使用 `console.group` 将相关的日志进行分组。\n\n- console.warn\n\n  打印带有黄色小图标的警告信息。\n\n- console.error\n\n  打印带有红色小图标的错误信息。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/5.png)\n\n- console.assert\n\n  当第一个参数为 false 时，才会打印第二个参数的值。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/6.png)\n\n**可以根据 JS 条件判断输出不同的日志信息**\n\n> 当需要换到下一行而不是回车的时候，请按 `Shift + Enter`\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/7.png)\n\n#### 与控制台交互\n\n- JS 表达式计算\n\n  可以在控制台中输入 JS 表达式，然后点击 `Enter` 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 `Tab` 键补全命令。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/8.png)\n\n- 选择元素\n\n  **$(selector)**: 列出与 selector 匹配的所有元素。\n\n  **$$(selector)**: 列出与 selector 匹配的所有元素组成了数组。\n\n  **$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 \n\n另外还有两种方法与上面类似：\n\n**document.querySelector(\"img\")**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。\n\n**document.querySelectorAll(\"img\")**：等同于 $$(selector) 。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/9.png)\n\n> 点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。\n\n### Sources\n\n#### 格式化代码\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/10.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/11.png)\n\n以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 `{}` 即可将源代码格式化。\n\n#### Sinppets 代码片段\n\n我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。\n\n以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 `Save` 保存代码。在 sum.js 文件上右键选择 `Run` 即可运行代码，代码的运行结果会在底部的 Console 输出。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/12.png)\n\n此外，**如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。**\n\n比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/13.png)\n\n#### 断点调试\n\n#### 在代码中打断点\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/18.png)\n\n在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。\n\n> 在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。\n\n#### 快速进入调试的方法\n\n当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 `F11` 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 `F10` 或者点击右上角的第二个按钮即可直接进入此方法的断点处。\n\n##### 调试的功能区域介绍\n\n调试的功能区域在调试页面的**右侧**。下图为在某方法处打了一个断点。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/19.png)\n\n- watch\n\n  可以用来实时监视变量的值。\n\n- Call Stack\n\n  断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。\n\n  如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 **Restart Frame** ，那么断点就会跳转到该方法的开头处重新执行。 \n\n- Scope\n\n  可以查看此时局部变量和全局变量的值。\n \n- Breakpoints\n\n  展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。\n\n- XHR Breakpoints\n\n  点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。\n\n- DOM Breakpoints\n\n  当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。\n\n- Event listener Breakpoints \n\n  此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。\n\n\n\n\n\n\n\n\n参考资料：\n\n[Chrome开发者工具详解(1)-Elements、Console、Sources面板](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n[超完整的 Chrome 浏览器客户端调试大全](http://web.jobbole.com/89344/)","source":"_posts/Chrome-开发者工具调试.md","raw":"---\ntitle: Chrome 开发者工具调试\ndate: 2018-3-4\ncategories: \"工具\"\ntags:\n     - Chrome\n     - 工具\n     - 调试\n---\n\n\n\n\n\n\n### Chrome 开发者工具面板简介\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/3.png)\n\n- 箭头图标\n\n  用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。\n\n- 设备图标\n\n  可以选择不同的终端设备、不同的尺寸比例进行模拟开发。\n\n- Elements\n\n  查找网页源代码 HTML 中的任一元素，手动修改任一元素的**属性**和**样式**且能实时在浏览器里面得到反馈。\n\n- Console\n\n  记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .\n\n- Sources\n\n  用于**查看**和**调试**当前页面所加载的脚本的源文件。\n\n- Network\n\n  用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。\n\n- Performance\n\n- Memory\n\n- Application\n\n  记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。\n\n- Security\n\n  判断当前网站的安全性，查看有效证书等。\n\n- Audits\n\n  对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。\n\n### Elements\n\n可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。\n\n- 双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。\n\n- 点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/4.png)\n\n- 点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。\n\n> 注意：**以上对页面上的修改并不会作用到源码上**，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。\n\n### Console\n\n#### 在控制台输出日志\n**在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中**\n\n- console.log\n\n  打印一般的基础日志信息，当要打印的基础日志太多时可使用 `console.group` 将相关的日志进行分组。\n\n- console.warn\n\n  打印带有黄色小图标的警告信息。\n\n- console.error\n\n  打印带有红色小图标的错误信息。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/5.png)\n\n- console.assert\n\n  当第一个参数为 false 时，才会打印第二个参数的值。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/6.png)\n\n**可以根据 JS 条件判断输出不同的日志信息**\n\n> 当需要换到下一行而不是回车的时候，请按 `Shift + Enter`\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/7.png)\n\n#### 与控制台交互\n\n- JS 表达式计算\n\n  可以在控制台中输入 JS 表达式，然后点击 `Enter` 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 `Tab` 键补全命令。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/8.png)\n\n- 选择元素\n\n  **$(selector)**: 列出与 selector 匹配的所有元素。\n\n  **$$(selector)**: 列出与 selector 匹配的所有元素组成了数组。\n\n  **$x(path)**：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 \n\n另外还有两种方法与上面类似：\n\n**document.querySelector(\"img\")**：会返回 DOM 中匹配的第一个元素（只返回一个元素）。\n\n**document.querySelectorAll(\"img\")**：等同于 $$(selector) 。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/9.png)\n\n> 点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。\n\n### Sources\n\n#### 格式化代码\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/10.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/11.png)\n\n以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 `{}` 即可将源代码格式化。\n\n#### Sinppets 代码片段\n\n我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。\n\n以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 `Save` 保存代码。在 sum.js 文件上右键选择 `Run` 即可运行代码，代码的运行结果会在底部的 Console 输出。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/12.png)\n\n此外，**如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。**\n\n比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/13.png)\n\n#### 断点调试\n\n#### 在代码中打断点\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/18.png)\n\n在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。\n\n> 在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。\n\n#### 快速进入调试的方法\n\n当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 `F11` 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 `F10` 或者点击右上角的第二个按钮即可直接进入此方法的断点处。\n\n##### 调试的功能区域介绍\n\n调试的功能区域在调试页面的**右侧**。下图为在某方法处打了一个断点。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/19.png)\n\n- watch\n\n  可以用来实时监视变量的值。\n\n- Call Stack\n\n  断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。\n\n  如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 **Restart Frame** ，那么断点就会跳转到该方法的开头处重新执行。 \n\n- Scope\n\n  可以查看此时局部变量和全局变量的值。\n \n- Breakpoints\n\n  展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。\n\n- XHR Breakpoints\n\n  点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。\n\n- DOM Breakpoints\n\n  当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。\n\n- Event listener Breakpoints \n\n  此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。\n\n\n\n\n\n\n\n\n参考资料：\n\n[Chrome开发者工具详解(1)-Elements、Console、Sources面板](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n[超完整的 Chrome 浏览器客户端调试大全](http://web.jobbole.com/89344/)","slug":"Chrome-开发者工具调试","published":1,"updated":"2018-07-24T02:28:20.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xcsl0005mgqukanjnwmx","content":"<h3 id=\"Chrome-开发者工具面板简介\"><a href=\"#Chrome-开发者工具面板简介\" class=\"headerlink\" title=\"Chrome 开发者工具面板简介\"></a>Chrome 开发者工具面板简介</h3><p><img src=\"http://pcckwdbix.bkt.clouddn.com/3.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>箭头图标</p>\n<p>用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。</p>\n</li>\n<li><p>设备图标</p>\n<p>可以选择不同的终端设备、不同的尺寸比例进行模拟开发。</p>\n</li>\n<li><p>Elements</p>\n<p>查找网页源代码 HTML 中的任一元素，手动修改任一元素的<strong>属性</strong>和<strong>样式</strong>且能实时在浏览器里面得到反馈。</p>\n</li>\n<li><p>Console</p>\n<p>记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .</p>\n</li>\n<li><p>Sources</p>\n<p>用于<strong>查看</strong>和<strong>调试</strong>当前页面所加载的脚本的源文件。</p>\n</li>\n<li><p>Network</p>\n<p>用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。</p>\n</li>\n<li><p>Performance</p>\n</li>\n<li><p>Memory</p>\n</li>\n<li><p>Application</p>\n<p>记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p>\n</li>\n<li><p>Security</p>\n<p>判断当前网站的安全性，查看有效证书等。</p>\n</li>\n<li><p>Audits</p>\n<p>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。</p>\n</li>\n</ul>\n<h3 id=\"Elements\"><a href=\"#Elements\" class=\"headerlink\" title=\"Elements\"></a>Elements</h3><p>可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。</p>\n<ul>\n<li><p>双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。</p>\n</li>\n<li><p>点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/4.png\" alt=\"Mou icon\"></p>\n<ul>\n<li>点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。</li>\n</ul>\n<blockquote>\n<p>注意：<strong>以上对页面上的修改并不会作用到源码上</strong>，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。</p>\n</blockquote>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><h4 id=\"在控制台输出日志\"><a href=\"#在控制台输出日志\" class=\"headerlink\" title=\"在控制台输出日志\"></a>在控制台输出日志</h4><p><strong>在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中</strong></p>\n<ul>\n<li><p>console.log</p>\n<p>打印一般的基础日志信息，当要打印的基础日志太多时可使用 <code>console.group</code> 将相关的日志进行分组。</p>\n</li>\n<li><p>console.warn</p>\n<p>打印带有黄色小图标的警告信息。</p>\n</li>\n<li><p>console.error</p>\n<p>打印带有红色小图标的错误信息。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/5.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>console.assert</p>\n<p>当第一个参数为 false 时，才会打印第二个参数的值。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/6.png\" alt=\"Mou icon\"></p>\n<p><strong>可以根据 JS 条件判断输出不同的日志信息</strong></p>\n<blockquote>\n<p>当需要换到下一行而不是回车的时候，请按 <code>Shift + Enter</code></p>\n</blockquote>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/7.png\" alt=\"Mou icon\"></p>\n<h4 id=\"与控制台交互\"><a href=\"#与控制台交互\" class=\"headerlink\" title=\"与控制台交互\"></a>与控制台交互</h4><ul>\n<li><p>JS 表达式计算</p>\n<p>可以在控制台中输入 JS 表达式，然后点击 <code>Enter</code> 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 <code>Tab</code> 键补全命令。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/8.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>选择元素</p>\n<p><strong>$(selector)</strong>: 列出与 selector 匹配的所有元素。</p>\n<p><strong>$$(selector)</strong>: 列出与 selector 匹配的所有元素组成了数组。</p>\n<p><strong>$x(path)</strong>：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 </p>\n</li>\n</ul>\n<p>另外还有两种方法与上面类似：</p>\n<p><strong>document.querySelector(“img”)</strong>：会返回 DOM 中匹配的第一个元素（只返回一个元素）。</p>\n<p><strong>document.querySelectorAll(“img”)</strong>：等同于 $$(selector) 。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/9.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。</p>\n</blockquote>\n<h3 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h3><h4 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/10.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/11.png\" alt=\"Mou icon\"></p>\n<p>以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 <code>{}</code> 即可将源代码格式化。</p>\n<h4 id=\"Sinppets-代码片段\"><a href=\"#Sinppets-代码片段\" class=\"headerlink\" title=\"Sinppets 代码片段\"></a>Sinppets 代码片段</h4><p>我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。</p>\n<p>以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 <code>Save</code> 保存代码。在 sum.js 文件上右键选择 <code>Run</code> 即可运行代码，代码的运行结果会在底部的 Console 输出。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/12.png\" alt=\"Mou icon\"></p>\n<p>此外，<strong>如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。</strong></p>\n<p>比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/13.png\" alt=\"Mou icon\"></p>\n<h4 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h4><h4 id=\"在代码中打断点\"><a href=\"#在代码中打断点\" class=\"headerlink\" title=\"在代码中打断点\"></a>在代码中打断点</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/18.png\" alt=\"Mou icon\"></p>\n<p>在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。</p>\n<blockquote>\n<p>在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。</p>\n</blockquote>\n<h4 id=\"快速进入调试的方法\"><a href=\"#快速进入调试的方法\" class=\"headerlink\" title=\"快速进入调试的方法\"></a>快速进入调试的方法</h4><p>当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 <code>F11</code> 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 <code>F10</code> 或者点击右上角的第二个按钮即可直接进入此方法的断点处。</p>\n<h5 id=\"调试的功能区域介绍\"><a href=\"#调试的功能区域介绍\" class=\"headerlink\" title=\"调试的功能区域介绍\"></a>调试的功能区域介绍</h5><p>调试的功能区域在调试页面的<strong>右侧</strong>。下图为在某方法处打了一个断点。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/19.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>watch</p>\n<p>可以用来实时监视变量的值。</p>\n</li>\n<li><p>Call Stack</p>\n<p>断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。</p>\n<p>如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 <strong>Restart Frame</strong> ，那么断点就会跳转到该方法的开头处重新执行。 </p>\n</li>\n<li><p>Scope</p>\n<p>可以查看此时局部变量和全局变量的值。</p>\n</li>\n<li><p>Breakpoints</p>\n<p>展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。</p>\n</li>\n<li><p>XHR Breakpoints</p>\n<p>点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。</p>\n</li>\n<li><p>DOM Breakpoints</p>\n<p>当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。</p>\n</li>\n<li><p>Event listener Breakpoints </p>\n<p>此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。</p>\n</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具详解(1)-Elements、Console、Sources面板</a></p>\n<p><a href=\"http://web.jobbole.com/89344/\" target=\"_blank\" rel=\"noopener\">超完整的 Chrome 浏览器客户端调试大全</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Chrome-开发者工具面板简介\"><a href=\"#Chrome-开发者工具面板简介\" class=\"headerlink\" title=\"Chrome 开发者工具面板简介\"></a>Chrome 开发者工具面板简介</h3><p><img src=\"http://pcckwdbix.bkt.clouddn.com/3.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>箭头图标</p>\n<p>用于在页面选择一个元素来审查和查看它的相关信息，当我们在 Elements 标签页页面下点击某个 DOM 元素时，箭头图标会变成选择状态。</p>\n</li>\n<li><p>设备图标</p>\n<p>可以选择不同的终端设备、不同的尺寸比例进行模拟开发。</p>\n</li>\n<li><p>Elements</p>\n<p>查找网页源代码 HTML 中的任一元素，手动修改任一元素的<strong>属性</strong>和<strong>样式</strong>且能实时在浏览器里面得到反馈。</p>\n</li>\n<li><p>Console</p>\n<p>记录开发者开发过程中的日志信息，且可以作为与 JS 进行交互的命令行 Shell .</p>\n</li>\n<li><p>Sources</p>\n<p>用于<strong>查看</strong>和<strong>调试</strong>当前页面所加载的脚本的源文件。</p>\n</li>\n<li><p>Network</p>\n<p>用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。</p>\n</li>\n<li><p>Performance</p>\n</li>\n<li><p>Memory</p>\n</li>\n<li><p>Application</p>\n<p>记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p>\n</li>\n<li><p>Security</p>\n<p>判断当前网站的安全性，查看有效证书等。</p>\n</li>\n<li><p>Audits</p>\n<p>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的 CSS 文件等。</p>\n</li>\n</ul>\n<h3 id=\"Elements\"><a href=\"#Elements\" class=\"headerlink\" title=\"Elements\"></a>Elements</h3><p>可以查看、修改页面上的元素，包括 DOM 标签、CSS 样式，还有相关盒模型的图形信息。</p>\n<ul>\n<li><p>双击 DOM 树视图里面的节点，可以实时编辑标签属性，修改的效果会立刻反应在浏览器里面。</p>\n</li>\n<li><p>点击右侧的 Styles 标签页，可以实时修改 CSS 的属性值，所有的 Name 和 Value 值都是可以编辑的。在每个属性后面单击可以添加新的样式。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/4.png\" alt=\"Mou icon\"></p>\n<ul>\n<li>点击 Computed 标签页，可以编辑左侧选中的盒子模型参数，所有值都是可以修改的。点击不同的位置（top、bottom、left、right）就可以修改元素的 padding、border、margin 属性值。</li>\n</ul>\n<blockquote>\n<p>注意：<strong>以上对页面上的修改并不会作用到源码上</strong>，它仅用于调试，一刷新这些修改就会复原。我们可以一次性在浏览器中做了修改后，再把改动复制到源码中。</p>\n</blockquote>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><h4 id=\"在控制台输出日志\"><a href=\"#在控制台输出日志\" class=\"headerlink\" title=\"在控制台输出日志\"></a>在控制台输出日志</h4><p><strong>在 JS 代码或者命令行中，可通过以下 API 将日志信息打印到控制台中</strong></p>\n<ul>\n<li><p>console.log</p>\n<p>打印一般的基础日志信息，当要打印的基础日志太多时可使用 <code>console.group</code> 将相关的日志进行分组。</p>\n</li>\n<li><p>console.warn</p>\n<p>打印带有黄色小图标的警告信息。</p>\n</li>\n<li><p>console.error</p>\n<p>打印带有红色小图标的错误信息。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/5.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>console.assert</p>\n<p>当第一个参数为 false 时，才会打印第二个参数的值。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/6.png\" alt=\"Mou icon\"></p>\n<p><strong>可以根据 JS 条件判断输出不同的日志信息</strong></p>\n<blockquote>\n<p>当需要换到下一行而不是回车的时候，请按 <code>Shift + Enter</code></p>\n</blockquote>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/7.png\" alt=\"Mou icon\"></p>\n<h4 id=\"与控制台交互\"><a href=\"#与控制台交互\" class=\"headerlink\" title=\"与控制台交互\"></a>与控制台交互</h4><ul>\n<li><p>JS 表达式计算</p>\n<p>可以在控制台中输入 JS 表达式，然后点击 <code>Enter</code> 键得出结果。当在控制台输入命令时，会弹出相应的智能提示框，可按 <code>Tab</code> 键补全命令。</p>\n</li>\n</ul>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/8.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>选择元素</p>\n<p><strong>$(selector)</strong>: 列出与 selector 匹配的所有元素。</p>\n<p><strong>$$(selector)</strong>: 列出与 selector 匹配的所有元素组成了数组。</p>\n<p><strong>$x(path)</strong>：返回的是一个数组，数组中即为与 xpath 匹配的所有元素。 </p>\n</li>\n</ul>\n<p>另外还有两种方法与上面类似：</p>\n<p><strong>document.querySelector(“img”)</strong>：会返回 DOM 中匹配的第一个元素（只返回一个元素）。</p>\n<p><strong>document.querySelectorAll(“img”)</strong>：等同于 $$(selector) 。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/9.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>点击返回的每个元素，则会定位到页面中的 img 元素及 html 中的具体位置。</p>\n</blockquote>\n<h3 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h3><h4 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/10.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/11.png\" alt=\"Mou icon\"></p>\n<p>以上图片分别为源代码格式化前和格式化后的状态。通过点击源代码底部的 <code>{}</code> 即可将源代码格式化。</p>\n<h4 id=\"Sinppets-代码片段\"><a href=\"#Sinppets-代码片段\" class=\"headerlink\" title=\"Sinppets 代码片段\"></a>Sinppets 代码片段</h4><p>我们可以在 Sources 标签页左侧的 Sinppets 按钮中创建代码片段用于测试。</p>\n<p>以下创建一个 sum.js 的代码片段。在代码区内写完代码后，可以格式化、打断点，右键选择 <code>Save</code> 保存代码。在 sum.js 文件上右键选择 <code>Run</code> 即可运行代码，代码的运行结果会在底部的 Console 输出。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/12.png\" alt=\"Mou icon\"></p>\n<p>此外，<strong>如果是在你自己的项目环境内，Sinppets 代码片段可执行项目内的方法。</strong></p>\n<p>比如，可以新建一个 app.js 代码片段，用于调用我们项目环境中 common.js 的某些方法或字段。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/13.png\" alt=\"Mou icon\"></p>\n<h4 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h4><h4 id=\"在代码中打断点\"><a href=\"#在代码中打断点\" class=\"headerlink\" title=\"在代码中打断点\"></a>在代码中打断点</h4><p><img src=\"http://pcckwdbix.bkt.clouddn.com/18.png\" alt=\"Mou icon\"></p>\n<p>在源代码左侧处点击即可打上一个断点。 当代码运行到断点处，右侧功能区域会展示出调试的相关信息。右侧最上面一排分别是：暂停/继续、单步执行、单步跳入此执行块、单步跳出此执行块、禁用/启用所有断点。</p>\n<blockquote>\n<p>在调试过程中，把鼠标停留在字段上即可实时看到该字段的值。</p>\n</blockquote>\n<h4 id=\"快速进入调试的方法\"><a href=\"#快速进入调试的方法\" class=\"headerlink\" title=\"快速进入调试的方法\"></a>快速进入调试的方法</h4><p>当我们的代码执行到某个程序块方法处，可能你并没有在该方法上设置相关的断点，此时你可以 <code>F11</code> 进入该方法中，但是我们的项目往往都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个方法内，此时将鼠标放在此方法上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个方法，然后临时打上断点，按 <code>F10</code> 或者点击右上角的第二个按钮即可直接进入此方法的断点处。</p>\n<h5 id=\"调试的功能区域介绍\"><a href=\"#调试的功能区域介绍\" class=\"headerlink\" title=\"调试的功能区域介绍\"></a>调试的功能区域介绍</h5><p>调试的功能区域在调试页面的<strong>右侧</strong>。下图为在某方法处打了一个断点。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/19.png\" alt=\"Mou icon\"></p>\n<ul>\n<li><p>watch</p>\n<p>可以用来实时监视变量的值。</p>\n</li>\n<li><p>Call Stack</p>\n<p>断点执行到程序块停下来后，Call Stack 会显示断点所在处的方法调用栈。</p>\n<p>如果想重新从 Call Stack 调用栈中调用某个方法，可以在 Call Stack 调用栈中的该方法处右键点击 <strong>Restart Frame</strong> ，那么断点就会跳转到该方法的开头处重新执行。 </p>\n</li>\n<li><p>Scope</p>\n<p>可以查看此时局部变量和全局变量的值。</p>\n</li>\n<li><p>Breakpoints</p>\n<p>展示当前所有 js 断点，通过点击按钮可以去掉或加上断点，点击下方的代码表达式可跳转到该断点的程序代码处。</p>\n</li>\n<li><p>XHR Breakpoints</p>\n<p>点击右侧 + 号，可以添加请求的 URL ，当 XHR 调用触发时就会在 request.send() 处中断。</p>\n</li>\n<li><p>DOM Breakpoints</p>\n<p>当给 DOM 元素设置断点（来查看元素的变化情况）时，该 DOM 断点就会出现在 DOM Breakpoints 中。</p>\n</li>\n<li><p>Event listener Breakpoints </p>\n<p>此处列出了各种可能的事件类型。勾选对应的事件类型，当触发该事件类型的 js 代码时就会自动中断。</p>\n</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具详解(1)-Elements、Console、Sources面板</a></p>\n<p><a href=\"http://web.jobbole.com/89344/\" target=\"_blank\" rel=\"noopener\">超完整的 Chrome 浏览器客户端调试大全</a></p>\n"},{"title":"Java 一个方法返回多个整型值","date":"2018-06-23T04:51:00.000Z","_content":"\n\n\n### 前言\n\n在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        return 0;\n    }\n```\n\ngetItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？\n\n### 场景\n\n当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        return 0;\n    }\n```\n\n### 解决方法\n\n一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        int result = (state & 0x7fff) << 16;\n        result |= (type & 0x7fff);\n\n        return result;\n    }\n```\n\n在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .\n\n```Java\n   @Override\n    public AbstractChatHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        ViewHolder viewHolder;\n\n        int type = viewType & 0x7fff;\n        int state = (viewType >> 16) & 0x7fff;\n\n        // 根据 state 和 type 创建各种 ViewHolder ......\n\n        // 省略其它代码 ......\n\n        return viewHolder;\n    }\n```\n\n### 注意点\n\n- state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位\n\n","source":"_posts/Java-一个方法返回多个整型值.md","raw":"---\ntitle: Java 一个方法返回多个整型值\ndate: 2018-6-23 12:51:00\ncategories: \"二进制\"\ntags:\n     - Java\n     - Android\n     - 二进制\n---\n\n\n\n### 前言\n\n在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        return 0;\n    }\n```\n\ngetItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？\n\n### 场景\n\n当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        return 0;\n    }\n```\n\n### 解决方法\n\n一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值\n\n```Java\n    @Override\n    public int getItemViewType(int i) {\n        int state = mMessageList.get(i).state;\n        int type = mMessageList.get(i).type;\n\n        int result = (state & 0x7fff) << 16;\n        result |= (type & 0x7fff);\n\n        return result;\n    }\n```\n\n在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .\n\n```Java\n   @Override\n    public AbstractChatHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        ViewHolder viewHolder;\n\n        int type = viewType & 0x7fff;\n        int state = (viewType >> 16) & 0x7fff;\n\n        // 根据 state 和 type 创建各种 ViewHolder ......\n\n        // 省略其它代码 ......\n\n        return viewHolder;\n    }\n```\n\n### 注意点\n\n- state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位\n\n","slug":"Java-一个方法返回多个整型值","published":1,"updated":"2018-06-25T03:42:59.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xcso0006mgquby7ig6q1","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = (state &amp; <span class=\"number\">0x7fff</span>) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    result |= (type &amp; <span class=\"number\">0x7fff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> AbstractChatHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">     ViewHolder viewHolder;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> type = viewType &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> state = (viewType &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 根据 state 和 type 创建各种 ViewHolder ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 省略其它代码 ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> viewHolder;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 开发中会经常用到 RecyclerView , 当 RecyclerView 的 item 类型有多种时，我们需要重写 getItemViewType 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getItemViewType 方法指定返回一个 int 值，如果我们需要返回多个值怎么办？</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>当我们做 IM 的聊天消息展示时，可能会有 state 代表消息状态（接收的已读消息、接收的未读消息、发送成功的消息、发送失败的消息），type 代表消息类型（文字、图片、视频、音频）。此时，我们可能需要 getItemViewType 返回 state 和 type 两个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>一个 int 类型有 32 位，我们用左边的高 16 位存储 state 的值，用右边的低 16 位存储 type 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state = mMessageList.get(i).state;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type = mMessageList.get(i).type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = (state &amp; <span class=\"number\">0x7fff</span>) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    result |= (type &amp; <span class=\"number\">0x7fff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 onCreateViewHolder 中通过 viewType 解析出 state 和 type .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> AbstractChatHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">     ViewHolder viewHolder;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> type = viewType &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> state = (viewType &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 根据 state 和 type 创建各种 ViewHolder ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 省略其它代码 ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> viewHolder;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>state 和 type 的取值范围都是 [0,32767]，即最小值为 0，最大值为 32767（十六进制的 0x7fff），因为它们实际各占 15 位</li>\n</ul>\n"},{"title":"Java 子类和父类相关成员执行顺序","date":"2018-06-02T06:20:00.000Z","_content":"\n\n> 先说结论，再通过运行程序去验证。\n\n\n## 结论\n\n- new 一个子类的初始化顺序\n\n  父类静态成员变量、静态代码块 --> 子类静态成员变量、静态代码块 --> 父类成员变量、构造代码块 --> 父类无参构造方法 --> 子类成员变量、   构造代码块 --> 子类无参构造方法\n\n- 多次创建对象，静态成员变量和静态代码块都只执行一次\n\n- 除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();\n\n## 程序运行\n\n**打印类（用于打印结果）**\n\n```Java\nclass Test {\n\n\tpublic Test(String str) {\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n**父类**\n\n```Java\nclass Parent {\n\n\tprivate static Test t10 = new Test(\"父类静态成员变量 0\");\n\tprivate Test t11 = new Test(\"父类成员变量  0\");\n\n\t{\n\t\tTest t14 = new Test(\"父类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t12 = new Test(\"父类静态代码块 0\");\n\t}\n\n\tprivate Test t16 = new Test(\"父类成员变量 1\");\n\n\t{\n\t\tTest t15 = new Test(\"父类构造代码块 1\");\n\t}\n\n\tprivate static Test t13 = new Test(\"父类静态成员变量 1\");\n\n\tpublic Parent() {\n\t\tSystem.out.println(\"父类无参构造方法\");\n\t}\n\n\tpublic Parent(int i) {\n\t\tSystem.out.println(\"父类有参构造方法 0\");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"父类成员方法\");\n\t}\n\n\tpublic static void g() {\n\t\tSystem.out.println(\"父类静态成员方法\");\n\t}\n}\n```\n\n**子类**\n\n```Java\nclass Son extends Parent {\n\n\tprivate static Test t0 = new Test(\"子类静态成员变量 0\");\n\tprivate Test t1 = new Test(\"子类成员变量 0\");\n\n\t{\n\t\tTest t4 = new Test(\"子类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t2 = new Test(\"子类静态代码块 0\");\n\t}\n\n\tprivate Test t6 = new Test(\"子类成员变量 1\");\n\n\t{\n\t\tTest t5 = new Test(\"子类构造代码块 1\");\n\t}\n\n\tprivate static Test t3 = new Test(\"子类静态成员变量 1\");\n\n\tpublic Son() {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\n\tpublic Son(int i) {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类有参构造方法 0\");\n\t}\n\n\tpublic Son(int i, int j) {\n\t\t// super(); 不会调用了，因为显式调用了 super(1)\n\t\tsuper(1);\n\t\tSystem.out.println(\"子类有参构造方法 1\");\n\t}\n\n\tpublic void ff() {\n\t\tSystem.out.println(\"子类成员方法\");\n\t}\n\n\tpublic static void gg() {\n\t\tSystem.out.println(\"子类静态成员方法\");\n\t}\n}\n```\n\n**调用类**\n\n```Java\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1);\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1, 2);\n\t}\n}\n```\n\n\n执行了调用类后，打印结果如下：\n\n```Java\n父类静态成员变量 0\n父类静态代码块 0\n父类静态成员变量 1\n子类静态成员变量 0\n子类静态代码块 0\n子类静态成员变量 1\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 0\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类有参构造方法 0\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 1\n```\n\n## 扩展说明\n\n[引自此处](https://blog.csdn.net/u010687392/article/details/42388585)\n\n- 子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。\n\n- new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。\n所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。","source":"_posts/Java-子类和父类相关成员执行顺序.md","raw":"---\ntitle: Java 子类和父类相关成员执行顺序\ndate: 2018-6-2 14:20:00\ncategories: \"Java\"\ntags:\n     - Java\n---\n\n\n> 先说结论，再通过运行程序去验证。\n\n\n## 结论\n\n- new 一个子类的初始化顺序\n\n  父类静态成员变量、静态代码块 --> 子类静态成员变量、静态代码块 --> 父类成员变量、构造代码块 --> 父类无参构造方法 --> 子类成员变量、   构造代码块 --> 子类无参构造方法\n\n- 多次创建对象，静态成员变量和静态代码块都只执行一次\n\n- 除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();\n\n## 程序运行\n\n**打印类（用于打印结果）**\n\n```Java\nclass Test {\n\n\tpublic Test(String str) {\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n**父类**\n\n```Java\nclass Parent {\n\n\tprivate static Test t10 = new Test(\"父类静态成员变量 0\");\n\tprivate Test t11 = new Test(\"父类成员变量  0\");\n\n\t{\n\t\tTest t14 = new Test(\"父类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t12 = new Test(\"父类静态代码块 0\");\n\t}\n\n\tprivate Test t16 = new Test(\"父类成员变量 1\");\n\n\t{\n\t\tTest t15 = new Test(\"父类构造代码块 1\");\n\t}\n\n\tprivate static Test t13 = new Test(\"父类静态成员变量 1\");\n\n\tpublic Parent() {\n\t\tSystem.out.println(\"父类无参构造方法\");\n\t}\n\n\tpublic Parent(int i) {\n\t\tSystem.out.println(\"父类有参构造方法 0\");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"父类成员方法\");\n\t}\n\n\tpublic static void g() {\n\t\tSystem.out.println(\"父类静态成员方法\");\n\t}\n}\n```\n\n**子类**\n\n```Java\nclass Son extends Parent {\n\n\tprivate static Test t0 = new Test(\"子类静态成员变量 0\");\n\tprivate Test t1 = new Test(\"子类成员变量 0\");\n\n\t{\n\t\tTest t4 = new Test(\"子类构造代码块 0\");\n\t}\n\n\tstatic {\n\t\tTest t2 = new Test(\"子类静态代码块 0\");\n\t}\n\n\tprivate Test t6 = new Test(\"子类成员变量 1\");\n\n\t{\n\t\tTest t5 = new Test(\"子类构造代码块 1\");\n\t}\n\n\tprivate static Test t3 = new Test(\"子类静态成员变量 1\");\n\n\tpublic Son() {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\n\tpublic Son(int i) {\n\t\t// super(); 默认调用\n\t\tSystem.out.println(\"子类有参构造方法 0\");\n\t}\n\n\tpublic Son(int i, int j) {\n\t\t// super(); 不会调用了，因为显式调用了 super(1)\n\t\tsuper(1);\n\t\tSystem.out.println(\"子类有参构造方法 1\");\n\t}\n\n\tpublic void ff() {\n\t\tSystem.out.println(\"子类成员方法\");\n\t}\n\n\tpublic static void gg() {\n\t\tSystem.out.println(\"子类静态成员方法\");\n\t}\n}\n```\n\n**调用类**\n\n```Java\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son();\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1);\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tnew Son(1, 2);\n\t}\n}\n```\n\n\n执行了调用类后，打印结果如下：\n\n```Java\n父类静态成员变量 0\n父类静态代码块 0\n父类静态成员变量 1\n子类静态成员变量 0\n子类静态代码块 0\n子类静态成员变量 1\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类无参构造方法\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类无参构造方法\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 0\n------------------------------------------------\n父类成员变量  0\n父类构造代码块 0\n父类成员变量 1\n父类构造代码块 1\n父类有参构造方法 0\n子类成员变量 0\n子类构造代码块 0\n子类成员变量 1\n子类构造代码块 1\n子类有参构造方法 1\n```\n\n## 扩展说明\n\n[引自此处](https://blog.csdn.net/u010687392/article/details/42388585)\n\n- 子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。\n\n- new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。\n所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。","slug":"Java-子类和父类相关成员执行顺序","published":1,"updated":"2018-06-25T03:42:59.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xcsq0007mgqu5oo447lu","content":"<blockquote>\n<p>先说结论，再通过运行程序去验证。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><p>new 一个子类的初始化顺序</p>\n<p>父类静态成员变量、静态代码块 –&gt; 子类静态成员变量、静态代码块 –&gt; 父类成员变量、构造代码块 –&gt; 父类无参构造方法 –&gt; 子类成员变量、   构造代码块 –&gt; 子类无参构造方法</p>\n</li>\n<li><p>多次创建对象，静态成员变量和静态代码块都只执行一次</p>\n</li>\n<li><p>除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();</p>\n</li>\n</ul>\n<h2 id=\"程序运行\"><a href=\"#程序运行\" class=\"headerlink\" title=\"程序运行\"></a>程序运行</h2><p><strong>打印类（用于打印结果）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>父类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t10 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t11 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量  0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t14 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t12 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t16 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t15 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t13 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>子类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t0 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t1 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t4 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t2 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t6 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t5 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t3 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 不会调用了，因为显式调用了 super(1)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ff</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行了调用类后，打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h2><p><a href=\"https://blog.csdn.net/u010687392/article/details/42388585\" target=\"_blank\" rel=\"noopener\">引自此处</a></p>\n<ul>\n<li><p>子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。</p>\n</li>\n<li><p>new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。<br>所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>先说结论，再通过运行程序去验证。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><p>new 一个子类的初始化顺序</p>\n<p>父类静态成员变量、静态代码块 –&gt; 子类静态成员变量、静态代码块 –&gt; 父类成员变量、构造代码块 –&gt; 父类无参构造方法 –&gt; 子类成员变量、   构造代码块 –&gt; 子类无参构造方法</p>\n</li>\n<li><p>多次创建对象，静态成员变量和静态代码块都只执行一次</p>\n</li>\n<li><p>除非在子类的构造方法中显示调用父类的构造方法，否则它们默认会先去访问父类的无参构造方法，即在构造方法中的第一行默认调用 super();</p>\n</li>\n</ul>\n<h2 id=\"程序运行\"><a href=\"#程序运行\" class=\"headerlink\" title=\"程序运行\"></a>程序运行</h2><p><strong>打印类（用于打印结果）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>父类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t10 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t11 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量  0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t14 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t12 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t16 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t15 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t13 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"父类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"父类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>子类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t0 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t1 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t4 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tTest t2 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态代码块 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Test t6 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTest t5 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类构造代码块 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test t3 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"子类静态成员变量 1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类无参构造方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 默认调用</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 0\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// super(); 不会调用了，因为显式调用了 super(1)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类有参构造方法 1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ff</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子类静态成员方法\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"------------------------------------------------\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Son(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行了调用类后，打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类静态成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类无参构造方法</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类无参构造方法</span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">父类成员变量  <span class=\"number\">0</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">父类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">父类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">父类有参构造方法 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">0</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">0</span></span><br><span class=\"line\">子类成员变量 <span class=\"number\">1</span></span><br><span class=\"line\">子类构造代码块 <span class=\"number\">1</span></span><br><span class=\"line\">子类有参构造方法 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h2><p><a href=\"https://blog.csdn.net/u010687392/article/details/42388585\" target=\"_blank\" rel=\"noopener\">引自此处</a></p>\n<ul>\n<li><p>子类中所有的构造方法默认都会先去调用父类中的无参构造方法。因为子类继承了父类的数据，可能还会使用到父类的数据，因此，子类初始化前需先完成父类数据的初始化。父类的初始化是通过调用方法区中的构造方法进行的，不会创建父类对象，对象需要通过 new 关键字创建。</p>\n</li>\n<li><p>new 关键字有两个作用。①、分配内存，创建对象；②、调用构造方法，完成对象的初始化工作。完成这两步后，才算创建了一个完整的 Java 对象。<br>所以 new 子类的时候，调用父类的构造方法不是创建了一个父类对象，而是只对它的数据进行初始化，那么父类这些数据存储在哪里呢？通俗地说，子类对象内存区域中会划一部分区域给父类的数据做存储，即子类对象内存中封装了父类的初始化数据，创建子类对象时，父类的数据就是子类的对象的一部分，不存在独立的父类的对象，所有的东西在一起才是一个完整的子类的对象。</p>\n</li>\n</ul>\n"},{"title":"Kotlin 扩展函数 run , with , let , also 和 apply","date":"2018-10-16T13:41:00.000Z","_content":"\n\n\n\n\n## 函数定义与使用\n### run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun runTest1() {\n    var name = \"AA\"\n    run {\n        val name = \"BB\"\n        Log.e(TAG, name) // BB\n    }\n    Log.d(TAG, name) // AA\n}\n```\n\n> run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。\n\n```Java\nfun runTest2() {\n    var success = true\n    var result = run {\n        if (success) {\n            \"200\"\n        } else {\n            \"404\"\n        }\n    }\n    Log.d(TAG, result) // 200\n}\n```\n\n> **run() 返回作用域中的最后一个对象**。\n\n### T.run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun tRunTest() {\n    val result = \"ABCDEF\".run {\n        Log.d(TAG, \"字符串的长度为$length\") // 字符串的长度为6\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> T.run() 中通过 this 来获取 \"ABCDEF\" 对象，然后输出 length . **T.run() 返回作用域中的最后一个对象**。\n\n### with()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n```\n\n**示例**\n\n```Java\nfun withTest() {\n    val result = with(\"ABCDEF\") {\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **with() 返回作用域中的最后一个对象**。\n\n### T.let()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n```\n\n**示例**\n\n```Java\nfun letTest() {\n    val result = \"ABCDEF\".let {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **T.let() 返回作用域中的最后一个对象**。\n\n### T.also()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun alsoTest() {\n    val  result = \"ABCDEF\".also {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.also() 返回原来的对象不变**。\n\n### T.apply()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun applyTest() {\n    val result = \"ABCDEF\".apply {\n        this.substring(2) // this 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.apply() 返回原来的对象不变**。\n\n## 函数特点\n### T.run()、T.run()、T.also()、T.apply() 函数\n\n> xxx 表示函数名\n\n```Java\nclass MyClass {\n    fun test() {\n        val str = \"AA\"\n        val result = str.xxx {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误   | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |\n\n\n### run() 与 with(T) 函数\n\n```Java\nclass MyClass {\n    fun runTest() {\n        var result = run {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n\n    fun withTest() {\n        val str = \"AA\"\n        var result = with(str) {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this） | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n\n### 函数特点汇总\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误  | 作用域中的最后一个对象  |\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |\n\n## 函数选择\n\n![Mou icon](https://github.com/zhich/images/blob/master/learning/a.jpg?raw=true)\n\n\n\n参考资料：\n\n[Kotlin基础 — 操作符：run、with、let、also、apply、takeIf、takeUnless、repeat](https://blog.csdn.net/Love667767/article/details/79376813)\n\n[Kotlin 操作符：run、with、let、also、apply 的差异与选择](https://www.jianshu.com/p/01e28c4cc730)\n\n[聊一聊Kotlin扩展函数run,with,let,also和apply的使用和区别](https://blog.csdn.net/ljd2038/article/details/79576091)\n\n\n","source":"_posts/Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply.md","raw":"---\ntitle: Kotlin 扩展函数 run , with , let , also 和 apply\ndate: 2018-10-16 21:41:00\ncategories: \"Kotlin\"\ntags:\n     - Android\n     - Kotlin\n---\n\n\n\n\n\n## 函数定义与使用\n### run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun runTest1() {\n    var name = \"AA\"\n    run {\n        val name = \"BB\"\n        Log.e(TAG, name) // BB\n    }\n    Log.d(TAG, name) // AA\n}\n```\n\n> run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。\n\n```Java\nfun runTest2() {\n    var success = true\n    var result = run {\n        if (success) {\n            \"200\"\n        } else {\n            \"404\"\n        }\n    }\n    Log.d(TAG, result) // 200\n}\n```\n\n> **run() 返回作用域中的最后一个对象**。\n\n### T.run()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n**示例**\n\n```Java\nfun tRunTest() {\n    val result = \"ABCDEF\".run {\n        Log.d(TAG, \"字符串的长度为$length\") // 字符串的长度为6\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> T.run() 中通过 this 来获取 \"ABCDEF\" 对象，然后输出 length . **T.run() 返回作用域中的最后一个对象**。\n\n### with()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n```\n\n**示例**\n\n```Java\nfun withTest() {\n    val result = with(\"ABCDEF\") {\n        substring(2)\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **with() 返回作用域中的最后一个对象**。\n\n### T.let()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n```\n\n**示例**\n\n```Java\nfun letTest() {\n    val result = \"ABCDEF\".let {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // CDEF\n}\n```\n\n> **T.let() 返回作用域中的最后一个对象**。\n\n### T.also()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun alsoTest() {\n    val  result = \"ABCDEF\".also {\n        it.substring(2) // it 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.also() 返回原来的对象不变**。\n\n### T.apply()\n\n**定义**\n\n```Java\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n```\n\n**示例**\n\n```Java\nfun applyTest() {\n    val result = \"ABCDEF\".apply {\n        this.substring(2) // this 代表 \"ABCDEF\"\n    }\n    Log.d(TAG, result) // ABCDEF\n}\n```\n\n> **T.apply() 返回原来的对象不变**。\n\n## 函数特点\n### T.run()、T.run()、T.also()、T.apply() 函数\n\n> xxx 表示函数名\n\n```Java\nclass MyClass {\n    fun test() {\n        val str = \"AA\"\n        val result = str.xxx {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误   | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |\n\n\n### run() 与 with(T) 函数\n\n```Java\nclass MyClass {\n    fun runTest() {\n        var result = run {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n\n    fun withTest() {\n        val str = \"AA\"\n        var result = with(str) {\n            print(this) // 接收者\n            print(it) // 传参\n            100 // 返回值\n        }\n        print(result)\n    }\n}\n```\n\n| 函数           | 接收者（this） | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n\n### 函数特点汇总\n\n| 函数           | 接收者（this）  | 传参（it）| 返回值（result）      |\n| ------------- |---------------|----------|---------------------|\n| T.run()       |   \"AA\"        | 编译错误  | 作用域中的最后一个对象  |\n| run()         | this@Myclass  | 编译错误  | 作用域中的最后一个对象  |\n| with()        | \"AA\"          | 编译错误  | 作用域中的最后一个对象  |\n| T.let()       | this@Myclass  |  \"AA\"    | 作用域中的最后一个对象  |\n| T.also()      | this@Myclass  |  \"AA\"    |   \"AA\" 对象（本身）   |\n| T.apply()     | \"AA\"          | 编译错误  |   \"AA\" 对象（本身）   |\n\n## 函数选择\n\n![Mou icon](https://github.com/zhich/images/blob/master/learning/a.jpg?raw=true)\n\n\n\n参考资料：\n\n[Kotlin基础 — 操作符：run、with、let、also、apply、takeIf、takeUnless、repeat](https://blog.csdn.net/Love667767/article/details/79376813)\n\n[Kotlin 操作符：run、with、let、also、apply 的差异与选择](https://www.jianshu.com/p/01e28c4cc730)\n\n[聊一聊Kotlin扩展函数run,with,let,also和apply的使用和区别](https://blog.csdn.net/ljd2038/article/details/79576091)\n\n\n","slug":"Kotlin-扩展函数-run-,-with-,-let-,-also-和-apply","published":1,"updated":"2020-06-11T02:59:03.286Z","_id":"ckba6xcsw000bmgquspkkq9oy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"函数定义与使用\"><a href=\"#函数定义与使用\" class=\"headerlink\" title=\"函数定义与使用\"></a>函数定义与使用</h2><h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run()\"></a>run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;R&gt; run(block: () -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">runTest1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    var name = <span class=\"string\">\"AA\"</span></span><br><span class=\"line\">    run &#123;</span><br><span class=\"line\">        val name = <span class=\"string\">\"BB\"</span></span><br><span class=\"line\">        Log.e(TAG, name) <span class=\"comment\">// BB</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, name) <span class=\"comment\">// AA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">runTest2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    var success = <span class=\"keyword\">true</span></span><br><span class=\"line\">    var result = run &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            <span class=\"string\">\"200\"</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">\"404\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// 200</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-run\"><a href=\"#T-run\" class=\"headerlink\" title=\"T.run()\"></a>T.run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">tRunTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = <span class=\"string\">\"ABCDEF\"</span>.run &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"字符串的长度为$length\"</span>) <span class=\"comment\">// 字符串的长度为6</span></span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>T.run() 中通过 this 来获取 “ABCDEF” 对象，然后输出 length . <strong>T.run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with()\"></a>with()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver.block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">withTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = with(<span class=\"string\">\"ABCDEF\"</span>) &#123;</span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>with() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-let\"><a href=\"#T-let\" class=\"headerlink\" title=\"T.let()\"></a>T.let()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">letTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = <span class=\"string\">\"ABCDEF\"</span>.let &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 \"ABCDEF\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>T.let() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-also\"><a href=\"#T-also\" class=\"headerlink\" title=\"T.also()\"></a>T.also()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"meta\">@SinceKotlin</span>(<span class=\"string\">\"1.1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">alsoTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val  result = <span class=\"string\">\"ABCDEF\"</span>.also &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 \"ABCDEF\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>T.also() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h3 id=\"T-apply\"><a href=\"#T-apply\" class=\"headerlink\" title=\"T.apply()\"></a>T.apply()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">applyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = <span class=\"string\">\"ABCDEF\"</span>.apply &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.substring(<span class=\"number\">2</span>) <span class=\"comment\">// this 代表 \"ABCDEF\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>T.apply() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h2 id=\"函数特点\"><a href=\"#函数特点\" class=\"headerlink\" title=\"函数特点\"></a>函数特点</h2><h3 id=\"T-run-、T-run-、T-also-、T-apply-函数\"><a href=\"#T-run-、T-run-、T-also-、T-apply-函数\" class=\"headerlink\" title=\"T.run()、T.run()、T.also()、T.apply() 函数\"></a>T.run()、T.run()、T.also()、T.apply() 函数</h3><blockquote>\n<p>xxx 表示函数名</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        val str = <span class=\"string\">\"AA\"</span></span><br><span class=\"line\">        val result = str.xxx &#123;</span><br><span class=\"line\">            print(<span class=\"keyword\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"run-与-with-T-函数\"><a href=\"#run-与-with-T-函数\" class=\"headerlink\" title=\"run() 与 with(T) 函数\"></a>run() 与 with(T) 函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">runTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        var result = run &#123;</span><br><span class=\"line\">            print(<span class=\"keyword\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">withTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        val str = <span class=\"string\">\"AA\"</span></span><br><span class=\"line\">        var result = with(str) &#123;</span><br><span class=\"line\">            print(<span class=\"keyword\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"函数特点汇总\"><a href=\"#函数特点汇总\" class=\"headerlink\" title=\"函数特点汇总\"></a>函数特点汇总</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"函数选择\"><a href=\"#函数选择\" class=\"headerlink\" title=\"函数选择\"></a>函数选择</h2><p><img src=\"https://github.com/zhich/images/blob/master/learning/a.jpg?raw=true\" alt=\"Mou icon\"></p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/Love667767/article/details/79376813\" target=\"_blank\" rel=\"noopener\">Kotlin基础 — 操作符：run、with、let、also、apply、takeIf、takeUnless、repeat</a></p>\n<p><a href=\"https://www.jianshu.com/p/01e28c4cc730\" target=\"_blank\" rel=\"noopener\">Kotlin 操作符：run、with、let、also、apply 的差异与选择</a></p>\n<p><a href=\"https://blog.csdn.net/ljd2038/article/details/79576091\" target=\"_blank\" rel=\"noopener\">聊一聊Kotlin扩展函数run,with,let,also和apply的使用和区别</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数定义与使用\"><a href=\"#函数定义与使用\" class=\"headerlink\" title=\"函数定义与使用\"></a>函数定义与使用</h2><h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run()\"></a>run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;R&gt; run(block: () -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">runTest1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    var name = <span class=\"string\">\"AA\"</span></span><br><span class=\"line\">    run &#123;</span><br><span class=\"line\">        val name = <span class=\"string\">\"BB\"</span></span><br><span class=\"line\">        Log.e(TAG, name) <span class=\"comment\">// BB</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, name) <span class=\"comment\">// AA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>run() 函数在 runTest1 函数中又提供了自己的作用域，并且 run() 函数中可以重新定义一个 name 变量，该变量只存在于 run() 函数中。以下介绍的几个函数和 run() 函数同理，都是提供了自己的作用域。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">runTest2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    var success = <span class=\"keyword\">true</span></span><br><span class=\"line\">    var result = run &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            <span class=\"string\">\"200\"</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">\"404\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// 200</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-run\"><a href=\"#T-run\" class=\"headerlink\" title=\"T.run()\"></a>T.run()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">tRunTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = <span class=\"string\">\"ABCDEF\"</span>.run &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"字符串的长度为$length\"</span>) <span class=\"comment\">// 字符串的长度为6</span></span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>T.run() 中通过 this 来获取 “ABCDEF” 对象，然后输出 length . <strong>T.run() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with()\"></a>with()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver.block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">withTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = with(<span class=\"string\">\"ABCDEF\"</span>) &#123;</span><br><span class=\"line\">        substring(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>with() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-let\"><a href=\"#T-let\" class=\"headerlink\" title=\"T.let()\"></a>T.let()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns its result.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">letTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = <span class=\"string\">\"ABCDEF\"</span>.let &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 \"ABCDEF\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// CDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>T.let() 返回作用域中的最后一个对象</strong>。</p>\n</blockquote>\n<h3 id=\"T-also\"><a href=\"#T-also\" class=\"headerlink\" title=\"T.also()\"></a>T.also()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its argument and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"meta\">@SinceKotlin</span>(<span class=\"string\">\"1.1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">alsoTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val  result = <span class=\"string\">\"ABCDEF\"</span>.also &#123;</span><br><span class=\"line\">        it.substring(<span class=\"number\">2</span>) <span class=\"comment\">// it 代表 \"ABCDEF\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>T.also() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h3 id=\"T-apply\"><a href=\"#T-apply\" class=\"headerlink\" title=\"T.apply()\"></a>T.apply()</h3><p><strong>定义</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calls the specified function [block] with `this` value as its receiver and returns `this` value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@kotlin</span>.internal.InlineOnly</span><br><span class=\"line\"><span class=\"keyword\">public</span> inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">applyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val result = <span class=\"string\">\"ABCDEF\"</span>.apply &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.substring(<span class=\"number\">2</span>) <span class=\"comment\">// this 代表 \"ABCDEF\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Log.d(TAG, result) <span class=\"comment\">// ABCDEF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>T.apply() 返回原来的对象不变</strong>。</p>\n</blockquote>\n<h2 id=\"函数特点\"><a href=\"#函数特点\" class=\"headerlink\" title=\"函数特点\"></a>函数特点</h2><h3 id=\"T-run-、T-run-、T-also-、T-apply-函数\"><a href=\"#T-run-、T-run-、T-also-、T-apply-函数\" class=\"headerlink\" title=\"T.run()、T.run()、T.also()、T.apply() 函数\"></a>T.run()、T.run()、T.also()、T.apply() 函数</h3><blockquote>\n<p>xxx 表示函数名</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        val str = <span class=\"string\">\"AA\"</span></span><br><span class=\"line\">        val result = str.xxx &#123;</span><br><span class=\"line\">            print(<span class=\"keyword\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"run-与-with-T-函数\"><a href=\"#run-与-with-T-函数\" class=\"headerlink\" title=\"run() 与 with(T) 函数\"></a>run() 与 with(T) 函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">runTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        var result = run &#123;</span><br><span class=\"line\">            print(<span class=\"keyword\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">withTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        val str = <span class=\"string\">\"AA\"</span></span><br><span class=\"line\">        var result = with(str) &#123;</span><br><span class=\"line\">            print(<span class=\"keyword\">this</span>) <span class=\"comment\">// 接收者</span></span><br><span class=\"line\">            print(it) <span class=\"comment\">// 传参</span></span><br><span class=\"line\">            <span class=\"number\">100</span> <span class=\"comment\">// 返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"函数特点汇总\"><a href=\"#函数特点汇总\" class=\"headerlink\" title=\"函数特点汇总\"></a>函数特点汇总</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>接收者（this）</th>\n<th>传参（it）</th>\n<th>返回值（result）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T.run()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>run()</td>\n<td>this@Myclass</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>with()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.let()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>作用域中的最后一个对象</td>\n</tr>\n<tr>\n<td>T.also()</td>\n<td>this@Myclass</td>\n<td>“AA”</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n<tr>\n<td>T.apply()</td>\n<td>“AA”</td>\n<td>编译错误</td>\n<td>“AA” 对象（本身）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"函数选择\"><a href=\"#函数选择\" class=\"headerlink\" title=\"函数选择\"></a>函数选择</h2><p><img src=\"https://github.com/zhich/images/blob/master/learning/a.jpg?raw=true\" alt=\"Mou icon\"></p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/Love667767/article/details/79376813\" target=\"_blank\" rel=\"noopener\">Kotlin基础 — 操作符：run、with、let、also、apply、takeIf、takeUnless、repeat</a></p>\n<p><a href=\"https://www.jianshu.com/p/01e28c4cc730\" target=\"_blank\" rel=\"noopener\">Kotlin 操作符：run、with、let、also、apply 的差异与选择</a></p>\n<p><a href=\"https://blog.csdn.net/ljd2038/article/details/79576091\" target=\"_blank\" rel=\"noopener\">聊一聊Kotlin扩展函数run,with,let,also和apply的使用和区别</a></p>\n"},{"title":"Kotlin 泛型中的 in 和 out","date":"2019-03-27T03:15:00.000Z","_content":"\n\n\n\n\n当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 `in` 和 `out` 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。\n\n那啥叫逆变？啥叫协变？可以参考下维基百科的定义：[协变与逆变](https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98)\n\n### in & out 怎么记？\n\n**out（协变）**\n\n如果泛型类**只将**泛型类型作为函数的返回（输出），那么使用 out：\n\n```Kotlin\ninterface Production<out T> {\n    fun produce(): T\n}\n```\n\n可以称之为生产类/接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：\n\n**produce = output = out**\n\n**in（逆变）**\n\n如果泛型类**只将**泛型类型作为函数的入参（输入），那么使用 in：\n\n```Kotlin\ninterface Consumer<in T> {\n    fun consume(item: T)\n}\n```\n\n可以称之为消费者类/接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：\n\n**consume = input = in**\n\n**invariant（不变）**\n\n如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：\n\n```Kotlin\ninterface ProductionConsumer<T> {\n    fun produce(): T\n    fun consume(item: T)\n}\n```\n\n### 为啥要使用 in & out ？\n\n举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。\n\n```Kotlin\nopen class Food\nopen class FastFood : Food() \nclass Burger : FastFood()\n```\n\n#### 汉堡生产者\n\n根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：\n\n```Kotlin\nclass FoodStore : Production<Food> {\n    override fun produce(): Food {\n        println(\"Produce food\")\n        return Food()\n    }\n}\n\nclass FastFoodStore : Production<FastFood> {\n    override fun produce(): FastFood {\n        println(\"Produce fast food\")\n        return FastFood()\n    }\n}\n\nclass InOutBurger : Production<Burger> {\n    override fun produce(): Burger {\n        println(\"Produce burger\")\n        return Burger()\n    }\n}\n```\n\n现在，我们可以这样赋值：\n\n```Kotlin\nval production1 : Production<Food> = FoodStore()\nval production2 : Production<Food> = FastFoodStore()\nval production3 : Production<Food> = InOutBurger()\n```\n\n显然，汉堡商店属于快餐商店，也属于食物商店。\n\n> **因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。**\n\n如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：\n\n```Kotlin\nval production1 : Production<Burger> = FoodStore()  // Error\nval production2 : Production<Burger> = FastFoodStore()  // Error\nval production3 : Production<Burger> = InOutBurger()\n```\n\n#### 汉堡消费者\n\n根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：\n\n```Kotlin\nclass Everybody : Consumer<Food> {\n    override fun consume(item: Food) {\n        println(\"Eat food\")\n    }\n}\n\nclass ModernPeople : Consumer<FastFood> {\n    override fun consume(item: FastFood) {\n        println(\"Eat fast food\")\n    }\n}\n\nclass American : Consumer<Burger> {\n    override fun consume(item: Burger) {\n        println(\"Eat burger\")\n    }\n}\n```\n\n我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：\n\n```Kotlin\nval consumer1 : Consumer<Burger> = Everybody()\nval consumer2 : Consumer<Burger> = ModernPeople()\nval consumer3 : Consumer<Burger> = American()\n```\n\n不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。\n\n> **因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。**\n\n反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。\n\n```Kotlin\nval consumer1 : Consumer<Food> = Everybody()\nval consumer2 : Consumer<Food> = ModernPeople()  // Error\nval consumer3 : Consumer<Food> = American()  // Error\n```\n\n### 记住 in & out 的另一种方式\n\n- 父类泛型对象可以赋值给子类泛型对象，用 in；\n- 子类泛型对象可以赋值给父类泛型对象，用 out。\n\n\n\n参考资料：\n\n[In and out type variant of Kotlin](https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c)\n\n[Kotlin 泛型中的 in 和 out](https://zhuanlan.zhihu.com/p/32583310)\n\n","source":"_posts/Kotlin-泛型中的-in-和-out.md","raw":"---\ntitle: Kotlin 泛型中的 in 和 out\ndate: 2019-03-27 11:15:00\ncategories: \"Kotlin\"\ntags:\n     - Android\n     - Kotlin\n---\n\n\n\n\n\n当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 `in` 和 `out` 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。\n\n那啥叫逆变？啥叫协变？可以参考下维基百科的定义：[协变与逆变](https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98)\n\n### in & out 怎么记？\n\n**out（协变）**\n\n如果泛型类**只将**泛型类型作为函数的返回（输出），那么使用 out：\n\n```Kotlin\ninterface Production<out T> {\n    fun produce(): T\n}\n```\n\n可以称之为生产类/接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：\n\n**produce = output = out**\n\n**in（逆变）**\n\n如果泛型类**只将**泛型类型作为函数的入参（输入），那么使用 in：\n\n```Kotlin\ninterface Consumer<in T> {\n    fun consume(item: T)\n}\n```\n\n可以称之为消费者类/接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：\n\n**consume = input = in**\n\n**invariant（不变）**\n\n如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：\n\n```Kotlin\ninterface ProductionConsumer<T> {\n    fun produce(): T\n    fun consume(item: T)\n}\n```\n\n### 为啥要使用 in & out ？\n\n举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。\n\n```Kotlin\nopen class Food\nopen class FastFood : Food() \nclass Burger : FastFood()\n```\n\n#### 汉堡生产者\n\n根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：\n\n```Kotlin\nclass FoodStore : Production<Food> {\n    override fun produce(): Food {\n        println(\"Produce food\")\n        return Food()\n    }\n}\n\nclass FastFoodStore : Production<FastFood> {\n    override fun produce(): FastFood {\n        println(\"Produce fast food\")\n        return FastFood()\n    }\n}\n\nclass InOutBurger : Production<Burger> {\n    override fun produce(): Burger {\n        println(\"Produce burger\")\n        return Burger()\n    }\n}\n```\n\n现在，我们可以这样赋值：\n\n```Kotlin\nval production1 : Production<Food> = FoodStore()\nval production2 : Production<Food> = FastFoodStore()\nval production3 : Production<Food> = InOutBurger()\n```\n\n显然，汉堡商店属于快餐商店，也属于食物商店。\n\n> **因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。**\n\n如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：\n\n```Kotlin\nval production1 : Production<Burger> = FoodStore()  // Error\nval production2 : Production<Burger> = FastFoodStore()  // Error\nval production3 : Production<Burger> = InOutBurger()\n```\n\n#### 汉堡消费者\n\n根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：\n\n```Kotlin\nclass Everybody : Consumer<Food> {\n    override fun consume(item: Food) {\n        println(\"Eat food\")\n    }\n}\n\nclass ModernPeople : Consumer<FastFood> {\n    override fun consume(item: FastFood) {\n        println(\"Eat fast food\")\n    }\n}\n\nclass American : Consumer<Burger> {\n    override fun consume(item: Burger) {\n        println(\"Eat burger\")\n    }\n}\n```\n\n我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：\n\n```Kotlin\nval consumer1 : Consumer<Burger> = Everybody()\nval consumer2 : Consumer<Burger> = ModernPeople()\nval consumer3 : Consumer<Burger> = American()\n```\n\n不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。\n\n> **因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。**\n\n反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。\n\n```Kotlin\nval consumer1 : Consumer<Food> = Everybody()\nval consumer2 : Consumer<Food> = ModernPeople()  // Error\nval consumer3 : Consumer<Food> = American()  // Error\n```\n\n### 记住 in & out 的另一种方式\n\n- 父类泛型对象可以赋值给子类泛型对象，用 in；\n- 子类泛型对象可以赋值给父类泛型对象，用 out。\n\n\n\n参考资料：\n\n[In and out type variant of Kotlin](https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c)\n\n[Kotlin 泛型中的 in 和 out](https://zhuanlan.zhihu.com/p/32583310)\n\n","slug":"Kotlin-泛型中的-in-和-out","published":1,"updated":"2019-03-27T06:43:48.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xct0000cmgqumz9f8u9d","content":"<p>当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 <code>in</code> 和 <code>out</code> 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。</p>\n<p>那啥叫逆变？啥叫协变？可以参考下维基百科的定义：<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98\" target=\"_blank\" rel=\"noopener\">协变与逆变</a></p>\n<h3 id=\"in-amp-out-怎么记？\"><a href=\"#in-amp-out-怎么记？\" class=\"headerlink\" title=\"in &amp; out 怎么记？\"></a>in &amp; out 怎么记？</h3><p><strong>out（协变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的返回（输出），那么使用 out：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Production</span>&lt;<span class=\"type\">out T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以称之为生产类/接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：</p>\n<p><strong>produce = output = out</strong></p>\n<p><strong>in（逆变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的入参（输入），那么使用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Consumer</span>&lt;<span class=\"type\">in T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以称之为消费者类/接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：</p>\n<p><strong>consume = input = in</strong></p>\n<p><strong>invariant（不变）</strong></p>\n<p>如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ProductionConsumer</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"为啥要使用-in-amp-out-？\"><a href=\"#为啥要使用-in-amp-out-？\" class=\"headerlink\" title=\"为啥要使用 in &amp; out ？\"></a>为啥要使用 in &amp; out ？</h3><p>举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span></span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastFood</span> : <span class=\"type\">Food</span></span>() </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Burger</span> : <span class=\"type\">FastFood</span></span>()</span><br></pre></td></tr></table></figure>\n<h4 id=\"汉堡生产者\"><a href=\"#汉堡生产者\" class=\"headerlink\" title=\"汉堡生产者\"></a>汉堡生产者</h4><p>根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Food</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Food &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Produce food\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Food()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastFoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">FastFood</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: FastFood &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Produce fast food\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FastFood()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InOutBurger</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Burger</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Burger &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Produce burger\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Burger()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Food&gt; = FoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Food&gt; = FastFoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Food&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n<p>显然，汉堡商店属于快餐商店，也属于食物商店。</p>\n<blockquote>\n<p><strong>因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。</strong></p>\n</blockquote>\n<p>如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Burger&gt; = FoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Burger&gt; = FastFoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Burger&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n<h4 id=\"汉堡消费者\"><a href=\"#汉堡消费者\" class=\"headerlink\" title=\"汉堡消费者\"></a>汉堡消费者</h4><p>根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Everybody</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Food</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Food</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Eat food\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModernPeople</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">FastFood</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">FastFood</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Eat fast food\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">American</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Burger</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Burger</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Eat burger\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Burger&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Burger&gt; = ModernPeople()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Burger&gt; = American()</span><br></pre></td></tr></table></figure>\n<p>不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。</p>\n<blockquote>\n<p><strong>因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。</strong></p>\n</blockquote>\n<p>反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Food&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Food&gt; = ModernPeople()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Food&gt; = American()  <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"记住-in-amp-out-的另一种方式\"><a href=\"#记住-in-amp-out-的另一种方式\" class=\"headerlink\" title=\"记住 in &amp; out 的另一种方式\"></a>记住 in &amp; out 的另一种方式</h3><ul>\n<li>父类泛型对象可以赋值给子类泛型对象，用 in；</li>\n<li>子类泛型对象可以赋值给父类泛型对象，用 out。</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c\" target=\"_blank\" rel=\"noopener\">In and out type variant of Kotlin</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32583310\" target=\"_blank\" rel=\"noopener\">Kotlin 泛型中的 in 和 out</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>当我们在 Kotlin 中定义泛型时，我们会发现它需要使用到 <code>in</code> 和 <code>out</code> 两个关键字来定义。从形式上来讲，这是一种定义「逆变」和「协变」的方式。</p>\n<p>那啥叫逆变？啥叫协变？可以参考下维基百科的定义：<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98\" target=\"_blank\" rel=\"noopener\">协变与逆变</a></p>\n<h3 id=\"in-amp-out-怎么记？\"><a href=\"#in-amp-out-怎么记？\" class=\"headerlink\" title=\"in &amp; out 怎么记？\"></a>in &amp; out 怎么记？</h3><p><strong>out（协变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的返回（输出），那么使用 out：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Production</span>&lt;<span class=\"type\">out T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以称之为生产类/接口，因为它主要是用来生产（produce）指定的泛型对象。因此，我们可以简单地这样记忆：</p>\n<p><strong>produce = output = out</strong></p>\n<p><strong>in（逆变）</strong></p>\n<p>如果泛型类<strong>只将</strong>泛型类型作为函数的入参（输入），那么使用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Consumer</span>&lt;<span class=\"type\">in T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以称之为消费者类/接口，因为它主要是用来消费（consume）指定的泛型对象。因此我们可以简单地这样记忆：</p>\n<p><strong>consume = input = in</strong></p>\n<p><strong>invariant（不变）</strong></p>\n<p>如果泛型类既将泛型类型作为函数参数，又将泛型类型作为函数的输出，那么既不用 out 也不用 in：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ProductionConsumer</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"为啥要使用-in-amp-out-？\"><a href=\"#为啥要使用-in-amp-out-？\" class=\"headerlink\" title=\"为啥要使用 in &amp; out ？\"></a>为啥要使用 in &amp; out ？</h3><p>举个例子，我们定义下汉堡类对象，它是一种快餐，也是一种食物。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span></span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastFood</span> : <span class=\"type\">Food</span></span>() </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Burger</span> : <span class=\"type\">FastFood</span></span>()</span><br></pre></td></tr></table></figure>\n<h4 id=\"汉堡生产者\"><a href=\"#汉堡生产者\" class=\"headerlink\" title=\"汉堡生产者\"></a>汉堡生产者</h4><p>根据上面定义的生产（Production）接口，我们可以进一步扩展它们来生产食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Food</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Food &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Produce food\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Food()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastFoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">FastFood</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: FastFood &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Produce fast food\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FastFood()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InOutBurger</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Burger</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Burger &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Produce burger\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Burger()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Food&gt; = FoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Food&gt; = FastFoodStore()</span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Food&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n<p>显然，汉堡商店属于快餐商店，也属于食物商店。</p>\n<blockquote>\n<p><strong>因此，对于 out 类型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。</strong></p>\n</blockquote>\n<p>如果我们修改如下，那么就会出错了，因为食物或快餐商店是可以生产汉堡，但不一定仅仅生产汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> production1 : Production&lt;Burger&gt; = FoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production2 : Production&lt;Burger&gt; = FastFoodStore()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> production3 : Production&lt;Burger&gt; = InOutBurger()</span><br></pre></td></tr></table></figure>\n<h4 id=\"汉堡消费者\"><a href=\"#汉堡消费者\" class=\"headerlink\" title=\"汉堡消费者\"></a>汉堡消费者</h4><p>根据上面定义的消费（Consumer）接口，我们可以进一步扩展它们来消费食物、快餐和汉堡：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Everybody</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Food</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Food</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Eat food\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModernPeople</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">FastFood</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">FastFood</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Eat fast food\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">American</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Burger</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Burger</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Eat burger\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以将人类、现代人、美国人指定为汉堡消费者，所以可以这样赋值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Burger&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Burger&gt; = ModernPeople()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Burger&gt; = American()</span><br></pre></td></tr></table></figure>\n<p>不难理解，汉堡的消费者可以是美国人，也可以是现代人，更可以是人类。</p>\n<blockquote>\n<p><strong>因此，对于 in 泛型，我们能够将使用父类泛型的对象赋值给使用子类泛型的对象。</strong></p>\n</blockquote>\n<p>反之，如果我们修改如下，就会出现错误，因为汉堡的消费者不仅仅是美国人或现代人。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> consumer1 : Consumer&lt;Food&gt; = Everybody()</span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer2 : Consumer&lt;Food&gt; = ModernPeople()  <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> consumer3 : Consumer&lt;Food&gt; = American()  <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"记住-in-amp-out-的另一种方式\"><a href=\"#记住-in-amp-out-的另一种方式\" class=\"headerlink\" title=\"记住 in &amp; out 的另一种方式\"></a>记住 in &amp; out 的另一种方式</h3><ul>\n<li>父类泛型对象可以赋值给子类泛型对象，用 in；</li>\n<li>子类泛型对象可以赋值给父类泛型对象，用 out。</li>\n</ul>\n<p>参考资料：</p>\n<p><a href=\"https://medium.com/@elye.project/in-and-out-type-variant-of-kotlin-587e4fa2944c\" target=\"_blank\" rel=\"noopener\">In and out type variant of Kotlin</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32583310\" target=\"_blank\" rel=\"noopener\">Kotlin 泛型中的 in 和 out</a></p>\n"},{"title":"Mock 测试","date":"2018-03-19T16:00:00.000Z","_content":"\n在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。\n\n接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？\n\n有了接口文档，我们就清楚了与后端交互的**数据结构**，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。\n\n以下简单介绍 Github 上的一个 Mock 开源库的使用 - [moco](https://github.com/dreamhead/moco/)。\n\n**step 1:**\n\n下载如图所示的 jar 包，并简单命名为 moco .\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/15.png)\n\n**step 2:**\n\n把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/14.png)\n\n**config.json**\n\n```json\n[\n  {\n    \"request\": {\n      \"uri\": \"/hello\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"hello.json\"\n    }\n  },\n  {\n    \"request\": {\n      \"uri\": \"/checkAppUpgrade\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"checkAppUpgrade.json\"\n    }\n  }\n]\n```\n\n**hello.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"desc\": \"Hello World !\"\n  }\n}\n```\n\n**checkAppUpgrade.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"versonName\": \"1.2\",\n    \"versonCode\": 3,\n    \"downloadUrl\": \"http://www.baidu.com/v1.2.apk\",\n    \"desc\": \"v1.2 版本修复了重大 bug .\",\n    \"isForceUpdate\": true\n  }\n}\n```\n\n**step 3:**\n\n在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。\n\n```bash\njava -jar moco.jar http -p 8089 -c config.json\n```\n\n**step 4:**\n\n在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/16.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/17.png)\n\n> 把 localhost 换成自己电脑的 ip 就可以在手机上访问了。\n","source":"_posts/Mock-测试.md","raw":"---\ntitle: Mock 测试\ndate: 2018-3-20\ncategories: \"测试\"\ntags:\n     - 测试\n     - mock\n---\n\n在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。\n\n接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？\n\n有了接口文档，我们就清楚了与后端交互的**数据结构**，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。\n\n以下简单介绍 Github 上的一个 Mock 开源库的使用 - [moco](https://github.com/dreamhead/moco/)。\n\n**step 1:**\n\n下载如图所示的 jar 包，并简单命名为 moco .\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/15.png)\n\n**step 2:**\n\n把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/14.png)\n\n**config.json**\n\n```json\n[\n  {\n    \"request\": {\n      \"uri\": \"/hello\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"hello.json\"\n    }\n  },\n  {\n    \"request\": {\n      \"uri\": \"/checkAppUpgrade\",\n      \"method\": \"get\"\n    },\n    \"response\": {\n      \"file\": \"checkAppUpgrade.json\"\n    }\n  }\n]\n```\n\n**hello.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"desc\": \"Hello World !\"\n  }\n}\n```\n\n**checkAppUpgrade.json**\n\n```json\n{\n  \"code\": 0,\n  \"msg\": \"请求成功\",\n  \"data\": {\n    \"versonName\": \"1.2\",\n    \"versonCode\": 3,\n    \"downloadUrl\": \"http://www.baidu.com/v1.2.apk\",\n    \"desc\": \"v1.2 版本修复了重大 bug .\",\n    \"isForceUpdate\": true\n  }\n}\n```\n\n**step 3:**\n\n在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。\n\n```bash\njava -jar moco.jar http -p 8089 -c config.json\n```\n\n**step 4:**\n\n在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/16.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/17.png)\n\n> 把 localhost 换成自己电脑的 ip 就可以在手机上访问了。\n","slug":"Mock-测试","published":1,"updated":"2018-07-24T02:27:26.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xct4000hmgqu1fmr0q58","content":"<p>在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。</p>\n<p>接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？</p>\n<p>有了接口文档，我们就清楚了与后端交互的<strong>数据结构</strong>，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。</p>\n<p>以下简单介绍 Github 上的一个 Mock 开源库的使用 - <a href=\"https://github.com/dreamhead/moco/\" target=\"_blank\" rel=\"noopener\">moco</a>。</p>\n<p><strong>step 1:</strong></p>\n<p>下载如图所示的 jar 包，并简单命名为 moco .</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/15.png\" alt=\"Mou icon\"></p>\n<p><strong>step 2:</strong></p>\n<p>把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/14.png\" alt=\"Mou icon\"></p>\n<p><strong>config.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/hello\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"hello.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/checkAppUpgrade\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"checkAppUpgrade.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>hello.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"Hello World !\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>checkAppUpgrade.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"versonName\"</span>: <span class=\"string\">\"1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"versonCode\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"downloadUrl\"</span>: <span class=\"string\">\"http://www.baidu.com/v1.2.apk\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"v1.2 版本修复了重大 bug .\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isForceUpdate\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>step 3:</strong></p>\n<p>在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco.jar http -p 8089 -c config.json</span><br></pre></td></tr></table></figure>\n<p><strong>step 4:</strong></p>\n<p>在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/16.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/17.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>把 localhost 换成自己电脑的 ip 就可以在手机上访问了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发过程中，前端和后端的工作通常都是并行的，要想有效地提高工作效率，后端的接口文档就显得特别重要。</p>\n<p>接口文档代表着一份请求/响应的契约书，简单地讲就是前端需要带什么样的数据过去？后端返回什么样的数据？</p>\n<p>有了接口文档，我们就清楚了与后端交互的<strong>数据结构</strong>，然后可以通过 Mock 模拟请求/响应的数据。这样可以在前后端互不干扰的情况下完成各自的工作，大大地提高了开发效率。</p>\n<p>以下简单介绍 Github 上的一个 Mock 开源库的使用 - <a href=\"https://github.com/dreamhead/moco/\" target=\"_blank\" rel=\"noopener\">moco</a>。</p>\n<p><strong>step 1:</strong></p>\n<p>下载如图所示的 jar 包，并简单命名为 moco .</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/15.png\" alt=\"Mou icon\"></p>\n<p><strong>step 2:</strong></p>\n<p>把上面的 moco.jar 放到一个文件夹里面，并在该文件夹中创建配置文件 config.json 。config.json 中配置了两个请求，一个输出 Hello World 的请求，一个检查 App 升级的请求，他们分别输出 hello.json 文件和 checkAppUpgrade.json 文件中的内容。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/14.png\" alt=\"Mou icon\"></p>\n<p><strong>config.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/hello\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"hello.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"uri\"</span>: <span class=\"string\">\"/checkAppUpgrade\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"get\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"checkAppUpgrade.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>hello.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"Hello World !\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>checkAppUpgrade.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"请求成功\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"versonName\"</span>: <span class=\"string\">\"1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"versonCode\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"downloadUrl\"</span>: <span class=\"string\">\"http://www.baidu.com/v1.2.apk\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"v1.2 版本修复了重大 bug .\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isForceUpdate\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>step 3:</strong></p>\n<p>在当前文件夹 cmd 运行以下命令即可启动 moco 服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco.jar http -p 8089 -c config.json</span><br></pre></td></tr></table></figure>\n<p><strong>step 4:</strong></p>\n<p>在浏览器输入 config.json 配置文件中配置的 uri 即可输出对应的 file 文件中指定的 json 数据。</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/16.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/17.png\" alt=\"Mou icon\"></p>\n<blockquote>\n<p>把 localhost 换成自己电脑的 ip 就可以在手机上访问了。</p>\n</blockquote>\n"},{"title":"Pair 了解一下","date":"2019-01-30T03:05:00.000Z","_content":"\n\n### 介绍\n\n**Pair** 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 `first` 与 `second` .\n\n```Java\npublic class Pair<F, S> {\n    public final F first;\n    public final S second;\n\n    public Pair(F first, S second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof Pair)) {\n            return false;\n        }\n        Pair<?, ?> p = (Pair<?, ?>) o;\n        return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n    }\n\n    // ...\n\n    public static <A, B> Pair <A, B> create(A a, B b) {\n        return new Pair<A, B>(a, b);\n    }\n}\n```\n\n### 用法\n\n它的使用也是非常简单的：\n\n```Java\n// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建\nPair pair1 = new Pair<Integer, String>(1, \"111\"); // 第一种方式创建\nPair pair2 = Pair.create(1, 111); // 第二种方式创建\nPair pair3 = Pair.create(1, 111);\n\nLog.e(TAG, pair1.first.toString()); // 1\nLog.e(TAG, pair1.second.toString()); // 111\nLog.e(TAG, pair1.second.equals(\"111\") + \"\"); // true\nLog.e(TAG, pair1.second.equals(111) + \"\"); // false\n\nLog.e(TAG, pair1.equals(pair2) + \"\"); // false\nLog.e(TAG, pair2.equals(pair3) + \"\"); // true\n```\n\n从以上示例可知：\n\n- Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；\n- Pair 的 equals 比较的是 first 与 second 值是否同时 equals .\n\n说到 `equals` , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。\n\n```Java\n// android.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    }\n    Pair<?, ?> p = (Pair<?, ?>) o;\n    return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n}\n\n// android.support.v4.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> p = (Pair)o;\n        return ObjectsCompat.equals(p.first, this.first) && ObjectsCompat.equals(p.second, this.second);\n    }\n}\n```\n\nObjectsCompat 类里面的 equals 方法：\n\n```Java\npublic static boolean equals(@Nullable Object a, @Nullable Object b) {\n    if (VERSION.SDK_INT >= 19) {\n        return Objects.equals(a, b);\n    } else {\n        return a == b || a != null && a.equals(b);\n    }\n}\n```\n\nObjects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。\n\n### 使用场景\n\n在**既要以键值对的方式存储数据列表，同时在输出时保持顺序**的情况下，我们可以使用 Pair 搭配 ArrayList 实现。\n\n**场景一：**\n\n假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。\n\n```Java\nArrayList<Pair<String,String>> dataList = new ArrayList();\n```\n\n**场景二：**\n\n记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。\n\n```Java\nArrayList<Pair<Long,Message>> dataList = new ArrayList();\n```","source":"_posts/Pair-了解一下.md","raw":"---\ntitle: Pair 了解一下\ndate: 2019-1-30 11:05:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n\n### 介绍\n\n**Pair** 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 `first` 与 `second` .\n\n```Java\npublic class Pair<F, S> {\n    public final F first;\n    public final S second;\n\n    public Pair(F first, S second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof Pair)) {\n            return false;\n        }\n        Pair<?, ?> p = (Pair<?, ?>) o;\n        return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n    }\n\n    // ...\n\n    public static <A, B> Pair <A, B> create(A a, B b) {\n        return new Pair<A, B>(a, b);\n    }\n}\n```\n\n### 用法\n\n它的使用也是非常简单的：\n\n```Java\n// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建\nPair pair1 = new Pair<Integer, String>(1, \"111\"); // 第一种方式创建\nPair pair2 = Pair.create(1, 111); // 第二种方式创建\nPair pair3 = Pair.create(1, 111);\n\nLog.e(TAG, pair1.first.toString()); // 1\nLog.e(TAG, pair1.second.toString()); // 111\nLog.e(TAG, pair1.second.equals(\"111\") + \"\"); // true\nLog.e(TAG, pair1.second.equals(111) + \"\"); // false\n\nLog.e(TAG, pair1.equals(pair2) + \"\"); // false\nLog.e(TAG, pair2.equals(pair3) + \"\"); // true\n```\n\n从以上示例可知：\n\n- Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；\n- Pair 的 equals 比较的是 first 与 second 值是否同时 equals .\n\n说到 `equals` , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。\n\n```Java\n// android.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    }\n    Pair<?, ?> p = (Pair<?, ?>) o;\n    return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n}\n\n// android.support.v4.util 包下\npublic boolean equals(Object o) {\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> p = (Pair)o;\n        return ObjectsCompat.equals(p.first, this.first) && ObjectsCompat.equals(p.second, this.second);\n    }\n}\n```\n\nObjectsCompat 类里面的 equals 方法：\n\n```Java\npublic static boolean equals(@Nullable Object a, @Nullable Object b) {\n    if (VERSION.SDK_INT >= 19) {\n        return Objects.equals(a, b);\n    } else {\n        return a == b || a != null && a.equals(b);\n    }\n}\n```\n\nObjects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。\n\n### 使用场景\n\n在**既要以键值对的方式存储数据列表，同时在输出时保持顺序**的情况下，我们可以使用 Pair 搭配 ArrayList 实现。\n\n**场景一：**\n\n假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。\n\n```Java\nArrayList<Pair<String,String>> dataList = new ArrayList();\n```\n\n**场景二：**\n\n记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。\n\n```Java\nArrayList<Pair<Long,Message>> dataList = new ArrayList();\n```","slug":"Pair-了解一下","published":1,"updated":"2019-01-30T06:23:22.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xct9000imgqufmi4js9a","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>Pair</strong> 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 <code>first</code> 与 <code>second</code> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">F</span>, <span class=\"title\">S</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> F first;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> S second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pair</span><span class=\"params\">(F first, S second)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.second = second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;A, B&gt; Pair &lt;A, B&gt; create(A a, B b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pair&lt;A, B&gt;(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>它的使用也是非常简单的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建</span></span><br><span class=\"line\">Pair pair1 = <span class=\"keyword\">new</span> Pair&lt;Integer, String&gt;(<span class=\"number\">1</span>, <span class=\"string\">\"111\"</span>); <span class=\"comment\">// 第一种方式创建</span></span><br><span class=\"line\">Pair pair2 = Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>); <span class=\"comment\">// 第二种方式创建</span></span><br><span class=\"line\">Pair pair3 = Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.first.toString()); <span class=\"comment\">// 1</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.toString()); <span class=\"comment\">// 111</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"string\">\"111\"</span>) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"number\">111</span>) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.equals(pair2) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">Log.e(TAG, pair2.equals(pair3) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>从以上示例可知：</p>\n<ul>\n<li>Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；</li>\n<li>Pair 的 equals 比较的是 first 与 second 值是否同时 equals .</li>\n</ul>\n<p>说到 <code>equals</code> , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// android.util 包下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// android.support.v4.util 包下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair)o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ObjectsCompat.equals(p.first, <span class=\"keyword\">this</span>.first) &amp;&amp; ObjectsCompat.equals(p.second, <span class=\"keyword\">this</span>.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ObjectsCompat 类里面的 equals 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(@Nullable Object a, @Nullable Object b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(a, b);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a == b || a != <span class=\"keyword\">null</span> &amp;&amp; a.equals(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Objects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在<strong>既要以键值对的方式存储数据列表，同时在输出时保持顺序</strong>的情况下，我们可以使用 Pair 搭配 ArrayList 实现。</p>\n<p><strong>场景一：</strong></p>\n<p>假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;String,String&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList();</span><br></pre></td></tr></table></figure>\n<p><strong>场景二：</strong></p>\n<p>记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;Long,Message&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>Pair</strong> 的字面意思是“一对”、“一双”，瞄一眼它的源码，果不其然，里面只有两个字段 <code>first</code> 与 <code>second</code> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">F</span>, <span class=\"title\">S</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> F first;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> S second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pair</span><span class=\"params\">(F first, S second)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.second = second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;A, B&gt; Pair &lt;A, B&gt; create(A a, B b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pair&lt;A, B&gt;(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>它的使用也是非常简单的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两种方式都可以创建 Pair 实例，而第二种方式内部实际上也是使用第一种方式创建</span></span><br><span class=\"line\">Pair pair1 = <span class=\"keyword\">new</span> Pair&lt;Integer, String&gt;(<span class=\"number\">1</span>, <span class=\"string\">\"111\"</span>); <span class=\"comment\">// 第一种方式创建</span></span><br><span class=\"line\">Pair pair2 = Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>); <span class=\"comment\">// 第二种方式创建</span></span><br><span class=\"line\">Pair pair3 = Pair.create(<span class=\"number\">1</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.first.toString()); <span class=\"comment\">// 1</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.toString()); <span class=\"comment\">// 111</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"string\">\"111\"</span>) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">Log.e(TAG, pair1.second.equals(<span class=\"number\">111</span>) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">Log.e(TAG, pair1.equals(pair2) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">Log.e(TAG, pair2.equals(pair3) + <span class=\"string\">\"\"</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>从以上示例可知：</p>\n<ul>\n<li>Pair 的 first 获取的是第一个位置的数据，second 获取的是第二个位置的数据；</li>\n<li>Pair 的 equals 比较的是 first 与 second 值是否同时 equals .</li>\n</ul>\n<p>说到 <code>equals</code> , 上面的源码只是 android.util 包下 Pair 类的 equals 方法，由于 android.support.v4.util 包下也有 Pair 类，通过比较，两个包下的 Pair 类只有 equals 方法有所不同，其它方法无异。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// android.util 包下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Pair&lt;?, ?&gt; p = (Pair&lt;?, ?&gt;) o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.equals(p.first, first) &amp;&amp; Objects.equals(p.second, second);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// android.support.v4.util 包下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Pair)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Pair&lt;?, ?&gt; p = (Pair)o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ObjectsCompat.equals(p.first, <span class=\"keyword\">this</span>.first) &amp;&amp; ObjectsCompat.equals(p.second, <span class=\"keyword\">this</span>.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ObjectsCompat 类里面的 equals 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(@Nullable Object a, @Nullable Object b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(a, b);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a == b || a != <span class=\"keyword\">null</span> &amp;&amp; a.equals(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Objects 是 Java7 以后才有的类，而 Android 是从 4.4 开始支持 JDK7 编译的，因此为了兼容 4.4 之前的版本，在 v4 中加入了一个不依赖 JDK7 的 Pair 类。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在<strong>既要以键值对的方式存储数据列表，同时在输出时保持顺序</strong>的情况下，我们可以使用 Pair 搭配 ArrayList 实现。</p>\n<p><strong>场景一：</strong></p>\n<p>假如我们需要生成 n 个按钮，而每个按钮都有 code 值、展示文本内容的 content 值，当我们点击其中一个按钮后就根据 code 值去做指定的事情（如网络请求）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;String,String&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList();</span><br></pre></td></tr></table></figure>\n<p><strong>场景二：</strong></p>\n<p>记录推送过来的消息，我们可以用 Pair 的 first 记录消息到达的时间戳，second 记录消息体。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Pair&lt;Long,Message&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList();</span><br></pre></td></tr></table></figure>"},{"title":"WebStorm 2018 版本破解","date":"2018-08-14T16:00:00.000Z","_content":"\n\n\n\n\n\n本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：\n\n1. 下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2\n\n2. 下载破解补丁。[下载链接](https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg)，密码：yxb5\n\n3. 拷贝补丁到 WebStorm 安装目录的 bin 目录下\n\n4. 同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：\n\n   **-javaagent:webstorm安装路径/bin/破解补丁名字.jar**\n\n   如笔者要添加的一行代码为：\n\n   ```Java\n   -javaagent:C:/Program Files/JetBrains/WebStorm 2018.1.2/bin/JetbrainsCrack-2.8-release-enc.jar\n   ```\n\n   > 注意斜杠的方向\n\n5. 保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。","source":"_posts/WebStorm-2018-版本破解.md","raw":"---\ntitle: WebStorm 2018 版本破解\ndate: 2018-08-15\ncategories: \"工具\"\ntags:\n     - WebStorm\n     - 工具\n---\n\n\n\n\n\n\n本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：\n\n1. 下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2\n\n2. 下载破解补丁。[下载链接](https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg)，密码：yxb5\n\n3. 拷贝补丁到 WebStorm 安装目录的 bin 目录下\n\n4. 同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：\n\n   **-javaagent:webstorm安装路径/bin/破解补丁名字.jar**\n\n   如笔者要添加的一行代码为：\n\n   ```Java\n   -javaagent:C:/Program Files/JetBrains/WebStorm 2018.1.2/bin/JetbrainsCrack-2.8-release-enc.jar\n   ```\n\n   > 注意斜杠的方向\n\n5. 保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。","slug":"WebStorm-2018-版本破解","published":1,"updated":"2018-09-29T01:14:10.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xctd000mmgqu8li8or4t","content":"<p>本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：</p>\n<ol>\n<li><p>下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2</p>\n</li>\n<li><p>下载破解补丁。<a href=\"https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg\" target=\"_blank\" rel=\"noopener\">下载链接</a>，密码：yxb5</p>\n</li>\n<li><p>拷贝补丁到 WebStorm 安装目录的 bin 目录下</p>\n</li>\n<li><p>同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：</p>\n<p><strong>-javaagent:webstorm安装路径/bin/破解补丁名字.jar</strong></p>\n<p>如笔者要添加的一行代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-javaagent:C:/Program Files/JetBrains/WebStorm <span class=\"number\">2018.1</span>.2/bin/JetbrainsCrack-<span class=\"number\">2.8</span>-release-enc.jar</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意斜杠的方向</p>\n</blockquote>\n</li>\n<li><p>保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>本文讲述的是 Windows 的 WebStorm 2018 版本的破解。步骤如下：</p>\n<ol>\n<li><p>下载 WebStorm . 笔者下载的版本为 WebStorm 2018.1.2</p>\n</li>\n<li><p>下载破解补丁。<a href=\"https://pan.baidu.com/s/1ExVU0878pvHTuMQ8myKdCg\" target=\"_blank\" rel=\"noopener\">下载链接</a>，密码：yxb5</p>\n</li>\n<li><p>拷贝补丁到 WebStorm 安装目录的 bin 目录下</p>\n</li>\n<li><p>同时修改 bin 目录下的 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions 文件，在它们的最上面添加以下格式的代码：</p>\n<p><strong>-javaagent:webstorm安装路径/bin/破解补丁名字.jar</strong></p>\n<p>如笔者要添加的一行代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-javaagent:C:/Program Files/JetBrains/WebStorm <span class=\"number\">2018.1</span>.2/bin/JetbrainsCrack-<span class=\"number\">2.8</span>-release-enc.jar</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意斜杠的方向</p>\n</blockquote>\n</li>\n<li><p>保存文件。启动 WebStorm , 选择 activation code , 并将上面的那一行代码作为激活码拷贝进入即可破解成功。</p>\n</li>\n</ol>\n"},{"title":"localStorage 实现历史记录功能","date":"2018-09-28T16:00:00.000Z","_content":"\n\n\n\n\n\n我们知道 **localStorage 的生命周期是永久的**。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。\n\n**sessionStorage 的生命周期为当前窗口或者标签页**。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。\n\n> 不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。\n\n\n如此看来，localStorage 更适合用来做历史输入记录的存储。\n\n> 思路：存储的历史记录用 historyItems 表示，historyItems 以 '|' 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。\n\n**存储数据**\n\n```\nsetHistoryItem(keyword) {\n    keyword = keyword.trim();\n    let { historyItems } = localStorage;\n    if (historyItems === undefined) {\n        localStorage.historyItems = keyword;\n    } else {\n        const onlyItem = historyItems.split('|').filter(e => e != keyword);\n        if (onlyItem.length > 0) {\n            historyItems = keyword + '|' + onlyItem.join('|');\n        }\n        localStorage.historyItems = historyItems;\n    }\n}\n```\n\n**获取所有数据**\n\n```\ngetHistoryItems() {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    return localStorage.historyItems.split('|');\n}\n```\n\n**根据关键字获取数据**\n\n```\ngetHistoryItemsByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    keyword = keyword.trim();\n    let seletedHistoryItems = localStorage.historyItems.split('|').filter(e => e.indexOf(keyword) != -1);\n    return seletedHistoryItems;\n}\n```\n\n**根据关键字删除数据**\n\n```\ndeleteHistoryItemByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return;\n    }\n    let historyItems = localStorage.historyItems.split('|');\n    let index = historyItems.indexOf(keyword);\n    if (index < 0) {\n        return;\n    }\n    historyItems.splice(index, 1);\n    localStorage.historyItems = historyItems.join('|');\n}\n```\n\n**清空数据**\n\n```\nclearHistory() {\n    localStorage.removeItem('historyItems');\n}\n```","source":"_posts/localStorage-实现历史记录功能.md","raw":"---\ntitle: localStorage 实现历史记录功能\ndate: 2018-09-29\ncategories: \"前端\"\ntags:\n     - localStorage\n---\n\n\n\n\n\n\n我们知道 **localStorage 的生命周期是永久的**。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。\n\n**sessionStorage 的生命周期为当前窗口或者标签页**。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。\n\n> 不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。\n\n\n如此看来，localStorage 更适合用来做历史输入记录的存储。\n\n> 思路：存储的历史记录用 historyItems 表示，historyItems 以 '|' 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。\n\n**存储数据**\n\n```\nsetHistoryItem(keyword) {\n    keyword = keyword.trim();\n    let { historyItems } = localStorage;\n    if (historyItems === undefined) {\n        localStorage.historyItems = keyword;\n    } else {\n        const onlyItem = historyItems.split('|').filter(e => e != keyword);\n        if (onlyItem.length > 0) {\n            historyItems = keyword + '|' + onlyItem.join('|');\n        }\n        localStorage.historyItems = historyItems;\n    }\n}\n```\n\n**获取所有数据**\n\n```\ngetHistoryItems() {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    return localStorage.historyItems.split('|');\n}\n```\n\n**根据关键字获取数据**\n\n```\ngetHistoryItemsByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return [];\n    }\n    keyword = keyword.trim();\n    let seletedHistoryItems = localStorage.historyItems.split('|').filter(e => e.indexOf(keyword) != -1);\n    return seletedHistoryItems;\n}\n```\n\n**根据关键字删除数据**\n\n```\ndeleteHistoryItemByKeyword(keyword) {\n    if (localStorage.historyItems === undefined) {\n        return;\n    }\n    let historyItems = localStorage.historyItems.split('|');\n    let index = historyItems.indexOf(keyword);\n    if (index < 0) {\n        return;\n    }\n    historyItems.splice(index, 1);\n    localStorage.historyItems = historyItems.join('|');\n}\n```\n\n**清空数据**\n\n```\nclearHistory() {\n    localStorage.removeItem('historyItems');\n}\n```","slug":"localStorage-实现历史记录功能","published":1,"updated":"2018-10-25T00:35:06.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xctk000omgqu5kewcmpo","content":"<p>我们知道 <strong>localStorage 的生命周期是永久的</strong>。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。</p>\n<p><strong>sessionStorage 的生命周期为当前窗口或者标签页</strong>。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。</p>\n<blockquote>\n<p>不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。</p>\n</blockquote>\n<p>如此看来，localStorage 更适合用来做历史输入记录的存储。</p>\n<blockquote>\n<p>思路：存储的历史记录用 historyItems 表示，historyItems 以 ‘|’ 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。</p>\n</blockquote>\n<p><strong>存储数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHistoryItem(keyword) &#123;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let &#123; historyItems &#125; = localStorage;</span><br><span class=\"line\">    if (historyItems === undefined) &#123;</span><br><span class=\"line\">        localStorage.historyItems = keyword;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        const onlyItem = historyItems.split(&apos;|&apos;).filter(e =&gt; e != keyword);</span><br><span class=\"line\">        if (onlyItem.length &gt; 0) &#123;</span><br><span class=\"line\">            historyItems = keyword + &apos;|&apos; + onlyItem.join(&apos;|&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        localStorage.historyItems = historyItems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取所有数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItems() &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return localStorage.historyItems.split(&apos;|&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>根据关键字获取数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItemsByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let seletedHistoryItems = localStorage.historyItems.split(&apos;|&apos;).filter(e =&gt; e.indexOf(keyword) != -1);</span><br><span class=\"line\">    return seletedHistoryItems;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>根据关键字删除数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteHistoryItemByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let historyItems = localStorage.historyItems.split(&apos;|&apos;);</span><br><span class=\"line\">    let index = historyItems.indexOf(keyword);</span><br><span class=\"line\">    if (index &lt; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    historyItems.splice(index, 1);</span><br><span class=\"line\">    localStorage.historyItems = historyItems.join(&apos;|&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>清空数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clearHistory() &#123;</span><br><span class=\"line\">    localStorage.removeItem(&apos;historyItems&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>我们知道 <strong>localStorage 的生命周期是永久的</strong>。除非用户在浏览器上手动删除 localStorage 信息，否则这些信息将永久存在。</p>\n<p><strong>sessionStorage 的生命周期为当前窗口或者标签页</strong>。用户一旦关闭了窗口或者标签页，那么通过 sessionStorage 存储的数据也将被清空。</p>\n<blockquote>\n<p>不同浏览器间无法共享 localStorage 或 sessionStorage 中的数据，相同浏览器的不同页面间可共享相同的 localStorage（页面属于相同域名和端口），但不同页面或标签间无法共享 sessionStorage 的数据。</p>\n</blockquote>\n<p>如此看来，localStorage 更适合用来做历史输入记录的存储。</p>\n<blockquote>\n<p>思路：存储的历史记录用 historyItems 表示，historyItems 以 ‘|’ 分隔符存储各项记录，当某项记录 a 在 historyItems 中存在，那么把原来的 a 去掉，把新的记录 a 放到最前面。</p>\n</blockquote>\n<p><strong>存储数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHistoryItem(keyword) &#123;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let &#123; historyItems &#125; = localStorage;</span><br><span class=\"line\">    if (historyItems === undefined) &#123;</span><br><span class=\"line\">        localStorage.historyItems = keyword;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        const onlyItem = historyItems.split(&apos;|&apos;).filter(e =&gt; e != keyword);</span><br><span class=\"line\">        if (onlyItem.length &gt; 0) &#123;</span><br><span class=\"line\">            historyItems = keyword + &apos;|&apos; + onlyItem.join(&apos;|&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        localStorage.historyItems = historyItems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取所有数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItems() &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return localStorage.historyItems.split(&apos;|&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>根据关键字获取数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHistoryItemsByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keyword = keyword.trim();</span><br><span class=\"line\">    let seletedHistoryItems = localStorage.historyItems.split(&apos;|&apos;).filter(e =&gt; e.indexOf(keyword) != -1);</span><br><span class=\"line\">    return seletedHistoryItems;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>根据关键字删除数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteHistoryItemByKeyword(keyword) &#123;</span><br><span class=\"line\">    if (localStorage.historyItems === undefined) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let historyItems = localStorage.historyItems.split(&apos;|&apos;);</span><br><span class=\"line\">    let index = historyItems.indexOf(keyword);</span><br><span class=\"line\">    if (index &lt; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    historyItems.splice(index, 1);</span><br><span class=\"line\">    localStorage.historyItems = historyItems.join(&apos;|&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>清空数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clearHistory() &#123;</span><br><span class=\"line\">    localStorage.removeItem(&apos;historyItems&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"前端学习","date":"2018-05-25T05:45:00.000Z","_content":"\n**劝学**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font>\n\n> 三更灯火五更鸡，正是男儿读书时。\n\n> 黑发不知勤学早，白首方悔读书迟。\n\n<br/>\n\n## ES6\n\n- [ES6-Learning](https://github.com/zhich/ES6-Learning)\n\n## React\n\n- [React-Learning](https://github.com/zhich/React-Learning)\n\n## Vue\n\n- [Vue-Learning](https://github.com/zhich/Vue-Learning)","source":"_posts/前端学习.md","raw":"---\ntitle: 前端学习\ndate: 2018-05-25 13:45:00\ncategories: \"前端\"\ntags:\n     - 前端\n---\n\n**劝学**  <font color = #3a95ff face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font>\n\n> 三更灯火五更鸡，正是男儿读书时。\n\n> 黑发不知勤学早，白首方悔读书迟。\n\n<br/>\n\n## ES6\n\n- [ES6-Learning](https://github.com/zhich/ES6-Learning)\n\n## React\n\n- [React-Learning](https://github.com/zhich/React-Learning)\n\n## Vue\n\n- [Vue-Learning](https://github.com/zhich/Vue-Learning)","slug":"前端学习","published":1,"updated":"2018-07-02T02:31:25.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xctn000smgquevoyolwp","content":"<p><strong>劝学</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font></p>\n<blockquote>\n<p>三更灯火五更鸡，正是男儿读书时。</p>\n</blockquote>\n<blockquote>\n<p>黑发不知勤学早，白首方悔读书迟。</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><ul>\n<li><a href=\"https://github.com/zhich/ES6-Learning\" target=\"_blank\" rel=\"noopener\">ES6-Learning</a></li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li><a href=\"https://github.com/zhich/React-Learning\" target=\"_blank\" rel=\"noopener\">React-Learning</a></li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li><a href=\"https://github.com/zhich/Vue-Learning\" target=\"_blank\" rel=\"noopener\">Vue-Learning</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>劝学</strong>  <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">唐代：颜真卿</font></p>\n<blockquote>\n<p>三更灯火五更鸡，正是男儿读书时。</p>\n</blockquote>\n<blockquote>\n<p>黑发不知勤学早，白首方悔读书迟。</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><ul>\n<li><a href=\"https://github.com/zhich/ES6-Learning\" target=\"_blank\" rel=\"noopener\">ES6-Learning</a></li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li><a href=\"https://github.com/zhich/React-Learning\" target=\"_blank\" rel=\"noopener\">React-Learning</a></li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li><a href=\"https://github.com/zhich/Vue-Learning\" target=\"_blank\" rel=\"noopener\">Vue-Learning</a></li>\n</ul>\n"},{"title":"剑指 Offer","date":"2017-12-08T16:00:00.000Z","_content":"\n\n\n\n\n\n## [二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路**\n\n从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。\n\nSolution 1 : (168 ms , 16792 K)\n\n```Java\n    public boolean Find(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int tempJ = columnCount - 1;\n        for (int i = 0; i < rowCount; i++) {\n            for (int j = tempJ; j >= 0; j--) {\n                if (target == array[i][j]) {\n//                    System.out.println(i + \" \" + j);\n                    return true;\n                }\n                if (target > array[i][j]) {\n                    break;\n                }\n                tempJ = j - 1;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\nSolution 2 : (184 ms , 16708 K)\n\n```Java\n    public boolean Find2(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int i = 0;\n        int j = columnCount - 1;\n        while (i < rowCount && i >= 0 && j < columnCount && j >= 0) {\n            if (target == array[i][j]) {\n//                System.out.println(i + \" \" + j);\n                return true;\n            }\n            if (target > array[i][j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\n## [变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n\n**思路 1：**\n\n在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。\n\n假设 n 级台阶有 f(n) 种跳法。\n\n若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； \n\n若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；\n\n……\n\n若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。\n\n总结起来就是：\n\n**f(n) = f(n - 1) + f(n - 2) + …… + f(1)**  &nbsp; &nbsp; &nbsp; ①\n\n根据递推知识，不难想到\n\nf(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②\n\n将 ② 代入 ① 得：\n\n**f(n) = 2 * f(n - 1)**\n\n即 n 级台阶有 **2 ^ (n - 1)** 种跳法。\n\nSolution 1 : (17 ms , 8624 K)\n\n```Java\n    int JumpFloorII(int target) {\n        if (target <= 0) {\n            return 0;\n        }\n        return 1 << (target - 1);\n    }\n```\n\n**思路 2：**\n\nn 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 **2^n / 2 = 2^(n - 1)** 种。\n\n\n","source":"_posts/剑指-Offer.md","raw":"---\ntitle: 剑指 Offer\ndate: 2017-12-9\ncategories: \"算法\"\ntags:\n     - 算法\n---\n\n\n\n\n\n\n## [二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路**\n\n从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。\n\nSolution 1 : (168 ms , 16792 K)\n\n```Java\n    public boolean Find(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int tempJ = columnCount - 1;\n        for (int i = 0; i < rowCount; i++) {\n            for (int j = tempJ; j >= 0; j--) {\n                if (target == array[i][j]) {\n//                    System.out.println(i + \" \" + j);\n                    return true;\n                }\n                if (target > array[i][j]) {\n                    break;\n                }\n                tempJ = j - 1;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\nSolution 2 : (184 ms , 16708 K)\n\n```Java\n    public boolean Find2(int target, int[][] array) {\n        int rowCount = array.length;\n        int columnCount = array[0].length;\n        int i = 0;\n        int j = columnCount - 1;\n        while (i < rowCount && i >= 0 && j < columnCount && j >= 0) {\n            if (target == array[i][j]) {\n//                System.out.println(i + \" \" + j);\n                return true;\n            }\n            if (target > array[i][j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n//        System.out.println(\"not exist .\");\n        return false;\n    }\n```\n\n## [变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n**题目描述**\n\n一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n\n**思路 1：**\n\n在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。\n\n假设 n 级台阶有 f(n) 种跳法。\n\n若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； \n\n若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；\n\n……\n\n若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。\n\n总结起来就是：\n\n**f(n) = f(n - 1) + f(n - 2) + …… + f(1)**  &nbsp; &nbsp; &nbsp; ①\n\n根据递推知识，不难想到\n\nf(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②\n\n将 ② 代入 ① 得：\n\n**f(n) = 2 * f(n - 1)**\n\n即 n 级台阶有 **2 ^ (n - 1)** 种跳法。\n\nSolution 1 : (17 ms , 8624 K)\n\n```Java\n    int JumpFloorII(int target) {\n        if (target <= 0) {\n            return 0;\n        }\n        return 1 << (target - 1);\n    }\n```\n\n**思路 2：**\n\nn 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 **2^n / 2 = 2^(n - 1)** 种。\n\n\n","slug":"剑指-Offer","published":1,"updated":"2018-06-25T03:42:59.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xcto000umgqudp73emtt","content":"<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">二维数组中的查找</a></h2><p><strong>题目描述</strong></p>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路</strong></p>\n<p>从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。</p>\n<p>Solution 1 : (168 ms , 16792 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempJ = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rowCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = tempJ; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tempJ = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Solution 2 : (184 ms , 16708 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find2</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; rowCount &amp;&amp; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; columnCount &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=11162&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">变态跳台阶</a></h2><p><strong>题目描述</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>思路 1：</strong></p>\n<p>在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。</p>\n<p>假设 n 级台阶有 f(n) 种跳法。</p>\n<p>若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； </p>\n<p>若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；</p>\n<p>……</p>\n<p>若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。</p>\n<p>总结起来就是：</p>\n<p><strong>f(n) = f(n - 1) + f(n - 2) + …… + f(1)</strong>  &nbsp; &nbsp; &nbsp; ①</p>\n<p>根据递推知识，不难想到</p>\n<p>f(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②</p>\n<p>将 ② 代入 ① 得：</p>\n<p><strong>f(n) = 2 * f(n - 1)</strong></p>\n<p>即 n 级台阶有 <strong>2 ^ (n - 1)</strong> 种跳法。</p>\n<p>Solution 1 : (17 ms , 8624 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">JumpFloorII</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; (target - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>思路 2：</strong></p>\n<p>n 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 <strong>2^n / 2 = 2^(n - 1)</strong> 种。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">二维数组中的查找</a></h2><p><strong>题目描述</strong></p>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路</strong></p>\n<p>从二维数组右上角（或左下角）开始遍历查找。下面两种解法都是从右上角开始查找的，左下角同理。</p>\n<p>Solution 1 : (168 ms , 16792 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempJ = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rowCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = tempJ; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tempJ = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Solution 2 : (184 ms , 16708 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find2</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowCount = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = columnCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; rowCount &amp;&amp; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; columnCount &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == array[i][j]) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(i + \" \" + j);</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; array[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"not exist .\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=11162&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">变态跳台阶</a></h2><p><strong>题目描述</strong></p>\n<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级 …… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>\n<p><strong>思路 1：</strong></p>\n<p>在 n 级台阶中，第一步可能会跳 1 级、2 级 …… 、n 级。</p>\n<p>假设 n 级台阶有 f(n) 种跳法。</p>\n<p>若第一步跳了 1 级，那么剩下的 n - 1 级会有 f(n - 1) 种跳法； </p>\n<p>若第一步跳了 2 级，那么剩下的 n - 2 级会有 f(n - 2) 种跳法；</p>\n<p>……</p>\n<p>若第一步跳了 n - 1 级，那么剩下的 1 级会有 f(1) 种跳法。</p>\n<p>总结起来就是：</p>\n<p><strong>f(n) = f(n - 1) + f(n - 2) + …… + f(1)</strong>  &nbsp; &nbsp; &nbsp; ①</p>\n<p>根据递推知识，不难想到</p>\n<p>f(n - 1) = f(n - 2) + f(n - 3) + …… + f(1)  &nbsp; &nbsp; &nbsp; ②</p>\n<p>将 ② 代入 ① 得：</p>\n<p><strong>f(n) = 2 * f(n - 1)</strong></p>\n<p>即 n 级台阶有 <strong>2 ^ (n - 1)</strong> 种跳法。</p>\n<p>Solution 1 : (17 ms , 8624 K)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">JumpFloorII</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; (target - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>思路 2：</strong></p>\n<p>n 级台阶中，每级台阶只有「跳」与「不跳」两种可能。但是第 n 级台阶必须要跳，否则不算到达终点。那么，最终的跳法为 <strong>2^n / 2 = 2^(n - 1)</strong> 种。</p>\n"},{"title":"我的书单","date":"2018-03-06T16:00:00.000Z","_content":"\n\n\n\n\n\n### Java\n\n- [Java 编程思想（第 4 版）](https://book.douban.com/subject/2130190/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。\n\n- [Effective java 中文版（第 2 版）](https://book.douban.com/subject/3360807/)<font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。\n\n- [Java 并发编程实战](https://book.douban.com/subject/10484692/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  多线程并发方面不可多得的好书。\n\n- [深入理解 Java 虚拟机（第 2 版）](https://book.douban.com/subject/24722612/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  了解 Java 虚拟机的必读书籍。\n\n- [Java 程序员修炼之道](https://book.douban.com/subject/24841235/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n### Android\n\n- [Android 开发艺术探索](https://book.douban.com/subject/26599538/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 群英传](https://book.douban.com/subject/26599539/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 群英传：神兵利器](https://book.douban.com/subject/26855851/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [App 研发录：架构设计、Crash 分析和竞品技术分析](https://book.douban.com/subject/26649050/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 源码设计模式解析与实战](https://book.douban.com/subject/26644935/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 开发精要](https://book.douban.com/subject/11530748/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [kotlin-for-android-developers-zh](https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n### Web 前端\n\n- [JavaScript 权威指南 第 6 版（上、下册）](https://book.douban.com/subject/6854549/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Python\n\n- [Python 学习手册（第 4 版）](https://book.douban.com/subject/6049132/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 算法\n\n- [算法（第 4 版）](https://book.douban.com/subject/19952400/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n  Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。\n\n### 设计模式\n\n- [设计模式之禅（第 2 版）](https://book.douban.com/subject/25843319/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 其它技术书籍\n\n- [代码大全（第 2 版）](https://book.douban.com/subject/1477390/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [图解 HTTP](https://book.douban.com/subject/25863515/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [剑指 offer](https://book.douban.com/subject/6966465/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [重构 : 改善既有代码的设计](https://book.douban.com/subject/4262627/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [Maven 实战](https://book.douban.com/subject/5345682/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### 非技术书籍\n\n- [程序员的思维修炼](https://book.douban.com/subject/5372651/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [学习之道（第 2 版）](https://book.douban.com/subject/2345548/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [如何把事情做到最好](https://book.douban.com/subject/25830853/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [清醒思考的艺术](https://book.douban.com/subject/20492550/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [番茄工作法图解](https://book.douban.com/subject/5916234/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [习惯的力量](https://book.douban.com/subject/20507212/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [尽管去做](https://book.douban.com/subject/1085660/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [拖延心理学](https://book.douban.com/subject/4180711/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n\n","source":"_posts/我的书单.md","raw":"---\ntitle: 我的书单\ndate: 2018-3-7\ncategories: \"阅读笔记\"\ntags:\n     - 阅读笔记\n---\n\n\n\n\n\n\n### Java\n\n- [Java 编程思想（第 4 版）](https://book.douban.com/subject/2130190/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。\n\n- [Effective java 中文版（第 2 版）](https://book.douban.com/subject/3360807/)<font color = ##3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。\n\n- [Java 并发编程实战](https://book.douban.com/subject/10484692/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n  多线程并发方面不可多得的好书。\n\n- [深入理解 Java 虚拟机（第 2 版）](https://book.douban.com/subject/24722612/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n  了解 Java 虚拟机的必读书籍。\n\n- [Java 程序员修炼之道](https://book.douban.com/subject/24841235/)<font color = #3a95ff face=\"微软雅黑\"  size=1>「未阅读」</font>\n\n### Android\n\n- [Android 开发艺术探索](https://book.douban.com/subject/26599538/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 群英传](https://book.douban.com/subject/26599539/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 群英传：神兵利器](https://book.douban.com/subject/26855851/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [App 研发录：架构设计、Crash 分析和竞品技术分析](https://book.douban.com/subject/26649050/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [Android 源码设计模式解析与实战](https://book.douban.com/subject/26644935/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [Android 开发精要](https://book.douban.com/subject/11530748/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [kotlin-for-android-developers-zh](https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n### Web 前端\n\n- [JavaScript 权威指南 第 6 版（上、下册）](https://book.douban.com/subject/6854549/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### Python\n\n- [Python 学习手册（第 4 版）](https://book.douban.com/subject/6049132/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 算法\n\n- [算法（第 4 版）](https://book.douban.com/subject/19952400/) <font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n  Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。\n\n### 设计模式\n\n- [设计模式之禅（第 2 版）](https://book.douban.com/subject/25843319/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n### 其它技术书籍\n\n- [代码大全（第 2 版）](https://book.douban.com/subject/1477390/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [图解 HTTP](https://book.douban.com/subject/25863515/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [剑指 offer](https://book.douban.com/subject/6966465/)<font color = #1aad19 face=\"微软雅黑\" size=1>「阅读完」</font>\n\n- [重构 : 改善既有代码的设计](https://book.douban.com/subject/4262627/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [Maven 实战](https://book.douban.com/subject/5345682/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n### 非技术书籍\n\n- [程序员的思维修炼](https://book.douban.com/subject/5372651/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [学习之道（第 2 版）](https://book.douban.com/subject/2345548/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [如何把事情做到最好](https://book.douban.com/subject/25830853/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [清醒思考的艺术](https://book.douban.com/subject/20492550/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n- [番茄工作法图解](https://book.douban.com/subject/5916234/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [习惯的力量](https://book.douban.com/subject/20507212/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [尽管去做](https://book.douban.com/subject/1085660/)<font color = #3a95ff face=\"微软雅黑\" size=1>「未阅读」</font>\n\n- [拖延心理学](https://book.douban.com/subject/4180711/)<font color = #f74c31 face=\"微软雅黑\" size=1>「阅读中」</font>\n\n\n","slug":"我的书单","published":1,"updated":"2018-10-20T01:58:56.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xctr000ymgqu7l6nosbt","content":"<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/2130190/\" target=\"_blank\" rel=\"noopener\">Java 编程思想（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/3360807/\" target=\"_blank\" rel=\"noopener\">Effective java 中文版（第 2 版）</a><font color=\"##3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/10484692/\" target=\"_blank\" rel=\"noopener\">Java 并发编程实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>多线程并发方面不可多得的好书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24722612/\" target=\"_blank\" rel=\"noopener\">深入理解 Java 虚拟机（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>了解 Java 虚拟机的必读书籍。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24841235/\" target=\"_blank\" rel=\"noopener\">Java 程序员修炼之道</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/26599538/\" target=\"_blank\" rel=\"noopener\">Android 开发艺术探索</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26599539/\" target=\"_blank\" rel=\"noopener\">Android 群英传</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26855851/\" target=\"_blank\" rel=\"noopener\">Android 群英传：神兵利器</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26649050/\" target=\"_blank\" rel=\"noopener\">App 研发录：架构设计、Crash 分析和竞品技术分析</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26644935/\" target=\"_blank\" rel=\"noopener\">Android 源码设计模式解析与实战</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/11530748/\" target=\"_blank\" rel=\"noopener\">Android 开发精要</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details\" target=\"_blank\" rel=\"noopener\">kotlin-for-android-developers-zh</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n</ul>\n<h3 id=\"Web-前端\"><a href=\"#Web-前端\" class=\"headerlink\" title=\"Web 前端\"></a>Web 前端</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6854549/\" target=\"_blank\" rel=\"noopener\">JavaScript 权威指南 第 6 版（上、下册）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6049132/\" target=\"_blank\" rel=\"noopener\">Python 学习手册（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/19952400/\" target=\"_blank\" rel=\"noopener\">算法（第 4 版）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><ul>\n<li><a href=\"https://book.douban.com/subject/25843319/\" target=\"_blank\" rel=\"noopener\">设计模式之禅（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"其它技术书籍\"><a href=\"#其它技术书籍\" class=\"headerlink\" title=\"其它技术书籍\"></a>其它技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener\">代码大全（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">图解 HTTP</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6966465/\" target=\"_blank\" rel=\"noopener\">剑指 offer</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4262627/\" target=\"_blank\" rel=\"noopener\">重构 : 改善既有代码的设计</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5345682/\" target=\"_blank\" rel=\"noopener\">Maven 实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"非技术书籍\"><a href=\"#非技术书籍\" class=\"headerlink\" title=\"非技术书籍\"></a>非技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/5372651/\" target=\"_blank\" rel=\"noopener\">程序员的思维修炼</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/2345548/\" target=\"_blank\" rel=\"noopener\">学习之道（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25830853/\" target=\"_blank\" rel=\"noopener\">如何把事情做到最好</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20492550/\" target=\"_blank\" rel=\"noopener\">清醒思考的艺术</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5916234/\" target=\"_blank\" rel=\"noopener\">番茄工作法图解</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20507212/\" target=\"_blank\" rel=\"noopener\">习惯的力量</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/1085660/\" target=\"_blank\" rel=\"noopener\">尽管去做</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4180711/\" target=\"_blank\" rel=\"noopener\">拖延心理学</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/2130190/\" target=\"_blank\" rel=\"noopener\">Java 编程思想（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>这算是一本 Java 必读书籍了，有一定基础后再看会好一些，可以放到桌边当工具书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/3360807/\" target=\"_blank\" rel=\"noopener\">Effective java 中文版（第 2 版）</a><font color=\"##3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>这本介绍了 Java 中经常使用但容易被忽略的一些规则，适合对 Java 已经有一定基础的同学。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/10484692/\" target=\"_blank\" rel=\"noopener\">Java 并发编程实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>多线程并发方面不可多得的好书。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24722612/\" target=\"_blank\" rel=\"noopener\">深入理解 Java 虚拟机（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n<p>了解 Java 虚拟机的必读书籍。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/24841235/\" target=\"_blank\" rel=\"noopener\">Java 程序员修炼之道</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/26599538/\" target=\"_blank\" rel=\"noopener\">Android 开发艺术探索</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26599539/\" target=\"_blank\" rel=\"noopener\">Android 群英传</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26855851/\" target=\"_blank\" rel=\"noopener\">Android 群英传：神兵利器</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26649050/\" target=\"_blank\" rel=\"noopener\">App 研发录：架构设计、Crash 分析和竞品技术分析</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26644935/\" target=\"_blank\" rel=\"noopener\">Android 源码设计模式解析与实战</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/11530748/\" target=\"_blank\" rel=\"noopener\">Android 开发精要</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://legacy.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details\" target=\"_blank\" rel=\"noopener\">kotlin-for-android-developers-zh</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n</ul>\n<h3 id=\"Web-前端\"><a href=\"#Web-前端\" class=\"headerlink\" title=\"Web 前端\"></a>Web 前端</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6854549/\" target=\"_blank\" rel=\"noopener\">JavaScript 权威指南 第 6 版（上、下册）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://book.douban.com/subject/6049132/\" target=\"_blank\" rel=\"noopener\">Python 学习手册（第 4 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/19952400/\" target=\"_blank\" rel=\"noopener\">算法（第 4 版）</a> <font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n<p>Sedgewick 之巨著，与高德纳 TAOCP 一脉相承几十年多次修订，经久不衰的畅销书，涵盖所有程序员必须掌握的 50 种算法。</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><ul>\n<li><a href=\"https://book.douban.com/subject/25843319/\" target=\"_blank\" rel=\"noopener\">设计模式之禅（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></li>\n</ul>\n<h3 id=\"其它技术书籍\"><a href=\"#其它技术书籍\" class=\"headerlink\" title=\"其它技术书籍\"></a>其它技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener\">代码大全（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">图解 HTTP</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6966465/\" target=\"_blank\" rel=\"noopener\">剑指 offer</a><font color=\"#1aad19\" face=\"微软雅黑\" size=\"1\">「阅读完」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4262627/\" target=\"_blank\" rel=\"noopener\">重构 : 改善既有代码的设计</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5345682/\" target=\"_blank\" rel=\"noopener\">Maven 实战</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n</ul>\n<h3 id=\"非技术书籍\"><a href=\"#非技术书籍\" class=\"headerlink\" title=\"非技术书籍\"></a>非技术书籍</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/5372651/\" target=\"_blank\" rel=\"noopener\">程序员的思维修炼</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/2345548/\" target=\"_blank\" rel=\"noopener\">学习之道（第 2 版）</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/25830853/\" target=\"_blank\" rel=\"noopener\">如何把事情做到最好</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20492550/\" target=\"_blank\" rel=\"noopener\">清醒思考的艺术</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/5916234/\" target=\"_blank\" rel=\"noopener\">番茄工作法图解</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/20507212/\" target=\"_blank\" rel=\"noopener\">习惯的力量</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/1085660/\" target=\"_blank\" rel=\"noopener\">尽管去做</a><font color=\"#3a95ff\" face=\"微软雅黑\" size=\"1\">「未阅读」</font></p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/4180711/\" target=\"_blank\" rel=\"noopener\">拖延心理学</a><font color=\"#f74c31\" face=\"微软雅黑\" size=\"1\">「阅读中」</font></p>\n</li>\n</ul>\n"},{"title":"Android Jetpack 之 LiveData","date":"2018-11-22T00:28:00.000Z","_content":"\n\n\n\n\n\n### 概述\n\n- LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。\n- LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。\n- 使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。\n\n### 优点\n\n- 确保 UI 界面始终和数据状态保持一致。\n- 没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。\n- 不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。\n- UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。\n- 在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。\n- 当配置发生更改（如屏幕旋转）而重建 Activity / Fragment，它会立即收到最新的可用数据。\n-  LiveData 很适合用于组件（Activity / Fragment）之间的通信。\n\n### 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\nLiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。\n\n**结合 ViewModel 使用**\n\n以下代码场景：点击按钮提示一个名字。\n\n```Kotlin\nclass MyViewModel : ViewModel() {\n\n    // 创建一个 String 类型的 LiveData\n    // MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData\n    private lateinit var name: MutableLiveData<String>\n\n    fun getName(): MutableLiveData<String> {\n        if (!::name.isInitialized) {\n            name = MutableLiveData()\n        }\n        return name\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    private lateinit var myViewModel: MyViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        // 创建并注册观察者\n        myViewModel = ViewModelProviders.of(this).get(MyViewModel::class.java)\n        myViewModel.getName().observe(this, Observer {\n            // LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name\n            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()\n        })\n\n        btnSetName.setOnClickListener {\n            // 使用 setValue 的方式更新 LiveData 数据\n            myViewModel.getName().value = \"张三\"\n        }\n    }\n}\n```\n\n> 让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。\n\n**直接继承 LiveData 类**\n\n以下代码场景：在 Activity 中监听 Wifi 信号强度。\n\n```Kotlin\nclass WifiLiveData private constructor(context: Context) : LiveData<Int>() {\n\n    private var mContext: WeakReference<Context> = WeakReference(context)\n\n    companion object {\n\n        private var instance: WifiLiveData? = null\n\n        fun getInstance(context: Context): WifiLiveData {\n            if (instance == null) {\n                instance = WifiLiveData(context)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onActive() {\n        super.onActive()\n        registerReceiver()\n    }\n\n    override fun onInactive() {\n        super.onInactive()\n        unregisterReceiver()\n    }\n\n    /**\n     * 注册广播，监听 Wifi 信号强度\n     */\n    private fun registerReceiver() {\n        val intentFilter = IntentFilter()\n        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)\n        mContext.get()!!.registerReceiver(mReceiver, intentFilter)\n    }\n\n    /**\n     * 注销广播\n     */\n    private fun unregisterReceiver() {\n        mContext.get()!!.unregisterReceiver(mReceiver)\n    }\n\n    private val mReceiver = object : BroadcastReceiver() {\n\n        override fun onReceive(context: Context?, intent: Intent) {\n            when (intent.action) {\n                WifiManager.RSSI_CHANGED_ACTION -> getWifiLevel()\n            }\n        }\n    }\n\n    private fun getWifiLevel() {\n        val wifiManager = mContext.get()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) as WifiManager\n        val wifiInfo = wifiManager.connectionInfo\n        val level = wifiInfo.rssi\n\n        instance!!.value = level // 发送 Wifi 的信号强度给观察者\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        withExtendsLiveDataTest()\n    }\n\n    /**\n     * 直接继承 LiveData 类\n     */\n    private fun withExtendsLiveDataTest() {\n        WifiLiveData.getInstance(this).observe(this, Observer {\n            Log.e(\"LiveDataActivity\", it.toString()) // 观察者收到数据更新的通知，打印 Wifi 信号强度\n        })\n    }\n}\n```\n\n> 当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。\n\n### 源码解析\n\n#### observe 注册流程\n\nLiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity / Fragment) 和观察者 Observer 关联起来。\n\n```Java\nLiveData.observe(LifecycleOwner owner , Observer<T> observer)\n```\n\n进入 LiveData 的 observe() 方法中\n\n```Java\npublic void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n    if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n        // 若 LifecycleOwner 处于 DESTROYED 状态，则返回\n        return;\n    }\n\n    // LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起\n    LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n\n    // mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）\n    // 是否已有 wrapper（value）与之关联\n    // 若已关联则直接返回关联值，否则关联后再返回 wrapper\n    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n\n    if (existing != null && !existing.isAttachedTo(owner)) {\n        throw new IllegalArgumentException(\"Cannot add the same observer\"\n                + \" with different lifecycles\");\n    }\n    if (existing != null) {\n        return;\n    }\n\n    // 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又\n    // 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver\n    // 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver\n    owner.getLifecycle().addObserver(wrapper);\n}\n```\n\n从上面的代码可知，observe() 方法最终是会调用：\n\n```Java\nLifecycleOwner.getLifecycle().addObserver(LifecycleObserver)\n```\n\n因此 LiveData 是能够感知观察者的生命周期变化的。\n\n#### 感知生命周期变化\n\n通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。\n\n```Java\nclass LifecycleBoundObserver extends ObserverWrapper implements GenericLifecycleObserver {\n    @NonNull final LifecycleOwner mOwner;\n\n    LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<T> observer) {\n        super(observer); // 保存 Observer\n        mOwner = owner;  // 保存 LifecycleOwner\n    }\n\n    @Override\n    boolean shouldBeActive() {\n        // 判断是否处于激活状态\n        return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n    }\n\n\n    @Override\n    public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n        // 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象\n        if (mOwner.getLifecycle().getCurrentState() == DESTROYED) {\n            // 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法\n            removeObserver(mObserver);\n            return;\n        }\n        // 若处于激活状态，则调用 activeStateChanged() 方法\n        activeStateChanged(shouldBeActive());\n    }\n\n    @Override\n    boolean isAttachedTo(LifecycleOwner owner) {\n        return mOwner == owner;\n    }\n\n    @Override\n    void detachObserver() {\n        mOwner.getLifecycle().removeObserver(this);\n    }\n}\n```\n\n当组件（Activity / Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。\n\n```Java\nvoid activeStateChanged(boolean newActive) {\n    // 若新旧状态一致，则返回\n    if (newActive == mActive) {\n        return;\n    }\n    // immediately set active state, so we'd never dispatch anything to inactive owner\n    mActive = newActive;\n    boolean wasInactive = LiveData.this.mActiveCount == 0;\n    LiveData.this.mActiveCount += mActive ? 1 : -1;\n    if (wasInactive && mActive) { // 激活状态的 observer 个数从 0 到 1\n        onActive(); // 空实现，一般让子类去重写\n    }\n    if (LiveData.this.mActiveCount == 0 && !mActive) { // 激活状态的 observer 个数从 1 到 0\n        onInactive();  // 空实现，一般让子类去重写\n    }\n    if (mActive) { // 激活状态，向观察者发送 LiveData 的值\n        dispatchingValue(this);\n    }\n}\n```\n\n再看看最终调用的 dispatchingValue() 方法。\n\n```Java\nprivate void dispatchingValue(@Nullable ObserverWrapper initiator) {\n    // ...\n    do {\n        mDispatchInvalidated = false;\n        if (initiator != null) {\n            considerNotify(initiator);\n            initiator = null;\n        } else {\n            // 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据\n            for (Iterator<Map.Entry<Observer<T>, ObserverWrapper>> iterator =\n                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                considerNotify(iterator.next().getValue());\n                if (mDispatchInvalidated) {\n                    break;\n                }\n            }\n        }\n    } while (mDispatchInvalidated);\n    // ...\n}\n```\n\n可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。\n\n```Java\nprivate void considerNotify(ObserverWrapper observer) {\n    // ...\n    observer.mObserver.onChanged((T) mData);\n}\n```\n\n上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。\n\n总结上面的分析就是：**调用 LiveData.observe(LifecycleOwner owner , Observer<T> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。**\n\n#### 通知观察者更新数据的方式\n\nLiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（**必须在主线程调用**），另一个是 postValue() 方法（**必须在子线程调用**）。\n\n**setValue() 方法**\n\n```Java\n@MainThread\nprotected void setValue(T value) {\n    assertMainThread(\"setValue\");\n    mVersion++;\n    mData = value;\n    dispatchingValue(null);\n}\n```\n\ndispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。\n\n**postValue() 方法**\n\n```Java\nprotected void postValue(T value) {\n    boolean postTask;\n    synchronized (mDataLock) {\n        postTask = mPendingData == NOT_SET;\n        mPendingData = value;\n    }\n    if (!postTask) {\n        return;\n    }\n    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n}\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n    @Override\n    public void run() {\n        Object newValue;\n        synchronized (mDataLock) {\n            newValue = mPendingData;\n            mPendingData = NOT_SET;\n        }\n        //noinspection unchecked\n        setValue((T) newValue);\n    }\n};\n```\n\n可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android开发——架构组件LiveData源码解析](https://blog.csdn.net/SEU_Calvin/article/details/82256693)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)\n","source":"_posts/Android-Jetpack-之-LiveData.md","raw":"---\ntitle: Android Jetpack 之 LiveData\ndate: 2018-11-22 8:28:00\ncategories: \"Android\"\ntags:\n     - Android\n     - LiveData\n     - Jetpack\n---\n\n\n\n\n\n\n### 概述\n\n- LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。\n- LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。\n- 使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。\n\n### 优点\n\n- 确保 UI 界面始终和数据状态保持一致。\n- 没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。\n- 不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。\n- UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。\n- 在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。\n- 当配置发生更改（如屏幕旋转）而重建 Activity / Fragment，它会立即收到最新的可用数据。\n-  LiveData 很适合用于组件（Activity / Fragment）之间的通信。\n\n### 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\nLiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。\n\n**结合 ViewModel 使用**\n\n以下代码场景：点击按钮提示一个名字。\n\n```Kotlin\nclass MyViewModel : ViewModel() {\n\n    // 创建一个 String 类型的 LiveData\n    // MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData\n    private lateinit var name: MutableLiveData<String>\n\n    fun getName(): MutableLiveData<String> {\n        if (!::name.isInitialized) {\n            name = MutableLiveData()\n        }\n        return name\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    private lateinit var myViewModel: MyViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        // 创建并注册观察者\n        myViewModel = ViewModelProviders.of(this).get(MyViewModel::class.java)\n        myViewModel.getName().observe(this, Observer {\n            // LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name\n            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()\n        })\n\n        btnSetName.setOnClickListener {\n            // 使用 setValue 的方式更新 LiveData 数据\n            myViewModel.getName().value = \"张三\"\n        }\n    }\n}\n```\n\n> 让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。\n\n**直接继承 LiveData 类**\n\n以下代码场景：在 Activity 中监听 Wifi 信号强度。\n\n```Kotlin\nclass WifiLiveData private constructor(context: Context) : LiveData<Int>() {\n\n    private var mContext: WeakReference<Context> = WeakReference(context)\n\n    companion object {\n\n        private var instance: WifiLiveData? = null\n\n        fun getInstance(context: Context): WifiLiveData {\n            if (instance == null) {\n                instance = WifiLiveData(context)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onActive() {\n        super.onActive()\n        registerReceiver()\n    }\n\n    override fun onInactive() {\n        super.onInactive()\n        unregisterReceiver()\n    }\n\n    /**\n     * 注册广播，监听 Wifi 信号强度\n     */\n    private fun registerReceiver() {\n        val intentFilter = IntentFilter()\n        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)\n        mContext.get()!!.registerReceiver(mReceiver, intentFilter)\n    }\n\n    /**\n     * 注销广播\n     */\n    private fun unregisterReceiver() {\n        mContext.get()!!.unregisterReceiver(mReceiver)\n    }\n\n    private val mReceiver = object : BroadcastReceiver() {\n\n        override fun onReceive(context: Context?, intent: Intent) {\n            when (intent.action) {\n                WifiManager.RSSI_CHANGED_ACTION -> getWifiLevel()\n            }\n        }\n    }\n\n    private fun getWifiLevel() {\n        val wifiManager = mContext.get()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) as WifiManager\n        val wifiInfo = wifiManager.connectionInfo\n        val level = wifiInfo.rssi\n\n        instance!!.value = level // 发送 Wifi 的信号强度给观察者\n    }\n}\n```\n\n```Kotlin\nclass LiveDataActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        withExtendsLiveDataTest()\n    }\n\n    /**\n     * 直接继承 LiveData 类\n     */\n    private fun withExtendsLiveDataTest() {\n        WifiLiveData.getInstance(this).observe(this, Observer {\n            Log.e(\"LiveDataActivity\", it.toString()) // 观察者收到数据更新的通知，打印 Wifi 信号强度\n        })\n    }\n}\n```\n\n> 当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。\n\n### 源码解析\n\n#### observe 注册流程\n\nLiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity / Fragment) 和观察者 Observer 关联起来。\n\n```Java\nLiveData.observe(LifecycleOwner owner , Observer<T> observer)\n```\n\n进入 LiveData 的 observe() 方法中\n\n```Java\npublic void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n    if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n        // 若 LifecycleOwner 处于 DESTROYED 状态，则返回\n        return;\n    }\n\n    // LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起\n    LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n\n    // mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）\n    // 是否已有 wrapper（value）与之关联\n    // 若已关联则直接返回关联值，否则关联后再返回 wrapper\n    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n\n    if (existing != null && !existing.isAttachedTo(owner)) {\n        throw new IllegalArgumentException(\"Cannot add the same observer\"\n                + \" with different lifecycles\");\n    }\n    if (existing != null) {\n        return;\n    }\n\n    // 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又\n    // 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver\n    // 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver\n    owner.getLifecycle().addObserver(wrapper);\n}\n```\n\n从上面的代码可知，observe() 方法最终是会调用：\n\n```Java\nLifecycleOwner.getLifecycle().addObserver(LifecycleObserver)\n```\n\n因此 LiveData 是能够感知观察者的生命周期变化的。\n\n#### 感知生命周期变化\n\n通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。\n\n```Java\nclass LifecycleBoundObserver extends ObserverWrapper implements GenericLifecycleObserver {\n    @NonNull final LifecycleOwner mOwner;\n\n    LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<T> observer) {\n        super(observer); // 保存 Observer\n        mOwner = owner;  // 保存 LifecycleOwner\n    }\n\n    @Override\n    boolean shouldBeActive() {\n        // 判断是否处于激活状态\n        return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n    }\n\n\n    @Override\n    public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n        // 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象\n        if (mOwner.getLifecycle().getCurrentState() == DESTROYED) {\n            // 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法\n            removeObserver(mObserver);\n            return;\n        }\n        // 若处于激活状态，则调用 activeStateChanged() 方法\n        activeStateChanged(shouldBeActive());\n    }\n\n    @Override\n    boolean isAttachedTo(LifecycleOwner owner) {\n        return mOwner == owner;\n    }\n\n    @Override\n    void detachObserver() {\n        mOwner.getLifecycle().removeObserver(this);\n    }\n}\n```\n\n当组件（Activity / Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。\n\n```Java\nvoid activeStateChanged(boolean newActive) {\n    // 若新旧状态一致，则返回\n    if (newActive == mActive) {\n        return;\n    }\n    // immediately set active state, so we'd never dispatch anything to inactive owner\n    mActive = newActive;\n    boolean wasInactive = LiveData.this.mActiveCount == 0;\n    LiveData.this.mActiveCount += mActive ? 1 : -1;\n    if (wasInactive && mActive) { // 激活状态的 observer 个数从 0 到 1\n        onActive(); // 空实现，一般让子类去重写\n    }\n    if (LiveData.this.mActiveCount == 0 && !mActive) { // 激活状态的 observer 个数从 1 到 0\n        onInactive();  // 空实现，一般让子类去重写\n    }\n    if (mActive) { // 激活状态，向观察者发送 LiveData 的值\n        dispatchingValue(this);\n    }\n}\n```\n\n再看看最终调用的 dispatchingValue() 方法。\n\n```Java\nprivate void dispatchingValue(@Nullable ObserverWrapper initiator) {\n    // ...\n    do {\n        mDispatchInvalidated = false;\n        if (initiator != null) {\n            considerNotify(initiator);\n            initiator = null;\n        } else {\n            // 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据\n            for (Iterator<Map.Entry<Observer<T>, ObserverWrapper>> iterator =\n                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                considerNotify(iterator.next().getValue());\n                if (mDispatchInvalidated) {\n                    break;\n                }\n            }\n        }\n    } while (mDispatchInvalidated);\n    // ...\n}\n```\n\n可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。\n\n```Java\nprivate void considerNotify(ObserverWrapper observer) {\n    // ...\n    observer.mObserver.onChanged((T) mData);\n}\n```\n\n上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。\n\n总结上面的分析就是：**调用 LiveData.observe(LifecycleOwner owner , Observer<T> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。**\n\n#### 通知观察者更新数据的方式\n\nLiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（**必须在主线程调用**），另一个是 postValue() 方法（**必须在子线程调用**）。\n\n**setValue() 方法**\n\n```Java\n@MainThread\nprotected void setValue(T value) {\n    assertMainThread(\"setValue\");\n    mVersion++;\n    mData = value;\n    dispatchingValue(null);\n}\n```\n\ndispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。\n\n**postValue() 方法**\n\n```Java\nprotected void postValue(T value) {\n    boolean postTask;\n    synchronized (mDataLock) {\n        postTask = mPendingData == NOT_SET;\n        mPendingData = value;\n    }\n    if (!postTask) {\n        return;\n    }\n    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n}\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n    @Override\n    public void run() {\n        Object newValue;\n        synchronized (mDataLock) {\n            newValue = mPendingData;\n            mPendingData = NOT_SET;\n        }\n        //noinspection unchecked\n        setValue((T) newValue);\n    }\n};\n```\n\n可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android开发——架构组件LiveData源码解析](https://blog.csdn.net/SEU_Calvin/article/details/82256693)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)\n","slug":"Android-Jetpack-之-LiveData","published":1,"updated":"2018-12-06T01:19:20.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd2h0028mgqu9u2z7ilf","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。</li>\n<li>LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。</li>\n<li>使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>确保 UI 界面始终和数据状态保持一致。</li>\n<li>没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。</li>\n<li>不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。</li>\n<li>UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。</li>\n<li>在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。</li>\n<li>当配置发生更改（如屏幕旋转）而重建 Activity / Fragment，它会立即收到最新的可用数据。</li>\n<li>LiveData 很适合用于组件（Activity / Fragment）之间的通信。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\" target=\"_blank\" rel=\"noopener\">添加相关依赖</a></p>\n<p>LiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。</p>\n<p><strong>结合 ViewModel 使用</strong></p>\n<p>以下代码场景：点击按钮提示一个名字。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 String 类型的 LiveData</span></span><br><span class=\"line\">    <span class=\"comment\">// MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> name: MutableLiveData&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>: MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::name.isInitialized) &#123;</span><br><span class=\"line\">            name = MutableLiveData()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myViewModel: MyViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建并注册观察者</span></span><br><span class=\"line\">        myViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        myViewModel.getName().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"comment\">// LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name</span></span><br><span class=\"line\">            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        btnSetName.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用 setValue 的方式更新 LiveData 数据</span></span><br><span class=\"line\">            myViewModel.getName().value = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。</p>\n</blockquote>\n<p><strong>直接继承 LiveData 类</strong></p>\n<p>以下代码场景：在 Activity 中监听 Wifi 信号强度。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WifiLiveData</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>(context: Context) : LiveData&lt;<span class=\"built_in\">Int</span>&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mContext: WeakReference&lt;Context&gt; = WeakReference(context)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: WifiLiveData? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: WifiLiveData &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                instance = WifiLiveData(context)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance!!</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActive()</span><br><span class=\"line\">        registerReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onInactive()</span><br><span class=\"line\">        unregisterReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册广播，监听 Wifi 信号强度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intentFilter = IntentFilter()</span><br><span class=\"line\">        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.registerReceiver(mReceiver, intentFilter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注销广播</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">unregisterReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.unregisterReceiver(mReceiver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mReceiver = <span class=\"keyword\">object</span> : BroadcastReceiver() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>?, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (intent.action) &#123;</span><br><span class=\"line\">                WifiManager.RSSI_CHANGED_ACTION -&gt; getWifiLevel()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getWifiLevel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiManager = mContext.<span class=\"keyword\">get</span>()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) <span class=\"keyword\">as</span> WifiManager</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiInfo = wifiManager.connectionInfo</span><br><span class=\"line\">        <span class=\"keyword\">val</span> level = wifiInfo.rssi</span><br><span class=\"line\"></span><br><span class=\"line\">        instance!!.value = level <span class=\"comment\">// 发送 Wifi 的信号强度给观察者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        withExtendsLiveDataTest()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 直接继承 LiveData 类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">withExtendsLiveDataTest</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        WifiLiveData.getInstance(<span class=\"keyword\">this</span>).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">\"LiveDataActivity\"</span>, it.toString()) <span class=\"comment\">// 观察者收到数据更新的通知，打印 Wifi 信号强度</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。</p>\n</blockquote>\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"observe-注册流程\"><a href=\"#observe-注册流程\" class=\"headerlink\" title=\"observe 注册流程\"></a>observe 注册流程</h4><p>LiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity / Fragment) 和观察者 Observer 关联起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData.observe(LifecycleOwner owner , Observer&lt;T&gt; observer)</span><br></pre></td></tr></table></figure>\n<p>进入 LiveData 的 observe() 方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 LifecycleOwner 处于 DESTROYED 状态，则返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起</span></span><br><span class=\"line\">    LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否已有 wrapper（value）与之关联</span></span><br><span class=\"line\">    <span class=\"comment\">// 若已关联则直接返回关联值，否则关联后再返回 wrapper</span></span><br><span class=\"line\">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot add the same observer\"</span></span><br><span class=\"line\">                + <span class=\"string\">\" with different lifecycles\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又</span></span><br><span class=\"line\">    <span class=\"comment\">// 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver</span></span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可知，observe() 方法最终是会调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LifecycleOwner.getLifecycle().addObserver(LifecycleObserver)</span><br></pre></td></tr></table></figure>\n<p>因此 LiveData 是能够感知观察者的生命周期变化的。</p>\n<h4 id=\"感知生命周期变化\"><a href=\"#感知生命周期变化\" class=\"headerlink\" title=\"感知生命周期变化\"></a>感知生命周期变化</h4><p>通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(observer); <span class=\"comment\">// 保存 Observer</span></span><br><span class=\"line\">        mOwner = owner;  <span class=\"comment\">// 保存 LifecycleOwner</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否处于激活状态</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法</span></span><br><span class=\"line\">            removeObserver(mObserver);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若处于激活状态，则调用 activeStateChanged() 方法</span></span><br><span class=\"line\">        activeStateChanged(shouldBeActive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当组件（Activity / Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若新旧状态一致，则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive owner</span></span><br><span class=\"line\">    mActive = newActive;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">    LiveData.<span class=\"keyword\">this</span>.mActiveCount += mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wasInactive &amp;&amp; mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 0 到 1</span></span><br><span class=\"line\">        onActive(); <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 1 到 0</span></span><br><span class=\"line\">        onInactive();  <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mActive) &#123; <span class=\"comment\">// 激活状态，向观察者发送 LiveData 的值</span></span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再看看最终调用的 dispatchingValue() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(@Nullable ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            considerNotify(initiator);</span><br><span class=\"line\">            initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。</p>\n<p>总结上面的分析就是：<strong>调用 LiveData.observe(LifecycleOwner owner , Observer<t> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。</t></strong></p>\n<h4 id=\"通知观察者更新数据的方式\"><a href=\"#通知观察者更新数据的方式\" class=\"headerlink\" title=\"通知观察者更新数据的方式\"></a>通知观察者更新数据的方式</h4><p>LiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（<strong>必须在主线程调用</strong>），另一个是 postValue() 方法（<strong>必须在子线程调用</strong>）。</p>\n<p><strong>setValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    assertMainThread(<span class=\"string\">\"setValue\"</span>);</span><br><span class=\"line\">    mVersion++;</span><br><span class=\"line\">    mData = value;</span><br><span class=\"line\">    dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。</p>\n<p><strong>postValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">        postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">        mPendingData = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object newValue;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            newValue = mPendingData;</span><br><span class=\"line\">            mPendingData = NOT_SET;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        setValue((T) newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。</p>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/SEU_Calvin/article/details/82256693\" target=\"_blank\" rel=\"noopener\">Android开发——架构组件LiveData源码解析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>LiveData 是一个持有数据的类，它持有的数据是可以被观察者订阅的，当数据被修改时就会通知观察者。观察者可以是 Activity、Fragment、Service 等。</li>\n<li>LiveData 能够感知观察者的生命周期，只有当观察者处于激活状态（STARTED、RESUMED）才会接收到数据更新的通知，在未激活时会自动解注册观察者，以减少内存泄漏。</li>\n<li>使用 LiveData 保存数据时，由于数据和组件是分离的，当组件重建时可以保证数据不会丢失。</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>确保 UI 界面始终和数据状态保持一致。</li>\n<li>没有内存泄漏，观察者绑定到 Lifecycle 对象并在其相关生命周期 destroyed 后自行解除绑定。</li>\n<li>不会因为 Activity 停止了而奔溃，如 Activity finish 了，它就不会收到任何 LiveData 事件了。</li>\n<li>UI 组件只需观察相关数据，不需要停止或恢复观察，LiveData 会自动管理这些操作，因为 LiveData 可以感知生命周期状态的更改。</li>\n<li>在生命周期从非激活状态变为激活状态，始终保持最新数据，如后台 Activity 在返回到前台后可以立即收到最新数据。</li>\n<li>当配置发生更改（如屏幕旋转）而重建 Activity / Fragment，它会立即收到最新的可用数据。</li>\n<li>LiveData 很适合用于组件（Activity / Fragment）之间的通信。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\" target=\"_blank\" rel=\"noopener\">添加相关依赖</a></p>\n<p>LiveData 有两种使用方式，结合 ViewModel 使用以及直接继承 LiveData 类。</p>\n<p><strong>结合 ViewModel 使用</strong></p>\n<p>以下代码场景：点击按钮提示一个名字。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 String 类型的 LiveData</span></span><br><span class=\"line\">    <span class=\"comment\">// MutableLiveData 是抽象类 LiveData 的子类，我们一般使用的是 MutableLiveData</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> name: MutableLiveData&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>: MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::name.isInitialized) &#123;</span><br><span class=\"line\">            name = MutableLiveData()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myViewModel: MyViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建并注册观察者</span></span><br><span class=\"line\">        myViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        myViewModel.getName().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"comment\">// LiveData 数据更新回调，it 代表被观察对象的数据，此处为 name</span></span><br><span class=\"line\">            Toast.makeText(baseContext, it, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        btnSetName.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用 setValue 的方式更新 LiveData 数据</span></span><br><span class=\"line\">            myViewModel.getName().value = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>让数据（name）和组件（LiveDataActivity）分离，当 Activity 重建时，数据（name）不会丢失。</p>\n</blockquote>\n<p><strong>直接继承 LiveData 类</strong></p>\n<p>以下代码场景：在 Activity 中监听 Wifi 信号强度。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WifiLiveData</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>(context: Context) : LiveData&lt;<span class=\"built_in\">Int</span>&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mContext: WeakReference&lt;Context&gt; = WeakReference(context)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: WifiLiveData? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: WifiLiveData &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                instance = WifiLiveData(context)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance!!</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActive()</span><br><span class=\"line\">        registerReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onInactive()</span><br><span class=\"line\">        unregisterReceiver()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册广播，监听 Wifi 信号强度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intentFilter = IntentFilter()</span><br><span class=\"line\">        intentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION)</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.registerReceiver(mReceiver, intentFilter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注销广播</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">unregisterReceiver</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mContext.<span class=\"keyword\">get</span>()!!.unregisterReceiver(mReceiver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mReceiver = <span class=\"keyword\">object</span> : BroadcastReceiver() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>?, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (intent.action) &#123;</span><br><span class=\"line\">                WifiManager.RSSI_CHANGED_ACTION -&gt; getWifiLevel()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getWifiLevel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiManager = mContext.<span class=\"keyword\">get</span>()!!.applicationContext.getSystemService(android.content.Context.WIFI_SERVICE) <span class=\"keyword\">as</span> WifiManager</span><br><span class=\"line\">        <span class=\"keyword\">val</span> wifiInfo = wifiManager.connectionInfo</span><br><span class=\"line\">        <span class=\"keyword\">val</span> level = wifiInfo.rssi</span><br><span class=\"line\"></span><br><span class=\"line\">        instance!!.value = level <span class=\"comment\">// 发送 Wifi 的信号强度给观察者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveDataActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_live_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        withExtendsLiveDataTest()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 直接继承 LiveData 类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">withExtendsLiveDataTest</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        WifiLiveData.getInstance(<span class=\"keyword\">this</span>).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">\"LiveDataActivity\"</span>, it.toString()) <span class=\"comment\">// 观察者收到数据更新的通知，打印 Wifi 信号强度</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当组件（Activity）处于激活状态（onActive）时注册广播，处于非激活状态（onInactive）时注销广播。</p>\n</blockquote>\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"observe-注册流程\"><a href=\"#observe-注册流程\" class=\"headerlink\" title=\"observe 注册流程\"></a>observe 注册流程</h4><p>LiveData 通过 observe() 方法将被观察者 LifecycleOwner (Activity / Fragment) 和观察者 Observer 关联起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData.observe(LifecycleOwner owner , Observer&lt;T&gt; observer)</span><br></pre></td></tr></table></figure>\n<p>进入 LiveData 的 observe() 方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 LifecycleOwner 处于 DESTROYED 状态，则返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleBoundObserver 把 LifecycleOwner 对象和 Observer 对象包装在一起</span></span><br><span class=\"line\">    LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// mObservers（类似 Map 的容器）的 putIfAbsent() 方法用于判断容器中的 observer（key）</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否已有 wrapper（value）与之关联</span></span><br><span class=\"line\">    <span class=\"comment\">// 若已关联则直接返回关联值，否则关联后再返回 wrapper</span></span><br><span class=\"line\">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot add the same observer\"</span></span><br><span class=\"line\">                + <span class=\"string\">\" with different lifecycles\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于 LifecycleBoundObserver 实现了 GenericLifecycleObserver 接口，而 GenericLifecycleObserver 又</span></span><br><span class=\"line\">    <span class=\"comment\">// 继承了 LifecycleObserver，所以 LifecycleBoundObserver 本质是一个 LifecycleObserver</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处属于注册过程， Lifecycle 添加观察者 LifecycleObserver</span></span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可知，observe() 方法最终是会调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LifecycleOwner.getLifecycle().addObserver(LifecycleObserver)</span><br></pre></td></tr></table></figure>\n<p>因此 LiveData 是能够感知观察者的生命周期变化的。</p>\n<h4 id=\"感知生命周期变化\"><a href=\"#感知生命周期变化\" class=\"headerlink\" title=\"感知生命周期变化\"></a>感知生命周期变化</h4><p>通过以上的分析，我们知道 LifecycleBoundObserver（LiveData 的内部类）是观察者，以下具体分析 LifecycleBoundObserver 的实现过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(observer); <span class=\"comment\">// 保存 Observer</span></span><br><span class=\"line\">        mOwner = owner;  <span class=\"comment\">// 保存 LifecycleOwner</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否处于激活状态</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若 Lifecycle 处于 DESTROYED 状态，则移除 Observer 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除观察者，在这个方法中会移除生命周期监听并且回调 activeStateChanged() 方法</span></span><br><span class=\"line\">            removeObserver(mObserver);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若处于激活状态，则调用 activeStateChanged() 方法</span></span><br><span class=\"line\">        activeStateChanged(shouldBeActive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当组件（Activity / Fragment）的生命周期发生改变时，onStateChanged() 方法将会被调用。若当前处于 DESTROYED 状态，则会移除观察者；若当前处于激活状态，则会调用 activeStateChanged() 方法。activeStateChanged() 方法位于父类 ObserverWrapper 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若新旧状态一致，则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive owner</span></span><br><span class=\"line\">    mActive = newActive;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">    LiveData.<span class=\"keyword\">this</span>.mActiveCount += mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wasInactive &amp;&amp; mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 0 到 1</span></span><br><span class=\"line\">        onActive(); <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !mActive) &#123; <span class=\"comment\">// 激活状态的 observer 个数从 1 到 0</span></span><br><span class=\"line\">        onInactive();  <span class=\"comment\">// 空实现，一般让子类去重写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mActive) &#123; <span class=\"comment\">// 激活状态，向观察者发送 LiveData 的值</span></span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再看看最终调用的 dispatchingValue() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(@Nullable ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            considerNotify(initiator);</span><br><span class=\"line\">            initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历 mObservers 这个 map , 向每一个观察者都发送新的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到 dispatchingValue() 方法里面再通过 considerNotify() 方法将消息通知下去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 mObserver 正是我们调用 observe() 方法时传入的观察者。</p>\n<p>总结上面的分析就是：<strong>调用 LiveData.observe(LifecycleOwner owner , Observer<t> observer) 进行注册后，当 LiveData 数据发生变化后，最终就会调用 Observer 对象的 onChanged() 方法，并把变化的数据作为参数回传。</t></strong></p>\n<h4 id=\"通知观察者更新数据的方式\"><a href=\"#通知观察者更新数据的方式\" class=\"headerlink\" title=\"通知观察者更新数据的方式\"></a>通知观察者更新数据的方式</h4><p>LiveData 为我们提供了两种改变数据后，通知观察者更新数据的方式，一个是 setValue() 方法（<strong>必须在主线程调用</strong>），另一个是 postValue() 方法（<strong>必须在子线程调用</strong>）。</p>\n<p><strong>setValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    assertMainThread(<span class=\"string\">\"setValue\"</span>);</span><br><span class=\"line\">    mVersion++;</span><br><span class=\"line\">    mData = value;</span><br><span class=\"line\">    dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dispatchingValue() 方法会跑我们上面分析的流程，最终把改变的数据 value（对应上面的 mData）作为 onChanged() 方法的参数传给观察者。</p>\n<p><strong>postValue() 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">        postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">        mPendingData = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object newValue;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            newValue = mPendingData;</span><br><span class=\"line\">            mPendingData = NOT_SET;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        setValue((T) newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以看出 postValue() 方法最终也会在主线程中调用 setValue() 方法。</p>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/SEU_Calvin/article/details/82256693\" target=\"_blank\" rel=\"noopener\">Android开发——架构组件LiveData源码解析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n</ul>\n"},{"title":"Android Jetpack 之 ViewModel","date":"2018-10-27T00:38:00.000Z","_content":"\n\n\n\n\n\n### 前言\n\n在 Android 中，ViewModel 的作用就是在 **UI 控制器**（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。\n\n在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 `onSaveInstanceState()` 方法中通过 bundle 保存数据，然后在 `onCreate()` 或 `onRestoreInstanceState()` 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于**可序列化然后反序列化**的少量数据，对于 Bitmap 等比较大的数据就不适用了。\n\n另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。\n\nUI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，**将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。**\n\n### ViewModel 使用\n\n比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。\n\n```Kotlin\nclass UserViewModel : ViewModel() {\n\n    private lateinit var users: MutableLiveData<List<User>>\n\n    fun getUsers(): LiveData<List<User>> {\n        if (!::users.isInitialized) {\n            users = MutableLiveData()\n            loadUsers()\n        }\n        return users\n    }\n\n    private fun loadUsers() {\n        // Do an asynchronous operation to fetch users .\n        Thread(Runnable {\n            Thread.sleep(3000)\n            // 在子线程发送值用 postValue , 否则用 setValue .\n            users.postValue(listOf(User(\"1\", \"AA\"), User(\"2\", \"BB\")))\n        }).start()\n    }\n}\n```\n\n```Kotlin\nclass ViewModelActivity : AppCompatActivity() {\n\n    private val TAG = \"ViewModelActivity\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_view_model)\n\n        // 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象\n        val userViewModel = ViewModelProviders.of(this).get(UserViewModel::class.java)\n\n        // 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity\n        userViewModel.getUsers().observe(this, Observer {\n            Log.e(TAG, it.toString())\n            // 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]\n        })\n    }\n}\n```\n\n查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，\n\n```Kotlin\npublic static ViewModelProvider of(@NonNull FragmentActivity activity,\n            @Nullable Factory factory) {\n        Application application = checkApplication(activity);\n        if (factory == null) {\n            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);\n        }\n        return new ViewModelProvider(ViewModelStores.of(activity), factory);\n    }\n```\n\nViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . \n\n```Kotlin\nViewModel viewModel = mViewModelStore.get(key);\n```\n\n获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .\n\n当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。\n\n> ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。\n\n当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 **AndroidViewModel** 类。 \n\n```Kotlin\nclass MyAndroidViewModel(application: Application) : AndroidViewModel(application) {\n\n    private val app\n        get() = getApplication<Application>()\n\n    fun getStatus(code: Int): String {\n        return when (code) {\n            1 -> app.resources.getString(R.string.be_late) // 迟到\n            2 -> app.resources.getString(R.string.leave_early) // 早退\n            else -> app.resources.getString(R.string.absenteeism) // 旷工\n        }\n    }\n}\n```\n\n```Kotlin\nval myAndroidViewModel = ViewModelProviders.of(this).get(MyAndroidViewModel::class.java)\nLog.e(TAG, myAndroidViewModel.getStatus(2))\n// 打印结果：早退\n```\n\n### ViewModel 的生命周期\n\nViewModel 会一直保留在内存中，直到 Activity / Fragment 在以下情况下才会销毁：\n\n- 宿主 Activity 被 finish 后调用 onDestroy 方法。\n- 宿主 Fragment 被 detached 后调用 onDetach 方法。\n\n下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/viewmodel-lifecycle.png)\n\n### Fragment 之间共享数据\n\n假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。\n\n我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。\n\n为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。\n\n```Kotlin\nclass SharedViewModel : ViewModel() {\n\n    val selected = MutableLiveData<User>()\n\n    fun select(user: User) {\n        selected.value = user\n    }\n}\n```\n\n```Kotlin\nclass MasterFragment : Fragment() {\n\n    private val dataList = listOf(User(\"1\", \"张三\"), User(\"2\", \"李四\"), User(\"3\", \"王五\"))\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_master, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n\n        lvMaster.adapter = ArrayAdapter<User>(\n                activity,\n                android.R.layout.simple_expandable_list_item_1,\n                dataList)\n\n        lvMaster.setOnItemClickListener { _, _, position, _ ->\n            model.select(dataList[position])\n        }\n    }\n}\n```\n\n```Kotlin\nclass DetailFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_detail, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model: SharedViewModel = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n        \n        model.selected.observe(this, Observer<User> { item ->\n            tvDetail.setText(\"${item?.id} : ${item?.name}\")\n        })\n    }\n}\n```\n\n> 需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。\n\n这种数据通信的方式有以下几个好处：\n\n- 宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；\n- 一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；\n- 每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)","source":"_posts/Android-Jetpack-之-ViewModel.md","raw":"---\ntitle: Android Jetpack 之 ViewModel\ndate: 2018-10-27 8:38:00\ncategories: \"Android\"\ntags:\n     - Android\n     - ViewModel\n     - Jetpack\n---\n\n\n\n\n\n\n### 前言\n\n在 Android 中，ViewModel 的作用就是在 **UI 控制器**（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。\n\n在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 `onSaveInstanceState()` 方法中通过 bundle 保存数据，然后在 `onCreate()` 或 `onRestoreInstanceState()` 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于**可序列化然后反序列化**的少量数据，对于 Bitmap 等比较大的数据就不适用了。\n\n另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。\n\nUI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，**将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。**\n\n### ViewModel 使用\n\n比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。\n\n```Kotlin\nclass UserViewModel : ViewModel() {\n\n    private lateinit var users: MutableLiveData<List<User>>\n\n    fun getUsers(): LiveData<List<User>> {\n        if (!::users.isInitialized) {\n            users = MutableLiveData()\n            loadUsers()\n        }\n        return users\n    }\n\n    private fun loadUsers() {\n        // Do an asynchronous operation to fetch users .\n        Thread(Runnable {\n            Thread.sleep(3000)\n            // 在子线程发送值用 postValue , 否则用 setValue .\n            users.postValue(listOf(User(\"1\", \"AA\"), User(\"2\", \"BB\")))\n        }).start()\n    }\n}\n```\n\n```Kotlin\nclass ViewModelActivity : AppCompatActivity() {\n\n    private val TAG = \"ViewModelActivity\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_view_model)\n\n        // 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象\n        val userViewModel = ViewModelProviders.of(this).get(UserViewModel::class.java)\n\n        // 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity\n        userViewModel.getUsers().observe(this, Observer {\n            Log.e(TAG, it.toString())\n            // 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]\n        })\n    }\n}\n```\n\n查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，\n\n```Kotlin\npublic static ViewModelProvider of(@NonNull FragmentActivity activity,\n            @Nullable Factory factory) {\n        Application application = checkApplication(activity);\n        if (factory == null) {\n            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);\n        }\n        return new ViewModelProvider(ViewModelStores.of(activity), factory);\n    }\n```\n\nViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . \n\n```Kotlin\nViewModel viewModel = mViewModelStore.get(key);\n```\n\n获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .\n\n当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。\n\n> ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。\n\n当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 **AndroidViewModel** 类。 \n\n```Kotlin\nclass MyAndroidViewModel(application: Application) : AndroidViewModel(application) {\n\n    private val app\n        get() = getApplication<Application>()\n\n    fun getStatus(code: Int): String {\n        return when (code) {\n            1 -> app.resources.getString(R.string.be_late) // 迟到\n            2 -> app.resources.getString(R.string.leave_early) // 早退\n            else -> app.resources.getString(R.string.absenteeism) // 旷工\n        }\n    }\n}\n```\n\n```Kotlin\nval myAndroidViewModel = ViewModelProviders.of(this).get(MyAndroidViewModel::class.java)\nLog.e(TAG, myAndroidViewModel.getStatus(2))\n// 打印结果：早退\n```\n\n### ViewModel 的生命周期\n\nViewModel 会一直保留在内存中，直到 Activity / Fragment 在以下情况下才会销毁：\n\n- 宿主 Activity 被 finish 后调用 onDestroy 方法。\n- 宿主 Fragment 被 detached 后调用 onDetach 方法。\n\n下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/viewmodel-lifecycle.png)\n\n### Fragment 之间共享数据\n\n假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。\n\n我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。\n\n为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。\n\n```Kotlin\nclass SharedViewModel : ViewModel() {\n\n    val selected = MutableLiveData<User>()\n\n    fun select(user: User) {\n        selected.value = user\n    }\n}\n```\n\n```Kotlin\nclass MasterFragment : Fragment() {\n\n    private val dataList = listOf(User(\"1\", \"张三\"), User(\"2\", \"李四\"), User(\"3\", \"王五\"))\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_master, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n\n        lvMaster.adapter = ArrayAdapter<User>(\n                activity,\n                android.R.layout.simple_expandable_list_item_1,\n                dataList)\n\n        lvMaster.setOnItemClickListener { _, _, position, _ ->\n            model.select(dataList[position])\n        }\n    }\n}\n```\n\n```Kotlin\nclass DetailFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_detail, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        var model: SharedViewModel = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(\"Invalid Activity\")\n        \n        model.selected.observe(this, Observer<User> { item ->\n            tvDetail.setText(\"${item?.id} : ${item?.name}\")\n        })\n    }\n}\n```\n\n> 需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。\n\n这种数据通信的方式有以下几个好处：\n\n- 宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；\n- 一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；\n- 每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)","slug":"Android-Jetpack-之-ViewModel","published":1,"updated":"2018-11-22T00:28:00.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd2r002amgquurq7x6hx","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 中，ViewModel 的作用就是在 <strong>UI 控制器</strong>（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。</p>\n<p>在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 <code>onSaveInstanceState()</code> 方法中通过 bundle 保存数据，然后在 <code>onCreate()</code> 或 <code>onRestoreInstanceState()</code> 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于<strong>可序列化然后反序列化</strong>的少量数据，对于 Bitmap 等比较大的数据就不适用了。</p>\n<p>另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。</p>\n<p>UI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，<strong>将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。</strong></p>\n<h3 id=\"ViewModel-使用\"><a href=\"#ViewModel-使用\" class=\"headerlink\" title=\"ViewModel 使用\"></a>ViewModel 使用</h3><p>比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> users: MutableLiveData&lt;List&lt;User&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>: LiveData&lt;List&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::users.isInitialized) &#123;</span><br><span class=\"line\">            users = MutableLiveData()</span><br><span class=\"line\">            loadUsers()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> users</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadUsers</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do an asynchronous operation to fetch users .</span></span><br><span class=\"line\">        Thread(Runnable &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 在子线程发送值用 postValue , 否则用 setValue .</span></span><br><span class=\"line\">            users.postValue(listOf(User(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"AA\"</span>), User(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"BB\"</span>)))</span><br><span class=\"line\">        &#125;).start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">\"ViewModelActivity\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_view_model)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(UserViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity</span></span><br><span class=\"line\">        userViewModel.getUsers().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(TAG, it.toString())</span><br><span class=\"line\">            <span class=\"comment\">// 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> static ViewModelProvider of(<span class=\"meta\">@NonNull</span> FragmentActivity activity,</span><br><span class=\"line\">            <span class=\"meta\">@Nullable</span> Factory factory) &#123;</span><br><span class=\"line\">        Application application = checkApplication(activity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new ViewModelProvider(ViewModelStores.of(activity), factory);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>ViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel viewModel = mViewModelStore.<span class=\"keyword\">get</span>(key);</span><br></pre></td></tr></table></figure>\n<p>获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .</p>\n<p>当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。</p>\n<blockquote>\n<p>ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。</p>\n</blockquote>\n<p>当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 <strong>AndroidViewModel</strong> 类。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAndroidViewModel</span></span>(application: Application) : AndroidViewModel(application) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> app</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = getApplication&lt;Application&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStatus</span><span class=\"params\">(code: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (code) &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span> -&gt; app.resources.getString(R.string.be_late) <span class=\"comment\">// 迟到</span></span><br><span class=\"line\">            <span class=\"number\">2</span> -&gt; app.resources.getString(R.string.leave_early) <span class=\"comment\">// 早退</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; app.resources.getString(R.string.absenteeism) <span class=\"comment\">// 旷工</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myAndroidViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyAndroidViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">Log.e(TAG, myAndroidViewModel.getStatus(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 打印结果：早退</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ViewModel-的生命周期\"><a href=\"#ViewModel-的生命周期\" class=\"headerlink\" title=\"ViewModel 的生命周期\"></a>ViewModel 的生命周期</h3><p>ViewModel 会一直保留在内存中，直到 Activity / Fragment 在以下情况下才会销毁：</p>\n<ul>\n<li>宿主 Activity 被 finish 后调用 onDestroy 方法。</li>\n<li>宿主 Fragment 被 detached 后调用 onDetach 方法。</li>\n</ul>\n<p>下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/viewmodel-lifecycle.png\" alt=\"Mou icon\"></p>\n<h3 id=\"Fragment-之间共享数据\"><a href=\"#Fragment-之间共享数据\" class=\"headerlink\" title=\"Fragment 之间共享数据\"></a>Fragment 之间共享数据</h3><p>假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。</p>\n<p>我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。</p>\n<p>为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> selected = MutableLiveData&lt;User&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">select</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\">        selected.value = user</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MasterFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> dataList = listOf(User(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"张三\"</span>), User(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"李四\"</span>), User(<span class=\"string\">\"3\"</span>, <span class=\"string\">\"王五\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_master, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">\"Invalid Activity\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.adapter = ArrayAdapter&lt;User&gt;(</span><br><span class=\"line\">                activity,</span><br><span class=\"line\">                android.R.layout.simple_expandable_list_item_1,</span><br><span class=\"line\">                dataList)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.setOnItemClickListener &#123; _, _, position, _ -&gt;</span><br><span class=\"line\">            model.select(dataList[position])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model: SharedViewModel = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">\"Invalid Activity\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        model.selected.observe(<span class=\"keyword\">this</span>, Observer&lt;User&gt; &#123; item -&gt;</span><br><span class=\"line\">            tvDetail.setText(<span class=\"string\">\"<span class=\"subst\">$&#123;item?.id&#125;</span> : <span class=\"subst\">$&#123;item?.name&#125;</span>\"</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。</p>\n</blockquote>\n<p>这种数据通信的方式有以下几个好处：</p>\n<ul>\n<li>宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；</li>\n<li>一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；</li>\n<li>每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在 Android 中，ViewModel 的作用就是在 <strong>UI 控制器</strong>（ 如 Activity、Fragment）的生命周期中保存和管理 UI 相关的数据。ViewModel 保存的数据在配置更改（如屏幕旋转）后会依然存在，不会丢失。</p>\n<p>在屏幕旋转的时候，Activity 会重建，为了不让数据丢失，我们通常的做法是在 <code>onSaveInstanceState()</code> 方法中通过 bundle 保存数据，然后在 <code>onCreate()</code> 或 <code>onRestoreInstanceState()</code> 方法中取出 bundle 来恢复数据。然而，这种方式有一定的局限性，它只适用于<strong>可序列化然后反序列化</strong>的少量数据，对于 Bitmap 等比较大的数据就不适用了。</p>\n<p>另一方面，UI 控制器通常需要做一些耗时的异步调用操作，并且需要去管理这些调用。UI 控制器需要确保系统在销毁后去清理掉这些异步调用，以避免潜在的内存泄漏，这种管理方式需要大量的维护工作。而且，在配置更改后重建对象是很浪费资源的，因为该对象可能必须重新发出之前已经发出过的调用。</p>\n<p>UI 控制器一般只负责显示和处理用户操作，加载数据库数据或网络数据的工作应该委托给其它类，这样会让测试工作更加容易地进行。因此，<strong>将视图数据相关操作从 UI 控制器逻辑中分离出来是很有必要。</strong></p>\n<h3 id=\"ViewModel-使用\"><a href=\"#ViewModel-使用\" class=\"headerlink\" title=\"ViewModel 使用\"></a>ViewModel 使用</h3><p>比如，一个 ViewModelActivity 需要展示一个 User 的列表数据，那么可以定义一个 UserViewModel 来获取数据，然后在 ViewModelActivity 中创建一个 UserViewModel 对象来获取到 User 的列表数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> users: MutableLiveData&lt;List&lt;User&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>: LiveData&lt;List&lt;User&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::users.isInitialized) &#123;</span><br><span class=\"line\">            users = MutableLiveData()</span><br><span class=\"line\">            loadUsers()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> users</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadUsers</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do an asynchronous operation to fetch users .</span></span><br><span class=\"line\">        Thread(Runnable &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 在子线程发送值用 postValue , 否则用 setValue .</span></span><br><span class=\"line\">            users.postValue(listOf(User(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"AA\"</span>), User(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"BB\"</span>)))</span><br><span class=\"line\">        &#125;).start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">\"ViewModelActivity\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_view_model)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 就算配置更改（如屏幕旋转）了，获取到的 userViewModel 对象还会是上一次的 UserViewModel 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(UserViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里的 this 需要用实现了 LifecycleOwner 的类的 this . 如 AppCompatActivity、FragmentActivity</span></span><br><span class=\"line\">        userViewModel.getUsers().observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">            Log.e(TAG, it.toString())</span><br><span class=\"line\">            <span class=\"comment\">// 打印结果：[User(id=1, name=AA), User(id=2, name=BB)]</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看源码可知，ViewModelProviders.of(this) 获取了一个全新的 ViewModelProvider 对象，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> static ViewModelProvider of(<span class=\"meta\">@NonNull</span> FragmentActivity activity,</span><br><span class=\"line\">            <span class=\"meta\">@Nullable</span> Factory factory) &#123;</span><br><span class=\"line\">        Application application = checkApplication(activity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new ViewModelProvider(ViewModelStores.of(activity), factory);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>ViewModelProvider 对象调用 get() 方法获取到我们需要的 ViewModel 对象。追踪一下 get() 方法可以知道，ViewModel 对象是存储在一个 ViewModelStore 类的对象中的，该类里面使用 HashMap 来保存和获取 ViewModel . </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel viewModel = mViewModelStore.<span class=\"keyword\">get</span>(key);</span><br></pre></td></tr></table></figure>\n<p>获取 ViewModel 使用的 key 相对具体的 ViewModel 类是不会变化的，因此从 ViewModelStore 中取出的 ViewModel 对象也不会变。包括在配置更改后也可以获取到之前的 ViewModel .</p>\n<p>当宿主 Activity 调用了 finish() 方法，系统会调用 ViewModel 对象的 onCleared() 方法来让它清理掉资源，到这里之后 ViewModel 才会被释放掉。</p>\n<blockquote>\n<p>ViewModel 里面不要引用 View、或者任何持有 Activity 类的 context , 否则会引发内存泄漏问题。</p>\n</blockquote>\n<p>当 ViewModel 需要 Application 类的 context 来获取资源、查找系统服务等，可以继承 <strong>AndroidViewModel</strong> 类。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAndroidViewModel</span></span>(application: Application) : AndroidViewModel(application) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> app</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = getApplication&lt;Application&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStatus</span><span class=\"params\">(code: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (code) &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span> -&gt; app.resources.getString(R.string.be_late) <span class=\"comment\">// 迟到</span></span><br><span class=\"line\">            <span class=\"number\">2</span> -&gt; app.resources.getString(R.string.leave_early) <span class=\"comment\">// 早退</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; app.resources.getString(R.string.absenteeism) <span class=\"comment\">// 旷工</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myAndroidViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyAndroidViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">Log.e(TAG, myAndroidViewModel.getStatus(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 打印结果：早退</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ViewModel-的生命周期\"><a href=\"#ViewModel-的生命周期\" class=\"headerlink\" title=\"ViewModel 的生命周期\"></a>ViewModel 的生命周期</h3><p>ViewModel 会一直保留在内存中，直到 Activity / Fragment 在以下情况下才会销毁：</p>\n<ul>\n<li>宿主 Activity 被 finish 后调用 onDestroy 方法。</li>\n<li>宿主 Fragment 被 detached 后调用 onDetach 方法。</li>\n</ul>\n<p>下图展示了一个 Activity 经历了旋转然后调用 finish 的各种生命周期状态，同时展示了关联了该 Activity 的 ViewModel 的生命周期。（UI 控制器是 Fragment 的情况也类似。）</p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/viewmodel-lifecycle.png\" alt=\"Mou icon\"></p>\n<h3 id=\"Fragment-之间共享数据\"><a href=\"#Fragment-之间共享数据\" class=\"headerlink\" title=\"Fragment 之间共享数据\"></a>Fragment 之间共享数据</h3><p>假设我们有这样的需求：在一个 MasterFragment 中有一个 User 列表，点击列表项后将点中的 User 对象传递给 DetailFragment 用于展示详细的 User 信息。</p>\n<p>我们一般的做法是：在两个 Fragment 中定义一些通信接口，并且宿主 Activity 需要把它们绑定起来，这样做相当繁琐。并且两个 Fragment 还需要处理另外的 Fragment 尚未创建或者可见的场景。</p>\n<p>为了避免以上繁琐的做法，我们可以通过两个 Fragment 之间共享一个 ViewModel 的方式来实现数据通信。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> selected = MutableLiveData&lt;User&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">select</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span> &#123;</span><br><span class=\"line\">        selected.value = user</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MasterFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> dataList = listOf(User(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"张三\"</span>), User(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"李四\"</span>), User(<span class=\"string\">\"3\"</span>, <span class=\"string\">\"王五\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_master, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">\"Invalid Activity\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.adapter = ArrayAdapter&lt;User&gt;(</span><br><span class=\"line\">                activity,</span><br><span class=\"line\">                android.R.layout.simple_expandable_list_item_1,</span><br><span class=\"line\">                dataList)</span><br><span class=\"line\"></span><br><span class=\"line\">        lvMaster.setOnItemClickListener &#123; _, _, position, _ -&gt;</span><br><span class=\"line\">            model.select(dataList[position])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> model: SharedViewModel = activity?.run &#123;</span><br><span class=\"line\">            ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SharedViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        &#125; ?: <span class=\"keyword\">throw</span> Exception(<span class=\"string\">\"Invalid Activity\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        model.selected.observe(<span class=\"keyword\">this</span>, Observer&lt;User&gt; &#123; item -&gt;</span><br><span class=\"line\">            tvDetail.setText(<span class=\"string\">\"<span class=\"subst\">$&#123;item?.id&#125;</span> : <span class=\"subst\">$&#123;item?.name&#125;</span>\"</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要特别注意，两个 Fragment 都需要使用它们的宿主 Activty 的 this 来获取 ViewModelProviders ， 这样才确保它们获取到的是同一个 ViewModel 对象。</p>\n</blockquote>\n<p>这种数据通信的方式有以下几个好处：</p>\n<ul>\n<li>宿主 Activity 不需要做任何的事情，也完全不知道 Fragment 之间的通信；</li>\n<li>一个 Fragment 不需要知道另一个 Fragment 中除了 ViewModel 契约之外的其它事情，哪怕另一个 Fragment 消失了，它也继续保持正常工作；</li>\n<li>每个 Fragment 都有自己的生命周期，它们之间互不影响，哪怕某一个 Fragment 被其它 Fragment 替换了，UI 还是会继续工作，没有任何问题。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n"},{"title":"Android Studio 的一些技巧","date":"2016-09-25T04:28:31.000Z","_content":"\n\n\n[技巧](#技巧)\n\n[插件](#插件)\n\n[工具](#工具)\n\n\n\n## 技巧\n### 快速查找\n`双击 Shift 键`。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。\n\n### Search Action\n`Ctrl + Shift + A`。类似搜索指令的入口。如输入 \"Open Recent\" 可以查找最近的工程；输入 \"hier\" 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。\n\n### 演示模式\n在菜单栏 `View 选项` 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。\n\n### 显示最近操作、修改\n`Ctrl + E` 和 `Ctrl + Shift + E` 快速显示最近文件操作和文件修改。同时可用 `Ctrl + Tab` 进行各个界面的切换。\n\n### 操作记录前进和回退\n`Ctrl + Alt + Left/Right`。\n\n### 移动行\n`Alt + Shift + 方向键上/方向键下`。整体移动也是类似的方法。\n\n### 交换行\n`Ctrl + Shift + 方向键上/方向键下`。\n\n### Log 快捷模板\n在 onCreate 中输入 `logi` ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。\n```Java\nLog.i(TAG, \"onCreate: \");\n```\n\n### 查看大纲\n`(Fn) + Ctrl + F12 `。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。\n\n### 附加调试\n在 ADB 连接手机情况下，点击 `attach to debugger` 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。\n\n### 代码折叠\n全局折叠、展开：`Ctrl + Shift + -` 、`Ctrl + Shift + +` \n局部折叠、展开：`Ctrl  + -` 、`Ctrl  + +` \n\n### 在文件系统中打开文件\n按住 Ctrl 键并点击打开的代码的 Tab 页。\n\n### 预览方法定义\n`Ctrl + Shift + i (mac 为 Command + Y)`。在本页面预览方法的定义，无需跳转到方法定义的地方去。\n\n### 拆分窗口\n在编辑区域显示多个编辑界面：Window --> Editor Tabs --> Split vertical \\ horizontal\n\n### Extract 的妙用\n**Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。**\n在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。\n\n### 方法调用栈\n`Ctrl + Alt + H` 可以快速找到该方法的调用栈。\n\n### Surround With\n`Ctrl + Alt + T`。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。\n\n### Image Asset && Vector Asset\n可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。\n\n### 断点\n  - 条件断点\n     满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。\n  - 临时断点\n    执行一次断点后该断点就会消失。在当前行使用快捷键 `(Fn) + Ctrl + Alt + F8`，即可生成一个临时断点，临时断点上有一个数字“1”。\n  - 异常断点\n    在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。\n  - 日志断点\n    当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。\n\n### 代码模板\n  - 内置模板\n  `Ctrl + J` 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。\n\n  - 后缀模板\n `Ctrl + J` 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。\n\n  - 自定义模板\n  \n    **方法注释**\n\n     ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。\n\n   ```Java\n     /**\n      * $desc$\n      *\n      * @author zch\n      * create at $date$\n      */\n   ```\n\n    **文件、类注释**\n   \n   ①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。\n   \nClassHeader 模板：\n    \n```Java\n/**\n * class description here\n * @author ${USER}\n * @version 1.0.0\n * @since ${YEAR}-${MONTH}-${DAY}\n */\n```\n    \nFileHeader模板：\n    \n```Java\n/*\n * ${NAME}      ${YEAR}-${MONTH}-${DAY}\n * Copyright (c) ${YEAR} jufuns. All right reserved.\n *\n */\n#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != \"\")package ${PACKAGE_NAME};#end\n```\n    \nMyActivity模板：\n\n```Java\n#parse(\"FileHeader.java\")\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n#parse(\"ClassHeader.java\")\npublic class ${NAME} extends Activity{\n\n   @Override\n    public void onCreate(Bundle savedInstanceState){\n           super.onCreate(savedInstanceState);\n    }\n\n}\n```\n \n用 MyActivity 模板新建的 LoginActivity：\n\t\n```Java\n/*\n * LoginActivity      2016-10-07\n * Copyright (c) 2016 jufuns. All right reserved.\n *\n */\npackage com.jiejue.catwalk.ui.ac;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n/**\n * class description here\n *\n * @author zch\n * @version 1.0.0\n * @since 2016-10-07\n */\npublic class LoginActivity extends Activity {\n\n    @Override\n   \tpublic void onCreate(Bundle savedInstanceState) {\n       \tsuper.onCreate(savedInstanceState);\n       \t\n   \t}\n   \t\n}\n```\n> 类似地，我们也可以建立 Adapter、单例等等的模板代码。\n\n### 立即停止 AndroidStudio 编译\n\n  一个命令就可以停止它！\n\n  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。\n\n  ```Java\n  mac\n  ./gradlew --stop\n\n  window\n  gradlew --stop\n  ```\n\n  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。\n\n### 关闭 / 显示方法参数提示\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/1.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/2.png)\n\n## 插件\n### .ignore\n给 Git 项目生成最合适的 ignore 文件。\n\n### ButterKnife Zelezny\n在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。\n\n### SelectorChapek\n可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。\n\n### GsonFormat\n可将一段 Json 生成所需的 Gson 实体。\n\n### Android Parcelable code generator\n可自动生成 Parcelable 接口所需的代码。\n\n### AndroidCodeGenerator\n可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。\n\n### Prettify\n可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。\n\n### Exynap\n[Exynap](http://exynap.com/) 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。\n\n### Android Methods Count\n高效统计 Android 开源库的方法数。\n\n### AndroidLocalizationer\n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。\n\n### Key Promoter\n当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。\n\n### FindBugs-IDEA\n一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .\n\n### ADB Idea\n[ADB Idea](https://github.com/pbreault/adb-idea) 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。\n\n### Codota\n[Codota](https://www.codota.com/) 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。\n\n## 工具\n### Stetho\nStetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。\n\n### Gradle, please\n[Gradle, please](http://gradleplease.appspot.com/) 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。\n\n### LeakCanary\nLeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。\n\n### Android Debug Database\nAndroid Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。\n\n### Android WiFi ADB\n[Android WiFi ADB](https://github.com/pedrovgs/AndroidWiFiADB) 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。\n\n### drawable-optimizer\n[drawable-optimizer](https://github.com/fabiomsr/drawable-optimizer) 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。\n\n### DevKnox\napp 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。**使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -> Devknox Scan 就会开始扫描。**\n\n### ClassyShark\n[ClassyShark](https://github.com/google/android-classyshark) 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。\n\n","source":"_posts/Android-Studio-的一些技巧.md","raw":"---\ntitle: Android Studio 的一些技巧\ndate: 2016-09-25 12:28:31\ncategories: \"Android\"\ntags:\n     - Android\n     - Android Studio\n---\n\n\n\n[技巧](#技巧)\n\n[插件](#插件)\n\n[工具](#工具)\n\n\n\n## 技巧\n### 快速查找\n`双击 Shift 键`。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。\n\n### Search Action\n`Ctrl + Shift + A`。类似搜索指令的入口。如输入 \"Open Recent\" 可以查找最近的工程；输入 \"hier\" 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。\n\n### 演示模式\n在菜单栏 `View 选项` 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。\n\n### 显示最近操作、修改\n`Ctrl + E` 和 `Ctrl + Shift + E` 快速显示最近文件操作和文件修改。同时可用 `Ctrl + Tab` 进行各个界面的切换。\n\n### 操作记录前进和回退\n`Ctrl + Alt + Left/Right`。\n\n### 移动行\n`Alt + Shift + 方向键上/方向键下`。整体移动也是类似的方法。\n\n### 交换行\n`Ctrl + Shift + 方向键上/方向键下`。\n\n### Log 快捷模板\n在 onCreate 中输入 `logi` ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。\n```Java\nLog.i(TAG, \"onCreate: \");\n```\n\n### 查看大纲\n`(Fn) + Ctrl + F12 `。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。\n\n### 附加调试\n在 ADB 连接手机情况下，点击 `attach to debugger` 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。\n\n### 代码折叠\n全局折叠、展开：`Ctrl + Shift + -` 、`Ctrl + Shift + +` \n局部折叠、展开：`Ctrl  + -` 、`Ctrl  + +` \n\n### 在文件系统中打开文件\n按住 Ctrl 键并点击打开的代码的 Tab 页。\n\n### 预览方法定义\n`Ctrl + Shift + i (mac 为 Command + Y)`。在本页面预览方法的定义，无需跳转到方法定义的地方去。\n\n### 拆分窗口\n在编辑区域显示多个编辑界面：Window --> Editor Tabs --> Split vertical \\ horizontal\n\n### Extract 的妙用\n**Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。**\n在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。\n\n### 方法调用栈\n`Ctrl + Alt + H` 可以快速找到该方法的调用栈。\n\n### Surround With\n`Ctrl + Alt + T`。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。\n\n### Image Asset && Vector Asset\n可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。\n\n### 断点\n  - 条件断点\n     满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。\n  - 临时断点\n    执行一次断点后该断点就会消失。在当前行使用快捷键 `(Fn) + Ctrl + Alt + F8`，即可生成一个临时断点，临时断点上有一个数字“1”。\n  - 异常断点\n    在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。\n  - 日志断点\n    当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。\n\n### 代码模板\n  - 内置模板\n  `Ctrl + J` 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。\n\n  - 后缀模板\n `Ctrl + J` 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。\n\n  - 自定义模板\n  \n    **方法注释**\n\n     ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。\n\n   ```Java\n     /**\n      * $desc$\n      *\n      * @author zch\n      * create at $date$\n      */\n   ```\n\n    **文件、类注释**\n   \n   ①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。\n   \nClassHeader 模板：\n    \n```Java\n/**\n * class description here\n * @author ${USER}\n * @version 1.0.0\n * @since ${YEAR}-${MONTH}-${DAY}\n */\n```\n    \nFileHeader模板：\n    \n```Java\n/*\n * ${NAME}      ${YEAR}-${MONTH}-${DAY}\n * Copyright (c) ${YEAR} jufuns. All right reserved.\n *\n */\n#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != \"\")package ${PACKAGE_NAME};#end\n```\n    \nMyActivity模板：\n\n```Java\n#parse(\"FileHeader.java\")\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n#parse(\"ClassHeader.java\")\npublic class ${NAME} extends Activity{\n\n   @Override\n    public void onCreate(Bundle savedInstanceState){\n           super.onCreate(savedInstanceState);\n    }\n\n}\n```\n \n用 MyActivity 模板新建的 LoginActivity：\n\t\n```Java\n/*\n * LoginActivity      2016-10-07\n * Copyright (c) 2016 jufuns. All right reserved.\n *\n */\npackage com.jiejue.catwalk.ui.ac;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n/**\n * class description here\n *\n * @author zch\n * @version 1.0.0\n * @since 2016-10-07\n */\npublic class LoginActivity extends Activity {\n\n    @Override\n   \tpublic void onCreate(Bundle savedInstanceState) {\n       \tsuper.onCreate(savedInstanceState);\n       \t\n   \t}\n   \t\n}\n```\n> 类似地，我们也可以建立 Adapter、单例等等的模板代码。\n\n### 立即停止 AndroidStudio 编译\n\n  一个命令就可以停止它！\n\n  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。\n\n  ```Java\n  mac\n  ./gradlew --stop\n\n  window\n  gradlew --stop\n  ```\n\n  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。\n\n### 关闭 / 显示方法参数提示\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/1.png)\n\n![Mou icon](http://pcckwdbix.bkt.clouddn.com/2.png)\n\n## 插件\n### .ignore\n给 Git 项目生成最合适的 ignore 文件。\n\n### ButterKnife Zelezny\n在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。\n\n### SelectorChapek\n可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。\n\n### GsonFormat\n可将一段 Json 生成所需的 Gson 实体。\n\n### Android Parcelable code generator\n可自动生成 Parcelable 接口所需的代码。\n\n### AndroidCodeGenerator\n可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。\n\n### Prettify\n可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。\n\n### Exynap\n[Exynap](http://exynap.com/) 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。\n\n### Android Methods Count\n高效统计 Android 开源库的方法数。\n\n### AndroidLocalizationer\n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。\n\n### Key Promoter\n当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。\n\n### FindBugs-IDEA\n一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .\n\n### ADB Idea\n[ADB Idea](https://github.com/pbreault/adb-idea) 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。\n\n### Codota\n[Codota](https://www.codota.com/) 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。\n\n## 工具\n### Stetho\nStetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。\n\n### Gradle, please\n[Gradle, please](http://gradleplease.appspot.com/) 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。\n\n### LeakCanary\nLeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。\n\n### Android Debug Database\nAndroid Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。\n\n### Android WiFi ADB\n[Android WiFi ADB](https://github.com/pedrovgs/AndroidWiFiADB) 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。\n\n### drawable-optimizer\n[drawable-optimizer](https://github.com/fabiomsr/drawable-optimizer) 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。\n\n### DevKnox\napp 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。**使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -> Devknox Scan 就会开始扫描。**\n\n### ClassyShark\n[ClassyShark](https://github.com/google/android-classyshark) 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。\n\n","slug":"Android-Studio-的一些技巧","published":1,"updated":"2018-07-24T02:27:46.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd2w002cmgqu8zqobtvo","content":"<p><a href=\"#技巧\">技巧</a></p>\n<p><a href=\"#插件\">插件</a></p>\n<p><a href=\"#工具\">工具</a></p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p><code>双击 Shift 键</code>。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。</p>\n<h3 id=\"Search-Action\"><a href=\"#Search-Action\" class=\"headerlink\" title=\"Search Action\"></a>Search Action</h3><p><code>Ctrl + Shift + A</code>。类似搜索指令的入口。如输入 “Open Recent” 可以查找最近的工程；输入 “hier” 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。</p>\n<h3 id=\"演示模式\"><a href=\"#演示模式\" class=\"headerlink\" title=\"演示模式\"></a>演示模式</h3><p>在菜单栏 <code>View 选项</code> 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。</p>\n<h3 id=\"显示最近操作、修改\"><a href=\"#显示最近操作、修改\" class=\"headerlink\" title=\"显示最近操作、修改\"></a>显示最近操作、修改</h3><p><code>Ctrl + E</code> 和 <code>Ctrl + Shift + E</code> 快速显示最近文件操作和文件修改。同时可用 <code>Ctrl + Tab</code> 进行各个界面的切换。</p>\n<h3 id=\"操作记录前进和回退\"><a href=\"#操作记录前进和回退\" class=\"headerlink\" title=\"操作记录前进和回退\"></a>操作记录前进和回退</h3><p><code>Ctrl + Alt + Left/Right</code>。</p>\n<h3 id=\"移动行\"><a href=\"#移动行\" class=\"headerlink\" title=\"移动行\"></a>移动行</h3><p><code>Alt + Shift + 方向键上/方向键下</code>。整体移动也是类似的方法。</p>\n<h3 id=\"交换行\"><a href=\"#交换行\" class=\"headerlink\" title=\"交换行\"></a>交换行</h3><p><code>Ctrl + Shift + 方向键上/方向键下</code>。</p>\n<h3 id=\"Log-快捷模板\"><a href=\"#Log-快捷模板\" class=\"headerlink\" title=\"Log 快捷模板\"></a>Log 快捷模板</h3><p>在 onCreate 中输入 <code>logi</code> ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.i(TAG, <span class=\"string\">\"onCreate: \"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看大纲\"><a href=\"#查看大纲\" class=\"headerlink\" title=\"查看大纲\"></a>查看大纲</h3><p><code>(Fn) + Ctrl + F12</code>。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。</p>\n<h3 id=\"附加调试\"><a href=\"#附加调试\" class=\"headerlink\" title=\"附加调试\"></a>附加调试</h3><p>在 ADB 连接手机情况下，点击 <code>attach to debugger</code> 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>全局折叠、展开：<code>Ctrl + Shift + -</code> 、<code>Ctrl + Shift + +</code><br>局部折叠、展开：<code>Ctrl  + -</code> 、<code>Ctrl  + +</code> </p>\n<h3 id=\"在文件系统中打开文件\"><a href=\"#在文件系统中打开文件\" class=\"headerlink\" title=\"在文件系统中打开文件\"></a>在文件系统中打开文件</h3><p>按住 Ctrl 键并点击打开的代码的 Tab 页。</p>\n<h3 id=\"预览方法定义\"><a href=\"#预览方法定义\" class=\"headerlink\" title=\"预览方法定义\"></a>预览方法定义</h3><p><code>Ctrl + Shift + i (mac 为 Command + Y)</code>。在本页面预览方法的定义，无需跳转到方法定义的地方去。</p>\n<h3 id=\"拆分窗口\"><a href=\"#拆分窗口\" class=\"headerlink\" title=\"拆分窗口\"></a>拆分窗口</h3><p>在编辑区域显示多个编辑界面：Window –&gt; Editor Tabs –&gt; Split vertical \\ horizontal</p>\n<h3 id=\"Extract-的妙用\"><a href=\"#Extract-的妙用\" class=\"headerlink\" title=\"Extract 的妙用\"></a>Extract 的妙用</h3><p><strong>Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。</strong><br>在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。</p>\n<h3 id=\"方法调用栈\"><a href=\"#方法调用栈\" class=\"headerlink\" title=\"方法调用栈\"></a>方法调用栈</h3><p><code>Ctrl + Alt + H</code> 可以快速找到该方法的调用栈。</p>\n<h3 id=\"Surround-With\"><a href=\"#Surround-With\" class=\"headerlink\" title=\"Surround With\"></a>Surround With</h3><p><code>Ctrl + Alt + T</code>。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。</p>\n<h3 id=\"Image-Asset-amp-amp-Vector-Asset\"><a href=\"#Image-Asset-amp-amp-Vector-Asset\" class=\"headerlink\" title=\"Image Asset &amp;&amp; Vector Asset\"></a>Image Asset &amp;&amp; Vector Asset</h3><p>可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><ul>\n<li>条件断点<br> 满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。</li>\n<li>临时断点<br>执行一次断点后该断点就会消失。在当前行使用快捷键 <code>(Fn) + Ctrl + Alt + F8</code>，即可生成一个临时断点，临时断点上有一个数字“1”。</li>\n<li>异常断点<br>在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。</li>\n<li>日志断点<br>当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。</li>\n</ul>\n<h3 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h3><ul>\n<li><p>内置模板<br><code>Ctrl + J</code> 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。</p>\n</li>\n<li><p>后缀模板<br><code>Ctrl + J</code> 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。</p>\n</li>\n<li><p>自定义模板</p>\n<p><strong>方法注释</strong></p>\n<p> ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * $desc$</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * create at $date$</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p><strong>文件、类注释</strong></p>\n<p>①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。</p>\n</li>\n</ul>\n<p>ClassHeader 模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> $&#123;USER&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>FileHeader模板：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * $&#123;NAME&#125;      $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) $&#123;YEAR&#125; jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package $&#123;PACKAGE_NAME&#125;;#end</span><br></pre></td></tr></table></figure>\n<p>MyActivity模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parse(\"FileHeader.java\")</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(\"ClassHeader.java\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> $</span>&#123;NAME&#125; extends Activity&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用 MyActivity 模板新建的 LoginActivity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * LoginActivity      2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2016 jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.jiejue.catwalk.ui.ac;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       \t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>类似地，我们也可以建立 Adapter、单例等等的模板代码。</p>\n</blockquote>\n<h3 id=\"立即停止-AndroidStudio-编译\"><a href=\"#立即停止-AndroidStudio-编译\" class=\"headerlink\" title=\"立即停止 AndroidStudio 编译\"></a>立即停止 AndroidStudio 编译</h3><p>  一个命令就可以停止它！</p>\n<p>  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac</span><br><span class=\"line\">./gradlew --stop</span><br><span class=\"line\"></span><br><span class=\"line\">window</span><br><span class=\"line\">gradlew --stop</span><br></pre></td></tr></table></figure>\n<p>  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。</p>\n<h3 id=\"关闭-显示方法参数提示\"><a href=\"#关闭-显示方法参数提示\" class=\"headerlink\" title=\"关闭 / 显示方法参数提示\"></a>关闭 / 显示方法参数提示</h3><p><img src=\"http://pcckwdbix.bkt.clouddn.com/1.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/2.png\" alt=\"Mou icon\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\".ignore\"></a>.ignore</h3><p>给 Git 项目生成最合适的 ignore 文件。</p>\n<h3 id=\"ButterKnife-Zelezny\"><a href=\"#ButterKnife-Zelezny\" class=\"headerlink\" title=\"ButterKnife Zelezny\"></a>ButterKnife Zelezny</h3><p>在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。</p>\n<h3 id=\"SelectorChapek\"><a href=\"#SelectorChapek\" class=\"headerlink\" title=\"SelectorChapek\"></a>SelectorChapek</h3><p>可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。</p>\n<h3 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h3><p>可将一段 Json 生成所需的 Gson 实体。</p>\n<h3 id=\"Android-Parcelable-code-generator\"><a href=\"#Android-Parcelable-code-generator\" class=\"headerlink\" title=\"Android Parcelable code generator\"></a>Android Parcelable code generator</h3><p>可自动生成 Parcelable 接口所需的代码。</p>\n<h3 id=\"AndroidCodeGenerator\"><a href=\"#AndroidCodeGenerator\" class=\"headerlink\" title=\"AndroidCodeGenerator\"></a>AndroidCodeGenerator</h3><p>可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。</p>\n<h3 id=\"Prettify\"><a href=\"#Prettify\" class=\"headerlink\" title=\"Prettify\"></a>Prettify</h3><p>可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。</p>\n<h3 id=\"Exynap\"><a href=\"#Exynap\" class=\"headerlink\" title=\"Exynap\"></a>Exynap</h3><p><a href=\"http://exynap.com/\" target=\"_blank\" rel=\"noopener\">Exynap</a> 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。</p>\n<h3 id=\"Android-Methods-Count\"><a href=\"#Android-Methods-Count\" class=\"headerlink\" title=\"Android Methods Count\"></a>Android Methods Count</h3><p>高效统计 Android 开源库的方法数。</p>\n<h3 id=\"AndroidLocalizationer\"><a href=\"#AndroidLocalizationer\" class=\"headerlink\" title=\"AndroidLocalizationer\"></a>AndroidLocalizationer</h3><p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。</p>\n<h3 id=\"Key-Promoter\"><a href=\"#Key-Promoter\" class=\"headerlink\" title=\"Key Promoter\"></a>Key Promoter</h3><p>当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。</p>\n<h3 id=\"FindBugs-IDEA\"><a href=\"#FindBugs-IDEA\" class=\"headerlink\" title=\"FindBugs-IDEA\"></a>FindBugs-IDEA</h3><p>一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .</p>\n<h3 id=\"ADB-Idea\"><a href=\"#ADB-Idea\" class=\"headerlink\" title=\"ADB Idea\"></a>ADB Idea</h3><p><a href=\"https://github.com/pbreault/adb-idea\" target=\"_blank\" rel=\"noopener\">ADB Idea</a> 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。</p>\n<h3 id=\"Codota\"><a href=\"#Codota\" class=\"headerlink\" title=\"Codota\"></a>Codota</h3><p><a href=\"https://www.codota.com/\" target=\"_blank\" rel=\"noopener\">Codota</a> 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h3><p>Stetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。</p>\n<h3 id=\"Gradle-please\"><a href=\"#Gradle-please\" class=\"headerlink\" title=\"Gradle, please\"></a>Gradle, please</h3><p><a href=\"http://gradleplease.appspot.com/\" target=\"_blank\" rel=\"noopener\">Gradle, please</a> 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。</p>\n<h3 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h3><p>LeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。</p>\n<h3 id=\"Android-Debug-Database\"><a href=\"#Android-Debug-Database\" class=\"headerlink\" title=\"Android Debug Database\"></a>Android Debug Database</h3><p>Android Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。</p>\n<h3 id=\"Android-WiFi-ADB\"><a href=\"#Android-WiFi-ADB\" class=\"headerlink\" title=\"Android WiFi ADB\"></a>Android WiFi ADB</h3><p><a href=\"https://github.com/pedrovgs/AndroidWiFiADB\" target=\"_blank\" rel=\"noopener\">Android WiFi ADB</a> 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。</p>\n<h3 id=\"drawable-optimizer\"><a href=\"#drawable-optimizer\" class=\"headerlink\" title=\"drawable-optimizer\"></a>drawable-optimizer</h3><p><a href=\"https://github.com/fabiomsr/drawable-optimizer\" target=\"_blank\" rel=\"noopener\">drawable-optimizer</a> 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。</p>\n<h3 id=\"DevKnox\"><a href=\"#DevKnox\" class=\"headerlink\" title=\"DevKnox\"></a>DevKnox</h3><p>app 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。<strong>使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -&gt; Devknox Scan 就会开始扫描。</strong></p>\n<h3 id=\"ClassyShark\"><a href=\"#ClassyShark\" class=\"headerlink\" title=\"ClassyShark\"></a>ClassyShark</h3><p><a href=\"https://github.com/google/android-classyshark\" target=\"_blank\" rel=\"noopener\">ClassyShark</a> 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"#技巧\">技巧</a></p>\n<p><a href=\"#插件\">插件</a></p>\n<p><a href=\"#工具\">工具</a></p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"快速查找\"><a href=\"#快速查找\" class=\"headerlink\" title=\"快速查找\"></a>快速查找</h3><p><code>双击 Shift 键</code>。堪比 Alfred 的功能。对输入的内容进行模糊查询，若勾选上 Include none-project items 后，还可以搜索非项目中的内容，如引用的 jar 包中的内容。</p>\n<h3 id=\"Search-Action\"><a href=\"#Search-Action\" class=\"headerlink\" title=\"Search Action\"></a>Search Action</h3><p><code>Ctrl + Shift + A</code>。类似搜索指令的入口。如输入 “Open Recent” 可以查找最近的工程；输入 “hier” 选中 Type Hierarchy ^H 即可以查看某个方法或类的调用栈。</p>\n<h3 id=\"演示模式\"><a href=\"#演示模式\" class=\"headerlink\" title=\"演示模式\"></a>演示模式</h3><p>在菜单栏 <code>View 选项</code> 最下面可找到几种极为方便的演示模式。通过选择这几种模式可以在连接投影仪时非常方便地全屏显示代码区域。代码区在 mac 下可通过双指缩放进行代码区域的缩放。</p>\n<h3 id=\"显示最近操作、修改\"><a href=\"#显示最近操作、修改\" class=\"headerlink\" title=\"显示最近操作、修改\"></a>显示最近操作、修改</h3><p><code>Ctrl + E</code> 和 <code>Ctrl + Shift + E</code> 快速显示最近文件操作和文件修改。同时可用 <code>Ctrl + Tab</code> 进行各个界面的切换。</p>\n<h3 id=\"操作记录前进和回退\"><a href=\"#操作记录前进和回退\" class=\"headerlink\" title=\"操作记录前进和回退\"></a>操作记录前进和回退</h3><p><code>Ctrl + Alt + Left/Right</code>。</p>\n<h3 id=\"移动行\"><a href=\"#移动行\" class=\"headerlink\" title=\"移动行\"></a>移动行</h3><p><code>Alt + Shift + 方向键上/方向键下</code>。整体移动也是类似的方法。</p>\n<h3 id=\"交换行\"><a href=\"#交换行\" class=\"headerlink\" title=\"交换行\"></a>交换行</h3><p><code>Ctrl + Shift + 方向键上/方向键下</code>。</p>\n<h3 id=\"Log-快捷模板\"><a href=\"#Log-快捷模板\" class=\"headerlink\" title=\"Log 快捷模板\"></a>Log 快捷模板</h3><p>在 onCreate 中输入 <code>logi</code> ，按 Enter 即可生成如下一条 Log 日志。相应地，其它级别的日志也可类似地快速生成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.i(TAG, <span class=\"string\">\"onCreate: \"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看大纲\"><a href=\"#查看大纲\" class=\"headerlink\" title=\"查看大纲\"></a>查看大纲</h3><p><code>(Fn) + Ctrl + F12</code>。大纲界面显示方法和成员列表。输入关键字可模糊查询方法和成员。</p>\n<h3 id=\"附加调试\"><a href=\"#附加调试\" class=\"headerlink\" title=\"附加调试\"></a>附加调试</h3><p>在 ADB 连接手机情况下，点击 <code>attach to debugger</code> 按钮并选择要调试的程序（只能调试 Debug 签名的 App），即可进入调试模式，无需通过 Debug 运行程序。对于大项目，这种方式可以以正常的方式进行程序运行，如果使用 Debug 模式运行会非常卡。</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>全局折叠、展开：<code>Ctrl + Shift + -</code> 、<code>Ctrl + Shift + +</code><br>局部折叠、展开：<code>Ctrl  + -</code> 、<code>Ctrl  + +</code> </p>\n<h3 id=\"在文件系统中打开文件\"><a href=\"#在文件系统中打开文件\" class=\"headerlink\" title=\"在文件系统中打开文件\"></a>在文件系统中打开文件</h3><p>按住 Ctrl 键并点击打开的代码的 Tab 页。</p>\n<h3 id=\"预览方法定义\"><a href=\"#预览方法定义\" class=\"headerlink\" title=\"预览方法定义\"></a>预览方法定义</h3><p><code>Ctrl + Shift + i (mac 为 Command + Y)</code>。在本页面预览方法的定义，无需跳转到方法定义的地方去。</p>\n<h3 id=\"拆分窗口\"><a href=\"#拆分窗口\" class=\"headerlink\" title=\"拆分窗口\"></a>拆分窗口</h3><p>在编辑区域显示多个编辑界面：Window –&gt; Editor Tabs –&gt; Split vertical \\ horizontal</p>\n<h3 id=\"Extract-的妙用\"><a href=\"#Extract-的妙用\" class=\"headerlink\" title=\"Extract 的妙用\"></a>Extract 的妙用</h3><p><strong>Extract 可以重构 Java 代码；抽取布局 XML 的一些属性作为 Style；抽取布局 Layout。</strong><br>在代码中，Extract 可提取各种变量、参数、常量。如将一个局部变量提取为类的成员变量，将一个字符串的常量提取为全局的常量（可选择提取到这个类本身或新的类中）。</p>\n<h3 id=\"方法调用栈\"><a href=\"#方法调用栈\" class=\"headerlink\" title=\"方法调用栈\"></a>方法调用栈</h3><p><code>Ctrl + Alt + H</code> 可以快速找到该方法的调用栈。</p>\n<h3 id=\"Surround-With\"><a href=\"#Surround-With\" class=\"headerlink\" title=\"Surround With\"></a>Surround With</h3><p><code>Ctrl + Alt + T</code>。可快速对某段代码进行重构，如增加判空的 if 条件、增加 try catch 捕获异常。</p>\n<h3 id=\"Image-Asset-amp-amp-Vector-Asset\"><a href=\"#Image-Asset-amp-amp-Vector-Asset\" class=\"headerlink\" title=\"Image Asset &amp;&amp; Vector Asset\"></a>Image Asset &amp;&amp; Vector Asset</h3><p>可帮助快速创建不同分辨率的图像和 SVG 文件。要使用该功能，在 res 资源目录下右键选择 New。</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><ul>\n<li>条件断点<br> 满足某个条件时断住。在普通断点上右键，在弹出菜单的 Condition 中填入断点条件即可。如在循环里面需要 i == 5 时使用断点，则在 Condition 输入 i == 5。</li>\n<li>临时断点<br>执行一次断点后该断点就会消失。在当前行使用快捷键 <code>(Fn) + Ctrl + Alt + F8</code>，即可生成一个临时断点，临时断点上有一个数字“1”。</li>\n<li>异常断点<br>在 Run 菜单打开 View breakpoints 界面，点击右上角的 “+”，选择 Java Exception Breakpoints，并输入要监听的异常即可。如输入 NullPointerException，则在程序运行时不需设置任何断点，只要 App 因为 NullPointerException 异常而导致崩溃，系统就会在对应的地方自动断点并暂停。</li>\n<li>日志断点<br>当代码写完了，突然出现一个 bug 需要加一行 Log 进行调试，但又不想为了这一行 Log 而重新编译一遍整个工程。此时可以使用日志断点解决这个问题。首先，在需要断点的地方打上一个普通断点，然后在断点处右键，选择 suspend 属性为 false，并在下方的 Log evaluated expression 中写入日志信息即可。如此设置后，在程序运行时则无需重新编译即可在断点处打出日志信息。</li>\n</ul>\n<h3 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h3><ul>\n<li><p>内置模板<br><code>Ctrl + J</code> 调出代码模板。这些模板在设置的 Live Templates 标签中。这里不仅提供了 Java 代码的快捷模板，连 Android 注释、Log、甚至 XML 都有非常多的快捷模板。</p>\n</li>\n<li><p>后缀模板<br><code>Ctrl + J</code> 调出代码模板后。如需遍历一个 List 类型的变量 list，只需输入 list.for 快速生成遍历模板、输入 list.cast 快速生成类型转换模板。</p>\n</li>\n<li><p>自定义模板</p>\n<p><strong>方法注释</strong></p>\n<p> ①、打开设置，选择 “Live Templates”；②、点击右栏的加号，选择增加一个 Template Group，并在该 Group 下新增一个 Template；③、选中自定义的注释模板，如 ma ，在下方的编辑区域中进行注释代码的编辑，如下代码模板；④、经过这样的配置后，在方法前输入 “ma” 即可弹出该模板，按 Enter 键后确认输入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * $desc$</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * create at $date$</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p><strong>文件、类注释</strong></p>\n<p>①、打开设置，选择 “File and Code Templates”；②、选择 Includes 标签，创建名称为 “ClassHeader” 的模板和名称为 “FileHeader” 的模板；③、有了这两个模板就可以组合这些模板来创建新的完整类、文件模板。如在 Files 标签中新建一个名称为 “MyActivity” 的模板文件，并设置代码模板。④、新建文件的时候选择 “MyActivity” 即可创建该种模板的文件。</p>\n</li>\n</ul>\n<p>ClassHeader 模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> $&#123;USER&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>FileHeader模板：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * $&#123;NAME&#125;      $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) $&#123;YEAR&#125; jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package $&#123;PACKAGE_NAME&#125;;#end</span><br></pre></td></tr></table></figure>\n<p>MyActivity模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parse(\"FileHeader.java\")</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(\"ClassHeader.java\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> $</span>&#123;NAME&#125; extends Activity&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用 MyActivity 模板新建的 LoginActivity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * LoginActivity      2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2016 jufuns. All right reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.jiejue.catwalk.ui.ac;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * class description here</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016-10-07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       \t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>类似地，我们也可以建立 Adapter、单例等等的模板代码。</p>\n</blockquote>\n<h3 id=\"立即停止-AndroidStudio-编译\"><a href=\"#立即停止-AndroidStudio-编译\" class=\"headerlink\" title=\"立即停止 AndroidStudio 编译\"></a>立即停止 AndroidStudio 编译</h3><p>  一个命令就可以停止它！</p>\n<p>  只需进入项目文件夹（在 AS 的 terminal 窗口），然后输入以下命令即可。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac</span><br><span class=\"line\">./gradlew --stop</span><br><span class=\"line\"></span><br><span class=\"line\">window</span><br><span class=\"line\">gradlew --stop</span><br></pre></td></tr></table></figure>\n<p>  就是这么简单，这个命令会杀死编译的守护进程，编译会立即停止。</p>\n<h3 id=\"关闭-显示方法参数提示\"><a href=\"#关闭-显示方法参数提示\" class=\"headerlink\" title=\"关闭 / 显示方法参数提示\"></a>关闭 / 显示方法参数提示</h3><p><img src=\"http://pcckwdbix.bkt.clouddn.com/1.png\" alt=\"Mou icon\"></p>\n<p><img src=\"http://pcckwdbix.bkt.clouddn.com/2.png\" alt=\"Mou icon\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\".ignore\"></a>.ignore</h3><p>给 Git 项目生成最合适的 ignore 文件。</p>\n<h3 id=\"ButterKnife-Zelezny\"><a href=\"#ButterKnife-Zelezny\" class=\"headerlink\" title=\"ButterKnife Zelezny\"></a>ButterKnife Zelezny</h3><p>在代码中的布局文件单击鼠标右键，选择 Generate-Generate ButterKnife 即可自动生成 ButterKnife 所需的注解文件。</p>\n<h3 id=\"SelectorChapek\"><a href=\"#SelectorChapek\" class=\"headerlink\" title=\"SelectorChapek\"></a>SelectorChapek</h3><p>可将一个 drawable 文件夹下的图像自动生成对应的 drawable selector，只要文件名符合安装要求的规范即可。</p>\n<h3 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h3><p>可将一段 Json 生成所需的 Gson 实体。</p>\n<h3 id=\"Android-Parcelable-code-generator\"><a href=\"#Android-Parcelable-code-generator\" class=\"headerlink\" title=\"Android Parcelable code generator\"></a>Android Parcelable code generator</h3><p>可自动生成 Parcelable 接口所需的代码。</p>\n<h3 id=\"AndroidCodeGenerator\"><a href=\"#AndroidCodeGenerator\" class=\"headerlink\" title=\"AndroidCodeGenerator\"></a>AndroidCodeGenerator</h3><p>可在 getView 方法中根据布局文件的 ID，快速生成对于的 ViewHolder。</p>\n<h3 id=\"Prettify\"><a href=\"#Prettify\" class=\"headerlink\" title=\"Prettify\"></a>Prettify</h3><p>可根据 Layout 自动生成该 Layout 中的 View 在 Java 中的 findViewById 代码。</p>\n<h3 id=\"Exynap\"><a href=\"#Exynap\" class=\"headerlink\" title=\"Exynap\"></a>Exynap</h3><p><a href=\"http://exynap.com/\" target=\"_blank\" rel=\"noopener\">Exynap</a> 一个帮助开发者自动生成样板代码的 AndroidStudio 插件。</p>\n<h3 id=\"Android-Methods-Count\"><a href=\"#Android-Methods-Count\" class=\"headerlink\" title=\"Android Methods Count\"></a>Android Methods Count</h3><p>高效统计 Android 开源库的方法数。</p>\n<h3 id=\"AndroidLocalizationer\"><a href=\"#AndroidLocalizationer\" class=\"headerlink\" title=\"AndroidLocalizationer\"></a>AndroidLocalizationer</h3><p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。</p>\n<h3 id=\"Key-Promoter\"><a href=\"#Key-Promoter\" class=\"headerlink\" title=\"Key Promoter\"></a>Key Promoter</h3><p>当用鼠标点击 AS 的一个功能时，Key Promoter 插件会展示该功能的快捷键。</p>\n<h3 id=\"FindBugs-IDEA\"><a href=\"#FindBugs-IDEA\" class=\"headerlink\" title=\"FindBugs-IDEA\"></a>FindBugs-IDEA</h3><p>一个免费的 Android Studio 插件，可以在开发早期检测出常见的 Java bug .</p>\n<h3 id=\"ADB-Idea\"><a href=\"#ADB-Idea\" class=\"headerlink\" title=\"ADB Idea\"></a>ADB Idea</h3><p><a href=\"https://github.com/pbreault/adb-idea\" target=\"_blank\" rel=\"noopener\">ADB Idea</a> 一个开源的 Android Studio 插件，帮助你在 IDE 中实现 app 重启，杀死，清理数据，卸载。</p>\n<h3 id=\"Codota\"><a href=\"#Codota\" class=\"headerlink\" title=\"Codota\"></a>Codota</h3><p><a href=\"https://www.codota.com/\" target=\"_blank\" rel=\"noopener\">Codota</a> 写代码经常会遇到需要从 github 或者 stackoverflow 上寻找代码示例的时候，这个插件可以在无需离开 IDE 就能做这件事情。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Stetho\"><a href=\"#Stetho\" class=\"headerlink\" title=\"Stetho\"></a>Stetho</h3><p>Stetho 是 Facebook 开发的 Android 调试工具。它可以通过 Chrome 的开发者工具来辅助 Android 开发。提供有网络抓包、查看本地数据（比如 Sqlite 数据库，Sharepreference 等等）、Javascript 控制台、View Hierarchy 布局层级查看、Dump App 等功能。</p>\n<h3 id=\"Gradle-please\"><a href=\"#Gradle-please\" class=\"headerlink\" title=\"Gradle, please\"></a>Gradle, please</h3><p><a href=\"http://gradleplease.appspot.com/\" target=\"_blank\" rel=\"noopener\">Gradle, please</a> 帮助快速地找到第三方库 gradle 依赖的那行代码。比如我们要使用 glide , 只需在一个输入框中输入 glide , 下面就会显示 glide 的完整依赖。当我们搞不清楚库的拼写或者版本号这些细节时，就显得相当有用。</p>\n<h3 id=\"LeakCanary\"><a href=\"#LeakCanary\" class=\"headerlink\" title=\"LeakCanary\"></a>LeakCanary</h3><p>LeakCanary 是由 Square 开发的一个开源工具，让复杂的内存泄漏检测变得更简单。它可以在内存泄漏的时候显示通知，并提供一个完整的泄漏轨迹。</p>\n<h3 id=\"Android-Debug-Database\"><a href=\"#Android-Debug-Database\" class=\"headerlink\" title=\"Android Debug Database\"></a>Android Debug Database</h3><p>Android Debug Database 是一个非常酷的开源工具，完全改变了 debug 数据库和 shared preferences 的方式。现在你可以在一个漂亮的界面上查看，编辑，删除数据，以及运行 sql 语句。</p>\n<h3 id=\"Android-WiFi-ADB\"><a href=\"#Android-WiFi-ADB\" class=\"headerlink\" title=\"Android WiFi ADB\"></a>Android WiFi ADB</h3><p><a href=\"https://github.com/pedrovgs/AndroidWiFiADB\" target=\"_blank\" rel=\"noopener\">Android WiFi ADB</a> 可以通过 Wi-Fi  从 Android Studio 运行 app . 无需用数据线把设备和电脑连接起来。</p>\n<h3 id=\"drawable-optimizer\"><a href=\"#drawable-optimizer\" class=\"headerlink\" title=\"drawable-optimizer\"></a>drawable-optimizer</h3><p><a href=\"https://github.com/fabiomsr/drawable-optimizer\" target=\"_blank\" rel=\"noopener\">drawable-optimizer</a> 一个通过优化 PNG 图片来减小 APK 体积的 gradle 插件。</p>\n<h3 id=\"DevKnox\"><a href=\"#DevKnox\" class=\"headerlink\" title=\"DevKnox\"></a>DevKnox</h3><p>app 中会有一些难以意识到的安全漏洞，要杜绝这些漏洞往往需要相当的经验和精力。但是这个工具可以帮助你检测安全漏洞，就像使用拼写检查一下简单。<strong>使用方法：选中要查找问题的 java 文件或者文件夹，右键 Devknox Scan -&gt; Devknox Scan 就会开始扫描。</strong></p>\n<h3 id=\"ClassyShark\"><a href=\"#ClassyShark\" class=\"headerlink\" title=\"ClassyShark\"></a>ClassyShark</h3><p><a href=\"https://github.com/google/android-classyshark\" target=\"_blank\" rel=\"noopener\">ClassyShark</a> 可以帮助你窥探任何 apk 获得许多有用的信息，比如 classes , resources , manifest ,  dependencies , dex count 等等。它可以让你了解一个 app 是做什么的甚至是如何做到的。ClassyShark 是开源的。</p>\n"},{"title":"Android Jetpack 之 WorkManager","date":"2020-04-12T08:13:00.000Z","_content":"\n\n\n\n\n\n### 概述\n\nAndroid 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。\n\nWorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。\n\n### 主要功能\n\n- 最高向后兼容到 API 14\n  - 在运行 API 23 及以上级别的设备上使用 JobScheduler\n  - 在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager\n- 添加网络可用性或充电状态等工作约束\n- 调度一次性或周期性异步任务\n- 监控和管理计划任务\n- 将任务链接起来\n- 确保任务执行，即使应用或设备重启也同样执行任务\n- 遵循低电耗模式等省电功能\n\n### 重要特点\n\n- **针对不需要立即执行的任务：**比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。\n- **保证任务一定会被执行：**即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。\n\nWorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看[后台处理指南](https://developer.android.com/guide/background?hl=zh-cn)，了解哪种解决方案符合您的需求。\n\n### 使用\n\n**1、添加相关依赖**\n\n使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。[依赖链接](https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies)\n\n```Kotlin\ndependencies {\n   def work_version = \"2.3.1\"\n\n   // (Java only)\n   implementation \"androidx.work:work-runtime:$work_version\"\n\n   // Kotlin + coroutines\n   implementation \"androidx.work:work-runtime-ktx:$work_version\"\n}\n```\n\n**2、使用 Worker 定义任务**\n\nWorker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。\n\n```Kotlin\nclass UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n\n    override fun doWork(): Result {\n        LogUtil.d(\"UploadLogWorker\", \"doWork()\")\n        return Result.success()\n    }\n\n    override fun onStopped() {\n        super.onStopped()\n        // 当任务结束时会回调这里\n    }\n}\n```\n\ndoWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：\n\n- **Result.success()** 任务成功。\n- **Result.Failure()** 任务失败。\n- **Result.Retry()** 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。\n\n**3、使用 WorkRequest 配置任务**\n\n通过 WorkRequest 配置我们的任务**何时运行**以及**如何运行**。\n\n- **设置任务触发条件** 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 [Constraints.Builder 参考文档](https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn)）。\n\n  ```Kotlin\nval constraints = Constraints.Builder()\n        .setRequiresCharging(true) // 充电中\n        .setRequiredNetworkType(NetworkType.CONNECTED) // 网络已连接\n        .setRequiresBatteryNotLow(true) // 电量充足\n        .build()\n```\n- **将 constraints 设置到 WorkRequest 中**。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。\n\n  ```Kotlin\nval oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setConstraints(constraints) // 设置触发条件\n        .build()\n```\n- **设置延迟执行任务**。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，**至少**经过 5 分钟后再执行。\n\n  ```Kotlin\nval oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setConstraints(constraints)\n        .setInitialDelay(5, TimeUnit.MINUTES) // 符合触发条件后，至少经过 5 分钟后再执行\n        .build()\n```\n  > 任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。\n\n- **设置指数退避策略**。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。\n\n  ```Kotlin\nval oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)\n        .build()\n```\n  > 比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。\n\n- **任务的输入/输出**。输入和输出值以键值对的形式存储在 Data 对象中。\n\n  在 WorkRequest 中设置输入数据。\n\n  ```Kotlin\nval inputData = workDataOf(\"name\" to \"张三\", \"id\" to 112134)\nval uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setInputData(inputData)\n        .build()\n```\n\n  在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。\n\n  ```Kotlin\nclass UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n\n    override fun doWork(): Result {\n        val name = inputData.getString(\"name\")\n        val id = inputData.getInt(\"id\", 0)\n        LogUtil.d(\"name-->$name, id--->$id\")\n\n        val outputData = workDataOf(\"name\" to name, \"id\" to id)\n        return Result.success(outputData)\n    }\n}\n```\n  > 按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。\n\n- **为任务设置标签**。设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。\n\n  ```Kotlin\nval oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\nval oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\n```\n  > 以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。\n\n**4、将 WorkRequest 提交给系统**。\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android开发——架构组件LiveData源码解析](https://blog.csdn.net/SEU_Calvin/article/details/82256693)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)\n","source":"_posts/Android-Jetpack-之-WorkManager.md","raw":"---\ntitle: Android Jetpack 之 WorkManager\ndate: 2020-04-12 16:13:00\ncategories: \"Android\"\ntags:\n     - Android\n     - WorkManager\n     - Jetpack\n---\n\n\n\n\n\n\n### 概述\n\nAndroid 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。\n\nWorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。\n\n### 主要功能\n\n- 最高向后兼容到 API 14\n  - 在运行 API 23 及以上级别的设备上使用 JobScheduler\n  - 在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager\n- 添加网络可用性或充电状态等工作约束\n- 调度一次性或周期性异步任务\n- 监控和管理计划任务\n- 将任务链接起来\n- 确保任务执行，即使应用或设备重启也同样执行任务\n- 遵循低电耗模式等省电功能\n\n### 重要特点\n\n- **针对不需要立即执行的任务：**比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。\n- **保证任务一定会被执行：**即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。\n\nWorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看[后台处理指南](https://developer.android.com/guide/background?hl=zh-cn)，了解哪种解决方案符合您的需求。\n\n### 使用\n\n**1、添加相关依赖**\n\n使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。[依赖链接](https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies)\n\n```Kotlin\ndependencies {\n   def work_version = \"2.3.1\"\n\n   // (Java only)\n   implementation \"androidx.work:work-runtime:$work_version\"\n\n   // Kotlin + coroutines\n   implementation \"androidx.work:work-runtime-ktx:$work_version\"\n}\n```\n\n**2、使用 Worker 定义任务**\n\nWorker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。\n\n```Kotlin\nclass UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n\n    override fun doWork(): Result {\n        LogUtil.d(\"UploadLogWorker\", \"doWork()\")\n        return Result.success()\n    }\n\n    override fun onStopped() {\n        super.onStopped()\n        // 当任务结束时会回调这里\n    }\n}\n```\n\ndoWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：\n\n- **Result.success()** 任务成功。\n- **Result.Failure()** 任务失败。\n- **Result.Retry()** 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。\n\n**3、使用 WorkRequest 配置任务**\n\n通过 WorkRequest 配置我们的任务**何时运行**以及**如何运行**。\n\n- **设置任务触发条件** 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 [Constraints.Builder 参考文档](https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn)）。\n\n  ```Kotlin\nval constraints = Constraints.Builder()\n        .setRequiresCharging(true) // 充电中\n        .setRequiredNetworkType(NetworkType.CONNECTED) // 网络已连接\n        .setRequiresBatteryNotLow(true) // 电量充足\n        .build()\n```\n- **将 constraints 设置到 WorkRequest 中**。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。\n\n  ```Kotlin\nval oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setConstraints(constraints) // 设置触发条件\n        .build()\n```\n- **设置延迟执行任务**。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，**至少**经过 5 分钟后再执行。\n\n  ```Kotlin\nval oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setConstraints(constraints)\n        .setInitialDelay(5, TimeUnit.MINUTES) // 符合触发条件后，至少经过 5 分钟后再执行\n        .build()\n```\n  > 任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。\n\n- **设置指数退避策略**。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。\n\n  ```Kotlin\nval oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)\n        .build()\n```\n  > 比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。\n\n- **任务的输入/输出**。输入和输出值以键值对的形式存储在 Data 对象中。\n\n  在 WorkRequest 中设置输入数据。\n\n  ```Kotlin\nval inputData = workDataOf(\"name\" to \"张三\", \"id\" to 112134)\nval uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .setInputData(inputData)\n        .build()\n```\n\n  在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。\n\n  ```Kotlin\nclass UploadLogWorker(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) {\n\n    override fun doWork(): Result {\n        val name = inputData.getString(\"name\")\n        val id = inputData.getInt(\"id\", 0)\n        LogUtil.d(\"name-->$name, id--->$id\")\n\n        val outputData = workDataOf(\"name\" to name, \"id\" to id)\n        return Result.success(outputData)\n    }\n}\n```\n  > 按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。\n\n- **为任务设置标签**。设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。\n\n  ```Kotlin\nval oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\nval oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::class.java)\n        .addTag(\"A\")\n        .build()\n```\n  > 以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。\n\n**4、将 WorkRequest 提交给系统**。\n\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android开发——架构组件LiveData源码解析](https://blog.csdn.net/SEU_Calvin/article/details/82256693)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)\n","slug":"Android-Jetpack-之-WorkManager","published":1,"updated":"2020-06-11T02:36:50.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd30002dmgquwxe23sqi","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Android 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。</p>\n<p>WorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。</p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><ul>\n<li>最高向后兼容到 API 14<ul>\n<li>在运行 API 23 及以上级别的设备上使用 JobScheduler</li>\n<li>在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager</li>\n</ul>\n</li>\n<li>添加网络可用性或充电状态等工作约束</li>\n<li>调度一次性或周期性异步任务</li>\n<li>监控和管理计划任务</li>\n<li>将任务链接起来</li>\n<li>确保任务执行，即使应用或设备重启也同样执行任务</li>\n<li>遵循低电耗模式等省电功能</li>\n</ul>\n<h3 id=\"重要特点\"><a href=\"#重要特点\" class=\"headerlink\" title=\"重要特点\"></a>重要特点</h3><ul>\n<li><strong>针对不需要立即执行的任务：</strong>比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。</li>\n<li><strong>保证任务一定会被执行：</strong>即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。</li>\n</ul>\n<p>WorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看<a href=\"https://developer.android.com/guide/background?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">后台处理指南</a>，了解哪种解决方案符合您的需求。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><strong>1、添加相关依赖</strong></p>\n<p>使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。<a href=\"https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies\" target=\"_blank\" rel=\"noopener\">依赖链接</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   def work_version = <span class=\"string\">\"2.3.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// (Java only)</span></span><br><span class=\"line\">   implementation <span class=\"string\">\"androidx.work:work-runtime:<span class=\"variable\">$work_version</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Kotlin + coroutines</span></span><br><span class=\"line\">   implementation <span class=\"string\">\"androidx.work:work-runtime-ktx:<span class=\"variable\">$work_version</span>\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、使用 Worker 定义任务</strong></p>\n<p>Worker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadLogWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">\"UploadLogWorker\"</span>, <span class=\"string\">\"doWork()\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStopped</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStopped()</span><br><span class=\"line\">        <span class=\"comment\">// 当任务结束时会回调这里</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>doWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：</p>\n<ul>\n<li><strong>Result.success()</strong> 任务成功。</li>\n<li><strong>Result.Failure()</strong> 任务失败。</li>\n<li><strong>Result.Retry()</strong> 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。</li>\n</ul>\n<p><strong>3、使用 WorkRequest 配置任务</strong></p>\n<p>通过 WorkRequest 配置我们的任务<strong>何时运行</strong>以及<strong>如何运行</strong>。</p>\n<ul>\n<li><p><strong>设置任务触发条件</strong> 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 <a href=\"https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Constraints.Builder 参考文档</a>）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">        .setRequiresCharging(<span class=\"literal\">true</span>) <span class=\"comment\">// 充电中</span></span><br><span class=\"line\">        .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 网络已连接</span></span><br><span class=\"line\">        .setRequiresBatteryNotLow(<span class=\"literal\">true</span>) <span class=\"comment\">// 电量充足</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>将 constraints 设置到 WorkRequest 中</strong>。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setConstraints(constraints) <span class=\"comment\">// 设置触发条件</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置延迟执行任务</strong>。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，<strong>至少</strong>经过 5 分钟后再执行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setConstraints(constraints)</span><br><span class=\"line\">        .setInitialDelay(<span class=\"number\">5</span>, TimeUnit.MINUTES) <span class=\"comment\">// 符合触发条件后，至少经过 5 分钟后再执行</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。</p>\n</blockquote>\n</li>\n<li><p><strong>设置指数退避策略</strong>。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。</p>\n</blockquote>\n</li>\n<li><p><strong>任务的输入/输出</strong>。输入和输出值以键值对的形式存储在 Data 对象中。</p>\n<p>在 WorkRequest 中设置输入数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> inputData = workDataOf(<span class=\"string\">\"name\"</span> to <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"id\"</span> to <span class=\"number\">112134</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setInputData(inputData)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<p>在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadLogWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = inputData.getString(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = inputData.getInt(<span class=\"string\">\"id\"</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">\"name--&gt;<span class=\"variable\">$name</span>, id---&gt;<span class=\"variable\">$id</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> outputData = workDataOf(<span class=\"string\">\"name\"</span> to name, <span class=\"string\">\"id\"</span> to id)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(outputData)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。</p>\n</blockquote>\n</li>\n<li><p><strong>为任务设置标签</strong>。设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .addTag(<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">        .build()</span><br><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .addTag(<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>4、将 WorkRequest 提交给系统</strong>。</p>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/SEU_Calvin/article/details/82256693\" target=\"_blank\" rel=\"noopener\">Android开发——架构组件LiveData源码解析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Android 在处理后台任务上，根据不同的需求给我们提供了 Service、JobScheduler、Loader 等。然而，大量的后台任务势必会过度消耗设备的电量。为了在设备电量和用户体验之间达到一个比较好的平衡，谷歌推出了 WorkManager。</p>\n<p>WorkManager 是一个 Android 库，它在工作的触发器（如适当的网络状态和电池条件）满足时, 优雅地运行可推迟的后台工作。WorkManager 尽可能使用框架 JobScheduler , 以帮助优化电池寿命和批处理作业。在 Android 6.0（API 级 23）下面的设备上, 如果 WorkManager 已经包含了应用程序的依赖项，则尝试使用 Firebase JobDispatcher。否则，WorkManager 返回到自定义 AlarmManager 实现，以优雅地处理您的后台工作。</p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><ul>\n<li>最高向后兼容到 API 14<ul>\n<li>在运行 API 23 及以上级别的设备上使用 JobScheduler</li>\n<li>在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager</li>\n</ul>\n</li>\n<li>添加网络可用性或充电状态等工作约束</li>\n<li>调度一次性或周期性异步任务</li>\n<li>监控和管理计划任务</li>\n<li>将任务链接起来</li>\n<li>确保任务执行，即使应用或设备重启也同样执行任务</li>\n<li>遵循低电耗模式等省电功能</li>\n</ul>\n<h3 id=\"重要特点\"><a href=\"#重要特点\" class=\"headerlink\" title=\"重要特点\"></a>重要特点</h3><ul>\n<li><strong>针对不需要立即执行的任务：</strong>比如向后端服务发送日志或分析数据，定期将应用数据与服务器同步等。从业务角度看，这些任务不需要立即执行。</li>\n<li><strong>保证任务一定会被执行：</strong>即使应用程序当前不在运行中，哪怕彻底退出，或者设备重新启动，任务仍然会在适当的时候执行。这是因 WorkManager 有自己的数据库，关于任务的所有信息和数据都保存在这个数据库中。</li>\n</ul>\n<p>WorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看<a href=\"https://developer.android.com/guide/background?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">后台处理指南</a>，了解哪种解决方案符合您的需求。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><strong>1、添加相关依赖</strong></p>\n<p>使用 Java 或 Kotlin 语言将 WorkManager 依赖项添加到您的 Android 项目中。<a href=\"https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn#declaring_dependencies\" target=\"_blank\" rel=\"noopener\">依赖链接</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   def work_version = <span class=\"string\">\"2.3.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// (Java only)</span></span><br><span class=\"line\">   implementation <span class=\"string\">\"androidx.work:work-runtime:<span class=\"variable\">$work_version</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Kotlin + coroutines</span></span><br><span class=\"line\">   implementation <span class=\"string\">\"androidx.work:work-runtime-ktx:<span class=\"variable\">$work_version</span>\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、使用 Worker 定义任务</strong></p>\n<p>Worker 是一个抽象类，用来指定需要执行的具体任务。我们需要继承 Worker 类，并实现它的 doWork 方法，所有需要在任务中执行的代码都在该方法中编写。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadLogWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">\"UploadLogWorker\"</span>, <span class=\"string\">\"doWork()\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStopped</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStopped()</span><br><span class=\"line\">        <span class=\"comment\">// 当任务结束时会回调这里</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>doWork 方法最后返回一个 Result，这个 Result 是一个枚举，它有几个固定的值：</p>\n<ul>\n<li><strong>Result.success()</strong> 任务成功。</li>\n<li><strong>Result.Failure()</strong> 任务失败。</li>\n<li><strong>Result.Retry()</strong> 遇到暂时性失败，此时可使用 WorkRequest.Builder.setBackoffCriteria(BackoffPolicy, long, TimeUnit) 来重试。</li>\n</ul>\n<p><strong>3、使用 WorkRequest 配置任务</strong></p>\n<p>通过 WorkRequest 配置我们的任务<strong>何时运行</strong>以及<strong>如何运行</strong>。</p>\n<ul>\n<li><p><strong>设置任务触发条件</strong> 。比如，我们可以设置设备处于充电中，网络已连接，并且电量充足的情况下才执行我们的任务（完整的触发条件列表，请参阅 <a href=\"https://developer.android.com/reference/androidx/work/Constraints.Builder?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Constraints.Builder 参考文档</a>）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">        .setRequiresCharging(<span class=\"literal\">true</span>) <span class=\"comment\">// 充电中</span></span><br><span class=\"line\">        .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 网络已连接</span></span><br><span class=\"line\">        .setRequiresBatteryNotLow(<span class=\"literal\">true</span>) <span class=\"comment\">// 电量充足</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>将 constraints 设置到 WorkRequest 中</strong>。WorkRequest 是抽象类，它有两个子类，OneTimeWorkRequest 和 PeriodicWorkRequest，分别对应一次性任务和周期性任务。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setConstraints(constraints) <span class=\"comment\">// 设置触发条件</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置延迟执行任务</strong>。如果任务没有设置触发条件，或者所有触发条件都符合了，系统可能立刻执行任务，如果你希望再延后执行，则可以使用 setInitialDelay 方法。以下示例设置符合触发条件后，<strong>至少</strong>经过 5 分钟后再执行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setConstraints(constraints)</span><br><span class=\"line\">        .setInitialDelay(<span class=\"number\">5</span>, TimeUnit.MINUTES) <span class=\"comment\">// 符合触发条件后，至少经过 5 分钟后再执行</span></span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>任务执行的确切时间还取决于 WorkRequest 中使用的触发条件和系统优化。WorkManager 经过设计，能够在满足这些触发条件的情况下提供可能的最佳行为。</p>\n</blockquote>\n</li>\n<li><p><strong>设置指数退避策略</strong>。如果需要 WorkManager 重新尝试执行任务，可以让 Worker 的 doWork 方法返回 Result.retry()。系统有默认的指数退避策略来帮助我们重新执行任务，我们也可以使用 setBackoffCriteria 方法来自定义指数退避策略。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setBackoffCriteria(BackoffPolicy.LINEAR, OneTimeWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比如 Worker 线程的执行出现异常，比如服务器宕机，那么我们可能就希望过一段时间再重新执行任务。</p>\n</blockquote>\n</li>\n<li><p><strong>任务的输入/输出</strong>。输入和输出值以键值对的形式存储在 Data 对象中。</p>\n<p>在 WorkRequest 中设置输入数据。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> inputData = workDataOf(<span class=\"string\">\"name\"</span> to <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"id\"</span> to <span class=\"number\">112134</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> uploadLogRequest = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .setInputData(inputData)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<p>在 Worker 的 doWork 方法中取出输入数据。类似地，Data 类可用于输出返回值。要返回 Data 对象，请将它包含到 Result 的 Result.success() 或 Result.failure() 中。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadLogWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = inputData.getString(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = inputData.getInt(<span class=\"string\">\"id\"</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        LogUtil.d(<span class=\"string\">\"name--&gt;<span class=\"variable\">$name</span>, id---&gt;<span class=\"variable\">$id</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> outputData = workDataOf(<span class=\"string\">\"name\"</span> to name, <span class=\"string\">\"id\"</span> to id)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(outputData)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>按照设计，Data 对象应该很小，值可以是字符串、基元类型或数组变体。如果需要将更多数据传入和传出工作器，应该将数据放在其它位置，例如 Room 数据库。Data 对象的大小上限为 10KB。</p>\n</blockquote>\n</li>\n<li><p><strong>为任务设置标签</strong>。设置了 Tag 后，可以通过 WorkManager.cancelAllWorkByTag(String) 取消使用特定 Tag 的所有任务，通过 WorkManager.getWorkInfosByTagLiveData(String) 返回 LiveData 和具有该 Tag 的所有任务的状态列表。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest1 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .addTag(<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">        .build()</span><br><span class=\"line\"><span class=\"keyword\">val</span> oneTimeWorkRequest2 = OneTimeWorkRequest.Builder(UploadLogWorker::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        .addTag(<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上两个任务的 Tag 都设置为 A , 使这两个任务成为了一个组：A 组，这样的好处是以后可以操作整个组。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>4、将 WorkRequest 提交给系统</strong>。</p>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/SEU_Calvin/article/details/82256693\" target=\"_blank\" rel=\"noopener\">Android开发——架构组件LiveData源码解析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n</ul>\n"},{"title":"Android 之 Activity","date":"2018-07-05T07:56:00.000Z","_content":"\n\n\n\n\n\n### Activity正常生命周期流程\n\nActivity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . \n\n- onCreate()\n\n  Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .\n\n- onStart()\n\n  Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。\n\n- onResume()\n\n  Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。\n\n- onPause()\n\n  Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。\n\n- onStop()\n\n  Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。\n\n- onRestart()\n\n  Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。\n\n- onDestroy\n\n  Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。\n\n> 通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。\n\n![activity_lifecycle](https://github.com/zhich/images/blob/master/blog/activity_lifecycle.png?raw=true)\n\n### Activity异常情况生命周期分析\n\n- 系统资源配置发生改变导致 Activity 被杀死并重新创建\n\n  当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 **onSaveInstanceState** 来保存当前 Activity 的状态。**onSaveInstanceState 方法的调用时机是在 onStop 之前**，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 **onRestoreInstanceState** , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，**onRestoreInstanceState 的调用时机在 onStart 之后。**\n\n  系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。\n\n  在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。\n\n  **在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是**：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。\n\n- 资源内存不足导致低优先级的 Activity 被杀死\n\n  Activity 按优先级从高到低如下：\n\n  - **前台 Activity** , 正在与用户交互的 Activity，优先级最高。\n  - **可见但非前台 Activity** , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。\n  - **后台 Activity** , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。\n\n  当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，**一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死**。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。\n\n### Activity生命周期附加说明\n\n1. 当用户打开新的 Activity 或切换到桌面时，回调如下：onPause --> onStop . 但是有一种情况，如果新 Activity 采用了**透明主题**，那么当前 Activity 不会调用 onStop .\n\n2. 不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .\n\n### configChanges属性的应用\n\n1. 防止屏幕旋转时 Activity 重启\n\n```xml\nandroid:configChanges=\"orientation | screenSize\"\n```\n\n有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。\n\n### Activity启动模式\n\n我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。\n\n#### 四种加载模式\n\n- standard 模式\n\n  **标准模式**。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。**启动的生命周期为：onCreate() -> onStart() -> onResume()** .\n\n- singleTop 模式\n\n  **栈顶复用模式**。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 **onNewIntent** 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的**生命周期顺序为：onPause() ->onNewIntent()->onResume()** , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时**生命周期顺序为：onCreate()->onStart()->onResume()** .\n\n\n- singleTask 模式\n\n  **栈内复用模式**。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 **onNewIntent()**）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。\n\n- singleInstance 模式\n\n  **单实例模式**。这是一种加强的 singleTask 模式，**它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中**。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 **onNewIntent()**）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。\n\n> 设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。\n\n#### LaunchMode附加说明\n\n1. 使用 **TaskAffinity** 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为**应用的包名**。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。\n\n2. 任务栈分为**前台任务栈**和**后台任务栈**，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。\n\n#### Activity的Flags\n\n除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。\n\n常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP\n\n- FLAG_ACTIVITY_NEW_TASK\n\n  相当于 **singleTask** 启动模式。\n\n- FLAG_ACTIVITY_SINGLE_TOP\n\n  相当于 **singleTop** 启动模式。\n\n- FLAG_ACTIVITY_CLEAR_TOP\n\n  设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。\n\n### IntentFilter的匹配规则\n\n启动 Activity 分为**显示**和**隐式**调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。**当显示和隐式调用共存时以显示调用为主**。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .\n\n一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。**只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity** . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .\n\n#### action的匹配规则\n\naction 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . **action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功**，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。\n\n#### category的匹配规则\n\ncategory 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . **category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category** , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 **android.intent.category.DEFAULT** 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .\n\n#### data的匹配规则\n\ndata 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指**过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中**。\n\n\n\n\n**参考资料**\n\n- Android开发艺术探索\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android-之-Activity.md","raw":"---\ntitle: Android 之 Activity\ndate: 2018-07-5 15:56:00\ncategories: \"Android\"\ntags:\n     - Android\n     - Activity\n---\n\n\n\n\n\n\n### Activity正常生命周期流程\n\nActivity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . \n\n- onCreate()\n\n  Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .\n\n- onStart()\n\n  Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。\n\n- onResume()\n\n  Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。\n\n- onPause()\n\n  Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。\n\n- onStop()\n\n  Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。\n\n- onRestart()\n\n  Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。\n\n- onDestroy\n\n  Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。\n\n> 通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。\n\n![activity_lifecycle](https://github.com/zhich/images/blob/master/blog/activity_lifecycle.png?raw=true)\n\n### Activity异常情况生命周期分析\n\n- 系统资源配置发生改变导致 Activity 被杀死并重新创建\n\n  当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 **onSaveInstanceState** 来保存当前 Activity 的状态。**onSaveInstanceState 方法的调用时机是在 onStop 之前**，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 **onRestoreInstanceState** , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，**onRestoreInstanceState 的调用时机在 onStart 之后。**\n\n  系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。\n\n  在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。\n\n  **在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是**：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。\n\n- 资源内存不足导致低优先级的 Activity 被杀死\n\n  Activity 按优先级从高到低如下：\n\n  - **前台 Activity** , 正在与用户交互的 Activity，优先级最高。\n  - **可见但非前台 Activity** , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。\n  - **后台 Activity** , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。\n\n  当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，**一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死**。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。\n\n### Activity生命周期附加说明\n\n1. 当用户打开新的 Activity 或切换到桌面时，回调如下：onPause --> onStop . 但是有一种情况，如果新 Activity 采用了**透明主题**，那么当前 Activity 不会调用 onStop .\n\n2. 不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .\n\n### configChanges属性的应用\n\n1. 防止屏幕旋转时 Activity 重启\n\n```xml\nandroid:configChanges=\"orientation | screenSize\"\n```\n\n有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。\n\n### Activity启动模式\n\n我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。\n\n#### 四种加载模式\n\n- standard 模式\n\n  **标准模式**。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。**启动的生命周期为：onCreate() -> onStart() -> onResume()** .\n\n- singleTop 模式\n\n  **栈顶复用模式**。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 **onNewIntent** 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的**生命周期顺序为：onPause() ->onNewIntent()->onResume()** , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时**生命周期顺序为：onCreate()->onStart()->onResume()** .\n\n\n- singleTask 模式\n\n  **栈内复用模式**。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 **onNewIntent()**）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。\n\n- singleInstance 模式\n\n  **单实例模式**。这是一种加强的 singleTask 模式，**它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中**。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 **onNewIntent()**）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。\n\n> 设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。\n\n#### LaunchMode附加说明\n\n1. 使用 **TaskAffinity** 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为**应用的包名**。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。\n\n2. 任务栈分为**前台任务栈**和**后台任务栈**，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。\n\n#### Activity的Flags\n\n除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。\n\n常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP\n\n- FLAG_ACTIVITY_NEW_TASK\n\n  相当于 **singleTask** 启动模式。\n\n- FLAG_ACTIVITY_SINGLE_TOP\n\n  相当于 **singleTop** 启动模式。\n\n- FLAG_ACTIVITY_CLEAR_TOP\n\n  设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。\n\n### IntentFilter的匹配规则\n\n启动 Activity 分为**显示**和**隐式**调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。**当显示和隐式调用共存时以显示调用为主**。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .\n\n一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。**只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity** . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .\n\n#### action的匹配规则\n\naction 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . **action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功**，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。\n\n#### category的匹配规则\n\ncategory 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . **category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category** , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 **android.intent.category.DEFAULT** 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .\n\n#### data的匹配规则\n\ndata 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指**过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中**。\n\n\n\n\n**参考资料**\n\n- Android开发艺术探索\n\n\n\n\n\n\n\n\n\n\n","slug":"Android-之-Activity","published":1,"updated":"2020-06-11T02:46:17.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd32002fmgqui0apkasd","content":"<h3 id=\"Activity正常生命周期流程\"><a href=\"#Activity正常生命周期流程\" class=\"headerlink\" title=\"Activity正常生命周期流程\"></a>Activity正常生命周期流程</h3><p>Activity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . </p>\n<ul>\n<li><p>onCreate()</p>\n<p>Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .</p>\n</li>\n<li><p>onStart()</p>\n<p>Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。</p>\n</li>\n<li><p>onResume()</p>\n<p>Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。</p>\n</li>\n<li><p>onPause()</p>\n<p>Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。</p>\n</li>\n<li><p>onStop()</p>\n<p>Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。</p>\n</li>\n<li><p>onRestart()</p>\n<p>Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。</p>\n</li>\n<li><p>onDestroy</p>\n<p>Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。</p>\n</li>\n</ul>\n<blockquote>\n<p>通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。</p>\n</blockquote>\n<p><img src=\"https://github.com/zhich/images/blob/master/blog/activity_lifecycle.png?raw=true\" alt=\"activity_lifecycle\"></p>\n<h3 id=\"Activity异常情况生命周期分析\"><a href=\"#Activity异常情况生命周期分析\" class=\"headerlink\" title=\"Activity异常情况生命周期分析\"></a>Activity异常情况生命周期分析</h3><ul>\n<li><p>系统资源配置发生改变导致 Activity 被杀死并重新创建</p>\n<p>当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 <strong>onSaveInstanceState</strong> 来保存当前 Activity 的状态。<strong>onSaveInstanceState 方法的调用时机是在 onStop 之前</strong>，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 <strong>onRestoreInstanceState</strong> , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，<strong>onRestoreInstanceState 的调用时机在 onStart 之后。</strong></p>\n<p>系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。</p>\n<p>在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。</p>\n<p><strong>在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是</strong>：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。</p>\n</li>\n<li><p>资源内存不足导致低优先级的 Activity 被杀死</p>\n<p>Activity 按优先级从高到低如下：</p>\n<ul>\n<li><strong>前台 Activity</strong> , 正在与用户交互的 Activity，优先级最高。</li>\n<li><strong>可见但非前台 Activity</strong> , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。</li>\n<li><strong>后台 Activity</strong> , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。</li>\n</ul>\n<p>当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，<strong>一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死</strong>。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。</p>\n</li>\n</ul>\n<h3 id=\"Activity生命周期附加说明\"><a href=\"#Activity生命周期附加说明\" class=\"headerlink\" title=\"Activity生命周期附加说明\"></a>Activity生命周期附加说明</h3><ol>\n<li><p>当用户打开新的 Activity 或切换到桌面时，回调如下：onPause –&gt; onStop . 但是有一种情况，如果新 Activity 采用了<strong>透明主题</strong>，那么当前 Activity 不会调用 onStop .</p>\n</li>\n<li><p>不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .</p>\n</li>\n</ol>\n<h3 id=\"configChanges属性的应用\"><a href=\"#configChanges属性的应用\" class=\"headerlink\" title=\"configChanges属性的应用\"></a>configChanges属性的应用</h3><ol>\n<li>防止屏幕旋转时 Activity 重启</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:configChanges=\"orientation | screenSize\"</span><br></pre></td></tr></table></figure>\n<p>有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。</p>\n<h3 id=\"Activity启动模式\"><a href=\"#Activity启动模式\" class=\"headerlink\" title=\"Activity启动模式\"></a>Activity启动模式</h3><p>我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。</p>\n<h4 id=\"四种加载模式\"><a href=\"#四种加载模式\" class=\"headerlink\" title=\"四种加载模式\"></a>四种加载模式</h4><ul>\n<li><p>standard 模式</p>\n<p><strong>标准模式</strong>。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。<strong>启动的生命周期为：onCreate() -&gt; onStart() -&gt; onResume()</strong> .</p>\n</li>\n<li><p>singleTop 模式</p>\n<p><strong>栈顶复用模式</strong>。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 <strong>onNewIntent</strong> 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的<strong>生命周期顺序为：onPause() -&gt;onNewIntent()-&gt;onResume()</strong> , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时<strong>生命周期顺序为：onCreate()-&gt;onStart()-&gt;onResume()</strong> .</p>\n</li>\n</ul>\n<ul>\n<li><p>singleTask 模式</p>\n<p><strong>栈内复用模式</strong>。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 <strong>onNewIntent()</strong>）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。</p>\n</li>\n<li><p>singleInstance 模式</p>\n<p><strong>单实例模式</strong>。这是一种加强的 singleTask 模式，<strong>它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中</strong>。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 <strong>onNewIntent()</strong>）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。</p>\n</li>\n</ul>\n<blockquote>\n<p>设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。</p>\n</blockquote>\n<h4 id=\"LaunchMode附加说明\"><a href=\"#LaunchMode附加说明\" class=\"headerlink\" title=\"LaunchMode附加说明\"></a>LaunchMode附加说明</h4><ol>\n<li><p>使用 <strong>TaskAffinity</strong> 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为<strong>应用的包名</strong>。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。</p>\n</li>\n<li><p>任务栈分为<strong>前台任务栈</strong>和<strong>后台任务栈</strong>，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。</p>\n</li>\n</ol>\n<h4 id=\"Activity的Flags\"><a href=\"#Activity的Flags\" class=\"headerlink\" title=\"Activity的Flags\"></a>Activity的Flags</h4><p>除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。</p>\n<p>常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP</p>\n<ul>\n<li><p>FLAG_ACTIVITY_NEW_TASK</p>\n<p>相当于 <strong>singleTask</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_SINGLE_TOP</p>\n<p>相当于 <strong>singleTop</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_CLEAR_TOP</p>\n<p>设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。</p>\n</li>\n</ul>\n<h3 id=\"IntentFilter的匹配规则\"><a href=\"#IntentFilter的匹配规则\" class=\"headerlink\" title=\"IntentFilter的匹配规则\"></a>IntentFilter的匹配规则</h3><p>启动 Activity 分为<strong>显示</strong>和<strong>隐式</strong>调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。<strong>当显示和隐式调用共存时以显示调用为主</strong>。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .</p>\n<p>一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。<strong>只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity</strong> . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .</p>\n<h4 id=\"action的匹配规则\"><a href=\"#action的匹配规则\" class=\"headerlink\" title=\"action的匹配规则\"></a>action的匹配规则</h4><p>action 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . <strong>action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功</strong>，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。</p>\n<h4 id=\"category的匹配规则\"><a href=\"#category的匹配规则\" class=\"headerlink\" title=\"category的匹配规则\"></a>category的匹配规则</h4><p>category 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . <strong>category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category</strong> , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 <strong>android.intent.category.DEFAULT</strong> 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .</p>\n<h4 id=\"data的匹配规则\"><a href=\"#data的匹配规则\" class=\"headerlink\" title=\"data的匹配规则\"></a>data的匹配规则</h4><p>data 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指<strong>过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中</strong>。</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li>Android开发艺术探索</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Activity正常生命周期流程\"><a href=\"#Activity正常生命周期流程\" class=\"headerlink\" title=\"Activity正常生命周期流程\"></a>Activity正常生命周期流程</h3><p>Activity 的生命周期回调方法有：onCreate() , onStart() , onResume() , onPause() , onStop() , onRestart() , onDestroy() . </p>\n<ul>\n<li><p>onCreate()</p>\n<p>Activity 正在被创建。这是生命周期的第一个方法，在整个生命周期中只会被调用一次，一般在此做一些初始化工作。参数 savedInstanceState 保存 Activity 因异常情况而被销毁前的状态，可利用此参数做一些数据恢复的操作，若 Activity 正常启动，savedInstanceState 为 null .</p>\n</li>\n<li><p>onStart()</p>\n<p>Activity 正在被启动。此时 Activity 已经可见，但还没出现在前台，还无法与用户交互。</p>\n</li>\n<li><p>onResume()</p>\n<p>Activity 启动完成。此时 Activity 已经可见，并出现在前台，可以与用户交互了。该方法在 Activity 的整个生命周期中可能会多次被调用到。</p>\n</li>\n<li><p>onPause()</p>\n<p>Activity 正在被停止。在此可做一些存储数据、停止动画等工作，但注意不能太耗时，因为这会影响到新 Activity 的显示，onPause 必须执行完，新 Activity 的 onResume 才会执行。</p>\n</li>\n<li><p>onStop()</p>\n<p>Activity 即将停止。当前 Activity 不可见时回调此方法。在此处可释放全部用户使用不到的数据，可做一些稍微重量级的回收工作，同样不能太耗时，如对注册广播的解注册，对一些状态数据的存储。此时 Activity 还不会被销毁掉，而是保持在内存中，但随时都会被回收。</p>\n</li>\n<li><p>onRestart()</p>\n<p>Activity 正在重新启动。一般情况下，当当前 Activity 从不可见重新变为可见状态时，onRestart 就会被调用。这种情况一般由用户行为所导致，比如用户按 Home 键切换到桌面或者用户打开一个新 Activity , 此时当前 Activity 就会暂停，也就是 onPause 和 onStop 被执行了，接着用户又回到这个 Activity , 就会导致该 Activity 的 onRestart 被调用。</p>\n</li>\n<li><p>onDestroy</p>\n<p>Activity 即将被销毁。这是 Activity 生命周期中的最后一个回调，在此可做一些回收工作和最终的资源释放。</p>\n</li>\n</ul>\n<blockquote>\n<p>通常情况下：onCreate() 和 onDestroy() 成对存在；onStart() 和 onStop() 成对存在；onResume() 和 onPause() 成对存在。</p>\n</blockquote>\n<p><img src=\"https://github.com/zhich/images/blob/master/blog/activity_lifecycle.png?raw=true\" alt=\"activity_lifecycle\"></p>\n<h3 id=\"Activity异常情况生命周期分析\"><a href=\"#Activity异常情况生命周期分析\" class=\"headerlink\" title=\"Activity异常情况生命周期分析\"></a>Activity异常情况生命周期分析</h3><ul>\n<li><p>系统资源配置发生改变导致 Activity 被杀死并重新创建</p>\n<p>当系统配置发生变化（如旋转屏幕），Activity 会被销毁，其 onPause、onStop、onDestroy 均会被调用，同时由于 Activity 是在异常情况下终止的，系统会调用 <strong>onSaveInstanceState</strong> 来保存当前 Activity 的状态。<strong>onSaveInstanceState 方法的调用时机是在 onStop 之前</strong>，它和 onPause 没有既定的时序关系。当 Activity 被重建后，系统会调用 <strong>onRestoreInstanceState</strong> , 并把 Activity 销毁时的 onSaveInstanceState 方法所保存的 Bundle 对象作为参数同时传递给 onRestoreInstanceState 和 onCreate 方法。因此可以通过 onRestoreInstanceState 和 onCreate 方法来判断 Activity 是否被重建了，如果被重建了，我们就可以取出之前保存的数据并恢复，从时序上说，<strong>onRestoreInstanceState 的调用时机在 onStart 之后。</strong></p>\n<p>系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据，其他情况不会触发这个过程，但是按 Home 键或启动新 Activity 仍然会触发 onSaveInstanceState 的调用。</p>\n<p>在 onSaveInstance 和 onRestoreInstanceState 方法中，系统自动为我们做了一定的恢复工作。当 Activity 在异常情况下需要重建时，系统会默认保存了当前 Activity 的视图结构，并且在 Activity 重启后为我们恢复这些数据，如文本框中用户的输入数据、ListView 滚动位置等。</p>\n<p><strong>在 onCreate 和 onRestoreInstanceState 中接收保存的数据的区别是</strong>：onRestoreInstanceState 一旦被调用，其参数 savedIntanceState 一定有值，而不需要额外判断它是否为空；但是 onCreate 如果是正常启动的话，其参数 saveInstanceState 为 null , 所以必须额外判断。官方文档建议采用 onRestoreInstance 去恢复数据。</p>\n</li>\n<li><p>资源内存不足导致低优先级的 Activity 被杀死</p>\n<p>Activity 按优先级从高到低如下：</p>\n<ul>\n<li><strong>前台 Activity</strong> , 正在与用户交互的 Activity，优先级最高。</li>\n<li><strong>可见但非前台 Activity</strong> , 如 Activity 中弹出一个对话框，导致 Activity 可见但是位于后台无法与用户直接交互。</li>\n<li><strong>后台 Activity</strong> , 已经被停止的 Activity , 如执行了 onStop , 优先级最低。</li>\n</ul>\n<p>当系统内存不足时，系统就会按照上述优先级去杀死目标 Activity 所在的进程，并在后续通过 onSaveInstanceState 和 onRestoreInstanceState 来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程很快被系统杀死，因此，<strong>一些后台工作不适合脱离四大组件而独自运行在后台中，这样进程很容易被杀死</strong>。比较好的方法是将后台工作放在 Service 中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。</p>\n</li>\n</ul>\n<h3 id=\"Activity生命周期附加说明\"><a href=\"#Activity生命周期附加说明\" class=\"headerlink\" title=\"Activity生命周期附加说明\"></a>Activity生命周期附加说明</h3><ol>\n<li><p>当用户打开新的 Activity 或切换到桌面时，回调如下：onPause –&gt; onStop . 但是有一种情况，如果新 Activity 采用了<strong>透明主题</strong>，那么当前 Activity 不会调用 onStop .</p>\n</li>\n<li><p>不能在 onPause 中做重量级的操作，因为必须 onPause 执行完成后新启动的 Activity 才能 Resume .</p>\n</li>\n</ol>\n<h3 id=\"configChanges属性的应用\"><a href=\"#configChanges属性的应用\" class=\"headerlink\" title=\"configChanges属性的应用\"></a>configChanges属性的应用</h3><ol>\n<li>防止屏幕旋转时 Activity 重启</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:configChanges=\"orientation | screenSize\"</span><br></pre></td></tr></table></figure>\n<p>有了上面的设置，系统会调用 Activity 的 onConfigurationChanged 方法，此时我们可以做一些自己的特殊处理。</p>\n<h3 id=\"Activity启动模式\"><a href=\"#Activity启动模式\" class=\"headerlink\" title=\"Activity启动模式\"></a>Activity启动模式</h3><p>我们在开发项目的过程中，会涉及到该应用中多个 Activity 组件之间的跳转，或者夹带其它应用的可复用的 Activity . 例如我们可能希望跳转到原来某个 Activity 实例，而不是产生大量重复的 Activity . 这样就需要我们为 Activity 配置特定的加载模式，而不是使用默认的加载模式。</p>\n<h4 id=\"四种加载模式\"><a href=\"#四种加载模式\" class=\"headerlink\" title=\"四种加载模式\"></a>四种加载模式</h4><ul>\n<li><p>standard 模式</p>\n<p><strong>标准模式</strong>。这是默认模式，每次激活 Activity 时都会创建 Activity 实例，并放入任务栈中，不管这个实例是否存在。一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈。在这种模式下，谁启动了这个 Activity , 那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。<strong>启动的生命周期为：onCreate() -&gt; onStart() -&gt; onResume()</strong> .</p>\n</li>\n<li><p>singleTop 模式</p>\n<p><strong>栈顶复用模式</strong>。如果在任务的栈顶正好存在该 Activity 的实例，就重用该实例（同时 <strong>onNewIntent</strong> 方法会被回调，通过该方法的 Intent 参数我们可以取出当前请求的信息），此时这个 Activity 的<strong>生命周期顺序为：onPause() -&gt;onNewIntent()-&gt;onResume()</strong> , 否则就会创建新的 Activity 实例并放入栈顶，即使栈中已经存在该 Activity 的实例，只要不在栈顶，都会创建新的实例。此时<strong>生命周期顺序为：onCreate()-&gt;onStart()-&gt;onResume()</strong> .</p>\n</li>\n</ul>\n<ul>\n<li><p>singleTask 模式</p>\n<p><strong>栈内复用模式</strong>。这是一种单实例模式，如果在栈中已经有该 Activity 的实例，就重用该实例（会调用实例的 <strong>onNewIntent()</strong>）。具体地说，当一个具有 singleTask 模式的 Activity 请求启动后，如 Activity A , 系统首先会寻找是否存在 A 想要的任务栈，若不存在，则重新创建一个任务栈，然后创建 A 的实例后把 A 放入栈中。若存在，这时要看 A 是否在栈中有实例存在，若有实例存在，那么系统就会把 A 调到栈顶（此时还会把 A 上面的实例移除出栈）并调用它的 onNewIntent 方法，若没有实例存在，则创建 A 的实例并把 A 压入栈中。</p>\n</li>\n<li><p>singleInstance 模式</p>\n<p><strong>单实例模式</strong>。这是一种加强的 singleTask 模式，<strong>它除了具有 singleTask 的所有特性外，还加强了一点，那就是具有此种模式的 Activity 只能单独存在于一个任务栈中</strong>。它在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。一旦该模式的 Activity 实例已经存在于某个栈中，任何应用再激活该 Activity 时都会重用该栈中的实例（会同时调用实例的 <strong>onNewIntent()</strong>）。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。</p>\n</li>\n</ul>\n<blockquote>\n<p>设置启动模式的位置在 AndroidManifest.xml 文件中 Activity 元素的 Android:launchMode 属性。</p>\n</blockquote>\n<h4 id=\"LaunchMode附加说明\"><a href=\"#LaunchMode附加说明\" class=\"headerlink\" title=\"LaunchMode附加说明\"></a>LaunchMode附加说明</h4><ol>\n<li><p>使用 <strong>TaskAffinity</strong> 属性指定一个 Activity 所需要的任务栈的名字，默认情况下，所有 Activity 所需的任务栈的名字为<strong>应用的包名</strong>。TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用。</p>\n</li>\n<li><p>任务栈分为<strong>前台任务栈</strong>和<strong>后台任务栈</strong>，后台任务栈中的 Activity 位于暂停状态，用户可通过切换将后台任务栈再次调到前台。</p>\n</li>\n</ol>\n<h4 id=\"Activity的Flags\"><a href=\"#Activity的Flags\" class=\"headerlink\" title=\"Activity的Flags\"></a>Activity的Flags</h4><p>除了可以在 manifest 中设置 Activity 的启动模式，也可以通过设置 Intent 的 flag 标识来设定 Activity 的启动模式。</p>\n<p>常用的有：FLAG_ACTIVITY_NEW_TASK、FLAG_ACTIVITY_SINGLE_TOP、FLAG_ACTIVITY_CLEAR_TOP</p>\n<ul>\n<li><p>FLAG_ACTIVITY_NEW_TASK</p>\n<p>相当于 <strong>singleTask</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_SINGLE_TOP</p>\n<p>相当于 <strong>singleTop</strong> 启动模式。</p>\n</li>\n<li><p>FLAG_ACTIVITY_CLEAR_TOP</p>\n<p>设置此标识的 Activity 在启动时，如果当前的任务栈内存在此 Activity 实例，则跳转到此实例，并清除掉在此实例上面的所有 Activity 实例，此时此 Activity 实例位于任务栈的栈顶。</p>\n</li>\n</ul>\n<h3 id=\"IntentFilter的匹配规则\"><a href=\"#IntentFilter的匹配规则\" class=\"headerlink\" title=\"IntentFilter的匹配规则\"></a>IntentFilter的匹配规则</h3><p>启动 Activity 分为<strong>显示</strong>和<strong>隐式</strong>调用，显示调用需要明确指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。<strong>当显示和隐式调用共存时以显示调用为主</strong>。显示调用很简单，这里只介绍隐式调用。隐式调用需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息，如果不匹配将无法启动目标 Activity , IntentFilter 中的过滤信息有 action、category、data .</p>\n<p>一个过滤列表中的 action、category 和 data 可以有多个，所有的 action、category、data 分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。<strong>只有一个 Intent 同时匹配 action、category、data 类别才算完全匹配，只有完全匹配才能成功启动目标 Activity</strong> . 一个 Activity 中可以有多个 intent-filter , 一个 Intent 只要能匹配任何一组 intent-filter 即可成功启动对应的 Activity .</p>\n<h4 id=\"action的匹配规则\"><a href=\"#action的匹配规则\" class=\"headerlink\" title=\"action的匹配规则\"></a>action的匹配规则</h4><p>action 是一个字符串，系统预定义了一些 action , 同时我们也可以在应用中定义自己的 action . 一个过滤规则中可以有多个 action . <strong>action 的匹配要求 Intent 中的 action 必须存在且和过滤规则中的其中一个 action 完全相同即可匹配成功</strong>，若 Intent 中没有指定 aciotn , 则匹配失败。另外，action是 区分大小写的。</p>\n<h4 id=\"category的匹配规则\"><a href=\"#category的匹配规则\" class=\"headerlink\" title=\"category的匹配规则\"></a>category的匹配规则</h4><p>category 是一个字符串，系统预定义了一些 category , 同时我们也可以在应用中自定义自己的 category . <strong>category 的匹配规则是，只要 Intent 中出现了 categoty , 不管有几个 category , 对于每一个 category , 它必须是过滤规则中已经定义了的 category</strong> , 系统在调用 startActivity 或者 startActivityForResult 的时候会默认给 Intent 加上 <strong>android.intent.category.DEFAULT</strong> 这个 category . 因此，为了我们的 activity 能够接收隐式调用，就必须在 intent-filter 中指定这个默认的 category .</p>\n<h4 id=\"data的匹配规则\"><a href=\"#data的匹配规则\" class=\"headerlink\" title=\"data的匹配规则\"></a>data的匹配规则</h4><p>data 的匹配规则和 action 类似，它要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data . 这里说的完全匹配是指<strong>过滤规则中出现的 data 部分也出现在了 Intent 中的 data 中</strong>。</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li>Android开发艺术探索</li>\n</ul>\n"},{"title":"Android 代码优化小提示","date":"2018-01-09T14:35:29.000Z","_content":"\n## 代码逻辑相关\n\n### 遍历一个List集合\n\nbad:\n\n```Java\nList<User> userList = new ArrayList<>();\nfor (int i = 0; i < userList.size(); i++) {\n    User user = new User();\n   \t //省略 n 行代码...\n    userList.add(user);\n}\n```\n\nbetter:\n\n```Java\nList<User> userList = new ArrayList<>();\nUser user = null;\nfor (int i = 0, size = userList.size(); i < size; i++) {\n    user = new User();\n    //省略 n 行代码...\n    userList.add(user);\n}\n```\n\n> ①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。\n\n### 遍历HashMap的最佳方法\n\n```Java\nMap<String, User> userMap = new HashMap<>();\nIterator it = userMap.entrySet().iterator();\nwhile (it.hasNext()) {\n    Map.Entry entry = (Map.Entry) it.next();\n    System.out.println(entry.getKey() + \" = \" + entry.getValue());\n    //迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素\n    it.remove(); // 避免抛 ConcurrentModificationException 异常\n}\n```\n\n### 字符串\n\n#### 判断字符串str是否为null或空串\n\nbad:\n\n```Java\nif (null == str || \"\".equals(str)) {\n}\n```\n\nbetter:\n\n```Java\nif (TextUtils.isEmpty(str)) {\n}\n```\n\n> TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。\n\n### 容易报空指针的情况\n\n#### 判断一个字符串的内容是否为某值\n\nbad:\n\n```Java\nif (str.equals(\"hello\")) {\n}\n```\n\nbetter:\n\n```Java\n// 避免空指针异常，应该把常量写在前面\nif (\"hello\".equals(str)) {\n}\n```\n\n#### 判断集合某个元素对象的某个字段是否为空\n\nbad:\n\n```Java\n// 如果元素对象为 null 这里就挂了吧\nif (null != userList.get(i).name) {\n}\n```\n\nbetter:\n\n```Java\n// 使用对象的方法或字段时，考虑下对象本身是否可能为 null\nif (null != userList.get(i) && null != userList.get(i).name) {\n}\n```\n\n### 常用资源释放\n\n#### Cursor\n\n```Java\ntry {\n    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), null, null, null, null);\n    //省略 n 行代码...\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    if(cursor != null){\n       try {\n            cursor.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n       }\n    }\n}\n```\n\n#### 流文件\n\n```Java\npublic class Test {\n\n    private static final int BUFFER_SIZE = 1024;\n\n    public static void main(String[] args) {\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            fr = new FileReader(\"origin.txt\");\n            fw = new FileWriter(\"destination.txt\");\n            char[] buf = new char[BUFFER_SIZE];\n            int len = 0;\n            while ((len = fr.read(buf)) != -1) {\n                fw.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"读写失败\");\n        } finally {\n            if (fw != null)\n                try {\n                    fw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (fr != null)\n                try {\n                    fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n}\n```\n\n#### WebView\n\n- 首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。\n\n```Java\nwebView =  new BridgeWebView(getContext().getApplicationContext());\nwebFrameLayout.addView(webView, 0);\n```\n\n> 在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。\n\n- 而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。\n\n```Java\npublic void onDetach() {\n    releaseWebViews();\n    super.onDetach();\n}\n\nprivate void releaseWebViews() {\n    if(webView != null) {\n        try {\n            if(webView.getParent() != null) {\n                ((ViewGroup) webView.getParent()).removeView(webView);\n            }\n            webView.destroy();\n        }catch (IllegalArgumentException e) {\n        }\n        RefWatcher refWatcher = FApplication.getRefWatcher();\n        refWatcher.watch(webView);\n        webView = null;\n    }\n}\n```\n\n参考文章：\n\n[Android WebView: 性能优化不得不说的事](https://www.jianshu.com/p/95d4d73be3d1)\n\n[android内存优化之webview](https://www.jianshu.com/p/c2412918b2b5#fn2)\n\n#### Handler\n\n- 使用弱引用\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private NoLeakHandler mNoLeakHandler;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mNoLeakHandler = new NoLeakHandler(this);\n        Message message = Message.obtain();\n        mNoLeakHandler.sendMessageDelayed(message, 2000);\n    }\n\n    private static class NoLeakHandler extends Handler {\n\n        private WeakReference<NoLeakActivity> mActivity;\n\n        public NoLeakHandler(NoLeakActivity activity) {\n            mActivity = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n        }\n    }\n}\n```\n\n- 及时清除消息\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private Handler mHandler = new Handler();\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n//                startMainActivity();\n            }\n        }, 2000);\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 把所有的消息和回调移除\n        mHandler.removeCallbacksAndMessages(null);\n        super.onDestroy();\n    }\n\n    @Override\n    public void onBackPressed() {\n        // 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）\n        mHandler.removeCallbacksAndMessages(null);\n        super.onBackPressed();\n    }\n}\n```\n\n### 其它\n\n#### 反面判断条件\n\nbad:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null != userList && userList.size() > 0) {\n\t\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\nbetter:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null == userList || userList.isEmpty()) {\n\t\treturn;\n\t}\n\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t// ...\n\t}\n}\n```\n\n> 很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。\n\n#### if与return搭配\n\nbad:\n\n```Java\npublic int testIfElse(String cmd) {\n    if (\"1\".equals(cmd)) {\n   \t return 1;\n    } else if (\"2\".equals(cmd)) {\n   \t return 2;\n    } else if (\"3\".equals(cmd)) {\n   \t return 3;\n    } else {\n   \t return 4;\n    }\n}\n```\n\nbetter:\n\n```Java\npublic int testIfElse(String cmd) {\n   if (\"1\".equals(cmd)) {\n       return 1;\n   }\n   if (\"2\".equals(cmd)) {\n       return 2;\n   }\n   if (\"3\".equals(cmd)) {\n       return 3;\n   }\n   return 4;\n}\n```\n\n#### 对象序列化\n\nAndroid 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .\n\n#### SharedPreferences\n\n`SharedPreferences.Editor.commit` 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level >= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  `SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)` 即可。\n\n#### 其它优化\n\n- 静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。\n\n- Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。\n\n- 不少人在子线程中更新 View 时喜欢使用 `Context.runOnUiThread` , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。\n\n- Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。\n\n- Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .\n\n- 如果使用 `Context.startActivity` 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。\n\n- 如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。\n\n- `transient` 关键字修饰变量可以限制序列化。\n\n- `View.getContext` 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .\n\n## UI相关\n\n### Space\n\nSpace 经常用于组件之间的缝隙，其 `draw()` 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。\n\n### tools标签\n\ntools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：\n\n```xml\n<TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:text=\"这段话只在预览时能看到,运行以后就看不到了\" />\n```\n\n### ContextCompat\n\nAndroid 6.0 之后 `getResources().getColor()` 被废弃了，可用 `ContextCompat.getColor(context, R.color.color_name)` 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 `getDrawable()` 等方法。\n\n\n\n","source":"_posts/Android-代码优化小提示.md","raw":"---\ntitle: Android 代码优化小提示\ndate: 2018-01-09 22:35:29\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n## 代码逻辑相关\n\n### 遍历一个List集合\n\nbad:\n\n```Java\nList<User> userList = new ArrayList<>();\nfor (int i = 0; i < userList.size(); i++) {\n    User user = new User();\n   \t //省略 n 行代码...\n    userList.add(user);\n}\n```\n\nbetter:\n\n```Java\nList<User> userList = new ArrayList<>();\nUser user = null;\nfor (int i = 0, size = userList.size(); i < size; i++) {\n    user = new User();\n    //省略 n 行代码...\n    userList.add(user);\n}\n```\n\n> ①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。\n\n### 遍历HashMap的最佳方法\n\n```Java\nMap<String, User> userMap = new HashMap<>();\nIterator it = userMap.entrySet().iterator();\nwhile (it.hasNext()) {\n    Map.Entry entry = (Map.Entry) it.next();\n    System.out.println(entry.getKey() + \" = \" + entry.getValue());\n    //迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素\n    it.remove(); // 避免抛 ConcurrentModificationException 异常\n}\n```\n\n### 字符串\n\n#### 判断字符串str是否为null或空串\n\nbad:\n\n```Java\nif (null == str || \"\".equals(str)) {\n}\n```\n\nbetter:\n\n```Java\nif (TextUtils.isEmpty(str)) {\n}\n```\n\n> TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以\t用 TextUtils 的 join 和 split 方法。\n\n### 容易报空指针的情况\n\n#### 判断一个字符串的内容是否为某值\n\nbad:\n\n```Java\nif (str.equals(\"hello\")) {\n}\n```\n\nbetter:\n\n```Java\n// 避免空指针异常，应该把常量写在前面\nif (\"hello\".equals(str)) {\n}\n```\n\n#### 判断集合某个元素对象的某个字段是否为空\n\nbad:\n\n```Java\n// 如果元素对象为 null 这里就挂了吧\nif (null != userList.get(i).name) {\n}\n```\n\nbetter:\n\n```Java\n// 使用对象的方法或字段时，考虑下对象本身是否可能为 null\nif (null != userList.get(i) && null != userList.get(i).name) {\n}\n```\n\n### 常用资源释放\n\n#### Cursor\n\n```Java\ntry {\n    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), null, null, null, null);\n    //省略 n 行代码...\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    if(cursor != null){\n       try {\n            cursor.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n       }\n    }\n}\n```\n\n#### 流文件\n\n```Java\npublic class Test {\n\n    private static final int BUFFER_SIZE = 1024;\n\n    public static void main(String[] args) {\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            fr = new FileReader(\"origin.txt\");\n            fw = new FileWriter(\"destination.txt\");\n            char[] buf = new char[BUFFER_SIZE];\n            int len = 0;\n            while ((len = fr.read(buf)) != -1) {\n                fw.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"读写失败\");\n        } finally {\n            if (fw != null)\n                try {\n                    fw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            if (fr != null)\n                try {\n                    fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n}\n```\n\n#### WebView\n\n- 首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。\n\n```Java\nwebView =  new BridgeWebView(getContext().getApplicationContext());\nwebFrameLayout.addView(webView, 0);\n```\n\n> 在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。\n\n- 而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。\n\n```Java\npublic void onDetach() {\n    releaseWebViews();\n    super.onDetach();\n}\n\nprivate void releaseWebViews() {\n    if(webView != null) {\n        try {\n            if(webView.getParent() != null) {\n                ((ViewGroup) webView.getParent()).removeView(webView);\n            }\n            webView.destroy();\n        }catch (IllegalArgumentException e) {\n        }\n        RefWatcher refWatcher = FApplication.getRefWatcher();\n        refWatcher.watch(webView);\n        webView = null;\n    }\n}\n```\n\n参考文章：\n\n[Android WebView: 性能优化不得不说的事](https://www.jianshu.com/p/95d4d73be3d1)\n\n[android内存优化之webview](https://www.jianshu.com/p/c2412918b2b5#fn2)\n\n#### Handler\n\n- 使用弱引用\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private NoLeakHandler mNoLeakHandler;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mNoLeakHandler = new NoLeakHandler(this);\n        Message message = Message.obtain();\n        mNoLeakHandler.sendMessageDelayed(message, 2000);\n    }\n\n    private static class NoLeakHandler extends Handler {\n\n        private WeakReference<NoLeakActivity> mActivity;\n\n        public NoLeakHandler(NoLeakActivity activity) {\n            mActivity = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n        }\n    }\n}\n```\n\n- 及时清除消息\n\n```Java\npublic class NoLeakActivity extends Activity {\n\n    private Handler mHandler = new Handler();\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n//                startMainActivity();\n            }\n        }, 2000);\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 把所有的消息和回调移除\n        mHandler.removeCallbacksAndMessages(null);\n        super.onDestroy();\n    }\n\n    @Override\n    public void onBackPressed() {\n        // 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）\n        mHandler.removeCallbacksAndMessages(null);\n        super.onBackPressed();\n    }\n}\n```\n\n### 其它\n\n#### 反面判断条件\n\nbad:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null != userList && userList.size() > 0) {\n\t\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\nbetter:\n\n```Java\npublic void testMethod(ArrayList<User> userList) {\n\tif (null == userList || userList.isEmpty()) {\n\t\treturn;\n\t}\n\tfor (int i = 0, size = userList.size(); i < size; i++) {\n\t\t// ...\n\t}\n}\n```\n\n> 很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。\n\n#### if与return搭配\n\nbad:\n\n```Java\npublic int testIfElse(String cmd) {\n    if (\"1\".equals(cmd)) {\n   \t return 1;\n    } else if (\"2\".equals(cmd)) {\n   \t return 2;\n    } else if (\"3\".equals(cmd)) {\n   \t return 3;\n    } else {\n   \t return 4;\n    }\n}\n```\n\nbetter:\n\n```Java\npublic int testIfElse(String cmd) {\n   if (\"1\".equals(cmd)) {\n       return 1;\n   }\n   if (\"2\".equals(cmd)) {\n       return 2;\n   }\n   if (\"3\".equals(cmd)) {\n       return 3;\n   }\n   return 4;\n}\n```\n\n#### 对象序列化\n\nAndroid 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .\n\n#### SharedPreferences\n\n`SharedPreferences.Editor.commit` 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level >= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  `SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)` 即可。\n\n#### 其它优化\n\n- 静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。\n\n- Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。\n\n- 不少人在子线程中更新 View 时喜欢使用 `Context.runOnUiThread` , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。\n\n- Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。\n\n- Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .\n\n- 如果使用 `Context.startActivity` 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。\n\n- 如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。\n\n- `transient` 关键字修饰变量可以限制序列化。\n\n- `View.getContext` 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .\n\n## UI相关\n\n### Space\n\nSpace 经常用于组件之间的缝隙，其 `draw()` 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。\n\n### tools标签\n\ntools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：\n\n```xml\n<TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:text=\"这段话只在预览时能看到,运行以后就看不到了\" />\n```\n\n### ContextCompat\n\nAndroid 6.0 之后 `getResources().getColor()` 被废弃了，可用 `ContextCompat.getColor(context, R.color.color_name)` 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 `getDrawable()` 等方法。\n\n\n\n","slug":"Android-代码优化小提示","published":1,"updated":"2018-06-25T03:42:59.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd35002imgqus6d47o5q","content":"<h2 id=\"代码逻辑相关\"><a href=\"#代码逻辑相关\" class=\"headerlink\" title=\"代码逻辑相关\"></a>代码逻辑相关</h2><h3 id=\"遍历一个List集合\"><a href=\"#遍历一个List集合\" class=\"headerlink\" title=\"遍历一个List集合\"></a>遍历一个List集合</h3><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">   \t <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">    user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。</p>\n</blockquote>\n<h3 id=\"遍历HashMap的最佳方法\"><a href=\"#遍历HashMap的最佳方法\" class=\"headerlink\" title=\"遍历HashMap的最佳方法\"></a>遍历HashMap的最佳方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, User&gt; userMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Iterator it = userMap.entrySet().iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Map.Entry entry = (Map.Entry) it.next();</span><br><span class=\"line\">    System.out.println(entry.getKey() + <span class=\"string\">\" = \"</span> + entry.getValue());</span><br><span class=\"line\">    <span class=\"comment\">//迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素</span></span><br><span class=\"line\">    it.remove(); <span class=\"comment\">// 避免抛 ConcurrentModificationException 异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"判断字符串str是否为null或空串\"><a href=\"#判断字符串str是否为null或空串\" class=\"headerlink\" title=\"判断字符串str是否为null或空串\"></a>判断字符串str是否为null或空串</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == str || <span class=\"string\">\"\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以    用 TextUtils 的 join 和 split 方法。</p>\n</blockquote>\n<h3 id=\"容易报空指针的情况\"><a href=\"#容易报空指针的情况\" class=\"headerlink\" title=\"容易报空指针的情况\"></a>容易报空指针的情况</h3><h4 id=\"判断一个字符串的内容是否为某值\"><a href=\"#判断一个字符串的内容是否为某值\" class=\"headerlink\" title=\"判断一个字符串的内容是否为某值\"></a>判断一个字符串的内容是否为某值</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"hello\"</span>)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 避免空指针异常，应该把常量写在前面</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"hello\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断集合某个元素对象的某个字段是否为空\"><a href=\"#判断集合某个元素对象的某个字段是否为空\" class=\"headerlink\" title=\"判断集合某个元素对象的某个字段是否为空\"></a>判断集合某个元素对象的某个字段是否为空</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果元素对象为 null 这里就挂了吧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对象的方法或字段时，考虑下对象本身是否可能为 null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i) &amp;&amp; <span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用资源释放\"><a href=\"#常用资源释放\" class=\"headerlink\" title=\"常用资源释放\"></a>常用资源释放</h3><h4 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cursor.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"流文件\"><a href=\"#流文件\" class=\"headerlink\" title=\"流文件\"></a>流文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUFFER_SIZE = <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FileReader fr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileWriter fw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"origin.txt\"</span>);</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"destination.txt\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] buf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[BUFFER_SIZE];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fw.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"读写失败\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fw != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><ul>\n<li>首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView =  <span class=\"keyword\">new</span> BridgeWebView(getContext().getApplicationContext());</span><br><span class=\"line\">webFrameLayout.addView(webView, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。</p>\n</blockquote>\n<ul>\n<li>而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    releaseWebViews();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseWebViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(webView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(webView.getParent() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                ((ViewGroup) webView.getParent()).removeView(webView);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            webView.destroy();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RefWatcher refWatcher = FApplication.getRefWatcher();</span><br><span class=\"line\">        refWatcher.watch(webView);</span><br><span class=\"line\">        webView = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/95d4d73be3d1\" target=\"_blank\" rel=\"noopener\">Android WebView: 性能优化不得不说的事</a></p>\n<p><a href=\"https://www.jianshu.com/p/c2412918b2b5#fn2\" target=\"_blank\" rel=\"noopener\">android内存优化之webview</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><ul>\n<li>使用弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NoLeakHandler mNoLeakHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mNoLeakHandler = <span class=\"keyword\">new</span> NoLeakHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Message message = Message.obtain();</span><br><span class=\"line\">        mNoLeakHandler.sendMessageDelayed(message, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;NoLeakActivity&gt; mActivity;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NoLeakHandler</span><span class=\"params\">(NoLeakActivity activity)</span> </span>&#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>及时清除消息</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mHandler.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//                startMainActivity();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><h4 id=\"反面判断条件\"><a href=\"#反面判断条件\" class=\"headerlink\" title=\"反面判断条件\"></a>反面判断条件</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList &amp;&amp; userList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == userList || userList.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。</p>\n</blockquote>\n<h4 id=\"if与return搭配\"><a href=\"#if与return搭配\" class=\"headerlink\" title=\"if与return搭配\"></a>if与return搭配</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h4><p>Android 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .</p>\n<h4 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h4><p><code>SharedPreferences.Editor.commit</code> 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level &gt;= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  <code>SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)</code> 即可。</p>\n<h4 id=\"其它优化\"><a href=\"#其它优化\" class=\"headerlink\" title=\"其它优化\"></a>其它优化</h4><ul>\n<li><p>静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。</p>\n</li>\n<li><p>Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。</p>\n</li>\n<li><p>不少人在子线程中更新 View 时喜欢使用 <code>Context.runOnUiThread</code> , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。</p>\n</li>\n<li><p>Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。</p>\n</li>\n<li><p>Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .</p>\n</li>\n<li><p>如果使用 <code>Context.startActivity</code> 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。</p>\n</li>\n<li><p>如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。</p>\n</li>\n<li><p><code>transient</code> 关键字修饰变量可以限制序列化。</p>\n</li>\n<li><p><code>View.getContext</code> 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .</p>\n</li>\n</ul>\n<h2 id=\"UI相关\"><a href=\"#UI相关\" class=\"headerlink\" title=\"UI相关\"></a>UI相关</h2><h3 id=\"Space\"><a href=\"#Space\" class=\"headerlink\" title=\"Space\"></a>Space</h3><p>Space 经常用于组件之间的缝隙，其 <code>draw()</code> 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。</p>\n<h3 id=\"tools标签\"><a href=\"#tools标签\" class=\"headerlink\" title=\"tools标签\"></a>tools标签</h3><p>tools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">\"这段话只在预览时能看到,运行以后就看不到了\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ContextCompat\"><a href=\"#ContextCompat\" class=\"headerlink\" title=\"ContextCompat\"></a>ContextCompat</h3><p>Android 6.0 之后 <code>getResources().getColor()</code> 被废弃了，可用 <code>ContextCompat.getColor(context, R.color.color_name)</code> 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 <code>getDrawable()</code> 等方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码逻辑相关\"><a href=\"#代码逻辑相关\" class=\"headerlink\" title=\"代码逻辑相关\"></a>代码逻辑相关</h2><h3 id=\"遍历一个List集合\"><a href=\"#遍历一个List集合\" class=\"headerlink\" title=\"遍历一个List集合\"></a>遍历一个List集合</h3><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">   \t <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">    user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">    userList.add(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>①、第二种方式把 userList.size() 用变量 size 存值避免了每次迭代都去调用该方法（不要在 for 循环的第二个表达式的判 断调用对象的方法或字段）；②、把 user 变量的声明放到循环外边，避免每次使用都去声明一下 User 对象。 ③、getCount() 方法的处理也类似，如用 int count = xxx.getCount() 缓存起来。</p>\n</blockquote>\n<h3 id=\"遍历HashMap的最佳方法\"><a href=\"#遍历HashMap的最佳方法\" class=\"headerlink\" title=\"遍历HashMap的最佳方法\"></a>遍历HashMap的最佳方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, User&gt; userMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Iterator it = userMap.entrySet().iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Map.Entry entry = (Map.Entry) it.next();</span><br><span class=\"line\">    System.out.println(entry.getKey() + <span class=\"string\">\" = \"</span> + entry.getValue());</span><br><span class=\"line\">    <span class=\"comment\">//迭代器方法遍历过程中可以通过 it.remove(); 删除当前遍历的元素</span></span><br><span class=\"line\">    it.remove(); <span class=\"comment\">// 避免抛 ConcurrentModificationException 异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"判断字符串str是否为null或空串\"><a href=\"#判断字符串str是否为null或空串\" class=\"headerlink\" title=\"判断字符串str是否为null或空串\"></a>判断字符串str是否为null或空串</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == str || <span class=\"string\">\"\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>TextUtils 是一个非常好用的工具类，把 List 转成字符串，逗号分隔；逗号分隔的 String 字符串，切割成 List ，分别可以    用 TextUtils 的 join 和 split 方法。</p>\n</blockquote>\n<h3 id=\"容易报空指针的情况\"><a href=\"#容易报空指针的情况\" class=\"headerlink\" title=\"容易报空指针的情况\"></a>容易报空指针的情况</h3><h4 id=\"判断一个字符串的内容是否为某值\"><a href=\"#判断一个字符串的内容是否为某值\" class=\"headerlink\" title=\"判断一个字符串的内容是否为某值\"></a>判断一个字符串的内容是否为某值</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"hello\"</span>)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 避免空指针异常，应该把常量写在前面</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"hello\"</span>.equals(str)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断集合某个元素对象的某个字段是否为空\"><a href=\"#判断集合某个元素对象的某个字段是否为空\" class=\"headerlink\" title=\"判断集合某个元素对象的某个字段是否为空\"></a>判断集合某个元素对象的某个字段是否为空</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果元素对象为 null 这里就挂了吧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对象的方法或字段时，考虑下对象本身是否可能为 null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList.get(i) &amp;&amp; <span class=\"keyword\">null</span> != userList.get(i).name) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用资源释放\"><a href=\"#常用资源释放\" class=\"headerlink\" title=\"常用资源释放\"></a>常用资源释放</h3><h4 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    cursor = context.getContentResolver().query(Uri.parse(PROVIDER_SETTINGFILE), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//省略 n 行代码...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cursor.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"流文件\"><a href=\"#流文件\" class=\"headerlink\" title=\"流文件\"></a>流文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUFFER_SIZE = <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FileReader fr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileWriter fw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"origin.txt\"</span>);</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"destination.txt\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] buf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[BUFFER_SIZE];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fw.write(buf, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"读写失败\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fw != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><ul>\n<li>首先就是使用自己封装的 WebView , 不在 xml 里面声明，而是直接代码 new 个对象，传入 application context 防止 activity 引用滥用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView =  <span class=\"keyword\">new</span> BridgeWebView(getContext().getApplicationContext());</span><br><span class=\"line\">webFrameLayout.addView(webView, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用了这个方式后，基本上 90% 的 webview 内存泄漏的问题便得以解决。</p>\n</blockquote>\n<ul>\n<li>而在 Android 4.4 版本以下，会出现 Android Webview 无法自动释放，如在 Fragment 中，使用 onDetach 来释放 Webview 是比较好的时机。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    releaseWebViews();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseWebViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(webView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(webView.getParent() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                ((ViewGroup) webView.getParent()).removeView(webView);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            webView.destroy();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RefWatcher refWatcher = FApplication.getRefWatcher();</span><br><span class=\"line\">        refWatcher.watch(webView);</span><br><span class=\"line\">        webView = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/95d4d73be3d1\" target=\"_blank\" rel=\"noopener\">Android WebView: 性能优化不得不说的事</a></p>\n<p><a href=\"https://www.jianshu.com/p/c2412918b2b5#fn2\" target=\"_blank\" rel=\"noopener\">android内存优化之webview</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><ul>\n<li>使用弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NoLeakHandler mNoLeakHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mNoLeakHandler = <span class=\"keyword\">new</span> NoLeakHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Message message = Message.obtain();</span><br><span class=\"line\">        mNoLeakHandler.sendMessageDelayed(message, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;NoLeakActivity&gt; mActivity;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NoLeakHandler</span><span class=\"params\">(NoLeakActivity activity)</span> </span>&#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>及时清除消息</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        mHandler.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//                startMainActivity();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把所有的消息和回调移除（onDestroy 执行不确定，因此这里需执行一遍）</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><h4 id=\"反面判断条件\"><a href=\"#反面判断条件\" class=\"headerlink\" title=\"反面判断条件\"></a>反面判断条件</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != userList &amp;&amp; userList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(ArrayList&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == userList || userList.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = userList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>很多比较复杂的层级判断都可以从这些判断的反面出发，来降低程序的复杂性，从而提高可读性。</p>\n</blockquote>\n<h4 id=\"if与return搭配\"><a href=\"#if与return搭配\" class=\"headerlink\" title=\"if与return搭配\"></a>if与return搭配</h4><p>bad:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>better:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testIfElse</span><span class=\"params\">(String cmd)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"2\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"string\">\"3\"</span>.equals(cmd)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h4><p>Android 中的序列化官方推荐 Parceble , 其实 Parceble 最好用于内存之间数据的交换，如果要把数据写入硬盘的话，推荐实现 Serializable .</p>\n<h4 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h4><p><code>SharedPreferences.Editor.commit</code> 这个方法是同步的，一直到把数据同步到 Flash 上面之后才会返回，由于 IO 操作的不可控，尽量使用 apply 方法代替。apply 只在 API Level &gt;= 9 才会支持，需要做兼容。不过，最新的 support v4 包已经为我们做好了处理，使用  <code>SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)</code> 即可。</p>\n<h4 id=\"其它优化\"><a href=\"#其它优化\" class=\"headerlink\" title=\"其它优化\"></a>其它优化</h4><ul>\n<li><p>静态变量不要直接或者间接引用 Activity、Service 等。这会使 Activity 以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。</p>\n</li>\n<li><p>Handler 机制有一个特点是不会随着 Activity、Service 的生命周期结束而结束。也就是说，如果你 Post 了一个 Delay 的 Runnable , 然后在 Runnable 执行之前退出了 Activity , Runnable 到时间之后还是要执行的。如果 Runnable 里面包含更新 View 的操作，程序崩溃了。</p>\n</li>\n<li><p>不少人在子线程中更新 View 时喜欢使用 <code>Context.runOnUiThread</code> , 这个方法有个缺点，就是一但 Context 生命周期结束，比如 Activity 已经销毁时，一调用就会崩溃。</p>\n</li>\n<li><p>Application 的生命周期就是进程的生命周期。只有进程被干掉时，Application 才会销毁。哪怕是没有 Activity、Service 在运行，Application 也会存在。所以，为了减少内存压力，尽量不要在 Application 里面引用大对象、Context 等。</p>\n</li>\n<li><p>Activity 的 onDestroy 方法调用时机是不确定的（有时候离开界面很久之后才会调用 onDestroy 方法），应该避免指望通过 onDestroy 方法去释放与 Activity 相关的资源，否则会导致一些随机 bug .</p>\n</li>\n<li><p>如果使用 <code>Context.startActivity</code> 启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的 Activity , 不防使用显式 Intent , 这样能提高系统搜索目标 Activity 的效率。</p>\n</li>\n<li><p>如果子类实现 Serializable 接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛 InvalidClassException 异常。</p>\n</li>\n<li><p><code>transient</code> 关键字修饰变量可以限制序列化。</p>\n</li>\n<li><p><code>View.getContext</code> 获取控件上下文，写 RecyclerView 的 Adapter 的时候，为了使用 LayoutInflater , 不用在构造函数中传入一个外部的 context .</p>\n</li>\n</ul>\n<h2 id=\"UI相关\"><a href=\"#UI相关\" class=\"headerlink\" title=\"UI相关\"></a>UI相关</h2><h3 id=\"Space\"><a href=\"#Space\" class=\"headerlink\" title=\"Space\"></a>Space</h3><p>Space 经常用于组件之间的缝隙，其 <code>draw()</code> 为空，减少了绘制渲染的过程。组件之间的距离使用 Space 会提高了绘制效率，特别是对于动态设置间距会很方便高效。正是因为 draw()为空，对该 view 没有做任务绘制渲染，所以不能对 Space 设置背景色。</p>\n<h3 id=\"tools标签\"><a href=\"#tools标签\" class=\"headerlink\" title=\"tools标签\"></a>tools标签</h3><p>tools 标签可以很好的帮助开发者实时预览 xml 的效果，并且运行以后 tools 标签的内容不会展示出来。例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">\"这段话只在预览时能看到,运行以后就看不到了\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ContextCompat\"><a href=\"#ContextCompat\" class=\"headerlink\" title=\"ContextCompat\"></a>ContextCompat</h3><p>Android 6.0 之后 <code>getResources().getColor()</code> 被废弃了，可用 <code>ContextCompat.getColor(context, R.color.color_name)</code> 替换，ContextCompat 是 v4 包里的，请放心使用，另外还有 <code>getDrawable()</code> 等方法。</p>\n"},{"title":"Chrome 插件","date":"2017-12-05T16:00:00.000Z","_content":"\n\n\n\n\n\n### [Insight.io for Github](https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog)\n\nGitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。\n\n### [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog)\n\n可以在 GitHub 和 GitLab 左侧显示目录树结构。\n\n### [GitCodeTree](https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog)\n\n基于 octotree 的[码云](http://gitee.com)文件树插件。\n\n### [jsonView jsonViewer json formatter 格式化](https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog)\n\n格式化、着色、美观、易读 ... jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。\n\n### [Adblock](https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom)\n\n号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。\n\n### 广告终结者\n\n清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。\n\n### [Axure RP Extension for Chrome](https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp)\n\n原型设计工具。\n\n### [Google文档、表格及幻灯片的Office编辑扩展程序](https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog)\n\n使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。\n\n### [Clear Cache](https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon)\n\nClear your cache and browsing data with a single click of a button .\n\n### [Convertio : 文件格式转换不再是问题](https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon)\n\nConvertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！\n\n### [Infinity : 自定义新标签页，极速访问页面](https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon)\n\n使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。\n\n### [OneTab : 一键收纳N个标签页，还你一个清爽的浏览器](https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon)\n\n一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 `alt + shift + 1` 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。\n\n### [Kami : PDF 阅读、批注、OCR](https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon)\n\nPDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！\n\n### [Save to Pocket : 一键保存任何内容，以供离线查看](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon)\n\nPocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。\n\n### [Fireshot : 网页截图和另存为 PDF](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon)\n\n很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！\n\n### [Dark Reader - 护眼扩展程序](https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon)\n\n黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。\n\n### [LastPass：密码管理软件](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd)\nLastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。\n\n### [二维码（QR 码）生成器](https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg)\n\n在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！\n\n### [下载+](https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf)\nChrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。\n\n### [快捷扩展管理](https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon)\nChrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。\n\n### [购物党](https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah)\n在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。\n\n### [右键搜](https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn)\nChrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。\n\n### [Cloudbleed Bookmark Checker：检测书签是否有死链](https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en)\n对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。\n\n### [Imagus](https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog)\n鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。\n\n### [WhatRuns](https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip)\nWhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。\n\n### [Reader View：Chrome 也有 Safari 的阅读模式](https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl)\n将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。\n\n### [为什么你们就是不能加个空格呢](https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd)\n每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？\n你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。\n\n### [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)\n相信开发者朋友一定知道这款插件，这是一款强大的 API & HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。\n\n### [Picee（基于 Github API 的图床）](https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related)\n具体介绍可以参考[基于 Github API 的图床 Chrome 插件开发全纪录](https://juejin.im/post/5cd38990e51d453a543f9e3e)\n","source":"_posts/Chrome-插件.md","raw":"---\ntitle: Chrome 插件\ndate: 2017-12-6\ncategories: \"工具\"\ntags:\n     - Chrome\n     - 工具\n---\n\n\n\n\n\n\n### [Insight.io for Github](https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog)\n\nGitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。\n\n### [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog)\n\n可以在 GitHub 和 GitLab 左侧显示目录树结构。\n\n### [GitCodeTree](https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog)\n\n基于 octotree 的[码云](http://gitee.com)文件树插件。\n\n### [jsonView jsonViewer json formatter 格式化](https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog)\n\n格式化、着色、美观、易读 ... jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。\n\n### [Adblock](https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom)\n\n号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。\n\n### 广告终结者\n\n清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。\n\n### [Axure RP Extension for Chrome](https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp)\n\n原型设计工具。\n\n### [Google文档、表格及幻灯片的Office编辑扩展程序](https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog)\n\n使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。\n\n### [Clear Cache](https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon)\n\nClear your cache and browsing data with a single click of a button .\n\n### [Convertio : 文件格式转换不再是问题](https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon)\n\nConvertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！\n\n### [Infinity : 自定义新标签页，极速访问页面](https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon)\n\n使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。\n\n### [OneTab : 一键收纳N个标签页，还你一个清爽的浏览器](https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon)\n\n一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 `alt + shift + 1` 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。\n\n### [Kami : PDF 阅读、批注、OCR](https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon)\n\nPDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！\n\n### [Save to Pocket : 一键保存任何内容，以供离线查看](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon)\n\nPocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。\n\n### [Fireshot : 网页截图和另存为 PDF](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon)\n\n很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！\n\n### [Dark Reader - 护眼扩展程序](https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon)\n\n黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。\n\n### [LastPass：密码管理软件](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd)\nLastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。\n\n### [二维码（QR 码）生成器](https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg)\n\n在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！\n\n### [下载+](https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf)\nChrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。\n\n### [快捷扩展管理](https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon)\nChrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。\n\n### [购物党](https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah)\n在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。\n\n### [右键搜](https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn)\nChrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。\n\n### [Cloudbleed Bookmark Checker：检测书签是否有死链](https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en)\n对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。\n\n### [Imagus](https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog)\n鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。\n\n### [WhatRuns](https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip)\nWhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。\n\n### [Reader View：Chrome 也有 Safari 的阅读模式](https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl)\n将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。\n\n### [为什么你们就是不能加个空格呢](https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd)\n每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？\n你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。\n\n### [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)\n相信开发者朋友一定知道这款插件，这是一款强大的 API & HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。\n\n### [Picee（基于 Github API 的图床）](https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related)\n具体介绍可以参考[基于 Github API 的图床 Chrome 插件开发全纪录](https://juejin.im/post/5cd38990e51d453a543f9e3e)\n","slug":"Chrome-插件","published":1,"updated":"2019-05-09T09:50:38.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd38002kmgquv0l38vqn","content":"<h3 id=\"Insight-io-for-Github\"><a href=\"#Insight-io-for-Github\" class=\"headerlink\" title=\"Insight.io for Github\"></a><a href=\"https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Insight.io for Github</a></h3><p>GitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。</p>\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Octotree</a></h3><p>可以在 GitHub 和 GitLab 左侧显示目录树结构。</p>\n<h3 id=\"GitCodeTree\"><a href=\"#GitCodeTree\" class=\"headerlink\" title=\"GitCodeTree\"></a><a href=\"https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">GitCodeTree</a></h3><p>基于 octotree 的<a href=\"http://gitee.com\" target=\"_blank\" rel=\"noopener\">码云</a>文件树插件。</p>\n<h3 id=\"jsonView-jsonViewer-json-formatter-格式化\"><a href=\"#jsonView-jsonViewer-json-formatter-格式化\" class=\"headerlink\" title=\"jsonView jsonViewer json formatter 格式化\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">jsonView jsonViewer json formatter 格式化</a></h3><p>格式化、着色、美观、易读 … jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。</p>\n<h3 id=\"Adblock\"><a href=\"#Adblock\" class=\"headerlink\" title=\"Adblock\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom\" target=\"_blank\" rel=\"noopener\">Adblock</a></h3><p>号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。</p>\n<h3 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h3><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。</p>\n<h3 id=\"Axure-RP-Extension-for-Chrome\"><a href=\"#Axure-RP-Extension-for-Chrome\" class=\"headerlink\" title=\"Axure RP Extension for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp\" target=\"_blank\" rel=\"noopener\">Axure RP Extension for Chrome</a></h3><p>原型设计工具。</p>\n<h3 id=\"Google文档、表格及幻灯片的Office编辑扩展程序\"><a href=\"#Google文档、表格及幻灯片的Office编辑扩展程序\" class=\"headerlink\" title=\"Google文档、表格及幻灯片的Office编辑扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Google文档、表格及幻灯片的Office编辑扩展程序</a></h3><p>使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。</p>\n<h3 id=\"Clear-Cache\"><a href=\"#Clear-Cache\" class=\"headerlink\" title=\"Clear Cache\"></a><a href=\"https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Clear Cache</a></h3><p>Clear your cache and browsing data with a single click of a button .</p>\n<h3 id=\"Convertio-文件格式转换不再是问题\"><a href=\"#Convertio-文件格式转换不再是问题\" class=\"headerlink\" title=\"Convertio : 文件格式转换不再是问题\"></a><a href=\"https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Convertio : 文件格式转换不再是问题</a></h3><p>Convertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！</p>\n<h3 id=\"Infinity-自定义新标签页，极速访问页面\"><a href=\"#Infinity-自定义新标签页，极速访问页面\" class=\"headerlink\" title=\"Infinity : 自定义新标签页，极速访问页面\"></a><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Infinity : 自定义新标签页，极速访问页面</a></h3><p>使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。</p>\n<h3 id=\"OneTab-一键收纳N个标签页，还你一个清爽的浏览器\"><a href=\"#OneTab-一键收纳N个标签页，还你一个清爽的浏览器\" class=\"headerlink\" title=\"OneTab : 一键收纳N个标签页，还你一个清爽的浏览器\"></a><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">OneTab : 一键收纳N个标签页，还你一个清爽的浏览器</a></h3><p>一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 <code>alt + shift + 1</code> 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。</p>\n<h3 id=\"Kami-PDF-阅读、批注、OCR\"><a href=\"#Kami-PDF-阅读、批注、OCR\" class=\"headerlink\" title=\"Kami : PDF 阅读、批注、OCR\"></a><a href=\"https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Kami : PDF 阅读、批注、OCR</a></h3><p>PDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！</p>\n<h3 id=\"Save-to-Pocket-一键保存任何内容，以供离线查看\"><a href=\"#Save-to-Pocket-一键保存任何内容，以供离线查看\" class=\"headerlink\" title=\"Save to Pocket : 一键保存任何内容，以供离线查看\"></a><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Save to Pocket : 一键保存任何内容，以供离线查看</a></h3><p>Pocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。</p>\n<h3 id=\"Fireshot-网页截图和另存为-PDF\"><a href=\"#Fireshot-网页截图和另存为-PDF\" class=\"headerlink\" title=\"Fireshot : 网页截图和另存为 PDF\"></a><a href=\"https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Fireshot : 网页截图和另存为 PDF</a></h3><p>很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！</p>\n<h3 id=\"Dark-Reader-护眼扩展程序\"><a href=\"#Dark-Reader-护眼扩展程序\" class=\"headerlink\" title=\"Dark Reader - 护眼扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Dark Reader - 护眼扩展程序</a></h3><p>黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。</p>\n<h3 id=\"LastPass：密码管理软件\"><a href=\"#LastPass：密码管理软件\" class=\"headerlink\" title=\"LastPass：密码管理软件\"></a><a href=\"https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd\" target=\"_blank\" rel=\"noopener\">LastPass：密码管理软件</a></h3><p>LastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。</p>\n<h3 id=\"二维码（QR-码）生成器\"><a href=\"#二维码（QR-码）生成器\" class=\"headerlink\" title=\"二维码（QR 码）生成器\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg\" target=\"_blank\" rel=\"noopener\">二维码（QR 码）生成器</a></h3><p>在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载+\"></a><a href=\"https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf\" target=\"_blank\" rel=\"noopener\">下载+</a></h3><p>Chrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。</p>\n<h3 id=\"快捷扩展管理\"><a href=\"#快捷扩展管理\" class=\"headerlink\" title=\"快捷扩展管理\"></a><a href=\"https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">快捷扩展管理</a></h3><p>Chrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。</p>\n<h3 id=\"购物党\"><a href=\"#购物党\" class=\"headerlink\" title=\"购物党\"></a><a href=\"https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah\" target=\"_blank\" rel=\"noopener\">购物党</a></h3><p>在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。</p>\n<h3 id=\"右键搜\"><a href=\"#右键搜\" class=\"headerlink\" title=\"右键搜\"></a><a href=\"https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn\" target=\"_blank\" rel=\"noopener\">右键搜</a></h3><p>Chrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。</p>\n<h3 id=\"Cloudbleed-Bookmark-Checker：检测书签是否有死链\"><a href=\"#Cloudbleed-Bookmark-Checker：检测书签是否有死链\" class=\"headerlink\" title=\"Cloudbleed Bookmark Checker：检测书签是否有死链\"></a><a href=\"https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en\" target=\"_blank\" rel=\"noopener\">Cloudbleed Bookmark Checker：检测书签是否有死链</a></h3><p>对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。</p>\n<h3 id=\"Imagus\"><a href=\"#Imagus\" class=\"headerlink\" title=\"Imagus\"></a><a href=\"https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Imagus</a></h3><p>鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。</p>\n<h3 id=\"WhatRuns\"><a href=\"#WhatRuns\" class=\"headerlink\" title=\"WhatRuns\"></a><a href=\"https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip\" target=\"_blank\" rel=\"noopener\">WhatRuns</a></h3><p>WhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。</p>\n<h3 id=\"Reader-View：Chrome-也有-Safari-的阅读模式\"><a href=\"#Reader-View：Chrome-也有-Safari-的阅读模式\" class=\"headerlink\" title=\"Reader View：Chrome 也有 Safari 的阅读模式\"></a><a href=\"https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl\" target=\"_blank\" rel=\"noopener\">Reader View：Chrome 也有 Safari 的阅读模式</a></h3><p>将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。</p>\n<h3 id=\"为什么你们就是不能加个空格呢\"><a href=\"#为什么你们就是不能加个空格呢\" class=\"headerlink\" title=\"为什么你们就是不能加个空格呢\"></a><a href=\"https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd\" target=\"_blank\" rel=\"noopener\">为什么你们就是不能加个空格呢</a></h3><p>每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？<br>你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。</p>\n<h3 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a><a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop\" target=\"_blank\" rel=\"noopener\">Postman</a></h3><p>相信开发者朋友一定知道这款插件，这是一款强大的 API &amp; HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。</p>\n<h3 id=\"Picee（基于-Github-API-的图床）\"><a href=\"#Picee（基于-Github-API-的图床）\" class=\"headerlink\" title=\"Picee（基于 Github API 的图床）\"></a><a href=\"https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related\" target=\"_blank\" rel=\"noopener\">Picee（基于 Github API 的图床）</a></h3><p>具体介绍可以参考<a href=\"https://juejin.im/post/5cd38990e51d453a543f9e3e\" target=\"_blank\" rel=\"noopener\">基于 Github API 的图床 Chrome 插件开发全纪录</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Insight-io-for-Github\"><a href=\"#Insight-io-for-Github\" class=\"headerlink\" title=\"Insight.io for Github\"></a><a href=\"https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Insight.io for Github</a></h3><p>GitHub 代码浏览插件。提供的功能有：跳到定义处、查找引用、目录树结构、基于符号的代码搜索、跳转到 Insight.io 里面。</p>\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Octotree</a></h3><p>可以在 GitHub 和 GitLab 左侧显示目录树结构。</p>\n<h3 id=\"GitCodeTree\"><a href=\"#GitCodeTree\" class=\"headerlink\" title=\"GitCodeTree\"></a><a href=\"https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">GitCodeTree</a></h3><p>基于 octotree 的<a href=\"http://gitee.com\" target=\"_blank\" rel=\"noopener\">码云</a>文件树插件。</p>\n<h3 id=\"jsonView-jsonViewer-json-formatter-格式化\"><a href=\"#jsonView-jsonViewer-json-formatter-格式化\" class=\"headerlink\" title=\"jsonView jsonViewer json formatter 格式化\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview-jsonviewer-json/hdmbdioamgdkppmocchpkjhbpfmpjiei?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">jsonView jsonViewer json formatter 格式化</a></h3><p>格式化、着色、美观、易读 … jsonView 处理了其他该类插件中文字符的 bug , 支持 json 和 jsonp 格式。</p>\n<h3 id=\"Adblock\"><a href=\"#Adblock\" class=\"headerlink\" title=\"Adblock\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom\" target=\"_blank\" rel=\"noopener\">Adblock</a></h3><p>号称最受欢迎的 Chrome 扩展，拥有超过 4000 万用户！屏蔽整个互联网上的广告。</p>\n<h3 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h3><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。</p>\n<h3 id=\"Axure-RP-Extension-for-Chrome\"><a href=\"#Axure-RP-Extension-for-Chrome\" class=\"headerlink\" title=\"Axure RP Extension for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp\" target=\"_blank\" rel=\"noopener\">Axure RP Extension for Chrome</a></h3><p>原型设计工具。</p>\n<h3 id=\"Google文档、表格及幻灯片的Office编辑扩展程序\"><a href=\"#Google文档、表格及幻灯片的Office编辑扩展程序\" class=\"headerlink\" title=\"Google文档、表格及幻灯片的Office编辑扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Google文档、表格及幻灯片的Office编辑扩展程序</a></h3><p>使用 Google 文档、表格和幻灯片来查看和编辑 Microsoft Word、Excel 和 PowerPoint 文件。</p>\n<h3 id=\"Clear-Cache\"><a href=\"#Clear-Cache\" class=\"headerlink\" title=\"Clear Cache\"></a><a href=\"https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Clear Cache</a></h3><p>Clear your cache and browsing data with a single click of a button .</p>\n<h3 id=\"Convertio-文件格式转换不再是问题\"><a href=\"#Convertio-文件格式转换不再是问题\" class=\"headerlink\" title=\"Convertio : 文件格式转换不再是问题\"></a><a href=\"https://chrome.google.com/webstore/detail/convertio/eppjkefeiehhflmgkhdooajgbkkegpcl?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Convertio : 文件格式转换不再是问题</a></h3><p>Convertio , 一个在线解决格式转换的插件，支持超过 2500 种不同的格式转换（归档转换器 、音频转换器、文档转换器、PDF 工具、电子书转换器、演示文稿转换器 、OCR 工具等等），史上最全的格式转换小助手了！无论是音频，文档还是视频，它都能方便快捷的转换到你想要的格式，非常齐全！</p>\n<h3 id=\"Infinity-自定义新标签页，极速访问页面\"><a href=\"#Infinity-自定义新标签页，极速访问页面\" class=\"headerlink\" title=\"Infinity : 自定义新标签页，极速访问页面\"></a><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Infinity : 自定义新标签页，极速访问页面</a></h3><p>使用该插件可以自定义 Chrome 的新标签页来实现快速拨号、邮件提醒、天气预报、笔记功能、待办事项、壁纸、历史记录管理等功能。同时还可以在右上角的 “＋” 可以看到各种设置选项，根据自己的喜好来添加或者删除标签页上的项目，也可更改壁纸和搜索栏。偶尔浏览到感兴趣的页面时，看到一个不错的话题，你也可以添加到 infinity 新标签页。相比其他浏览器的标签页功能，它确实功能更丰富，操作更方便。</p>\n<h3 id=\"OneTab-一键收纳N个标签页，还你一个清爽的浏览器\"><a href=\"#OneTab-一键收纳N个标签页，还你一个清爽的浏览器\" class=\"headerlink\" title=\"OneTab : 一键收纳N个标签页，还你一个清爽的浏览器\"></a><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">OneTab : 一键收纳N个标签页，还你一个清爽的浏览器</a></h3><p>一次打开太多网页，来回切换容易乱，并且出现电脑卡顿，轻拓展 OneTab 可以派上用场了! 点击扩展栏的 OneTab 图标，它能够将当前窗口所有标签集合为一个标签。不仅让你浏览器瞬间整洁无暇，还能节省 95% 的内存。当你想要恢复浏览某个页面的时候，在列表中点击一个链接，即可重新打开。你也可以通过快捷键 <code>alt + shift + 1</code> 来快速打开。最后，OneTab 还能检查是否有重复链接，并且不会重复添加链接。这种小贴士，一般人我可不告诉她。</p>\n<h3 id=\"Kami-PDF-阅读、批注、OCR\"><a href=\"#Kami-PDF-阅读、批注、OCR\" class=\"headerlink\" title=\"Kami : PDF 阅读、批注、OCR\"></a><a href=\"https://chrome.google.com/webstore/detail/kami-extension-pdf-and-do/ecnphlgnajanjnkcmbpancdjoidceilk?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Kami : PDF 阅读、批注、OCR</a></h3><p>PDF 软件那么多，为什么要用 Kami ? 因为它轻巧好用，还免费！首先，它支持 PDF (pdf) , 文件（DOX），PowerPoint(PPTX) , 常见的图像文件（jpg，jpeg，png，gif），使用 Kami 工具，您可以在 PDF、文档或图像文件上批注、标记和协作。在浏览器中查看文件、与他人共享文件、高亮文本、添加文本、下划线文本、添加评论、实时协作、徒手画、OCR 字符识别 扫描版 PDF 文件（检测扫描文件上的文本）、离线支持。这些操作都免费！PDF 软件有的它都有，既生瑜何生亮呀！</p>\n<h3 id=\"Save-to-Pocket-一键保存任何内容，以供离线查看\"><a href=\"#Save-to-Pocket-一键保存任何内容，以供离线查看\" class=\"headerlink\" title=\"Save to Pocket : 一键保存任何内容，以供离线查看\"></a><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Save to Pocket : 一键保存任何内容，以供离线查看</a></h3><p>Pocket - 口袋，顾名思义，它将任何内容(文章、视频、微博等等）可汇聚到一个地方，以便在任何设备上随时查看。最重要的是！可以离线查看！当你发现感兴趣的内容却没有时间看完或者想先收藏再细细品味时，如果你直接关闭了网页，下次可能找不到了。这时候一款可以“临时”保存当前正在阅读的文章或者视频的工具派上用场，你可以将它放入 Pocket , 方便你在手机或者电脑端随时查看。</p>\n<h3 id=\"Fireshot-网页截图和另存为-PDF\"><a href=\"#Fireshot-网页截图和另存为-PDF\" class=\"headerlink\" title=\"Fireshot : 网页截图和另存为 PDF\"></a><a href=\"https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Fireshot : 网页截图和另存为 PDF</a></h3><p>很多用户经常有这个问题：“这个网页很重要，我想整页打印出来怎么办？”，“我如何将整个网页另存为图片？” 诸如此类问题的答案就是一款免费的 Fireshot 插件。 它可以对网页中整个屏幕或者是网页的部分视图进行截图操作，在截图之后用户还可以对当前截图的图片进行编辑，包括添加注释，添加线条等操作。除开截图，它还能打印、另存为 PDF 等功能，小巧实用！</p>\n<h3 id=\"Dark-Reader-护眼扩展程序\"><a href=\"#Dark-Reader-护眼扩展程序\" class=\"headerlink\" title=\"Dark Reader - 护眼扩展程序\"></a><a href=\"https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">Dark Reader - 护眼扩展程序</a></h3><p>黑色主题，适用于任何网站。关爱眼睛，就使用 Dark Reader 进行夜间和日间浏览。这是一个护眼扩展程序，通过实时生成黑色主题，为每一个网站启用夜间模式。Dark Reader 反转明亮的颜色，使其网页内容具有高对比度并且在易于夜间阅读。您可以调整亮度，对比度，应用棕褐色滤镜，黑暗模式，设置字体和忽略的网站列表。</p>\n<h3 id=\"LastPass：密码管理软件\"><a href=\"#LastPass：密码管理软件\" class=\"headerlink\" title=\"LastPass：密码管理软件\"></a><a href=\"https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd\" target=\"_blank\" rel=\"noopener\">LastPass：密码管理软件</a></h3><p>LastPass，全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅 Premium，即可在手机、网页、电脑端同步你的所有 LastPass 信息。</p>\n<h3 id=\"二维码（QR-码）生成器\"><a href=\"#二维码（QR-码）生成器\" class=\"headerlink\" title=\"二维码（QR 码）生成器\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg\" target=\"_blank\" rel=\"noopener\">二维码（QR 码）生成器</a></h3><p>在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑，还可以把文字生成二维码，这个很重要！</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载+\"></a><a href=\"https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf\" target=\"_blank\" rel=\"noopener\">下载+</a></h3><p>Chrome 的下载管理在二级菜单里，进去很不方便，装了这个插件就可以直接看和管理，很好用。</p>\n<h3 id=\"快捷扩展管理\"><a href=\"#快捷扩展管理\" class=\"headerlink\" title=\"快捷扩展管理\"></a><a href=\"https://chrome.google.com/webstore/detail/one-click-extensions-mana/pbgjpgbpljobkekbhnnmlikbbfhbhmem?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">快捷扩展管理</a></h3><p>Chrome 其实很占内存，尤其当插件装多了以后会卡顿，有了这个以后，可以一键管理所有扩展，快速激活、禁用插件。</p>\n<h3 id=\"购物党\"><a href=\"#购物党\" class=\"headerlink\" title=\"购物党\"></a><a href=\"https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah\" target=\"_blank\" rel=\"noopener\">购物党</a></h3><p>在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。</p>\n<h3 id=\"右键搜\"><a href=\"#右键搜\" class=\"headerlink\" title=\"右键搜\"></a><a href=\"https://chrome.google.com/webstore/detail/context-menus/phlfmkfpmphogkomddckmggcfpmfchpn\" target=\"_blank\" rel=\"noopener\">右键搜</a></h3><p>Chrome 默认的搜索是谷歌搜索，没有翻墙的童鞋可能用起来不方便，但有这个这个就不用担心了。</p>\n<h3 id=\"Cloudbleed-Bookmark-Checker：检测书签是否有死链\"><a href=\"#Cloudbleed-Bookmark-Checker：检测书签是否有死链\" class=\"headerlink\" title=\"Cloudbleed Bookmark Checker：检测书签是否有死链\"></a><a href=\"https://chrome.google.com/webstore/detail/cloudbleed-bookmark-check/egoobjhmbpflgogbgbihhdeibdfnedii?utm_campaign=en\" target=\"_blank\" rel=\"noopener\">Cloudbleed Bookmark Checker：检测书签是否有死链</a></h3><p>对于书签收藏的狂魔同志，收藏夹里的网页肯定有很多都无法访问了吧！这款扩展就是来检测书签是否有死链的，因为不怎么常用，所以才三颗星。</p>\n<h3 id=\"Imagus\"><a href=\"#Imagus\" class=\"headerlink\" title=\"Imagus\"></a><a href=\"https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">Imagus</a></h3><p>鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。</p>\n<h3 id=\"WhatRuns\"><a href=\"#WhatRuns\" class=\"headerlink\" title=\"WhatRuns\"></a><a href=\"https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip\" target=\"_blank\" rel=\"noopener\">WhatRuns</a></h3><p>WhatRuns 是一款用于了解网站技术的 Chrome 网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。在安装了这款插件后，使用者可以通过点击 WhatRuns 图标来打开插件窗口，通过该窗口使用者可以轻松了解网站的技术信息。</p>\n<h3 id=\"Reader-View：Chrome-也有-Safari-的阅读模式\"><a href=\"#Reader-View：Chrome-也有-Safari-的阅读模式\" class=\"headerlink\" title=\"Reader View：Chrome 也有 Safari 的阅读模式\"></a><a href=\"https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl\" target=\"_blank\" rel=\"noopener\">Reader View：Chrome 也有 Safari 的阅读模式</a></h3><p>将网页转换成 Safari 阅读模式的样式，让你更方便舒适的阅读网页文字，当你访问文章网页的时候，扩展程序的按钮会显示在地址栏末端，点击就能轻松享受更好的阅读模式。</p>\n<h3 id=\"为什么你们就是不能加个空格呢\"><a href=\"#为什么你们就是不能加个空格呢\" class=\"headerlink\" title=\"为什么你们就是不能加个空格呢\"></a><a href=\"https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd\" target=\"_blank\" rel=\"noopener\">为什么你们就是不能加个空格呢</a></h3><p>每次看到文章中的英文、数字、中文写在一起，你知道我的内心是什么样吗？<br>你们能不能在它们之间加个空格呢？！不过自从装上了「为什么你们就是不能加个空格呢？」，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格，从此告别此痛苦，又能和大家好好玩耍啦。</p>\n<h3 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a><a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop\" target=\"_blank\" rel=\"noopener\">Postman</a></h3><p>相信开发者朋友一定知道这款插件，这是一款强大的 API &amp; HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。</p>\n<h3 id=\"Picee（基于-Github-API-的图床）\"><a href=\"#Picee（基于-Github-API-的图床）\" class=\"headerlink\" title=\"Picee（基于 Github API 的图床）\"></a><a href=\"https://chrome.google.com/webstore/detail/picee/nmeeieecbmdnilkkaliknhkkakonobbc/related\" target=\"_blank\" rel=\"noopener\">Picee（基于 Github API 的图床）</a></h3><p>具体介绍可以参考<a href=\"https://juejin.im/post/5cd38990e51d453a543f9e3e\" target=\"_blank\" rel=\"noopener\">基于 Github API 的图床 Chrome 插件开发全纪录</a></p>\n"},{"title":"位运算总结","date":"2019-06-25T03:06:00.000Z","_content":"\n\n### 二进制的一些概念\n\n在二进制数里，最高位 0 表示正数，1 表示负数。\n\n#### 原码\n一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。\n\n```\n 5 的原码是：00000000 00000000 00000000 00000101\n-5 的原码是：10000000 00000000 00000000 00000101\n```\n\n#### 反码\n正数的反码与原码相同，负数的反码为对该数的原码**除符号位**外各位**取反**（即 0 变 1，1 变 0）。\n\n```\n正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101\n负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010\n```\n\n#### 补码\n\n正数的补码与原码相同，负数的补码为该数的反码加 1。\n\n负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：\n\n```\n11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011\n```\n\n### 位运算基础\n基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：\n\n|  符号 | 描述  | 运算规则  |\n|:----:|:-----:|:---------|\n| &    | 与    | 两个位都为 1 时，结果才为 1 |\n| &#124;   | 或    | 两个位只要有一位为 1，结果都为 1 |\n| ^    | 异或  | 两个位相同为 0，不同为 1 |\n| ~    | 取反  | 0 变 1，1 变 0 |\n| <<   | 左移  | 各二进位全部左移若干位，高位丢弃，低位补 0 |\n| >>   | 右移  | 各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）|\n\n**注意**\n\n1. 在这 6 种操作符，只有 **~** 取反是单目操作符，其它 5 种都是双目操作符。\n\n2. 位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。\n\n3. 对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。\n\n   ```Java\n   System.out.println((15) >> 2); // 3\n   System.out.println((-15) >> 2); // -4\n   ```\n   15 = 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到\n   \n   00000000 00000000 00000000 00000011 即 3。\n\n   -15 = 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到\n\n   11111111 11111111 11111111 11111100 即 -4。\n\n4. 位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。\n\n5. 位操作还有一些复合操作符，如 &=、|=、 ^=、<<=、>>=。\n\n### 常用的位运算技巧\n\n#### 判断奇偶数\n一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x & 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。\n\n如要求输出 0 到 10 之间的所有偶数：\n\n```Java\nfor (int i = 0; i < 10; i++) {\n    if ((i & 1) == 0) {\n        System.out.println(i);\n    }\n}\n```\n\n#### 交换两数\n```Java\nint a = 10;\nint b = 20;\na ^= b;\nb ^= a;\na ^= b;\nSystem.out.println(\"a=\" + a); // a=20\nSystem.out.println(\"b=\" + b); // b=10\n```\n\n**分析：**\n\n第一步，a = a ^ b ①；\n\n第二步，b = b ^ a，把 ① 代入得，b = b ^ (a ^ b)，由于 **^ 满足交换律**，所以 b = b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b = a ②；\n\n第三步，a = a ^ b，将 ①、② 代入得，a = (a ^ b) ^ a 即 a = b ③。\n\n从 ②、③ 得知，a 和 b 的值已经得到了交换。\n\n#### 变换符号\n一个数 x **取反加 1** 后就会变成 -x，即正数变为负数，负数变为正数。\n\n```Java\nint a = -5;\nint b = 10;\na = ~a + 1;\nb = ~b + 1;\nSystem.out.println(\"a=\" + a); // a=5\nSystem.out.println(\"b=\" + b); // b=-10\n```\n\n**分析：**\n\n-5 = 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：\n\n00000000 00000000 00000000 00000101 = 5\n\n> 注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。\n\n#### 求绝对值\n对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i = a >> 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return i == 0 ? a : (~a + 1);\n}\n```\n\n进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：\n\n```Java\nreturn i == 0 ? (a ^ i) : ((a ^ i) + 1);\n```\n\n上面返回值再变换下得：\n\n```Java\nreturn i == 0 ? ((a ^ i) - 0) : ((a ^ i) + 1);\n```\n\n由于 i 的值非 0 即 -1，因此上面返回值可以精简为：\n\n```Java\nreturn (a ^ i) - i;\n```\n\n通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return (a ^ i) - i;\n}\n```\n\n### 位操作与空间压缩\n当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：\n\n```Java\nboolean[] flag = new boolean[100];\n```\n\n由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 / 32 + 1）的整型数组即可完成上面的状态标记。\n\n```Java\nint[] b = new int[4]; // 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true\n```\n\n由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1/6 左右。\n\n以下是用筛素数法计算 100 以内的素数的示例代码：\n\n```Java\nprivate void printPrime() {\n    int max = 100;\n    boolean[] flag = new boolean[max];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        if (!flag[i]) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) { // 素数的倍数必然不是素数\n                flag[j] = true;\n            }\n        }\n    }\n\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？\n\n将整数 j 指定位上置为 1：\n\n> 将 1 向左移位后和其相或来达到在指定位上置 1 的效果\n\n```Java\nprivate void setOne() {\n    System.out.println();\n    int j = 0;\n    j |= (1 << 10);\n    System.out.println(Integer.toBinaryString(j));\n}\n// 输出：10000000000\n```\n\n判断整数 j 指定位上是否为 1：\n\n> 将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）\n\n```Java\nprivate void isOne() {\n    int j = 1 << 10;\n    if ((j & (1 << 10)) != 0) {\n        System.out.println(\"指定位上为 1\");\n    } else {\n        System.out.println(\"指定位上为 0\");\n    }\n}\n// 输出：指定位上为 1\n```\n\n再把这种思路扩展到一个整型数组上：\n\n```Java\nprivate void setOne2() {\n    int max = 40;\n    int[] b = new int[max / 32 + 1];\n    for (int i = 0; i < max; i += 3) {\n        b[i / 32] |= (1 << (i % 32)); // 每 3 个位设置为 1\n    }\n\n    for (int i = 0; i < max; i++) {\n        if (((b[i / 32] >> i) & 1) == 1) { // 判断是否为 1\n            System.out.print(\"1\");\n        } else {\n            System.out.print(\"0\");\n        }\n    }\n}\n// 输出：1001001001001001001001001001001001001001\n```\n\n现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：\n\n```Java\nprivate void printPrime2() {\n    int max = 100;\n    int[] b = new int[max / 32 + 1];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        int x = b[i / 32] >> (i % 32); // 通过右移，逐位判断是 0 还是 1\n        if ((x & 1) == 0) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) {\n                b[j / 32] |= (1 << (j % 32)); // 将指定位上设置为 1\n            }\n        }\n    }\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n\n","source":"_posts/位运算总结.md","raw":"---\ntitle: 位运算总结\ndate: 2019-6-25 11:06:00\ncategories: \"位运算\"\ntags:\n     - 位运算\n---\n\n\n### 二进制的一些概念\n\n在二进制数里，最高位 0 表示正数，1 表示负数。\n\n#### 原码\n一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。\n\n```\n 5 的原码是：00000000 00000000 00000000 00000101\n-5 的原码是：10000000 00000000 00000000 00000101\n```\n\n#### 反码\n正数的反码与原码相同，负数的反码为对该数的原码**除符号位**外各位**取反**（即 0 变 1，1 变 0）。\n\n```\n正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101\n负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010\n```\n\n#### 补码\n\n正数的补码与原码相同，负数的补码为该数的反码加 1。\n\n负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：\n\n```\n11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011\n```\n\n### 位运算基础\n基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：\n\n|  符号 | 描述  | 运算规则  |\n|:----:|:-----:|:---------|\n| &    | 与    | 两个位都为 1 时，结果才为 1 |\n| &#124;   | 或    | 两个位只要有一位为 1，结果都为 1 |\n| ^    | 异或  | 两个位相同为 0，不同为 1 |\n| ~    | 取反  | 0 变 1，1 变 0 |\n| <<   | 左移  | 各二进位全部左移若干位，高位丢弃，低位补 0 |\n| >>   | 右移  | 各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）|\n\n**注意**\n\n1. 在这 6 种操作符，只有 **~** 取反是单目操作符，其它 5 种都是双目操作符。\n\n2. 位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。\n\n3. 对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。\n\n   ```Java\n   System.out.println((15) >> 2); // 3\n   System.out.println((-15) >> 2); // -4\n   ```\n   15 = 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到\n   \n   00000000 00000000 00000000 00000011 即 3。\n\n   -15 = 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到\n\n   11111111 11111111 11111111 11111100 即 -4。\n\n4. 位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。\n\n5. 位操作还有一些复合操作符，如 &=、|=、 ^=、<<=、>>=。\n\n### 常用的位运算技巧\n\n#### 判断奇偶数\n一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x & 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。\n\n如要求输出 0 到 10 之间的所有偶数：\n\n```Java\nfor (int i = 0; i < 10; i++) {\n    if ((i & 1) == 0) {\n        System.out.println(i);\n    }\n}\n```\n\n#### 交换两数\n```Java\nint a = 10;\nint b = 20;\na ^= b;\nb ^= a;\na ^= b;\nSystem.out.println(\"a=\" + a); // a=20\nSystem.out.println(\"b=\" + b); // b=10\n```\n\n**分析：**\n\n第一步，a = a ^ b ①；\n\n第二步，b = b ^ a，把 ① 代入得，b = b ^ (a ^ b)，由于 **^ 满足交换律**，所以 b = b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b = a ②；\n\n第三步，a = a ^ b，将 ①、② 代入得，a = (a ^ b) ^ a 即 a = b ③。\n\n从 ②、③ 得知，a 和 b 的值已经得到了交换。\n\n#### 变换符号\n一个数 x **取反加 1** 后就会变成 -x，即正数变为负数，负数变为正数。\n\n```Java\nint a = -5;\nint b = 10;\na = ~a + 1;\nb = ~b + 1;\nSystem.out.println(\"a=\" + a); // a=5\nSystem.out.println(\"b=\" + b); // b=-10\n```\n\n**分析：**\n\n-5 = 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：\n\n00000000 00000000 00000000 00000101 = 5\n\n> 注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。\n\n#### 求绝对值\n对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i = a >> 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return i == 0 ? a : (~a + 1);\n}\n```\n\n进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：\n\n```Java\nreturn i == 0 ? (a ^ i) : ((a ^ i) + 1);\n```\n\n上面返回值再变换下得：\n\n```Java\nreturn i == 0 ? ((a ^ i) - 0) : ((a ^ i) + 1);\n```\n\n由于 i 的值非 0 即 -1，因此上面返回值可以精简为：\n\n```Java\nreturn (a ^ i) - i;\n```\n\n通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。\n\n```Java\nprivate int abs(int a) {\n    int i = a >> 31;\n    return (a ^ i) - i;\n}\n```\n\n### 位操作与空间压缩\n当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：\n\n```Java\nboolean[] flag = new boolean[100];\n```\n\n由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 / 32 + 1）的整型数组即可完成上面的状态标记。\n\n```Java\nint[] b = new int[4]; // 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true\n```\n\n由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1/6 左右。\n\n以下是用筛素数法计算 100 以内的素数的示例代码：\n\n```Java\nprivate void printPrime() {\n    int max = 100;\n    boolean[] flag = new boolean[max];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        if (!flag[i]) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) { // 素数的倍数必然不是素数\n                flag[j] = true;\n            }\n        }\n    }\n\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？\n\n将整数 j 指定位上置为 1：\n\n> 将 1 向左移位后和其相或来达到在指定位上置 1 的效果\n\n```Java\nprivate void setOne() {\n    System.out.println();\n    int j = 0;\n    j |= (1 << 10);\n    System.out.println(Integer.toBinaryString(j));\n}\n// 输出：10000000000\n```\n\n判断整数 j 指定位上是否为 1：\n\n> 将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）\n\n```Java\nprivate void isOne() {\n    int j = 1 << 10;\n    if ((j & (1 << 10)) != 0) {\n        System.out.println(\"指定位上为 1\");\n    } else {\n        System.out.println(\"指定位上为 0\");\n    }\n}\n// 输出：指定位上为 1\n```\n\n再把这种思路扩展到一个整型数组上：\n\n```Java\nprivate void setOne2() {\n    int max = 40;\n    int[] b = new int[max / 32 + 1];\n    for (int i = 0; i < max; i += 3) {\n        b[i / 32] |= (1 << (i % 32)); // 每 3 个位设置为 1\n    }\n\n    for (int i = 0; i < max; i++) {\n        if (((b[i / 32] >> i) & 1) == 1) { // 判断是否为 1\n            System.out.print(\"1\");\n        } else {\n            System.out.print(\"0\");\n        }\n    }\n}\n// 输出：1001001001001001001001001001001001001001\n```\n\n现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：\n\n```Java\nprivate void printPrime2() {\n    int max = 100;\n    int[] b = new int[max / 32 + 1];\n    int[] primes = new int[max / 3 + 1];\n    int index = 0;\n    for (int i = 2; i < max; i++) {\n        int x = b[i / 32] >> (i % 32); // 通过右移，逐位判断是 0 还是 1\n        if ((x & 1) == 0) {\n            primes[index++] = i;\n            for (int j = i; j < max; j += i) {\n                b[j / 32] |= (1 << (j % 32)); // 将指定位上设置为 1\n            }\n        }\n    }\n    // 输出 100 以内所有素数\n    for (int i = 0; i < index; i++) {\n        System.out.print(primes[i] + \" \");\n    }\n}\n输出：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```\n\n\n","slug":"位运算总结","published":1,"updated":"2019-06-26T07:19:29.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd3a002omgqu08351xda","content":"<h3 id=\"二进制的一些概念\"><a href=\"#二进制的一些概念\" class=\"headerlink\" title=\"二进制的一些概念\"></a>二进制的一些概念</h3><p>在二进制数里，最高位 0 表示正数，1 表示负数。</p>\n<h4 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h4><p>一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 5 的原码是：00000000 00000000 00000000 00000101</span><br><span class=\"line\">-5 的原码是：10000000 00000000 00000000 00000101</span><br></pre></td></tr></table></figure>\n<h4 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h4><p>正数的反码与原码相同，负数的反码为对该数的原码<strong>除符号位</strong>外各位<strong>取反</strong>（即 0 变 1，1 变 0）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101</span><br><span class=\"line\">负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010</span><br></pre></td></tr></table></figure>\n<h4 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h4><p>正数的补码与原码相同，负数的补码为该数的反码加 1。</p>\n<p>负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011</span><br></pre></td></tr></table></figure>\n<h3 id=\"位运算基础\"><a href=\"#位运算基础\" class=\"headerlink\" title=\"位运算基础\"></a>位运算基础</h3><p>基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:left\">运算规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">与</td>\n<td style=\"text-align:left\">两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&#124;</td>\n<td style=\"text-align:center\">或</td>\n<td style=\"text-align:left\">两个位只要有一位为 1，结果都为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">异或</td>\n<td style=\"text-align:left\">两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~</td>\n<td style=\"text-align:center\">取反</td>\n<td style=\"text-align:left\">0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&lt;</td>\n<td style=\"text-align:center\">左移</td>\n<td style=\"text-align:left\">各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;</td>\n<td style=\"text-align:center\">右移</td>\n<td style=\"text-align:left\">各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong></p>\n<ol>\n<li><p>在这 6 种操作符，只有 <strong>~</strong> 取反是单目操作符，其它 5 种都是双目操作符。</p>\n</li>\n<li><p>位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。</p>\n</li>\n<li><p>对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println((<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">System.out.println((-<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// -4</span></span><br></pre></td></tr></table></figure>\n<p>15 = 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到</p>\n<p>00000000 00000000 00000000 00000011 即 3。</p>\n<p>-15 = 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到</p>\n<p>11111111 11111111 11111111 11111100 即 -4。</p>\n</li>\n<li><p>位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。</p>\n</li>\n<li><p>位操作还有一些复合操作符，如 &amp;=、|=、 ^=、&lt;&lt;=、&gt;&gt;=。</p>\n</li>\n</ol>\n<h3 id=\"常用的位运算技巧\"><a href=\"#常用的位运算技巧\" class=\"headerlink\" title=\"常用的位运算技巧\"></a>常用的位运算技巧</h3><h4 id=\"判断奇偶数\"><a href=\"#判断奇偶数\" class=\"headerlink\" title=\"判断奇偶数\"></a>判断奇偶数</h4><p>一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x &amp; 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。</p>\n<p>如要求输出 0 到 10 之间的所有偶数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((i &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"交换两数\"><a href=\"#交换两数\" class=\"headerlink\" title=\"交换两数\"></a>交换两数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">b ^= a;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a=\"</span> + a); <span class=\"comment\">// a=20</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b=\"</span> + b); <span class=\"comment\">// b=10</span></span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong></p>\n<p>第一步，a = a ^ b ①；</p>\n<p>第二步，b = b ^ a，把 ① 代入得，b = b ^ (a ^ b)，由于 <strong>^ 满足交换律</strong>，所以 b = b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b = a ②；</p>\n<p>第三步，a = a ^ b，将 ①、② 代入得，a = (a ^ b) ^ a 即 a = b ③。</p>\n<p>从 ②、③ 得知，a 和 b 的值已经得到了交换。</p>\n<h4 id=\"变换符号\"><a href=\"#变换符号\" class=\"headerlink\" title=\"变换符号\"></a>变换符号</h4><p>一个数 x <strong>取反加 1</strong> 后就会变成 -x，即正数变为负数，负数变为正数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = -<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">a = ~a + <span class=\"number\">1</span>;</span><br><span class=\"line\">b = ~b + <span class=\"number\">1</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a=\"</span> + a); <span class=\"comment\">// a=5</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b=\"</span> + b); <span class=\"comment\">// b=-10</span></span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong></p>\n<p>-5 = 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：</p>\n<p>00000000 00000000 00000000 00000101 = 5</p>\n<blockquote>\n<p>注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。</p>\n</blockquote>\n<h4 id=\"求绝对值\"><a href=\"#求绝对值\" class=\"headerlink\" title=\"求绝对值\"></a>求绝对值</h4><p>对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i = a &gt;&gt; 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">abs</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? a : (~a + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? (a ^ i) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>上面返回值再变换下得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? ((a ^ i) - <span class=\"number\">0</span>) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>由于 i 的值非 0 即 -1，因此上面返回值可以精简为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (a ^ i) - i;</span><br></pre></td></tr></table></figure>\n<p>通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">abs</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ i) - i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位操作与空间压缩\"><a href=\"#位操作与空间压缩\" class=\"headerlink\" title=\"位操作与空间压缩\"></a>位操作与空间压缩</h3><p>当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n<p>由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 / 32 + 1）的整型数组即可完成上面的状态标记。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>]; <span class=\"comment\">// 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true</span></span><br></pre></td></tr></table></figure>\n<p>由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1/6 左右。</p>\n<p>以下是用筛素数法计算 100 以内的素数的示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printPrime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[max];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag[i]) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; max; j += i) &#123; <span class=\"comment\">// 素数的倍数必然不是素数</span></span><br><span class=\"line\">                flag[j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n<p>如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？</p>\n<p>将整数 j 指定位上置为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和其相或来达到在指定位上置 1 的效果</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    j |= (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(Integer.toBinaryString(j));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：10000000000</span></span><br></pre></td></tr></table></figure>\n<p>判断整数 j 指定位上是否为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">isOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((j &amp; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"指定位上为 1\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"指定位上为 0\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：指定位上为 1</span></span><br></pre></td></tr></table></figure>\n<p>再把这种思路扩展到一个整型数组上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setOne2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">40</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        b[i / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (i % <span class=\"number\">32</span>)); <span class=\"comment\">// 每 3 个位设置为 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((b[i / <span class=\"number\">32</span>] &gt;&gt; i) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 判断是否为 1</span></span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1001001001001001001001001001001001001001</span></span><br></pre></td></tr></table></figure>\n<p>现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printPrime2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = b[i / <span class=\"number\">32</span>] &gt;&gt; (i % <span class=\"number\">32</span>); <span class=\"comment\">// 通过右移，逐位判断是 0 还是 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; max; j += i) &#123;</span><br><span class=\"line\">                b[j / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (j % <span class=\"number\">32</span>)); <span class=\"comment\">// 将指定位上设置为 1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"二进制的一些概念\"><a href=\"#二进制的一些概念\" class=\"headerlink\" title=\"二进制的一些概念\"></a>二进制的一些概念</h3><p>在二进制数里，最高位 0 表示正数，1 表示负数。</p>\n<h4 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h4><p>一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 5 的原码是：00000000 00000000 00000000 00000101</span><br><span class=\"line\">-5 的原码是：10000000 00000000 00000000 00000101</span><br></pre></td></tr></table></figure>\n<h4 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h4><p>正数的反码与原码相同，负数的反码为对该数的原码<strong>除符号位</strong>外各位<strong>取反</strong>（即 0 变 1，1 变 0）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101</span><br><span class=\"line\">负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010</span><br></pre></td></tr></table></figure>\n<h4 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h4><p>正数的补码与原码相同，负数的补码为该数的反码加 1。</p>\n<p>负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011</span><br></pre></td></tr></table></figure>\n<h3 id=\"位运算基础\"><a href=\"#位运算基础\" class=\"headerlink\" title=\"位运算基础\"></a>位运算基础</h3><p>基本的位操作符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:left\">运算规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">与</td>\n<td style=\"text-align:left\">两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&#124;</td>\n<td style=\"text-align:center\">或</td>\n<td style=\"text-align:left\">两个位只要有一位为 1，结果都为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">异或</td>\n<td style=\"text-align:left\">两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~</td>\n<td style=\"text-align:center\">取反</td>\n<td style=\"text-align:left\">0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&lt;</td>\n<td style=\"text-align:center\">左移</td>\n<td style=\"text-align:left\">各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;</td>\n<td style=\"text-align:center\">右移</td>\n<td style=\"text-align:left\">各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong></p>\n<ol>\n<li><p>在这 6 种操作符，只有 <strong>~</strong> 取反是单目操作符，其它 5 种都是双目操作符。</p>\n</li>\n<li><p>位操作只能用于整型数据，对 float 和 double 类型进行位操作会被编译器报错。</p>\n</li>\n<li><p>对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println((<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">System.out.println((-<span class=\"number\">15</span>) &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// -4</span></span><br></pre></td></tr></table></figure>\n<p>15 = 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到</p>\n<p>00000000 00000000 00000000 00000011 即 3。</p>\n<p>-15 = 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到</p>\n<p>11111111 11111111 11111111 11111100 即 -4。</p>\n</li>\n<li><p>位操作符的运算优先级比较低，因此应尽量使用括号来确保运算顺序。</p>\n</li>\n<li><p>位操作还有一些复合操作符，如 &amp;=、|=、 ^=、&lt;&lt;=、&gt;&gt;=。</p>\n</li>\n</ol>\n<h3 id=\"常用的位运算技巧\"><a href=\"#常用的位运算技巧\" class=\"headerlink\" title=\"常用的位运算技巧\"></a>常用的位运算技巧</h3><h4 id=\"判断奇偶数\"><a href=\"#判断奇偶数\" class=\"headerlink\" title=\"判断奇偶数\"></a>判断奇偶数</h4><p>一个二进制数 x 的末位为 0 则该数为偶数，为 1 则为奇数，因此可以使用 (x &amp; 1) 的结果来判断 x 的奇偶性，结果为 0，则 x 为偶数，结果为 1，则 x 为奇数。</p>\n<p>如要求输出 0 到 10 之间的所有偶数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((i &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"交换两数\"><a href=\"#交换两数\" class=\"headerlink\" title=\"交换两数\"></a>交换两数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">b ^= a;</span><br><span class=\"line\">a ^= b;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a=\"</span> + a); <span class=\"comment\">// a=20</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b=\"</span> + b); <span class=\"comment\">// b=10</span></span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong></p>\n<p>第一步，a = a ^ b ①；</p>\n<p>第二步，b = b ^ a，把 ① 代入得，b = b ^ (a ^ b)，由于 <strong>^ 满足交换律</strong>，所以 b = b ^ b ^ a，根据「一个数和自己异或为 0，而 0 和任何数异或结果还是保持不变」的原理得，b = a ②；</p>\n<p>第三步，a = a ^ b，将 ①、② 代入得，a = (a ^ b) ^ a 即 a = b ③。</p>\n<p>从 ②、③ 得知，a 和 b 的值已经得到了交换。</p>\n<h4 id=\"变换符号\"><a href=\"#变换符号\" class=\"headerlink\" title=\"变换符号\"></a>变换符号</h4><p>一个数 x <strong>取反加 1</strong> 后就会变成 -x，即正数变为负数，负数变为正数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = -<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">a = ~a + <span class=\"number\">1</span>;</span><br><span class=\"line\">b = ~b + <span class=\"number\">1</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a=\"</span> + a); <span class=\"comment\">// a=5</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b=\"</span> + b); <span class=\"comment\">// b=-10</span></span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong></p>\n<p>-5 = 11111111 11111111 11111111 11111011（二进制），取反再加 1 后变为：</p>\n<p>00000000 00000000 00000000 00000101 = 5</p>\n<blockquote>\n<p>注意：这里负数的取反是包括符号位的，不要和负数的反码混淆。</p>\n</blockquote>\n<h4 id=\"求绝对值\"><a href=\"#求绝对值\" class=\"headerlink\" title=\"求绝对值\"></a>求绝对值</h4><p>对于正数，绝对值就是它本身，对于负数，直接取反加 1 就得到正数了，所以先判断一个整数的符号再做处理。对于整数 a，它的最高位为 0 代表正数，为 1 代表负数，我们对 a 右移 31 位得到一个整数 i（i = a &gt;&gt; 31），i 值为 0 代表 a 为正数，为 -1 代表 a 为负数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">abs</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? a : (~a + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进一步分析，对于任意整数 a，和 0（32 个 0）异或都保持不变，和 -1（32 个 1）异或相当于取反，所以上面的返回值可以转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? (a ^ i) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>上面返回值再变换下得：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> i == <span class=\"number\">0</span> ? ((a ^ i) - <span class=\"number\">0</span>) : ((a ^ i) + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>由于 i 的值非 0 即 -1，因此上面返回值可以精简为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (a ^ i) - i;</span><br></pre></td></tr></table></figure>\n<p>通过上面的分析，我们得出求一个整数的绝对值的精简方式，这种方式不需任何判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">abs</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = a &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ i) - i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位操作与空间压缩\"><a href=\"#位操作与空间压缩\" class=\"headerlink\" title=\"位操作与空间压缩\"></a>位操作与空间压缩</h3><p>当我们要标记一个布尔型数组的状态为 true|false 时，我们通常的做法是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n<p>由于数组在内存上也是连续分配的一段空间，我们可以「认为」它是一个很长的整数，因此我们仅需用一个长度为 4（100 / 32 + 1）的整型数组即可完成上面的状态标记。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>]; <span class=\"comment\">// 每个 int 值有 32 位，各个位上为 0 代表 false，为 1 代表 true</span></span><br></pre></td></tr></table></figure>\n<p>由于 boolean 占 1 个字节，int 占 4 个字节，因此，用第二种方式所使用的空间仅为第一种的 1/6 左右。</p>\n<p>以下是用筛素数法计算 100 以内的素数的示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printPrime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] flag = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[max];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag[i]) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; max; j += i) &#123; <span class=\"comment\">// 素数的倍数必然不是素数</span></span><br><span class=\"line\">                flag[j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n<p>如果是用长度为 4 的整型数组 b 来替代 flag 布尔型数组怎么做？两个关键点，第一，如何将一个整数的指定位上置为 1？第二，如何判断一个整数指定位上是 0 还是 1？</p>\n<p>将整数 j 指定位上置为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和其相或来达到在指定位上置 1 的效果</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    j |= (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(Integer.toBinaryString(j));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：10000000000</span></span><br></pre></td></tr></table></figure>\n<p>判断整数 j 指定位上是否为 1：</p>\n<blockquote>\n<p>将 1 向左移位后和原数相与来判断指定位上是 0 还是 1（也可以将原数右移若干位再和 1 相与）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">isOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((j &amp; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"指定位上为 1\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"指定位上为 0\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：指定位上为 1</span></span><br></pre></td></tr></table></figure>\n<p>再把这种思路扩展到一个整型数组上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setOne2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">40</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        b[i / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (i % <span class=\"number\">32</span>)); <span class=\"comment\">// 每 3 个位设置为 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((b[i / <span class=\"number\">32</span>] &gt;&gt; i) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 判断是否为 1</span></span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1001001001001001001001001001001001001001</span></span><br></pre></td></tr></table></figure>\n<p>现在可以将上面的筛素数法改成使用位操作压缩后的筛素数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printPrime2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">32</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max / <span class=\"number\">3</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = b[i / <span class=\"number\">32</span>] &gt;&gt; (i % <span class=\"number\">32</span>); <span class=\"comment\">// 通过右移，逐位判断是 0 还是 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            primes[index++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; max; j += i) &#123;</span><br><span class=\"line\">                b[j / <span class=\"number\">32</span>] |= (<span class=\"number\">1</span> &lt;&lt; (j % <span class=\"number\">32</span>)); <span class=\"comment\">// 将指定位上设置为 1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 输出 100 以内所有素数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">        System.out.print(primes[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span> <span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span> <span class=\"number\">97</span></span><br></pre></td></tr></table></figure>\n"},{"title":"接口代理实现 Android Application 的多继承","date":"2018-08-03T03:57:00.000Z","_content":"\n\n\n\n\n\n\n在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用**接口代理**的方式来间接地实现“多继承”了。\n\n假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplication extends Application {\n\n    @Override\n    public void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"XApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"XApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"XApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplication extends Application {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"YApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"YApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"YApplication onConfigurationChanged\");\n    }\n}\n```\n\n显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过**反射和接口回调**的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class MyApplication extends ProxyApplication {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        Log.d(\"info-->\", \"MyApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Log.d(\"info-->\", \"MyApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        Log.d(\"info-->\", \"MyApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ProxyApplication extends Application {\n\n    private IApplicationListener iApplicationListener;\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        iApplicationListener = getProxyApplication();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyCreate();\n        }\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyConfigurationChanged(newConfig);\n        }\n    }\n\n    private IApplicationListener getProxyApplication() {\n        try {\n            Class clazz = Class.forName(\"com.zch.demo.app.ApplicationImpl\");\n            return (IApplicationListener) clazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n在组合实现类 ApplicationImpl 中，我们通过反射代理的方式**调用多个 Application 的生命周期方法**。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ApplicationImpl extends Application implements IApplicationListener {\n\n    private IXApplicationListener ixApplicationListener;\n    private IYApplicationListener iyApplicationListener;\n\n    @Override\n    public void onProxyAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        ixApplicationListener = getXApplication();\n        iyApplicationListener = getYApplication();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXAttachBaseContext(base);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onProxyCreate() {\n        super.onCreate();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXCreate();\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYCreate();\n        }\n    }\n\n    @Override\n    public void onProxyConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXConfigurationChanged(newConfig);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYConfigurationChanged(newConfig);\n        }\n    }\n\n    private IXApplicationListener getXApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.XApplicationImpl\");\n            return (IXApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private IYApplicationListener getYApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.YApplicationImpl\");\n            return (IYApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n接口 IApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 XApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplicationImpl extends XApplication implements IXApplicationListener {\n\n    @Override\n    public void onXAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onXCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onXConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IXApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IXApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 YApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplicationImpl extends YApplication implements IYApplicationListener {\n\n    @Override\n    public void onYAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onYCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onYConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IYApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IYApplicationListener {\n\n    void onYAttachBaseContext(Context base);\n\n    void onYCreate();\n\n    void onYConfigurationChanged(Configuration newConfig);\n}\n```\n\n当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：\n\n```\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication onCreate\n```\n\n说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。","source":"_posts/接口代理实现-Android-Application-的多继承.md","raw":"---\ntitle: 接口代理实现 Android Application 的多继承\ndate: 2018-08-03 11:57:00\ncategories: \"Android\"\ntags:\n     - Android\n---\n\n\n\n\n\n\n\n在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用**接口代理**的方式来间接地实现“多继承”了。\n\n假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplication extends Application {\n\n    @Override\n    public void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"XApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"XApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"XApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplication extends Application {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Log.d(\"info-->\", \"YApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"info-->\", \"YApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"info-->\", \"YApplication onConfigurationChanged\");\n    }\n}\n```\n\n显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过**反射和接口回调**的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\nimport android.util.Log;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class MyApplication extends ProxyApplication {\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        Log.d(\"info-->\", \"MyApplication attachBaseContext\");\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Log.d(\"info-->\", \"MyApplication onCreate\");\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        Log.d(\"info-->\", \"MyApplication onConfigurationChanged\");\n    }\n}\n```\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ProxyApplication extends Application {\n\n    private IApplicationListener iApplicationListener;\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        iApplicationListener = getProxyApplication();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyCreate();\n        }\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (iApplicationListener != null) {\n            iApplicationListener.onProxyConfigurationChanged(newConfig);\n        }\n    }\n\n    private IApplicationListener getProxyApplication() {\n        try {\n            Class clazz = Class.forName(\"com.zch.demo.app.ApplicationImpl\");\n            return (IApplicationListener) clazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n在组合实现类 ApplicationImpl 中，我们通过反射代理的方式**调用多个 Application 的生命周期方法**。\n\n```Java\npackage com.zch.demo.app;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class ApplicationImpl extends Application implements IApplicationListener {\n\n    private IXApplicationListener ixApplicationListener;\n    private IYApplicationListener iyApplicationListener;\n\n    @Override\n    public void onProxyAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n\n        ixApplicationListener = getXApplication();\n        iyApplicationListener = getYApplication();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXAttachBaseContext(base);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYAttachBaseContext(base);\n        }\n    }\n\n    @Override\n    public void onProxyCreate() {\n        super.onCreate();\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXCreate();\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYCreate();\n        }\n    }\n\n    @Override\n    public void onProxyConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (ixApplicationListener != null) {\n            ixApplicationListener.onXConfigurationChanged(newConfig);\n        }\n        if (iyApplicationListener != null) {\n            iyApplicationListener.onYConfigurationChanged(newConfig);\n        }\n    }\n\n    private IXApplicationListener getXApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.XApplicationImpl\");\n            return (IXApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private IYApplicationListener getYApplication() {\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"com.zch.demo.app.YApplicationImpl\");\n            return (IYApplicationListener) clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n接口 IApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 XApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class XApplicationImpl extends XApplication implements IXApplicationListener {\n\n    @Override\n    public void onXAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onXCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onXConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IXApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IXApplicationListener {\n\n    void onProxyAttachBaseContext(Context base);\n\n    void onProxyCreate();\n\n    void onProxyConfigurationChanged(Configuration newConfig);\n}\n```\n\n实现类 YApplicationImpl\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic class YApplicationImpl extends YApplication implements IYApplicationListener {\n\n    @Override\n    public void onYAttachBaseContext(Context base) {\n        super.attachBaseContext(base);\n    }\n\n    @Override\n    public void onYCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public void onYConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n}\n```\n\n接口 IYApplicationListener\n\n```Java\npackage com.zch.demo.app;\n\nimport android.content.Context;\nimport android.content.res.Configuration;\n\n/**\n * Created by zch on 2018/8/3.\n */\npublic interface IYApplicationListener {\n\n    void onYAttachBaseContext(Context base);\n\n    void onYCreate();\n\n    void onYConfigurationChanged(Configuration newConfig);\n}\n```\n\n当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：\n\n```\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication attachBaseContext\n08-03 13:56:33.830 9314-9314/? D/info-->: XApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: YApplication onCreate\n08-03 13:56:33.830 9314-9314/? D/info-->: MyApplication onCreate\n```\n\n说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。","slug":"接口代理实现-Android-Application-的多继承","published":1,"updated":"2018-08-03T06:29:50.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd3d002rmgquf6wuurwd","content":"<p>在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用<strong>接口代理</strong>的方式来间接地实现“多继承”了。</p>\n<p>假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"XApplication attachBaseContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"XApplication onCreate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"XApplication onConfigurationChanged\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"YApplication attachBaseContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"YApplication onCreate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"YApplication onConfigurationChanged\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过<strong>反射和接口回调</strong>的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">ProxyApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"MyApplication attachBaseContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"MyApplication onCreate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"MyApplication onConfigurationChanged\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IApplicationListener iApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        iApplicationListener = getProxyApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IApplicationListener <span class=\"title\">getProxyApplication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class clazz = Class.forName(<span class=\"string\">\"com.zch.demo.app.ApplicationImpl\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在组合实现类 ApplicationImpl 中，我们通过反射代理的方式<strong>调用多个 Application 的生命周期方法</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IXApplicationListener ixApplicationListener;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IYApplicationListener iyApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        ixApplicationListener = getXApplication();</span><br><span class=\"line\">        iyApplicationListener = getYApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProxyCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IXApplicationListener <span class=\"title\">getXApplication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Class clazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">\"com.zch.demo.app.XApplicationImpl\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IXApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IYApplicationListener <span class=\"title\">getYApplication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Class clazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">\"com.zch.demo.app.YApplicationImpl\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IYApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 IApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyCreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类 XApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">XApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">IXApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onXAttachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onXCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onXConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 IXApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyCreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类 YApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">YApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">IYApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onYCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 IYApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IYApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onYCreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication onCreate</span><br></pre></td></tr></table></figure>\n<p>说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目开发中，当我们接入第三方 SDK 时，可能会要求我们自己的 Application 继承它们的 Application , 但是 Java 只能是单继承的，这时我们就可以使用<strong>接口代理</strong>的方式来间接地实现“多继承”了。</p>\n<p>假设我们的 MyApplication 需要继承两个第三方 SDK 的类 XApplication 与 YApplication .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"XApplication attachBaseContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"XApplication onCreate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"XApplication onConfigurationChanged\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"YApplication attachBaseContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"YApplication onCreate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"YApplication onConfigurationChanged\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，我们自家的 MyApplication 是不可能同时直接继承上面的两个 Application 的。我们可以让 MyApplication 继承一个代理类 ProxyApplication , 然后在 ProxyApplication 中通过<strong>反射和接口回调</strong>的方式调用组合实现类 ApplicationImpl（组合了多个 Application 接口）对应的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">ProxyApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"MyApplication attachBaseContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"MyApplication onCreate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"info--&gt;\"</span>, <span class=\"string\">\"MyApplication onConfigurationChanged\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IApplicationListener iApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        iApplicationListener = getProxyApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iApplicationListener.onProxyConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IApplicationListener <span class=\"title\">getProxyApplication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class clazz = Class.forName(<span class=\"string\">\"com.zch.demo.app.ApplicationImpl\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在组合实现类 ApplicationImpl 中，我们通过反射代理的方式<strong>调用多个 Application 的生命周期方法</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IXApplicationListener ixApplicationListener;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IYApplicationListener iyApplicationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\"></span><br><span class=\"line\">        ixApplicationListener = getXApplication();</span><br><span class=\"line\">        iyApplicationListener = getYApplication();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYAttachBaseContext(base);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProxyCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYCreate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ixApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ixApplicationListener.onXConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iyApplicationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            iyApplicationListener.onYConfigurationChanged(newConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IXApplicationListener <span class=\"title\">getXApplication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Class clazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">\"com.zch.demo.app.XApplicationImpl\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IXApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IYApplicationListener <span class=\"title\">getYApplication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Class clazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clazz = Class.forName(<span class=\"string\">\"com.zch.demo.app.YApplicationImpl\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IYApplicationListener) clazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 IApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyCreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类 XApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">XApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">IXApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onXAttachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onXCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onXConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 IXApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyAttachBaseContext</span><span class=\"params\">(Context base)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyCreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProxyConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类 YApplicationImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YApplicationImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">YApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">IYApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onYCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 IYApplicationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zch.demo.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by zch on 2018/8/3.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IYApplicationListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onYAttachBaseContext</span><span class=\"params\">(Context base)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onYCreate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onYConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们在清单文件中声明了 MyApplication 并跑起项目时，会打印以下日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication attachBaseContext</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: XApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: YApplication onCreate</span><br><span class=\"line\">08-03 13:56:33.830 9314-9314/? D/info--&gt;: MyApplication onCreate</span><br></pre></td></tr></table></figure>\n<p>说明我们在 MyApplication 中成功地调用了 XApplication 与 YApplication 中的生命周期方法。</p>\n"},{"title":"Android 之 Fragment","date":"2018-07-23T07:56:00.000Z","_content":"\n\n\n## 产生原因\n\nAndroid 在 Android 3.0（API 级别 11）中引入了 Fragment（**片段**），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。\n\n\n## 简述\n\nFragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。\n\n每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .\n\n当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 `Activity 管理的返回栈` — **Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录**。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。\n\n\n## 创建Fragment\n\n要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。\n\n- DialogFragment\n\n  显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。\n\n- ListFragment\n\n  显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。\n\n- PreferenceFragment\n\n  以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。\n\n\n### 添加用户界面\n\nFragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。\n\n> 如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。\n\n### 创建布局\n\n```Java\npublic static class ExampleFragment extends Fragment {\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.example_fragment, container, false);\n    }\n}\n```\n\n传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .\n\ninflate() 方法带有三个参数：\n\n- 您想要扩展的布局的资源 ID\n- 将作为扩展布局父项的 ViewGroup\n- 指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）\n\n### 向Activity添加片段\n\n#### 在Activity的布局文件内声明Fragment\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\">\n\n    <fragment\n        android:id=\"@+id/list\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleListFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n    <fragment\n        android:id=\"@+id/detail\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleDetailFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"2\" />\n</LinearLayout>\n```\n\n- <fragment\\> 中的 android:name 属性指定要在布局中实例化的 Fragment 类。\n- 当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 <fragment\\> 元素。\n\n> 每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。\n\n**可以通过三种方式为 Fragment 提供唯一的标识符：**\n\n- 为 android:id 属性提供唯一 ID\n- 为 android:tag 属性提供唯一字符串\n- 如果未给以上两个属性提供值，系统会使用容器视图的 ID\n\n#### 或者通过编程方式将Fragment添加到某个现有ViewGroup\n\n```Java\nFragmentManager fragmentManager = getFragmentManager();\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nArticleListFragment fragment = new ArticleListFragment();\nfragmentTransaction.add(R.id.fragment_container, fragment);\nfragmentTransaction.commit();\n```\n\n可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。\n\n#### 添加没有UI的Fragment\n\n还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 `add (Fragment fragment,  String tag)` 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 `findFragmentByTag()` . 由于它并不与 Activity 布局中的视图关联，因此**不会收到对 onCreateView() 的调用**。因此，不需要实现该方法。\n\n将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 <sdk_root>/APIDemos/app/src/main/java/com/example/android/apis/app/FragmentRetainInstance.java 形式位于您的系统中。\n\n## 管理Fragment\n\n要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：\n\n- 通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .\n- 通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。\n- 通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。\n\n## 管理Fragment回退栈\n\n- 跟踪回退栈状态\n\n  ```Java\n  public class MyClass implements FragmentManager.OnBackStackChangedListener\n    \n    @Override\n    public void onBackStackChanged() {\n    \n    }\n    // ...\n    // 添加回退栈监听接口\n    getSupportFragmentManager().addOnBackStackChangedListener(this);\n    // ...\n  }\n  ```\n\n- 管理回退栈\n\n  - FragmentTransaction.addToBackStack(String) // 将一个刚刚添加的 Fragment 加入到回退栈中\n  - getSupportFragmentManager().getBackStackEntryCount() // 获取回退栈中实体数量\n  - getSupportFragmentManager().popBackStack(String name, int flags) // 根据 name 立刻弹出栈顶的 Fragment\n  - getSupportFragmentManager().popBackStack(int id, int flags) // 根据 id 立刻弹出栈顶的 Fragment\n\n## Fragment常用的API\n\n- android.support.v4.app.Fragment 主要用于定义 Fragment\n- android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment\n- android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性\n- 主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）\n\n  ```Java\n  getFragmentManager() // Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替\n  ```\n- FragmentTransaction 的一些操作方法\n\n## 执行Fragment事务\n\n在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以**将每个事务**保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。\n\n```Java\n\nFragment newFragment = new ArticleListFragment();\nFragmentTransaction transaction = getFragmentManager().beginTransaction();\n\n// 往 Activity 中添加一个 Fragment\ntransaction.add();\n\n// 从 Activity 中移除一个 Fragment\ntransaction.remove();\n\n// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体\ntransaction.replace();\n\n// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁\ntransaction.hide();\n\n// 显示之前隐藏的 Fragment\ntransaction.show();\n\n// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment\ntransaction.addToBackStack(null);\n\ntransaction.commit(); //提交一个事务\n```\n\n**说明**\n\n- 每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .\n- 调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。\n- 如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。\n- 如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。\n- 如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。\n- 对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。\n- 调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。\n- 只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .\n\n\n## Fragment生命周期\n\n- Fragment必须依存于Activity\n\n![activity_fragment_lifecycle_0](https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle_0.png?raw=true)\n\n- Fragment依附于Activity的生命状态\n\n![activity_fragment_lifecycle](https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle.png?raw=true)\n\n**Fragment生命周期回调方法含义**\n\n- public void onAttach(Context context)\n\n  在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。\n\n- public void onCreate(Bundle savedInstanceState)\n\n  onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。\n\n- public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)\n\n  在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 <fragment\\> 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。\n\n- public void onViewCreated(View view,Bundle savedInstanceState)\n\n  创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。\n\n- public void onActivityCreated(Bundle savedInstanceState)\n\n  该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。\n\n- public void onStart()\n\n  调用该方法时，Fragment 已经可见了，但还无法与用户交互。\n\n- public void onResume()\n\n  调用该方法时，Fragment 已经可以与用户交互了。\n\n- public void onPause()\n\n  Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。\n\n- public void onStop()\n  \n  Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。\n\n- public void onDestoryView()\n\n  移除在 onCreateView 方法中创建的 View 时调用。\n\n- public void onDestroy()\n\n  做一些最后清理 Fragment 的状态。\n\n- public void onDetach()\n\n  取消 Fragment 与 Activity 的关联时调用。\n\n  \n## 与Activity通信\n\nFragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。\n\n```Java\nView listView = getActivity().findViewById(R.id.list);\n```\n\nActivity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。\n\n```Java\nExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);\n```\n\n> Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。\n\n**创建对 Activity 的事件回调**\n\n在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。\n\n例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。\n\n```Java\npublic static class FragmentA extends ListFragment {\n\n    OnArticleSelectedListener mListener;\n    ...\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        try {\n            mListener = (OnArticleSelectedListener) activity;\n        } catch (ClassCastException e) {\n            throw new ClassCastException(activity.toString() + \" must implement OnArticleSelectedListener\");\n        }\n    }\n    ...\n\n    // Container Activity must implement this interface\n    public interface OnArticleSelectedListener {\n        public void onArticleSelected(Uri articleUri);\n    }\n    ...\n}\n```\n\n宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .\n\n实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。\n\n## Fragment状态的持久化\n\n由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。\n\n1. 通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。\n\n2. 让 Android 自动帮我们保存 Fragment 状态。\n\n   在 Activity 中保存 Fragment 的方法：**FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)** ; 在 Activity 中获取所保存的 Fragment 的方法：**FragmentManager.getFragment(Bundle bundle, String key)** .\n\n   这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。\n\n以下为状态持久化的事例代码：\n\n**Activity 代码**\n\n```Java\n     FragmentA fragmentA;\n\n     @Override\n     protected void onCreate(@Nullable Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.fragment_activity);\n\n         if( savedInstanceState != null ){\n             fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,\"fragmentA\");\n         }\n         ...\n     }\n\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         if( fragmentA != null ){\n             getSupportFragmentManager().putFragment(outState,\"fragmentA\",fragmentA);\n         }\n\n         super.onSaveInstanceState(outState);\n     }\n```\n\n**FragmentA 代码**\n\n```Java\n     @Nullable\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         if ( null != savedInstanceState ){\n             String savedString = savedInstanceState.getString(\"string\");\n         }\n         View root = inflater.inflate(R.layout.fragment_a,null);\n         return root;\n     }\n\n \t@Override\n     public void onSaveInstanceState(Bundle outState) {\n         outState.putString(\"string\",\"anAngryAnt\");\n         super.onSaveInstanceState(outState);\n     }\n```\n\n\n\n\n**参考资料**\n\n- [Android Developers](https://developer.android.com/guide/components/fragments)\n- [LearningNotes](https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md)\n\n\n\n\n\n","source":"_posts/Android-之-Fragment.md","raw":"---\ntitle: Android 之 Fragment\ndate: 2018-07-23 15:56:00\ncategories: \"Android\"\ntags:\n     - Android\n     - Fragment\n---\n\n\n\n## 产生原因\n\nAndroid 在 Android 3.0（API 级别 11）中引入了 Fragment（**片段**），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。\n\n\n## 简述\n\nFragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。\n\n每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .\n\n当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 `Activity 管理的返回栈` — **Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录**。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。\n\n\n## 创建Fragment\n\n要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。\n\n- DialogFragment\n\n  显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。\n\n- ListFragment\n\n  显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。\n\n- PreferenceFragment\n\n  以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。\n\n\n### 添加用户界面\n\nFragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。\n\n> 如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。\n\n### 创建布局\n\n```Java\npublic static class ExampleFragment extends Fragment {\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.example_fragment, container, false);\n    }\n}\n```\n\n传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .\n\ninflate() 方法带有三个参数：\n\n- 您想要扩展的布局的资源 ID\n- 将作为扩展布局父项的 ViewGroup\n- 指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）\n\n### 向Activity添加片段\n\n#### 在Activity的布局文件内声明Fragment\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\">\n\n    <fragment\n        android:id=\"@+id/list\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleListFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n    <fragment\n        android:id=\"@+id/detail\"\n        android:name=\"com.zch.learnbase.modules.fragment.ArticleDetailFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"2\" />\n</LinearLayout>\n```\n\n- <fragment\\> 中的 android:name 属性指定要在布局中实例化的 Fragment 类。\n- 当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 <fragment\\> 元素。\n\n> 每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。\n\n**可以通过三种方式为 Fragment 提供唯一的标识符：**\n\n- 为 android:id 属性提供唯一 ID\n- 为 android:tag 属性提供唯一字符串\n- 如果未给以上两个属性提供值，系统会使用容器视图的 ID\n\n#### 或者通过编程方式将Fragment添加到某个现有ViewGroup\n\n```Java\nFragmentManager fragmentManager = getFragmentManager();\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nArticleListFragment fragment = new ArticleListFragment();\nfragmentTransaction.add(R.id.fragment_container, fragment);\nfragmentTransaction.commit();\n```\n\n可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。\n\n#### 添加没有UI的Fragment\n\n还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 `add (Fragment fragment,  String tag)` 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 `findFragmentByTag()` . 由于它并不与 Activity 布局中的视图关联，因此**不会收到对 onCreateView() 的调用**。因此，不需要实现该方法。\n\n将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 <sdk_root>/APIDemos/app/src/main/java/com/example/android/apis/app/FragmentRetainInstance.java 形式位于您的系统中。\n\n## 管理Fragment\n\n要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：\n\n- 通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .\n- 通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。\n- 通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。\n\n## 管理Fragment回退栈\n\n- 跟踪回退栈状态\n\n  ```Java\n  public class MyClass implements FragmentManager.OnBackStackChangedListener\n    \n    @Override\n    public void onBackStackChanged() {\n    \n    }\n    // ...\n    // 添加回退栈监听接口\n    getSupportFragmentManager().addOnBackStackChangedListener(this);\n    // ...\n  }\n  ```\n\n- 管理回退栈\n\n  - FragmentTransaction.addToBackStack(String) // 将一个刚刚添加的 Fragment 加入到回退栈中\n  - getSupportFragmentManager().getBackStackEntryCount() // 获取回退栈中实体数量\n  - getSupportFragmentManager().popBackStack(String name, int flags) // 根据 name 立刻弹出栈顶的 Fragment\n  - getSupportFragmentManager().popBackStack(int id, int flags) // 根据 id 立刻弹出栈顶的 Fragment\n\n## Fragment常用的API\n\n- android.support.v4.app.Fragment 主要用于定义 Fragment\n- android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment\n- android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性\n- 主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）\n\n  ```Java\n  getFragmentManager() // Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替\n  ```\n- FragmentTransaction 的一些操作方法\n\n## 执行Fragment事务\n\n在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以**将每个事务**保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。\n\n```Java\n\nFragment newFragment = new ArticleListFragment();\nFragmentTransaction transaction = getFragmentManager().beginTransaction();\n\n// 往 Activity 中添加一个 Fragment\ntransaction.add();\n\n// 从 Activity 中移除一个 Fragment\ntransaction.remove();\n\n// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体\ntransaction.replace();\n\n// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁\ntransaction.hide();\n\n// 显示之前隐藏的 Fragment\ntransaction.show();\n\n// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment\ntransaction.addToBackStack(null);\n\ntransaction.commit(); //提交一个事务\n```\n\n**说明**\n\n- 每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .\n- 调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。\n- 如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。\n- 如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。\n- 如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。\n- 对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。\n- 调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。\n- 只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .\n\n\n## Fragment生命周期\n\n- Fragment必须依存于Activity\n\n![activity_fragment_lifecycle_0](https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle_0.png?raw=true)\n\n- Fragment依附于Activity的生命状态\n\n![activity_fragment_lifecycle](https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle.png?raw=true)\n\n**Fragment生命周期回调方法含义**\n\n- public void onAttach(Context context)\n\n  在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。\n\n- public void onCreate(Bundle savedInstanceState)\n\n  onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。\n\n- public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)\n\n  在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 <fragment\\> 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。\n\n- public void onViewCreated(View view,Bundle savedInstanceState)\n\n  创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。\n\n- public void onActivityCreated(Bundle savedInstanceState)\n\n  该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。\n\n- public void onStart()\n\n  调用该方法时，Fragment 已经可见了，但还无法与用户交互。\n\n- public void onResume()\n\n  调用该方法时，Fragment 已经可以与用户交互了。\n\n- public void onPause()\n\n  Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。\n\n- public void onStop()\n  \n  Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。\n\n- public void onDestoryView()\n\n  移除在 onCreateView 方法中创建的 View 时调用。\n\n- public void onDestroy()\n\n  做一些最后清理 Fragment 的状态。\n\n- public void onDetach()\n\n  取消 Fragment 与 Activity 的关联时调用。\n\n  \n## 与Activity通信\n\nFragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。\n\n```Java\nView listView = getActivity().findViewById(R.id.list);\n```\n\nActivity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。\n\n```Java\nExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);\n```\n\n> Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。\n\n**创建对 Activity 的事件回调**\n\n在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。\n\n例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。\n\n```Java\npublic static class FragmentA extends ListFragment {\n\n    OnArticleSelectedListener mListener;\n    ...\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        try {\n            mListener = (OnArticleSelectedListener) activity;\n        } catch (ClassCastException e) {\n            throw new ClassCastException(activity.toString() + \" must implement OnArticleSelectedListener\");\n        }\n    }\n    ...\n\n    // Container Activity must implement this interface\n    public interface OnArticleSelectedListener {\n        public void onArticleSelected(Uri articleUri);\n    }\n    ...\n}\n```\n\n宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .\n\n实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。\n\n## Fragment状态的持久化\n\n由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。\n\n1. 通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。\n\n2. 让 Android 自动帮我们保存 Fragment 状态。\n\n   在 Activity 中保存 Fragment 的方法：**FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)** ; 在 Activity 中获取所保存的 Fragment 的方法：**FragmentManager.getFragment(Bundle bundle, String key)** .\n\n   这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。\n\n以下为状态持久化的事例代码：\n\n**Activity 代码**\n\n```Java\n     FragmentA fragmentA;\n\n     @Override\n     protected void onCreate(@Nullable Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.fragment_activity);\n\n         if( savedInstanceState != null ){\n             fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,\"fragmentA\");\n         }\n         ...\n     }\n\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         if( fragmentA != null ){\n             getSupportFragmentManager().putFragment(outState,\"fragmentA\",fragmentA);\n         }\n\n         super.onSaveInstanceState(outState);\n     }\n```\n\n**FragmentA 代码**\n\n```Java\n     @Nullable\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         if ( null != savedInstanceState ){\n             String savedString = savedInstanceState.getString(\"string\");\n         }\n         View root = inflater.inflate(R.layout.fragment_a,null);\n         return root;\n     }\n\n \t@Override\n     public void onSaveInstanceState(Bundle outState) {\n         outState.putString(\"string\",\"anAngryAnt\");\n         super.onSaveInstanceState(outState);\n     }\n```\n\n\n\n\n**参考资料**\n\n- [Android Developers](https://developer.android.com/guide/components/fragments)\n- [LearningNotes](https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md)\n\n\n\n\n\n","slug":"Android-之-Fragment","published":1,"updated":"2020-06-11T02:45:18.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd6e003jmgqurg4wkfn8","content":"<h2 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h2><p>Android 在 Android 3.0（API 级别 11）中引入了 Fragment（<strong>片段</strong>），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。</p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>Fragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。</p>\n<p>每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .</p>\n<p>当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 <code>Activity 管理的返回栈</code> — <strong>Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录</strong>。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。</p>\n<h2 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h2><p>要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。</p>\n<ul>\n<li><p>DialogFragment</p>\n<p>显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。</p>\n</li>\n<li><p>ListFragment</p>\n<p>显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。</p>\n</li>\n<li><p>PreferenceFragment</p>\n<p>以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。</p>\n</li>\n</ul>\n<h3 id=\"添加用户界面\"><a href=\"#添加用户界面\" class=\"headerlink\" title=\"添加用户界面\"></a>添加用户界面</h3><p>Fragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。</p>\n<blockquote>\n<p>如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。</p>\n</blockquote>\n<h3 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.example_fragment, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .</p>\n<p>inflate() 方法带有三个参数：</p>\n<ul>\n<li>您想要扩展的布局的资源 ID</li>\n<li>将作为扩展布局父项的 ViewGroup</li>\n<li>指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）</li>\n</ul>\n<h3 id=\"向Activity添加片段\"><a href=\"#向Activity添加片段\" class=\"headerlink\" title=\"向Activity添加片段\"></a>向Activity添加片段</h3><h4 id=\"在Activity的布局文件内声明Fragment\"><a href=\"#在Activity的布局文件内声明Fragment\" class=\"headerlink\" title=\"在Activity的布局文件内声明Fragment\"></a>在Activity的布局文件内声明Fragment</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/list\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.zch.learnbase.modules.fragment.ArticleListFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/detail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.zch.learnbase.modules.fragment.ArticleDetailFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"2\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>&lt;fragment> 中的 android:name 属性指定要在布局中实例化的 Fragment 类。</li>\n<li>当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 &lt;fragment> 元素。</li>\n</ul>\n<blockquote>\n<p>每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。</p>\n</blockquote>\n<p><strong>可以通过三种方式为 Fragment 提供唯一的标识符：</strong></p>\n<ul>\n<li>为 android:id 属性提供唯一 ID</li>\n<li>为 android:tag 属性提供唯一字符串</li>\n<li>如果未给以上两个属性提供值，系统会使用容器视图的 ID</li>\n</ul>\n<h4 id=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"><a href=\"#或者通过编程方式将Fragment添加到某个现有ViewGroup\" class=\"headerlink\" title=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"></a>或者通过编程方式将Fragment添加到某个现有ViewGroup</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentManager fragmentManager = getFragmentManager();</span><br><span class=\"line\">FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</span><br><span class=\"line\">ArticleListFragment fragment = <span class=\"keyword\">new</span> ArticleListFragment();</span><br><span class=\"line\">fragmentTransaction.add(R.id.fragment_container, fragment);</span><br><span class=\"line\">fragmentTransaction.commit();</span><br></pre></td></tr></table></figure>\n<p>可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。</p>\n<h4 id=\"添加没有UI的Fragment\"><a href=\"#添加没有UI的Fragment\" class=\"headerlink\" title=\"添加没有UI的Fragment\"></a>添加没有UI的Fragment</h4><p>还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 <code>add (Fragment fragment,  String tag)</code> 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 <code>findFragmentByTag()</code> . 由于它并不与 Activity 布局中的视图关联，因此<strong>不会收到对 onCreateView() 的调用</strong>。因此，不需要实现该方法。</p>\n<p>将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 &lt;sdk_root&gt;/APIDemos/app/src/main/java/com/example/android/apis/app/FragmentRetainInstance.java 形式位于您的系统中。</p>\n<h2 id=\"管理Fragment\"><a href=\"#管理Fragment\" class=\"headerlink\" title=\"管理Fragment\"></a>管理Fragment</h2><p>要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：</p>\n<ul>\n<li>通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .</li>\n<li>通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。</li>\n<li>通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。</li>\n</ul>\n<h2 id=\"管理Fragment回退栈\"><a href=\"#管理Fragment回退栈\" class=\"headerlink\" title=\"管理Fragment回退栈\"></a>管理Fragment回退栈</h2><ul>\n<li><p>跟踪回退栈状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">FragmentManager</span>.<span class=\"title\">OnBackStackChangedListener</span></span></span><br><span class=\"line\"><span class=\"class\">  </span></span><br><span class=\"line\"><span class=\"class\">  @<span class=\"title\">Override</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">onBackStackChanged</span>() </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 添加回退栈监听接口</span></span><br><span class=\"line\">  getSupportFragmentManager().addOnBackStackChangedListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管理回退栈</p>\n<ul>\n<li>FragmentTransaction.addToBackStack(String) // 将一个刚刚添加的 Fragment 加入到回退栈中</li>\n<li>getSupportFragmentManager().getBackStackEntryCount() // 获取回退栈中实体数量</li>\n<li>getSupportFragmentManager().popBackStack(String name, int flags) // 根据 name 立刻弹出栈顶的 Fragment</li>\n<li>getSupportFragmentManager().popBackStack(int id, int flags) // 根据 id 立刻弹出栈顶的 Fragment</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Fragment常用的API\"><a href=\"#Fragment常用的API\" class=\"headerlink\" title=\"Fragment常用的API\"></a>Fragment常用的API</h2><ul>\n<li>android.support.v4.app.Fragment 主要用于定义 Fragment</li>\n<li>android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment</li>\n<li>android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性</li>\n<li><p>主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getFragmentManager() <span class=\"comment\">// Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>FragmentTransaction 的一些操作方法</p>\n</li>\n</ul>\n<h2 id=\"执行Fragment事务\"><a href=\"#执行Fragment事务\" class=\"headerlink\" title=\"执行Fragment事务\"></a>执行Fragment事务</h2><p>在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以<strong>将每个事务</strong>保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Fragment newFragment = <span class=\"keyword\">new</span> ArticleListFragment();</span><br><span class=\"line\">FragmentTransaction transaction = getFragmentManager().beginTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 往 Activity 中添加一个 Fragment</span></span><br><span class=\"line\">transaction.add();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 Activity 中移除一个 Fragment</span></span><br><span class=\"line\">transaction.remove();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体</span></span><br><span class=\"line\">transaction.replace();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁</span></span><br><span class=\"line\">transaction.hide();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示之前隐藏的 Fragment</span></span><br><span class=\"line\">transaction.show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment</span></span><br><span class=\"line\">transaction.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">transaction.commit(); <span class=\"comment\">//提交一个事务</span></span><br></pre></td></tr></table></figure>\n<p><strong>说明</strong></p>\n<ul>\n<li>每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .</li>\n<li>调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。</li>\n<li>如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。</li>\n<li>如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。</li>\n<li>如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。</li>\n<li>对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。</li>\n<li>调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。</li>\n<li>只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .</li>\n</ul>\n<h2 id=\"Fragment生命周期\"><a href=\"#Fragment生命周期\" class=\"headerlink\" title=\"Fragment生命周期\"></a>Fragment生命周期</h2><ul>\n<li>Fragment必须依存于Activity</li>\n</ul>\n<p><img src=\"https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle_0.png?raw=true\" alt=\"activity_fragment_lifecycle_0\"></p>\n<ul>\n<li>Fragment依附于Activity的生命状态</li>\n</ul>\n<p><img src=\"https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle.png?raw=true\" alt=\"activity_fragment_lifecycle\"></p>\n<p><strong>Fragment生命周期回调方法含义</strong></p>\n<ul>\n<li><p>public void onAttach(Context context)</p>\n<p>在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。</p>\n</li>\n<li><p>public void onCreate(Bundle savedInstanceState)</p>\n<p>onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。</p>\n</li>\n<li><p>public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)</p>\n<p>在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 &lt;fragment> 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。</p>\n</li>\n<li><p>public void onViewCreated(View view,Bundle savedInstanceState)</p>\n<p>创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。</p>\n</li>\n<li><p>public void onActivityCreated(Bundle savedInstanceState)</p>\n<p>该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。</p>\n</li>\n<li><p>public void onStart()</p>\n<p>调用该方法时，Fragment 已经可见了，但还无法与用户交互。</p>\n</li>\n<li><p>public void onResume()</p>\n<p>调用该方法时，Fragment 已经可以与用户交互了。</p>\n</li>\n<li><p>public void onPause()</p>\n<p>Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。</p>\n</li>\n<li><p>public void onStop()</p>\n<p>Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。</p>\n</li>\n<li><p>public void onDestoryView()</p>\n<p>移除在 onCreateView 方法中创建的 View 时调用。</p>\n</li>\n<li><p>public void onDestroy()</p>\n<p>做一些最后清理 Fragment 的状态。</p>\n</li>\n<li><p>public void onDetach()</p>\n<p>取消 Fragment 与 Activity 的关联时调用。</p>\n</li>\n</ul>\n<h2 id=\"与Activity通信\"><a href=\"#与Activity通信\" class=\"headerlink\" title=\"与Activity通信\"></a>与Activity通信</h2><p>Fragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View listView = getActivity().findViewById(R.id.list);</span><br></pre></td></tr></table></figure>\n<p>Activity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。</p>\n</blockquote>\n<p><strong>创建对 Activity 的事件回调</strong></p>\n<p>在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。</p>\n<p>例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentA</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListFragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    OnArticleSelectedListener mListener;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onAttach(activity);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mListener = (OnArticleSelectedListener) activity;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassCastException(activity.toString() + <span class=\"string\">\" must implement OnArticleSelectedListener\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Container Activity must implement this interface</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnArticleSelectedListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onArticleSelected</span><span class=\"params\">(Uri articleUri)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .</p>\n<p>实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。</p>\n<h2 id=\"Fragment状态的持久化\"><a href=\"#Fragment状态的持久化\" class=\"headerlink\" title=\"Fragment状态的持久化\"></a>Fragment状态的持久化</h2><p>由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。</p>\n<ol>\n<li><p>通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。</p>\n</li>\n<li><p>让 Android 自动帮我们保存 Fragment 状态。</p>\n<p>在 Activity 中保存 Fragment 的方法：<strong>FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)</strong> ; 在 Activity 中获取所保存的 Fragment 的方法：<strong>FragmentManager.getFragment(Bundle bundle, String key)</strong> .</p>\n<p>这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。</p>\n</li>\n</ol>\n<p>以下为状态持久化的事例代码：</p>\n<p><strong>Activity 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentA fragmentA;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.fragment_activity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( savedInstanceState != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,<span class=\"string\">\"fragmentA\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( fragmentA != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        getSupportFragmentManager().putFragment(outState,<span class=\"string\">\"fragmentA\"</span>,fragmentA);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>FragmentA 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( <span class=\"keyword\">null</span> != savedInstanceState )&#123;</span><br><span class=\"line\">           String savedString = savedInstanceState.getString(<span class=\"string\">\"string\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       View root = inflater.inflate(R.layout.fragment_a,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">       outState.putString(<span class=\"string\">\"string\"</span>,<span class=\"string\">\"anAngryAnt\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考资料</strong></p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/fragments\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n<li><a href=\"https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md\" target=\"_blank\" rel=\"noopener\">LearningNotes</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h2><p>Android 在 Android 3.0（API 级别 11）中引入了 Fragment（<strong>片段</strong>），主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用 Fragment 实现此类设计时，无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成 Fragment , 可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。</p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>Fragment 可视为 Activity 的模块化组成部分，它具有自己的生命周期。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。</p>\n<p>每个 Fragment 都可设计为可重复使用的模块化 Activity 组件，可以将一个 Fragment 加入多个 Activity . 因此，应该采用可复用式设计，避免直接从某个 Fragment 直接操纵另一个 Fragment . 因为模块化 Fragment 可以通过更改 Fragment 的组合方式来适应不同的屏幕尺寸。在设计可同时支持平板电脑和手机的应用时，可以在不同的布局配置中重复使用 Fragment , 以根据可用的屏幕空间优化用户体验。 例如，在手机上，如果不能在同一 Activity 内储存多个 Fragment , 可能必须利用单独 Fragment 来实现单窗格 UI .</p>\n<p>当 Activity 正在运行（处于已恢复生命周期状态）时，可独立操纵每个 Fragment , 如添加或移除它们。当执行此类 Fragment 事务时，也可以将其添加到由 <code>Activity 管理的返回栈</code> — <strong>Activity 中的每个返回栈条目都是一条已发生 Fragment 事务的记录</strong>。返回栈让用户可以通过按返回按钮撤消 Fragment 事务（后退）。</p>\n<h2 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h2><p>要创建一个 Fragment 必须扩展 Fragment 类（或已有的其子类 DialogFragment、ListFragment、PreferenceFragment）。</p>\n<ul>\n<li><p>DialogFragment</p>\n<p>显示浮动对话框。使用此类创建对话框可有效地替代使用 Activity 类中的对话框帮助程序方法，因为您可以将片段对话框纳入由 Activity 管理的片段返回栈，从而使用户能够返回清除的片段。</p>\n</li>\n<li><p>ListFragment</p>\n<p>显示由适配器（如 SimpleCursorAdapter）管理的一系列项目，类似于 ListActivity . 它提供了几种管理列表视图的方法，如用于处理点击事件的 onListItemClick() 回调。</p>\n</li>\n<li><p>PreferenceFragment</p>\n<p>以列表形式显示 Preference 对象的层次结构，类似于 PreferenceActivity . 这在为您的应用创建“设置” Activity 时很有用处。</p>\n</li>\n</ul>\n<h3 id=\"添加用户界面\"><a href=\"#添加用户界面\" class=\"headerlink\" title=\"添加用户界面\"></a>添加用户界面</h3><p>Fragment 通常用作 Activity 用户界面的一部分，将其自己的布局融入 Activity . 要想为 Fragment 提供布局，必须实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。此方法返回的 View 必须是 Fragment 布局的根视图。</p>\n<blockquote>\n<p>如果是 ListFragment 的子类，则默认实现会从 onCreateView() 返回一个 ListView，因此无需实现它。</p>\n</blockquote>\n<h3 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.example_fragment, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>传递至 onCreateView() 的 container 参数是 Fragment 布局将插入到的父 ViewGroup（来自 Activity 的布局）。savedInstanceState 参数是在恢复 Fragment 时，提供上一 Fragment 实例相关数据的 Bundle .</p>\n<p>inflate() 方法带有三个参数：</p>\n<ul>\n<li>您想要扩展的布局的资源 ID</li>\n<li>将作为扩展布局父项的 ViewGroup</li>\n<li>指示是否应该在扩展期间将扩展布局附加至 ViewGroup（第二个参数）的布尔值。（在本例中，其值为 false , 因为系统已经将扩展布局插入 container — 传递 true 值会在最终布局中创建一个多余的视图组。）</li>\n</ul>\n<h3 id=\"向Activity添加片段\"><a href=\"#向Activity添加片段\" class=\"headerlink\" title=\"向Activity添加片段\"></a>向Activity添加片段</h3><h4 id=\"在Activity的布局文件内声明Fragment\"><a href=\"#在Activity的布局文件内声明Fragment\" class=\"headerlink\" title=\"在Activity的布局文件内声明Fragment\"></a>在Activity的布局文件内声明Fragment</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/list\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.zch.learnbase.modules.fragment.ArticleListFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/detail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.zch.learnbase.modules.fragment.ArticleDetailFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"2\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>&lt;fragment> 中的 android:name 属性指定要在布局中实例化的 Fragment 类。</li>\n<li>当系统创建此 Activity 布局时，会实例化在布局中指定的每个 Fragment , 并为每个 Fragment 调用 onCreateView() 方法，以检索每个 Fragment 的布局。系统会直接插入 Fragment 返回的 View 来替代 &lt;fragment> 元素。</li>\n</ul>\n<blockquote>\n<p>每个 Fragment 都需要一个唯一的标识符，重启 Activity 时，系统可以使用该标识符来恢复 Fragment（还可以使用该标识符来捕获 Fragment 以执行某些事务，如将其移除）。</p>\n</blockquote>\n<p><strong>可以通过三种方式为 Fragment 提供唯一的标识符：</strong></p>\n<ul>\n<li>为 android:id 属性提供唯一 ID</li>\n<li>为 android:tag 属性提供唯一字符串</li>\n<li>如果未给以上两个属性提供值，系统会使用容器视图的 ID</li>\n</ul>\n<h4 id=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"><a href=\"#或者通过编程方式将Fragment添加到某个现有ViewGroup\" class=\"headerlink\" title=\"或者通过编程方式将Fragment添加到某个现有ViewGroup\"></a>或者通过编程方式将Fragment添加到某个现有ViewGroup</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentManager fragmentManager = getFragmentManager();</span><br><span class=\"line\">FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</span><br><span class=\"line\">ArticleListFragment fragment = <span class=\"keyword\">new</span> ArticleListFragment();</span><br><span class=\"line\">fragmentTransaction.add(R.id.fragment_container, fragment);</span><br><span class=\"line\">fragmentTransaction.commit();</span><br></pre></td></tr></table></figure>\n<p>可以在 Activity 运行期间随时将 Fragment 添加到 Activity 布局中。在 Activity 中执行 Fragment 事务（如添加、移除或替换片段），必须使用 FragmentTransaction 中的 API . 一旦通过 FragmentTransaction 做出了更改，就必须调用 commit() 以使更改生效。</p>\n<h4 id=\"添加没有UI的Fragment\"><a href=\"#添加没有UI的Fragment\" class=\"headerlink\" title=\"添加没有UI的Fragment\"></a>添加没有UI的Fragment</h4><p>还可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI . 只能通过 <code>add (Fragment fragment,  String tag)</code> 的方式添加，用 tag 做唯一标识符。获取该 Fragment 则需要使用 <code>findFragmentByTag()</code> . 由于它并不与 Activity 布局中的视图关联，因此<strong>不会收到对 onCreateView() 的调用</strong>。因此，不需要实现该方法。</p>\n<p>将没有 UI 的 Fragment 用作后台工作线程的示例 Activity 位于：SDK 示例（通过 Android SDK 管理器提供）中，以 &lt;sdk_root&gt;/APIDemos/app/src/main/java/com/example/android/apis/app/FragmentRetainInstance.java 形式位于您的系统中。</p>\n<h2 id=\"管理Fragment\"><a href=\"#管理Fragment\" class=\"headerlink\" title=\"管理Fragment\"></a>管理Fragment</h2><p>要管理 Fragment , 需要使用 FragmentManager , FragmentManager 执行的操作包括：</p>\n<ul>\n<li>通过 findFragmentById() 或 findFragmentByTag() 获取 Activity 中存在的 Fragment .</li>\n<li>通过 popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。</li>\n<li>通过 addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。</li>\n</ul>\n<h2 id=\"管理Fragment回退栈\"><a href=\"#管理Fragment回退栈\" class=\"headerlink\" title=\"管理Fragment回退栈\"></a>管理Fragment回退栈</h2><ul>\n<li><p>跟踪回退栈状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">FragmentManager</span>.<span class=\"title\">OnBackStackChangedListener</span></span></span><br><span class=\"line\"><span class=\"class\">  </span></span><br><span class=\"line\"><span class=\"class\">  @<span class=\"title\">Override</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">onBackStackChanged</span>() </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 添加回退栈监听接口</span></span><br><span class=\"line\">  getSupportFragmentManager().addOnBackStackChangedListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管理回退栈</p>\n<ul>\n<li>FragmentTransaction.addToBackStack(String) // 将一个刚刚添加的 Fragment 加入到回退栈中</li>\n<li>getSupportFragmentManager().getBackStackEntryCount() // 获取回退栈中实体数量</li>\n<li>getSupportFragmentManager().popBackStack(String name, int flags) // 根据 name 立刻弹出栈顶的 Fragment</li>\n<li>getSupportFragmentManager().popBackStack(int id, int flags) // 根据 id 立刻弹出栈顶的 Fragment</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Fragment常用的API\"><a href=\"#Fragment常用的API\" class=\"headerlink\" title=\"Fragment常用的API\"></a>Fragment常用的API</h2><ul>\n<li>android.support.v4.app.Fragment 主要用于定义 Fragment</li>\n<li>android.support.v4.app.FragmentManager 主要用于在 Activity 中操作 Fragment , 可以使用 FragmentManager.findFragmenById、FragmentManager.findFragmentByTag 等方法去找到一个 Fragment</li>\n<li>android.support.v4.app.FragmentTransaction 保证一系列 Fragment 操作的原子性</li>\n<li><p>主要的操作都是 FragmentTransaction 的方法（一般我们为了向下兼容，都使用 support.v4 包里面的 Fragment）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getFragmentManager() <span class=\"comment\">// Fragment 若使用的是 support.v4 包中的，那就使用 getSupportFragmentManager 代替</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>FragmentTransaction 的一些操作方法</p>\n</li>\n</ul>\n<h2 id=\"执行Fragment事务\"><a href=\"#执行Fragment事务\" class=\"headerlink\" title=\"执行Fragment事务\"></a>执行Fragment事务</h2><p>在 Activity 中使用 Fragment 的一大优点是，可以根据用户行为通过它们执行添加、移除、替换以及其他操作。 提交给 Activity 的每组更改都称为事务，可以使用 FragmentTransaction 中的 API 来执行一项事务。也可以<strong>将每个事务</strong>保存到由 Activity 管理的返回栈内，从而让用户能够回退 Fragment 更改（类似于回退 Activity）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Fragment newFragment = <span class=\"keyword\">new</span> ArticleListFragment();</span><br><span class=\"line\">FragmentTransaction transaction = getFragmentManager().beginTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 往 Activity 中添加一个 Fragment</span></span><br><span class=\"line\">transaction.add();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 Activity 中移除一个 Fragment</span></span><br><span class=\"line\">transaction.remove();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用另一个 Fragment 替换当前的，实际上就是 remove() 然后 add() 的合体</span></span><br><span class=\"line\">transaction.replace();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 隐藏当前的 Fragment , 仅仅是设为不可见，并不会销毁</span></span><br><span class=\"line\">transaction.hide();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示之前隐藏的 Fragment</span></span><br><span class=\"line\">transaction.show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将以上一组事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment</span></span><br><span class=\"line\">transaction.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">transaction.commit(); <span class=\"comment\">//提交一个事务</span></span><br></pre></td></tr></table></figure>\n<p><strong>说明</strong></p>\n<ul>\n<li>每个事务都是想要同时执行的一组更改。可以使用 add()、remove() 和 replace() 等方法为给定事务设置想要执行的所有更改。然后，要想将事务应用到 Activity , 必须调用 commit() .</li>\n<li>调用 commit() 之前，可调用 addToBackStack() , 以将事务添加到 Fragment 事务返回栈，该返回栈由 Activity 管理，允许用户通过按返回按钮返回上一 Fragment 状态。</li>\n<li>如果向事务添加了多个更改（如有一个 add() 或 remove()），并且调用了 addToBackStack() , 则在调用 commit() 前应用的所有更改都将作为单一事务添加到返回栈，并且返回按钮会将它们一并撤消。</li>\n<li>如果向同一容器添加多个 Fragment , 则您添加 Fragment 的顺序将决定它们在视图层次结构中的出现顺序。</li>\n<li>如果没有在执行移除 Fragment 的事务时调用 addToBackStack() , 则事务提交时该 Fragment 会被销毁，用户将无法回退到该 Fragment . 如果调用了 addToBackStack() , 系统会停止该 Fragment , 并在用户回退时将其恢复。</li>\n<li>对于每个 Fragment 事务，都可以通过在提交前调用 setTransition() 来应用过渡动画。</li>\n<li>调用 commit() 不会立即执行事务，而是在 Activity 的 UI 线程可以执行该操作时再安排其在线程上运行。不过，如有必要，也可以从 UI 线程调用 executePendingTransactions() 以立即执行 commit() 提交的事务。通常不必这样做，除非其他线程中的作业依赖该事务。</li>\n<li>只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity , 则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss() .</li>\n</ul>\n<h2 id=\"Fragment生命周期\"><a href=\"#Fragment生命周期\" class=\"headerlink\" title=\"Fragment生命周期\"></a>Fragment生命周期</h2><ul>\n<li>Fragment必须依存于Activity</li>\n</ul>\n<p><img src=\"https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle_0.png?raw=true\" alt=\"activity_fragment_lifecycle_0\"></p>\n<ul>\n<li>Fragment依附于Activity的生命状态</li>\n</ul>\n<p><img src=\"https://github.com/zhich/images/blob/master/blog/activity_fragment_lifecycle.png?raw=true\" alt=\"activity_fragment_lifecycle\"></p>\n<p><strong>Fragment生命周期回调方法含义</strong></p>\n<ul>\n<li><p>public void onAttach(Context context)</p>\n<p>在 Fragment 已与 Activity 关联时调用 onAttach 方法。从该方法起就可通过 Fragment.getActivity 方法获取与 Fragment 关联的 Activity 对象。此时由于 Fragment 的控件尚未初始化，因此不能操纵控件。</p>\n</li>\n<li><p>public void onCreate(Bundle savedInstanceState)</p>\n<p>onCreate 方法在 onAttach 执行完后马上执行。在该方法中可以读取保存的状态，获取、初始化一些数据，可在 Bundle 对象获取一些从 Activity 传递过来的数据。</p>\n</li>\n<li><p>public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)</p>\n<p>在该方法中会创建在 Fragment 显示的 View . inflater 用来装载布局文件；container 是 &lt;fragment> 标签的父标签对应对象；savedInstanceState 可获取 Fragment 保存的状态，为 null 表示未保存。</p>\n</li>\n<li><p>public void onViewCreated(View view,Bundle savedInstanceState)</p>\n<p>创建完 Fragment 中的 View 后会立即调用该方法。参数 view 就是 onCreateView 方法返回的 View 对象。</p>\n</li>\n<li><p>public void onActivityCreated(Bundle savedInstanceState)</p>\n<p>该方法在 Activity 的 onCreate 方法执行完之后调用，表示窗口已经初始化完成。在该方法中可以通过 getActivity().findViewById(Id) 来操纵 Activity 中的 view 了。</p>\n</li>\n<li><p>public void onStart()</p>\n<p>调用该方法时，Fragment 已经可见了，但还无法与用户交互。</p>\n</li>\n<li><p>public void onResume()</p>\n<p>调用该方法时，Fragment 已经可以与用户交互了。</p>\n</li>\n<li><p>public void onPause()</p>\n<p>Fragment 活动正在暂停或者它的操作正在 Activity 中被修改，不再与用户交互。在此可做一些需要临时暂停的工作，如保存音乐播放的进度，然后在 onResume 中恢复。</p>\n</li>\n<li><p>public void onStop()</p>\n<p>Fragment 活动正在停止或者它的操作正在 Activity 中被修改，不再对用户可见。</p>\n</li>\n<li><p>public void onDestoryView()</p>\n<p>移除在 onCreateView 方法中创建的 View 时调用。</p>\n</li>\n<li><p>public void onDestroy()</p>\n<p>做一些最后清理 Fragment 的状态。</p>\n</li>\n<li><p>public void onDetach()</p>\n<p>取消 Fragment 与 Activity 的关联时调用。</p>\n</li>\n</ul>\n<h2 id=\"与Activity通信\"><a href=\"#与Activity通信\" class=\"headerlink\" title=\"与Activity通信\"></a>与Activity通信</h2><p>Fragment 可通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找 View 等任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View listView = getActivity().findViewById(R.id.list);</span><br></pre></td></tr></table></figure>\n<p>Activity 也可以使用 findFragmentById() 或 findFragmentByTag() , 通过从 FragmentManager 获取对 Fragment 的引用来调用 Fragment 中的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Fragment 与 Activity 之间的交互可以通过 Fragment.setArguments(Bundle args) 以及 Fragment.getArguments() 来实现。</p>\n</blockquote>\n<p><strong>创建对 Activity 的事件回调</strong></p>\n<p>在某些情况下，可能需要通过 Fragment 与 Activity 共享事件。执行此操作的一个好方法是，在 Fragment 内定义一个回调接口，并要求宿主 Activity 实现它。当 Activity 通过该接口收到回调时，可以根据需要与布局中的其它 Fragment 共享这些信息。</p>\n<p>例如，如果一个新闻应用的 Activity 有两个 Fragment , 一个用于显示文章列表（FragmentA），另一个用于显示文章详情（FragmentB），那么 FragmentA 必须在列表项被选定后告知 Activity , 以便它告知 FragmentB 显示该文章详情。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentA</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListFragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    OnArticleSelectedListener mListener;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onAttach(activity);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mListener = (OnArticleSelectedListener) activity;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassCastException(activity.toString() + <span class=\"string\">\" must implement OnArticleSelectedListener\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Container Activity must implement this interface</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnArticleSelectedListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onArticleSelected</span><span class=\"params\">(Uri articleUri)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宿主 Activity 会实现 OnArticleSelectedListener 接口并复写 onArticleSelected() , 将来自 FragmentA 的事件通知 FragmentB . 为确保宿主 Activity 实现此接口，FragmentA 的 onAttach() 回调方法会通过转换传递到 onAttach() 中的 Activity 来实例化 OnArticleSelectedListener 的实例。如果 Activity 未实现接口，则片段会引发 ClassCastException .</p>\n<p>实现时，mListener 成员会保留对 Activity 的 OnArticleSelectedListener 实现的引用，以便 FragmentA 可以通过调用 OnArticleSelectedListener 接口定义的方法与 Activity 共享事件。</p>\n<h2 id=\"Fragment状态的持久化\"><a href=\"#Fragment状态的持久化\" class=\"headerlink\" title=\"Fragment状态的持久化\"></a>Fragment状态的持久化</h2><p>由于 Activity 会经常性地发生配置变化，所以依附于它的 Fragment 就可能需要将其状态保存起来。有两个常用的方法可将 Fragment 的状态持久化。</p>\n<ol>\n<li><p>通过 onSaveInstanceState 与 onRestoreInstanceState 保存和恢复状态。</p>\n</li>\n<li><p>让 Android 自动帮我们保存 Fragment 状态。</p>\n<p>在 Activity 中保存 Fragment 的方法：<strong>FragmentManager.putFragment(Bundle bundle, String key, Fragment fragment)</strong> ; 在 Activity 中获取所保存的 Fragment 的方法：<strong>FragmentManager.getFragment(Bundle bundle, String key)</strong> .</p>\n<p>这个方法仅仅能够保存 Fragment 中的控件状态，比如说 EditText 中用户已经输入的文字（注意！在这里，控件需要设置一个 id , 否则 Android 将不会为我们保存控件的状态），而 Fragment 中需要持久化的变量依然会丢失，此时就需要利用方法 1 了。</p>\n</li>\n</ol>\n<p>以下为状态持久化的事例代码：</p>\n<p><strong>Activity 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentA fragmentA;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.fragment_activity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( savedInstanceState != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        fragmentA = (FragmentA) getSupportFragmentManager().getFragment(savedInstanceState,<span class=\"string\">\"fragmentA\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( fragmentA != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        getSupportFragmentManager().putFragment(outState,<span class=\"string\">\"fragmentA\"</span>,fragmentA);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>FragmentA 代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( <span class=\"keyword\">null</span> != savedInstanceState )&#123;</span><br><span class=\"line\">           String savedString = savedInstanceState.getString(<span class=\"string\">\"string\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       View root = inflater.inflate(R.layout.fragment_a,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">       outState.putString(<span class=\"string\">\"string\"</span>,<span class=\"string\">\"anAngryAnt\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考资料</strong></p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/fragments\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n<li><a href=\"https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Fragment.md\" target=\"_blank\" rel=\"noopener\">LearningNotes</a></li>\n</ul>\n"},{"title":"Android Jetpack 之 Lifecycle","date":"2018-11-06T13:15:00.000Z","_content":"\n\n\n\n\n\n### 前言\n\n在日常的开发中，我们通常需要在 Activity / Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity / Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。\n\nLifecycle 是一个类，它持有 Activity / Fragment 生命周期状态的信息，并允许其它对象观察此状态。\n\n### Lifecycle 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\n场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。\n\n- Presenter 继承 LifecycleObserver 接口\n\n```Kotlin\ninterface IPresenter : LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)\n    fun onCreate(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)\n    fun onDestroy(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_ANY) // ON_ANY 注解能观察到其它所有的生命周期方法\n    fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event)\n}\n```\n\n```Kotlin\nclass MyPresenter : IPresenter {\n\n    override fun onCreate(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onCreate\")\n    }\n\n    override fun onDestroy(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n    }\n\n    override fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event) {\n//        Log.e(javaClass.simpleName, \"onLifecycleChanged\")\n    }\n}\n```\n\n- 在 Activity 中添加 LifecycleObserver\n\n```Kotlin\nclass MyLifecycleActivity : AppCompatActivity() {\n\n    private lateinit var myPresenter: MyPresenter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my_lifecycle)\n\n        Log.e(javaClass.simpleName, \"onCreate\")\n\n        myPresenter = MyPresenter()\n        lifecycle.addObserver(myPresenter) // 添加 LifecycleObserver\n    }\n\n    override fun onDestroy() {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n        super.onDestroy()\n    }\n}\n```\n\n启动 Activity 会打印：\n\n```Kotlin\nMyLifecycleActivity: onCreate\nMyPresenter: onCreate\n```\n\nfinish Activity 会打印：\n\n```Kotlin\nMyPresenter: onDestroy\nMyLifecycleActivity: onDestroy\n```\n\n以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。\n\n```Kotlin\nenum class Event {\n    /**\n     * Constant for onCreate event of the [LifecycleOwner].\n     */\n    ON_CREATE,\n    /**\n     * Constant for onStart event of the [LifecycleOwner].\n     */\n    ON_START,\n    /**\n     * Constant for onResume event of the [LifecycleOwner].\n     */\n    ON_RESUME,\n    /**\n     * Constant for onPause event of the [LifecycleOwner].\n     */\n    ON_PAUSE,\n    /**\n     * Constant for onStop event of the [LifecycleOwner].\n     */\n    ON_STOP,\n    /**\n     * Constant for onDestroy event of the [LifecycleOwner].\n     */\n    ON_DESTROY,\n    /**\n     * An [Event] constant that can be used to match all events.\n     */\n    ON_ANY\n}\n```\n\nLifecycle 内部还有代表了各个**生命周期所处状态**的枚举类 State\n\n```Kotlin\nenum class State {\n\n    /**\n     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch\n     * any more events. For instance, for an [android.app.Activity], this state is reached\n     * before Activity's [onDestroy] call.\n     */\n    DESTROYED,\n\n    /**\n     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is\n     * the state when it is constructed but has not received\n     * [onCreate] yet.\n     */\n    INITIALIZED,\n\n    /**\n     * Created state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onCreate] call;\n     * before [onStop] call.\n     */\n    CREATED,\n\n    /**\n     * Started state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onStart] call;\n     * before [onPause] call.\n     */\n    STARTED,\n\n    /**\n     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached after [onResume] is called.\n     */\n    RESUMED;\n\n    /**\n     * Compares if this State is greater or equal to the given `state`.\n     *\n     * @param state State to compare with\n     * @return true if this State is greater or equal to the given `state`\n     */\n    fun isAtLeast(state: State): Boolean {\n        return compareTo(state) >= 0\n    }\n}\n```\n\n在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：\n\n```Kotlin\noverride fun onStop() {\n    presenter1.onStop()\n    presenter2.onStop()\n    presenter3.onStop()\n    super.onStop()\n}\n\noverride fun onDestroy() {\n    presenter1.onDestroy()\n    presenter2.onDestroy()\n    presenter3.onDestroy()\n    super.onDestroy()\n}\n```\n\n这样会使 Activity 的代码变得很臃肿。\n\n如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。\n\n```Kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_my_lifecycle)\n    \n    lifecycle.addObserver(presenter1) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter2) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter3) // 添加 LifecycleObserver\n}\n```\n\n### 基本原理\n\n**几个概念**\n\n- **LifecycleObserver 接口**\n\n  Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。\n\n- **LifecycleOwner 接口**\n\n  Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。\n\n- **Lifecycle 类**\n\n  生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。\n\n- **State**\n  \n  当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .\n\n- **Event**\n\n  当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。\n\n**实现原理**\n\n#### LifecycleOwner\n\n  AppCompatActivity 的父类 `SupportActivity` 和 `Fragment` 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n   \n    // ... \n   \n    private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    public Lifecycle getLifecycle() {\n        return this.mLifecycleRegistry;\n    }\n    \n    // ...\n}\n```\n\n```Java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n```\n\n从源码可知 getLifecycle() 方法返回的是 `LifecycleRegistry` 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。\n\n#### LifecycleRegistry\n\n  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。\n\n```Java\npublic class LifecycleRegistry extends Lifecycle {\n\n    // LifecycleObserver Map , 每一个 Observer 都有一个 State\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n\n    // 当前的状态\n    private State mState;\n\n    // Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n   /**\n    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , \n    * 该 Observer 依然能收到 ON_CREATE 事件\n    */\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        // ...\n        // 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的\n        // 所有事件分发给 Observer\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n        // ...\n    }\n\n    /**\n     * 处理生命周期事件\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    /**\n     * 改变状态\n     */\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        // ...\n        sync();\n        // ...\n    }\n\n    /**\n     * 同步 Observer 状态，并分发事件\n     */\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大\n            // 如果当前状态值 < Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            // 如果当前状态值 > Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    /**\n     * 向前传递事件。\n     * 增加 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                // 分发状态改变事件\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    /**\n     * 向后传递事件。\n     * 减小 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n}\n```\n根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！\n\n接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ReportFragment.injectIfNeededIn(this);\n    }\n}\n```\n\n注意到 SupportActivity 的 onCreate() 方法里面有行 `ReportFragment.injectIfNeededIn(this)` 代码，再进入 ReportFragment 类分析。\n\n#### ReportFragment\n\n```Java\npublic class ReportFragment extends Fragment {\n\n    public static void injectIfNeededIn(Activity activity) {\n        android.app.FragmentManager manager = activity.getFragmentManager();\n        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n            manager.executePendingTransactions();\n        }\n    }\n\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        dispatchCreate(mProcessListener);\n        dispatch(Lifecycle.Event.ON_CREATE);\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        dispatchStart(mProcessListener);\n        dispatch(Lifecycle.Event.ON_START);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        dispatchResume(mProcessListener);\n        dispatch(Lifecycle.Event.ON_RESUME);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        dispatch(Lifecycle.Event.ON_PAUSE);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        dispatch(Lifecycle.Event.ON_STOP);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        dispatch(Lifecycle.Event.ON_DESTROY);\n        // just want to be sure that we won't leak reference to an activity\n        mProcessListener = null;\n    }\n\n    /**\n     * 分发事件\n     */\n    private void dispatch(Lifecycle.Event event) {\n        Activity activity = getActivity();\n        if (activity instanceof LifecycleRegistryOwner) {\n            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);\n            return;\n        }\n\n        if (activity instanceof LifecycleOwner) {\n            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();\n            if (lifecycle instanceof LifecycleRegistry) {\n                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);\n            }\n        }\n    }\n}\n```\n\n不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。\n\n**为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？**\n\n在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：\n\n```Java\npublic static void injectIfNeededIn(Activity activity) {\n    // ProcessLifecycleOwner should always correctly work and some activities may not extend\n    // FragmentActivity from support lib, so we use framework fragments for activities\n    android.app.FragmentManager manager = activity.getFragmentManager();\n    if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n        manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n        // Hopefully, we are the first to make a transaction.\n        manager.executePendingTransactions();\n    }\n}\n```\n\n有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。\n\n**另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？**\n\n鼠标停在 ReportFragment 类，同时按下 `Ctrl + Shift + Alt + F7` 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .\n\n#### LifecycleDispatcher\n\n生命周期分发者。\n\n```Java\nclass LifecycleDispatcher {\n\n    // ...\n\n    static void init(Context context) {\n        if (sInitialized.getAndSet(true)) {\n            return;\n        }\n        ((Application) context.getApplicationContext())\n                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());\n    }\n\n    // 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调\n    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {\n        private final FragmentCallback mFragmentCallback;\n\n        DispatcherActivityCallback() {\n            mFragmentCallback = new FragmentCallback();\n        }\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            if (activity instanceof FragmentActivity) {\n                ((FragmentActivity) activity).getSupportFragmentManager()\n                        .registerFragmentLifecycleCallbacks(mFragmentCallback, true);\n            }\n            // 给每个 Activity 添加 ReportFragment\n            ReportFragment.injectIfNeededIn(activity);\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n    }\n\n    /**\n     * 通过递归形式给所有子 Fragment 设置 State\n     */\n    private static void markState(FragmentManager manager, State state) {\n        Collection<Fragment> fragments = manager.getFragments();\n        if (fragments == null) {\n            return;\n        }\n        for (Fragment fragment : fragments) {\n            if (fragment == null) {\n                continue;\n            }\n            markStateIn(fragment, state);\n            if (fragment.isAdded()) {\n                // 递归\n                markState(fragment.getChildFragmentManager(), state);\n            }\n        }\n    }\n\n    private static void markStateIn(Object object, State state) {\n        if (object instanceof LifecycleRegistryOwner) {\n            LifecycleRegistry registry = ((LifecycleRegistryOwner) object).getLifecycle();\n            registry.markState(state);\n        }\n    }\n\n    /**\n     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 \n     */\n    private static void markState(FragmentActivity activity, State state) {\n        markStateIn(activity, state);\n        markState(activity.getSupportFragmentManager(), state);\n    }\n\n    // ...\n}\n```\n\n从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。\n\n- 在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;\n- 在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .\n\n#### ProcessLifecycleOwner\n\n为整个 App 进程提供生命周期的类。\n\n```Java\npublic class ProcessLifecycleOwner implements LifecycleOwner {\n\n    static final long TIMEOUT_MS = 700; //mls\n\n    // ...\n\n    static void init(Context context) {\n        sInstance.attach(context);\n    }\n\n    private ActivityInitializationListener mInitializationListener =\n            new ActivityInitializationListener() {\n                @Override\n                public void onCreate() {\n                }\n\n                @Override\n                public void onStart() {\n                    activityStarted();\n                }\n\n                @Override\n                public void onResume() {\n                    activityResumed();\n                }\n            };\n\n    void activityStarted() {\n        mStartedCounter++;\n        if (mStartedCounter == 1 && mStopSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            mStopSent = false;\n        }\n    }\n\n    void activityResumed() {\n        mResumedCounter++;\n        if (mResumedCounter == 1) {\n            if (mPauseSent) {\n                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n                mPauseSent = false;\n            } else {\n                mHandler.removeCallbacks(mDelayedPauseRunnable);\n            }\n        }\n    }\n\n    void activityPaused() {\n        mResumedCounter--;\n        if (mResumedCounter == 0) {\n            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);\n        }\n    }\n\n    void activityStopped() {\n        mStartedCounter--;\n        dispatchStopIfNeeded();\n    }\n\n    void attach(Context context) {\n        mHandler = new Handler();\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n        Application app = (Application) context.getApplicationContext();\n        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n                ReportFragment.get(activity).setProcessListener(mInitializationListener);\n            }\n\n            @Override\n            public void onActivityPaused(Activity activity) {\n                activityPaused();\n            }\n\n            @Override\n            public void onActivityStopped(Activity activity) {\n                activityStopped();\n            }\n        });\n    }\n}\n```\n\n从源码可知：\n\n- ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；\n- ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；\n- ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS = 700，因此这个判断不是即时的，有 700ms 的延迟；\n- ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。\n\n最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .\n\n```Java\npublic class ProcessLifecycleOwnerInitializer extends ContentProvider {\n    \n    @Override\n    public boolean onCreate() {\n        LifecycleDispatcher.init(getContext());\n        ProcessLifecycleOwner.init(getContext());\n        return true;\n    }\n\n    // ...\n}\n```\n\nLifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。\n\n```xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  // ...\n  <provider\n    android:name=\"android.arch.lifecycle.ProcessLifecycleOwnerInitializer\"\n    android:authorities=\"me.baron.achitecturelearning.lifecycle-trojan\"\n    android:exported=\"false\"\n    android:multiprocess=\"true\" />\n</manifest>\n```\n\n### Lifecycle 的最佳实践\n\n- 保持 Activity / Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；\n- 尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;\n- 将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；\n- 使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；\n- 如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；\n- 不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android-Lifecycle超能解析-生命周期的那些事儿](https://segmentfault.com/a/1190000016443108#articleHeader9)\n- [Android官方架构组件:Lifecycle详解&原理分析](https://blog.csdn.net/mq2553299/article/details/79029657)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)","source":"_posts/Android-Jetpack-之-LifeCycle.md","raw":"---\ntitle: Android Jetpack 之 Lifecycle\ndate: 2018-11-6 21:15:00\ncategories: \"Android\"\ntags:\n     - Android\n     - Lifecycle\n     - Jetpack\n---\n\n\n\n\n\n\n### 前言\n\n在日常的开发中，我们通常需要在 Activity / Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity / Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。\n\nLifecycle 是一个类，它持有 Activity / Fragment 生命周期状态的信息，并允许其它对象观察此状态。\n\n### Lifecycle 使用\n\n[添加相关依赖](https://developer.android.com/topic/libraries/architecture/adding-components)\n\n场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。\n\n- Presenter 继承 LifecycleObserver 接口\n\n```Kotlin\ninterface IPresenter : LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)\n    fun onCreate(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)\n    fun onDestroy(owner: LifecycleOwner)\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_ANY) // ON_ANY 注解能观察到其它所有的生命周期方法\n    fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event)\n}\n```\n\n```Kotlin\nclass MyPresenter : IPresenter {\n\n    override fun onCreate(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onCreate\")\n    }\n\n    override fun onDestroy(owner: LifecycleOwner) {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n    }\n\n    override fun onLifecycleChanged(owner: LifecycleOwner, event: Lifecycle.Event) {\n//        Log.e(javaClass.simpleName, \"onLifecycleChanged\")\n    }\n}\n```\n\n- 在 Activity 中添加 LifecycleObserver\n\n```Kotlin\nclass MyLifecycleActivity : AppCompatActivity() {\n\n    private lateinit var myPresenter: MyPresenter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my_lifecycle)\n\n        Log.e(javaClass.simpleName, \"onCreate\")\n\n        myPresenter = MyPresenter()\n        lifecycle.addObserver(myPresenter) // 添加 LifecycleObserver\n    }\n\n    override fun onDestroy() {\n        Log.e(javaClass.simpleName, \"onDestroy\")\n        super.onDestroy()\n    }\n}\n```\n\n启动 Activity 会打印：\n\n```Kotlin\nMyLifecycleActivity: onCreate\nMyPresenter: onCreate\n```\n\nfinish Activity 会打印：\n\n```Kotlin\nMyPresenter: onDestroy\nMyLifecycleActivity: onDestroy\n```\n\n以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。\n\n```Kotlin\nenum class Event {\n    /**\n     * Constant for onCreate event of the [LifecycleOwner].\n     */\n    ON_CREATE,\n    /**\n     * Constant for onStart event of the [LifecycleOwner].\n     */\n    ON_START,\n    /**\n     * Constant for onResume event of the [LifecycleOwner].\n     */\n    ON_RESUME,\n    /**\n     * Constant for onPause event of the [LifecycleOwner].\n     */\n    ON_PAUSE,\n    /**\n     * Constant for onStop event of the [LifecycleOwner].\n     */\n    ON_STOP,\n    /**\n     * Constant for onDestroy event of the [LifecycleOwner].\n     */\n    ON_DESTROY,\n    /**\n     * An [Event] constant that can be used to match all events.\n     */\n    ON_ANY\n}\n```\n\nLifecycle 内部还有代表了各个**生命周期所处状态**的枚举类 State\n\n```Kotlin\nenum class State {\n\n    /**\n     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch\n     * any more events. For instance, for an [android.app.Activity], this state is reached\n     * before Activity's [onDestroy] call.\n     */\n    DESTROYED,\n\n    /**\n     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is\n     * the state when it is constructed but has not received\n     * [onCreate] yet.\n     */\n    INITIALIZED,\n\n    /**\n     * Created state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onCreate] call;\n     * before [onStop] call.\n     */\n    CREATED,\n\n    /**\n     * Started state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached in two cases:\n     *\n     * after [onStart] call;\n     * before [onPause] call.\n     */\n    STARTED,\n\n    /**\n     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state\n     * is reached after [onResume] is called.\n     */\n    RESUMED;\n\n    /**\n     * Compares if this State is greater or equal to the given `state`.\n     *\n     * @param state State to compare with\n     * @return true if this State is greater or equal to the given `state`\n     */\n    fun isAtLeast(state: State): Boolean {\n        return compareTo(state) >= 0\n    }\n}\n```\n\n在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：\n\n```Kotlin\noverride fun onStop() {\n    presenter1.onStop()\n    presenter2.onStop()\n    presenter3.onStop()\n    super.onStop()\n}\n\noverride fun onDestroy() {\n    presenter1.onDestroy()\n    presenter2.onDestroy()\n    presenter3.onDestroy()\n    super.onDestroy()\n}\n```\n\n这样会使 Activity 的代码变得很臃肿。\n\n如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。\n\n```Kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_my_lifecycle)\n    \n    lifecycle.addObserver(presenter1) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter2) // 添加 LifecycleObserver\n    lifecycle.addObserver(presenter3) // 添加 LifecycleObserver\n}\n```\n\n### 基本原理\n\n**几个概念**\n\n- **LifecycleObserver 接口**\n\n  Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。\n\n- **LifecycleOwner 接口**\n\n  Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。\n\n- **Lifecycle 类**\n\n  生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。\n\n- **State**\n  \n  当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .\n\n- **Event**\n\n  当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。\n\n**实现原理**\n\n#### LifecycleOwner\n\n  AppCompatActivity 的父类 `SupportActivity` 和 `Fragment` 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n   \n    // ... \n   \n    private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    public Lifecycle getLifecycle() {\n        return this.mLifecycleRegistry;\n    }\n    \n    // ...\n}\n```\n\n```Java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n```\n\n从源码可知 getLifecycle() 方法返回的是 `LifecycleRegistry` 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。\n\n#### LifecycleRegistry\n\n  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。\n\n```Java\npublic class LifecycleRegistry extends Lifecycle {\n\n    // LifecycleObserver Map , 每一个 Observer 都有一个 State\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n\n    // 当前的状态\n    private State mState;\n\n    // Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n   /**\n    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , \n    * 该 Observer 依然能收到 ON_CREATE 事件\n    */\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        // ...\n        // 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的\n        // 所有事件分发给 Observer\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n        // ...\n    }\n\n    /**\n     * 处理生命周期事件\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    /**\n     * 改变状态\n     */\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        // ...\n        sync();\n        // ...\n    }\n\n    /**\n     * 同步 Observer 状态，并分发事件\n     */\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大\n            // 如果当前状态值 < Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            // 如果当前状态值 > Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    /**\n     * 向前传递事件。\n     * 增加 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                // 分发状态改变事件\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    /**\n     * 向后传递事件。\n     * 减小 Observer 的状态值，直到状态值等于当前状态值\n     */\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n}\n```\n根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！\n\n接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。\n\n```Java\npublic class SupportActivity extends Activity implements LifecycleOwner, Component {\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ReportFragment.injectIfNeededIn(this);\n    }\n}\n```\n\n注意到 SupportActivity 的 onCreate() 方法里面有行 `ReportFragment.injectIfNeededIn(this)` 代码，再进入 ReportFragment 类分析。\n\n#### ReportFragment\n\n```Java\npublic class ReportFragment extends Fragment {\n\n    public static void injectIfNeededIn(Activity activity) {\n        android.app.FragmentManager manager = activity.getFragmentManager();\n        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n            manager.executePendingTransactions();\n        }\n    }\n\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        dispatchCreate(mProcessListener);\n        dispatch(Lifecycle.Event.ON_CREATE);\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        dispatchStart(mProcessListener);\n        dispatch(Lifecycle.Event.ON_START);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        dispatchResume(mProcessListener);\n        dispatch(Lifecycle.Event.ON_RESUME);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        dispatch(Lifecycle.Event.ON_PAUSE);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        dispatch(Lifecycle.Event.ON_STOP);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        dispatch(Lifecycle.Event.ON_DESTROY);\n        // just want to be sure that we won't leak reference to an activity\n        mProcessListener = null;\n    }\n\n    /**\n     * 分发事件\n     */\n    private void dispatch(Lifecycle.Event event) {\n        Activity activity = getActivity();\n        if (activity instanceof LifecycleRegistryOwner) {\n            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);\n            return;\n        }\n\n        if (activity instanceof LifecycleOwner) {\n            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();\n            if (lifecycle instanceof LifecycleRegistry) {\n                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);\n            }\n        }\n    }\n}\n```\n\n不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。\n\n**为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？**\n\n在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：\n\n```Java\npublic static void injectIfNeededIn(Activity activity) {\n    // ProcessLifecycleOwner should always correctly work and some activities may not extend\n    // FragmentActivity from support lib, so we use framework fragments for activities\n    android.app.FragmentManager manager = activity.getFragmentManager();\n    if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n        manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n        // Hopefully, we are the first to make a transaction.\n        manager.executePendingTransactions();\n    }\n}\n```\n\n有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。\n\n**另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？**\n\n鼠标停在 ReportFragment 类，同时按下 `Ctrl + Shift + Alt + F7` 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .\n\n#### LifecycleDispatcher\n\n生命周期分发者。\n\n```Java\nclass LifecycleDispatcher {\n\n    // ...\n\n    static void init(Context context) {\n        if (sInitialized.getAndSet(true)) {\n            return;\n        }\n        ((Application) context.getApplicationContext())\n                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());\n    }\n\n    // 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调\n    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {\n        private final FragmentCallback mFragmentCallback;\n\n        DispatcherActivityCallback() {\n            mFragmentCallback = new FragmentCallback();\n        }\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            if (activity instanceof FragmentActivity) {\n                ((FragmentActivity) activity).getSupportFragmentManager()\n                        .registerFragmentLifecycleCallbacks(mFragmentCallback, true);\n            }\n            // 给每个 Activity 添加 ReportFragment\n            ReportFragment.injectIfNeededIn(activity);\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n            if (activity instanceof FragmentActivity) {\n                markState((FragmentActivity) activity, CREATED);\n            }\n        }\n    }\n\n    /**\n     * 通过递归形式给所有子 Fragment 设置 State\n     */\n    private static void markState(FragmentManager manager, State state) {\n        Collection<Fragment> fragments = manager.getFragments();\n        if (fragments == null) {\n            return;\n        }\n        for (Fragment fragment : fragments) {\n            if (fragment == null) {\n                continue;\n            }\n            markStateIn(fragment, state);\n            if (fragment.isAdded()) {\n                // 递归\n                markState(fragment.getChildFragmentManager(), state);\n            }\n        }\n    }\n\n    private static void markStateIn(Object object, State state) {\n        if (object instanceof LifecycleRegistryOwner) {\n            LifecycleRegistry registry = ((LifecycleRegistryOwner) object).getLifecycle();\n            registry.markState(state);\n        }\n    }\n\n    /**\n     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 \n     */\n    private static void markState(FragmentActivity activity, State state) {\n        markStateIn(activity, state);\n        markState(activity.getSupportFragmentManager(), state);\n    }\n\n    // ...\n}\n```\n\n从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。\n\n- 在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;\n- 在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .\n\n#### ProcessLifecycleOwner\n\n为整个 App 进程提供生命周期的类。\n\n```Java\npublic class ProcessLifecycleOwner implements LifecycleOwner {\n\n    static final long TIMEOUT_MS = 700; //mls\n\n    // ...\n\n    static void init(Context context) {\n        sInstance.attach(context);\n    }\n\n    private ActivityInitializationListener mInitializationListener =\n            new ActivityInitializationListener() {\n                @Override\n                public void onCreate() {\n                }\n\n                @Override\n                public void onStart() {\n                    activityStarted();\n                }\n\n                @Override\n                public void onResume() {\n                    activityResumed();\n                }\n            };\n\n    void activityStarted() {\n        mStartedCounter++;\n        if (mStartedCounter == 1 && mStopSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            mStopSent = false;\n        }\n    }\n\n    void activityResumed() {\n        mResumedCounter++;\n        if (mResumedCounter == 1) {\n            if (mPauseSent) {\n                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n                mPauseSent = false;\n            } else {\n                mHandler.removeCallbacks(mDelayedPauseRunnable);\n            }\n        }\n    }\n\n    void activityPaused() {\n        mResumedCounter--;\n        if (mResumedCounter == 0) {\n            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);\n        }\n    }\n\n    void activityStopped() {\n        mStartedCounter--;\n        dispatchStopIfNeeded();\n    }\n\n    void attach(Context context) {\n        mHandler = new Handler();\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n        Application app = (Application) context.getApplicationContext();\n        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n                ReportFragment.get(activity).setProcessListener(mInitializationListener);\n            }\n\n            @Override\n            public void onActivityPaused(Activity activity) {\n                activityPaused();\n            }\n\n            @Override\n            public void onActivityStopped(Activity activity) {\n                activityStopped();\n            }\n        });\n    }\n}\n```\n\n从源码可知：\n\n- ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；\n- ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；\n- ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS = 700，因此这个判断不是即时的，有 700ms 的延迟；\n- ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。\n\n最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .\n\n```Java\npublic class ProcessLifecycleOwnerInitializer extends ContentProvider {\n    \n    @Override\n    public boolean onCreate() {\n        LifecycleDispatcher.init(getContext());\n        ProcessLifecycleOwner.init(getContext());\n        return true;\n    }\n\n    // ...\n}\n```\n\nLifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。\n\n```xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  // ...\n  <provider\n    android:name=\"android.arch.lifecycle.ProcessLifecycleOwnerInitializer\"\n    android:authorities=\"me.baron.achitecturelearning.lifecycle-trojan\"\n    android:exported=\"false\"\n    android:multiprocess=\"true\" />\n</manifest>\n```\n\n### Lifecycle 的最佳实践\n\n- 保持 Activity / Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；\n- 尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;\n- 将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；\n- 使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；\n- 如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；\n- 不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。\n\n[文中 Demo GitHub 地址](https://github.com/zhich/AndroidJetpackDemo)\n\n参考资料：\n\n- [Android-Lifecycle超能解析-生命周期的那些事儿](https://segmentfault.com/a/1190000016443108#articleHeader9)\n- [Android官方架构组件:Lifecycle详解&原理分析](https://blog.csdn.net/mq2553299/article/details/79029657)\n- [Android Developers](https://developer.android.com/topic/libraries/architecture/lifecycle)","slug":"Android-Jetpack-之-LifeCycle","published":1,"updated":"2018-11-29T05:50:40.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckba6xd94003omgquecdrfe0t","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在日常的开发中，我们通常需要在 Activity / Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity / Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。</p>\n<p>Lifecycle 是一个类，它持有 Activity / Fragment 生命周期状态的信息，并允许其它对象观察此状态。</p>\n<h3 id=\"Lifecycle-使用\"><a href=\"#Lifecycle-使用\" class=\"headerlink\" title=\"Lifecycle 使用\"></a>Lifecycle 使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\" target=\"_blank\" rel=\"noopener\">添加相关依赖</a></p>\n<p>场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。</p>\n<ul>\n<li>Presenter 继承 LifecycleObserver 接口</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPresenter</span> : <span class=\"type\">LifecycleObserver &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_ANY)</span> <span class=\"comment\">// ON_ANY 注解能观察到其它所有的生命周期方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPresenter</span> : <span class=\"type\">IPresenter &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onCreate\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onDestroy\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Log.e(javaClass.simpleName, \"onLifecycleChanged\")</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 Activity 中添加 LifecycleObserver</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLifecycleActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myPresenter: MyPresenter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onCreate\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        myPresenter = MyPresenter()</span><br><span class=\"line\">        lifecycle.addObserver(myPresenter) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onDestroy\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动 Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLifecycleActivity: onCreate</span><br><span class=\"line\">MyPresenter: onCreate</span><br></pre></td></tr></table></figure>\n<p>finish Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPresenter: onDestroy</span><br><span class=\"line\">MyLifecycleActivity: onDestroy</span><br></pre></td></tr></table></figure>\n<p>以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onCreate event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_CREATE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStart event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_START,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onResume event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_RESUME,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onPause event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_PAUSE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStop event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_STOP,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onDestroy event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_DESTROY,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An [Event] constant that can be used to match all events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_ANY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Lifecycle 内部还有代表了各个<strong>生命周期所处状态</strong>的枚举类 State</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch</span></span><br><span class=\"line\"><span class=\"comment\">     * any more events. For instance, for an [android.app.Activity], this state is reached</span></span><br><span class=\"line\"><span class=\"comment\">     * before Activity's [onDestroy] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DESTROYED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is</span></span><br><span class=\"line\"><span class=\"comment\">     * the state when it is constructed but has not received</span></span><br><span class=\"line\"><span class=\"comment\">     * [onCreate] yet.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    INITIALIZED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Created state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onCreate] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onStop] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CREATED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Started state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onStart] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onPause] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    STARTED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached after [onResume] is called.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RESUMED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Compares if this State is greater or equal to the given `state`.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state State to compare with</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this State is greater or equal to the given `state`</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isAtLeast</span><span class=\"params\">(state: <span class=\"type\">State</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compareTo(state) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onStop()</span><br><span class=\"line\">    presenter2.onStop()</span><br><span class=\"line\">    presenter3.onStop()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onDestroy()</span><br><span class=\"line\">    presenter2.onDestroy()</span><br><span class=\"line\">    presenter3.onDestroy()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样会使 Activity 的代码变得很臃肿。</p>\n<p>如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\">    </span><br><span class=\"line\">    lifecycle.addObserver(presenter1) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter2) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter3) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3><p><strong>几个概念</strong></p>\n<ul>\n<li><p><strong>LifecycleObserver 接口</strong></p>\n<p>Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。</p>\n</li>\n<li><p><strong>LifecycleOwner 接口</strong></p>\n<p>Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。</p>\n</li>\n<li><p><strong>Lifecycle 类</strong></p>\n<p>生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。</p>\n</li>\n<li><p><strong>State</strong></p>\n<p>当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .</p>\n</li>\n<li><p><strong>Event</strong></p>\n<p>当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。</p>\n</li>\n</ul>\n<p><strong>实现原理</strong></p>\n<h4 id=\"LifecycleOwner\"><a href=\"#LifecycleOwner\" class=\"headerlink\" title=\"LifecycleOwner\"></a>LifecycleOwner</h4><p>  AppCompatActivity 的父类 <code>SupportActivity</code> 和 <code>Fragment</code> 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleOwner</span>, <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> LifecycleRegistry mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源码可知 getLifecycle() 方法返回的是 <code>LifecycleRegistry</code> 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。</p>\n<h4 id=\"LifecycleRegistry\"><a href=\"#LifecycleRegistry\" class=\"headerlink\" title=\"LifecycleRegistry\"></a>LifecycleRegistry</h4><p>  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleObserver Map , 每一个 Observer 都有一个 State</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> FastSafeIterableMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(@NonNull LifecycleOwner provider)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , </span></span><br><span class=\"line\"><span class=\"comment\">    * 该 Observer 依然能收到 ON_CREATE 事件</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的</span></span><br><span class=\"line\">        <span class=\"comment\">// 所有事件分发给 Observer</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理生命周期事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        State next = getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 改变状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步 Observer 状态，并分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">\"LifecycleOwner is garbage collected, you shouldn't try dispatch \"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"new events from it.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &lt; Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &gt; Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向前传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                <span class=\"comment\">// 分发状态改变事件</span></span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向后传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 减小 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！</p>\n<p>接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleOwner</span>, <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ReportFragment.injectIfNeededIn(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到 SupportActivity 的 onCreate() 方法里面有行 <code>ReportFragment.injectIfNeededIn(this)</code> 代码，再进入 ReportFragment 类分析。</p>\n<h4 id=\"ReportFragment\"><a href=\"#ReportFragment\" class=\"headerlink\" title=\"ReportFragment\"></a>ReportFragment</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            manager.beginTransaction().add(<span class=\"keyword\">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">            manager.executePendingTransactions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        dispatchCreate(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        dispatchStart(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        dispatchResume(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        <span class=\"comment\">// just want to be sure that we won't leak reference to an activity</span></span><br><span class=\"line\">        mProcessListener = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        Activity activity = getActivity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。</p>\n<p><strong>为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？</strong></p>\n<p>在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class=\"line\">    <span class=\"comment\">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class=\"line\">    android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        manager.beginTransaction().add(<span class=\"keyword\">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">        <span class=\"comment\">// Hopefully, we are the first to make a transaction.</span></span><br><span class=\"line\">        manager.executePendingTransactions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。</p>\n<p><strong>另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？</strong></p>\n<p>鼠标停在 ReportFragment 类，同时按下 <code>Ctrl + Shift + Alt + F7</code> 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .</p>\n<h4 id=\"LifecycleDispatcher\"><a href=\"#LifecycleDispatcher\" class=\"headerlink\" title=\"LifecycleDispatcher\"></a>LifecycleDispatcher</h4><p>生命周期分发者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleDispatcher</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sInitialized.getAndSet(<span class=\"keyword\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ((Application) context.getApplicationContext())</span><br><span class=\"line\">                .registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> DispatcherActivityCallback());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DispatcherActivityCallback</span> <span class=\"keyword\">extends</span> <span class=\"title\">EmptyActivityLifecycleCallbacks</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FragmentCallback mFragmentCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">        DispatcherActivityCallback() &#123;</span><br><span class=\"line\">            mFragmentCallback = <span class=\"keyword\">new</span> FragmentCallback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                ((FragmentActivity) activity).getSupportFragmentManager()</span><br><span class=\"line\">                        .registerFragmentLifecycleCallbacks(mFragmentCallback, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 给每个 Activity 添加 ReportFragment</span></span><br><span class=\"line\">            ReportFragment.injectIfNeededIn(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivitySaveInstanceState</span><span class=\"params\">(Activity activity, Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过递归形式给所有子 Fragment 设置 State</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(FragmentManager manager, State state)</span> </span>&#123;</span><br><span class=\"line\">        Collection&lt;Fragment&gt; fragments = manager.getFragments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fragments == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Fragment fragment : fragments) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            markStateIn(fragment, state);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment.isAdded()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 递归</span></span><br><span class=\"line\">                markState(fragment.getChildFragmentManager(), state);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markStateIn</span><span class=\"params\">(Object object, State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            LifecycleRegistry registry = ((LifecycleRegistryOwner) object).getLifecycle();</span><br><span class=\"line\">            registry.markState(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(FragmentActivity activity, State state)</span> </span>&#123;</span><br><span class=\"line\">        markStateIn(activity, state);</span><br><span class=\"line\">        markState(activity.getSupportFragmentManager(), state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。</p>\n<ul>\n<li>在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;</li>\n<li>在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .</li>\n</ul>\n<h4 id=\"ProcessLifecycleOwner\"><a href=\"#ProcessLifecycleOwner\" class=\"headerlink\" title=\"ProcessLifecycleOwner\"></a>ProcessLifecycleOwner</h4><p>为整个 App 进程提供生命周期的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessLifecycleOwner</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> TIMEOUT_MS = <span class=\"number\">700</span>; <span class=\"comment\">//mls</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        sInstance.attach(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActivityInitializationListener mInitializationListener =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ActivityInitializationListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    activityStarted();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    activityResumed();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mStartedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStartedCounter == <span class=\"number\">1</span> &amp;&amp; mStopSent) &#123;</span><br><span class=\"line\">            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">            mStopSent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityResumed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mResumedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPauseSent) &#123;</span><br><span class=\"line\">                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">                mPauseSent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mHandler.removeCallbacks(mDelayedPauseRunnable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityPaused</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mResumedCounter--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityStopped</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mStartedCounter--;</span><br><span class=\"line\">        dispatchStopIfNeeded();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mHandler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">        Application app = (Application) context.getApplicationContext();</span><br><span class=\"line\">        app.registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> EmptyActivityLifecycleCallbacks() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">                ReportFragment.get(activity).setProcessListener(mInitializationListener);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPaused</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">                activityPaused();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">                activityStopped();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源码可知：</p>\n<ul>\n<li>ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；</li>\n<li>ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；</li>\n<li>ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS = 700，因此这个判断不是即时的，有 700ms 的延迟；</li>\n<li>ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。</li>\n</ul>\n<p>最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessLifecycleOwnerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ContentProvider</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleDispatcher.init(getContext());</span><br><span class=\"line\">        ProcessLifecycleOwner.init(getContext());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Lifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.arch.lifecycle.ProcessLifecycleOwnerInitializer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"me.baron.achitecturelearning.lifecycle-trojan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:multiprocess</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Lifecycle-的最佳实践\"><a href=\"#Lifecycle-的最佳实践\" class=\"headerlink\" title=\"Lifecycle 的最佳实践\"></a>Lifecycle 的最佳实践</h3><ul>\n<li>保持 Activity / Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；</li>\n<li>尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;</li>\n<li>将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；</li>\n<li>使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；</li>\n<li>如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；</li>\n<li>不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016443108#articleHeader9\" target=\"_blank\" rel=\"noopener\">Android-Lifecycle超能解析-生命周期的那些事儿</a></li>\n<li><a href=\"https://blog.csdn.net/mq2553299/article/details/79029657\" target=\"_blank\" rel=\"noopener\">Android官方架构组件:Lifecycle详解&amp;原理分析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在日常的开发中，我们通常需要在 Activity / Fragment 的生命周期方法中进行一些繁重的操作，这样使代码看起来十分臃肿。Lifecycle 的引入主要是用来管理和响应 Activity / Fragment 的生命周期的变化，帮助我们编写出更易于组织且通常更加轻量级的代码，让代码变得更易于维护。</p>\n<p>Lifecycle 是一个类，它持有 Activity / Fragment 生命周期状态的信息，并允许其它对象观察此状态。</p>\n<h3 id=\"Lifecycle-使用\"><a href=\"#Lifecycle-使用\" class=\"headerlink\" title=\"Lifecycle 使用\"></a>Lifecycle 使用</h3><p><a href=\"https://developer.android.com/topic/libraries/architecture/adding-components\" target=\"_blank\" rel=\"noopener\">添加相关依赖</a></p>\n<p>场景：让 MVP 中的 Presenter 观察 Activity 的 onCreate 和 onDestroy 状态。</p>\n<ul>\n<li>Presenter 继承 LifecycleObserver 接口</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPresenter</span> : <span class=\"type\">LifecycleObserver &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_ANY)</span> <span class=\"comment\">// ON_ANY 注解能观察到其它所有的生命周期方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPresenter</span> : <span class=\"type\">IPresenter &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onCreate\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onDestroy\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Log.e(javaClass.simpleName, \"onLifecycleChanged\")</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 Activity 中添加 LifecycleObserver</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLifecycleActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myPresenter: MyPresenter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onCreate\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        myPresenter = MyPresenter()</span><br><span class=\"line\">        lifecycle.addObserver(myPresenter) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.e(javaClass.simpleName, <span class=\"string\">\"onDestroy\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动 Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLifecycleActivity: onCreate</span><br><span class=\"line\">MyPresenter: onCreate</span><br></pre></td></tr></table></figure>\n<p>finish Activity 会打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPresenter: onDestroy</span><br><span class=\"line\">MyLifecycleActivity: onDestroy</span><br></pre></td></tr></table></figure>\n<p>以上 Presenter 对象只观察了 Activity 的 onCreate 方法和 onDestroy 方法，我们还可以观察其它的生命周期方法。在 Lifecycle 内部有个枚举类 Event , 它包含了 LifecycleObserver 能够观察到的所有生命周期方法，只需要添加上相应的注解即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onCreate event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_CREATE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStart event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_START,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onResume event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_RESUME,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onPause event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_PAUSE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onStop event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_STOP,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constant for onDestroy event of the [LifecycleOwner].</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_DESTROY,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An [Event] constant that can be used to match all events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ON_ANY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Lifecycle 内部还有代表了各个<strong>生命周期所处状态</strong>的枚举类 State</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch</span></span><br><span class=\"line\"><span class=\"comment\">     * any more events. For instance, for an [android.app.Activity], this state is reached</span></span><br><span class=\"line\"><span class=\"comment\">     * before Activity's [onDestroy] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DESTROYED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialized state for a LifecycleOwner. For an [android.app.Activity], this is</span></span><br><span class=\"line\"><span class=\"comment\">     * the state when it is constructed but has not received</span></span><br><span class=\"line\"><span class=\"comment\">     * [onCreate] yet.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    INITIALIZED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Created state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onCreate] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onStop] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CREATED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Started state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached in two cases:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * after [onStart] call;</span></span><br><span class=\"line\"><span class=\"comment\">     * before [onPause] call.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    STARTED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Resumed state for a LifecycleOwner. For an [android.app.Activity], this state</span></span><br><span class=\"line\"><span class=\"comment\">     * is reached after [onResume] is called.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RESUMED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Compares if this State is greater or equal to the given `state`.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state State to compare with</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this State is greater or equal to the given `state`</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isAtLeast</span><span class=\"params\">(state: <span class=\"type\">State</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compareTo(state) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在一般开发中，当 Activity 拥有多个 Presenter 并需要在各个生命周期做一些特殊逻辑时，代码可能是：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onStop()</span><br><span class=\"line\">    presenter2.onStop()</span><br><span class=\"line\">    presenter3.onStop()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    presenter1.onDestroy()</span><br><span class=\"line\">    presenter2.onDestroy()</span><br><span class=\"line\">    presenter3.onDestroy()</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样会使 Activity 的代码变得很臃肿。</p>\n<p>如果用 Lifecycle , 只需将持有 Lifecycle 对象的 Activity 的生命周期的响应分发到各个 LifecycleObserver 观察者中即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_my_lifecycle)</span><br><span class=\"line\">    </span><br><span class=\"line\">    lifecycle.addObserver(presenter1) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter2) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">    lifecycle.addObserver(presenter3) <span class=\"comment\">// 添加 LifecycleObserver</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3><p><strong>几个概念</strong></p>\n<ul>\n<li><p><strong>LifecycleObserver 接口</strong></p>\n<p>Lifecycle 观察者。实现了该接口的类，被 LifecycleOwner 类的 addObserver 方法注册后，通过注解的方式即可观察到 LifecycleOwner 的生命周期方法。</p>\n</li>\n<li><p><strong>LifecycleOwner 接口</strong></p>\n<p>Lifecycle 持有者。实现了该接口的类持有生命周期（Lifecycle 对象），该接口生命周期（Lifecycle 对象）的改变会被其注册的观察者 LifecycleObserver 观察到并触发其对应的事件。</p>\n</li>\n<li><p><strong>Lifecycle 类</strong></p>\n<p>生命周期。和 LifecycleOwner 不同，LifecycleOwner 通过 getLifecycle() 方法获取到内部的 Lifecycle 对象。</p>\n</li>\n<li><p><strong>State</strong></p>\n<p>当前生命周期所处状态。Lifecycle 将 Activity 的生命周期函数对应成 State .</p>\n</li>\n<li><p><strong>Event</strong></p>\n<p>当前生命周期改变对应的事件。State 变化将触发 Event 事件，从而被已注册的 LifecycleObserver 接收。</p>\n</li>\n</ul>\n<p><strong>实现原理</strong></p>\n<h4 id=\"LifecycleOwner\"><a href=\"#LifecycleOwner\" class=\"headerlink\" title=\"LifecycleOwner\"></a>LifecycleOwner</h4><p>  AppCompatActivity 的父类 <code>SupportActivity</code> 和 <code>Fragment</code> 一样，实现了 LifecycleOwner 接口，因此它们都拥有 Lifecycle 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleOwner</span>, <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> LifecycleRegistry mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源码可知 getLifecycle() 方法返回的是 <code>LifecycleRegistry</code> 对象，而 LifecycleRegistry 是 Lifecycle 的子类，所有对 LifecycleObserver 的操作都是由 LifecycleRegistry 完成的。</p>\n<h4 id=\"LifecycleRegistry\"><a href=\"#LifecycleRegistry\" class=\"headerlink\" title=\"LifecycleRegistry\"></a>LifecycleRegistry</h4><p>  生命周期登记处。作为 Lifecycle 的子类，它的作用是添加观察者、响应生命周期事件和分发生命周期事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleObserver Map , 每一个 Observer 都有一个 State</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> FastSafeIterableMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Lifecycle 持有者，如继承了 LifecycleOwner 的 SupportActivity</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(@NonNull LifecycleOwner provider)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 添加 LifecycleObserver 观察者，并将之前的状态分发给这个 Observer , 例如我们在 onResume 之后注册这个 Observer , </span></span><br><span class=\"line\"><span class=\"comment\">    * 该 Observer 依然能收到 ON_CREATE 事件</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如：Observer 初始状态是 INITIALIZED , 当前状态是 RESUMED , 需要将 INITIALIZED 到 RESUMED 之间的</span></span><br><span class=\"line\">        <span class=\"comment\">// 所有事件分发给 Observer</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理生命周期事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        State next = getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 改变状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步 Observer 状态，并分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">\"LifecycleOwner is garbage collected, you shouldn't try dispatch \"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"new events from it.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// State 中，状态值是从 DESTROYED - INITIALIZED - CREATED - STARTED - RESUMED 增大</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &lt; Observer 状态值，需要通知 Observer 减小状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前状态值 &gt; Observer 状态值，需要通知 Observer 增大状态值，直到等于当前状态值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向前传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                <span class=\"comment\">// 分发状态改变事件</span></span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向后传递事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 减小 Observer 的状态值，直到状态值等于当前状态值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的分析，我们知道 LifecycleRegistry 才是真正替 Lifecycle 去埋头干粗活的类！</p>\n<p>接下来继续来看看实现了 LifecycleOwner 接口的 SupportActivity 类是如何将事件分发给 LifecycleRegistry 的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SupportActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleOwner</span>, <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ReportFragment.injectIfNeededIn(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到 SupportActivity 的 onCreate() 方法里面有行 <code>ReportFragment.injectIfNeededIn(this)</code> 代码，再进入 ReportFragment 类分析。</p>\n<h4 id=\"ReportFragment\"><a href=\"#ReportFragment\" class=\"headerlink\" title=\"ReportFragment\"></a>ReportFragment</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            manager.beginTransaction().add(<span class=\"keyword\">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">            manager.executePendingTransactions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        dispatchCreate(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        dispatchStart(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        dispatchResume(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        <span class=\"comment\">// just want to be sure that we won't leak reference to an activity</span></span><br><span class=\"line\">        mProcessListener = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分发事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        Activity activity = getActivity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难看出这是一个没有 UI 的后台 Fragment , 一般可以为 Activity 提供一些后台行为。在 ReportFragment 的各个生命周期中都调用了 LifecycleRegistry.handleLifecycleEvent() 方法来分发生命周期事件。</p>\n<p><strong>为什么不直接在 SupportActivity 的生命周期函数中给 Lifecycle 分发生命周期事件，而是要加一个 Fragment 呢？</strong></p>\n<p>在 ReportFragment 的 injectIfNeededIn() 方法中找到答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class=\"line\">    <span class=\"comment\">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class=\"line\">    android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        manager.beginTransaction().add(<span class=\"keyword\">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">        <span class=\"comment\">// Hopefully, we are the first to make a transaction.</span></span><br><span class=\"line\">        manager.executePendingTransactions();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有两个原因：为了能让 ProcessLifecycleOwner 正确地工作；②、并非所有的 Activity 都是继承来自 support 包的 FragmentActivity 类的。因此封装一个同样具有生命周期的后台 Fragment 来给 Lifecycle 分发生命周期事件。</p>\n<p><strong>另一方面，假如我们不继承自 SupportActivity , 那 Lifecycle 是如何通过 ReportFragment 分发生命周期事件呢？</strong></p>\n<p>鼠标停在 ReportFragment 类，同时按下 <code>Ctrl + Shift + Alt + F7</code> 在 Project and Libraries 的范围下搜索 ReportFragment 被引用的地方。我们发现还有 LifecycleDispatcher 和 ProcessLifecycleOwner 两个类有使用到 ReportFragment .</p>\n<h4 id=\"LifecycleDispatcher\"><a href=\"#LifecycleDispatcher\" class=\"headerlink\" title=\"LifecycleDispatcher\"></a>LifecycleDispatcher</h4><p>生命周期分发者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleDispatcher</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sInitialized.getAndSet(<span class=\"keyword\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ((Application) context.getApplicationContext())</span><br><span class=\"line\">                .registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> DispatcherActivityCallback());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过注册 Application.registerActivityLifecycleCallbacks 来获取 Activity 的生命周期回调</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DispatcherActivityCallback</span> <span class=\"keyword\">extends</span> <span class=\"title\">EmptyActivityLifecycleCallbacks</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FragmentCallback mFragmentCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">        DispatcherActivityCallback() &#123;</span><br><span class=\"line\">            mFragmentCallback = <span class=\"keyword\">new</span> FragmentCallback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                ((FragmentActivity) activity).getSupportFragmentManager()</span><br><span class=\"line\">                        .registerFragmentLifecycleCallbacks(mFragmentCallback, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 给每个 Activity 添加 ReportFragment</span></span><br><span class=\"line\">            ReportFragment.injectIfNeededIn(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivitySaveInstanceState</span><span class=\"params\">(Activity activity, Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">                markState((FragmentActivity) activity, CREATED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过递归形式给所有子 Fragment 设置 State</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(FragmentManager manager, State state)</span> </span>&#123;</span><br><span class=\"line\">        Collection&lt;Fragment&gt; fragments = manager.getFragments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fragments == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Fragment fragment : fragments) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            markStateIn(fragment, state);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fragment.isAdded()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 递归</span></span><br><span class=\"line\">                markState(fragment.getChildFragmentManager(), state);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markStateIn</span><span class=\"params\">(Object object, State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            LifecycleRegistry registry = ((LifecycleRegistryOwner) object).getLifecycle();</span><br><span class=\"line\">            registry.markState(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将某 Activity 及其所有子 Fragment 的 State 设置为某状态 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(FragmentActivity activity, State state)</span> </span>&#123;</span><br><span class=\"line\">        markStateIn(activity, state);</span><br><span class=\"line\">        markState(activity.getSupportFragmentManager(), state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源码可知，LifecycleDispatcher 是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调的。</p>\n<ul>\n<li>在 onActivityCreated 中添加 ReportFragment , 将 Activity 的生命周期交给 ReportFragment 去分发给 LifecycleRegistry ;</li>\n<li>在 onActivityStopped() 以及 onActivitySaveInstanceState() 中，将 Activity 及其所有子 Fragment 的 State 置为 CREATED .</li>\n</ul>\n<h4 id=\"ProcessLifecycleOwner\"><a href=\"#ProcessLifecycleOwner\" class=\"headerlink\" title=\"ProcessLifecycleOwner\"></a>ProcessLifecycleOwner</h4><p>为整个 App 进程提供生命周期的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessLifecycleOwner</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> TIMEOUT_MS = <span class=\"number\">700</span>; <span class=\"comment\">//mls</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        sInstance.attach(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActivityInitializationListener mInitializationListener =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ActivityInitializationListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    activityStarted();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    activityResumed();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mStartedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStartedCounter == <span class=\"number\">1</span> &amp;&amp; mStopSent) &#123;</span><br><span class=\"line\">            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">            mStopSent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityResumed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mResumedCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPauseSent) &#123;</span><br><span class=\"line\">                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">                mPauseSent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mHandler.removeCallbacks(mDelayedPauseRunnable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityPaused</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mResumedCounter--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mResumedCounter == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activityStopped</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mStartedCounter--;</span><br><span class=\"line\">        dispatchStopIfNeeded();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mHandler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">        Application app = (Application) context.getApplicationContext();</span><br><span class=\"line\">        app.registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> EmptyActivityLifecycleCallbacks() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">                ReportFragment.get(activity).setProcessListener(mInitializationListener);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPaused</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">                activityPaused();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">                activityStopped();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源码可知：</p>\n<ul>\n<li>ProcessLifecycleOwner 是用来监听 Application 生命周期的，它只会分发一次 ON_CREATE 事件，并不会分发 ON_DESTROY 事件；</li>\n<li>ProcessLifecycleOwner 在 Activity 的 onResume 中调用 Handle.postDelayed() , 在 onPause 中调用了 mHandler.removeCallbacks(mDelayedPauseRunnable) , 是为了处理 Activity 重建时比如横竖屏幕切换时，不会发送事件；</li>\n<li>ProcessLifecycleOwner 一般用来判断应用是在前台还是后台，但由于使用了 Handle.postDelayed() , TIMEOUT_MS = 700，因此这个判断不是即时的，有 700ms 的延迟；</li>\n<li>ProcessLifecycleOwner 与 LifecycleDispatcher 一样，都是通过注册 Application.registerActivityLifecycleCallbacks 来监听 Activity 的生命周期回调，来给每个 Activity 添加 ReportFragment 的。</li>\n</ul>\n<p>最后，通过点击 init() 方法，我们发现 LifecycleDispatcher 和 ProcessLifecycleOwner 都是在 ProcessLifecycleOwnerInitializer 类下完成初始化的，而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessLifecycleOwnerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ContentProvider</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleDispatcher.init(getContext());</span><br><span class=\"line\">        ProcessLifecycleOwner.init(getContext());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Lifecycle 会自动在我们的 AndroidManifest.xml 中添加以下代码用于初始化 ProcessLifecycleOwner 与 LifecycleDispatcher , 这样就不需要我们在 Application 中写代码来初始化了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.arch.lifecycle.ProcessLifecycleOwnerInitializer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"me.baron.achitecturelearning.lifecycle-trojan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:multiprocess</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Lifecycle-的最佳实践\"><a href=\"#Lifecycle-的最佳实践\" class=\"headerlink\" title=\"Lifecycle 的最佳实践\"></a>Lifecycle 的最佳实践</h3><ul>\n<li>保持 Activity / Fragment 尽可能的精简，它们不应该试图去获取它们所需的数据，要用 ViewModel 来获取，并观察 LiveData 对象将数据变化反映到视图中；</li>\n<li>尝试编写数据驱动（data-driven）的 UI , 即 UI 控制器的责任是在数据改变时更新视图或者将用户的操作通知给 ViewModel ;</li>\n<li>将数据逻辑放到 ViewModel 类中，ViewModel 应该作为 UI 控制器和应用程序其它部分的连接服务。注意：不是由 ViewModel 负责获取数据（例如：从网络获取）。相反，ViewModel 调用相应的组件获取数据，然后将数据获取结果提供给 UI 控制器；</li>\n<li>使用 Data Binding 来保持视图和 UI 控制器之间的接口干净。这样可以让视图更具声明性，并且尽可能减少在 Activity 和 Fragment 中编写更新代码。如果你喜欢在 Java 中执行该操作，请使用像 Butter Knife 这样的库来避免使用样板代码并进行更好的抽象化；</li>\n<li>如果 UI 很复杂，可以考虑创建一个 Presenter 类来处理 UI 的修改。虽然通常这样做不是必要的，但可能会让 UI 更容易测试；</li>\n<li>不要在 ViewModel 中引用 View 或者 Activity 的 context . 因为如果 ViewModel 存活的比 Activity 时间长（在配置更改的情况下），Activity 将会被泄漏并且无法被正确的回收。</li>\n</ul>\n<p><a href=\"https://github.com/zhich/AndroidJetpackDemo\" target=\"_blank\" rel=\"noopener\">文中 Demo GitHub 地址</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016443108#articleHeader9\" target=\"_blank\" rel=\"noopener\">Android-Lifecycle超能解析-生命周期的那些事儿</a></li>\n<li><a href=\"https://blog.csdn.net/mq2553299/article/details/79029657\" target=\"_blank\" rel=\"noopener\">Android官方架构组件:Lifecycle详解&amp;原理分析</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">Android Developers</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckba6xcs50000mgqux5bigb7r","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xct2000emgqur8a8ddjk"},{"post_id":"ckba6xcsf0002mgqus41si9er","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xctc000jmgqu4dioolgu"},{"post_id":"ckba6xcsl0005mgqukanjnwmx","category_id":"ckba6xct2000dmgqu6aob04y7","_id":"ckba6xctm000pmgquro3il312"},{"post_id":"ckba6xct9000imgqufmi4js9a","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xcto000tmgqufl6ww49r"},{"post_id":"ckba6xctd000mmgqu8li8or4t","category_id":"ckba6xct2000dmgqu6aob04y7","_id":"ckba6xctq000vmgquixgobkq6"},{"post_id":"ckba6xcso0006mgquby7ig6q1","category_id":"ckba6xctc000kmgqu2uah54tc","_id":"ckba6xctt000zmgqu4o84v7tu"},{"post_id":"ckba6xcsq0007mgqu5oo447lu","category_id":"ckba6xctm000qmgqu7wm3ylk7","_id":"ckba6xctv0012mgqur06k0u8v"},{"post_id":"ckba6xcsw000bmgquspkkq9oy","category_id":"ckba6xctq000wmgquecpe9774","_id":"ckba6xcty0017mgqug1ruxq1t"},{"post_id":"ckba6xct0000cmgqumz9f8u9d","category_id":"ckba6xctq000wmgquecpe9774","_id":"ckba6xcu2001amgquu764vny5"},{"post_id":"ckba6xct4000hmgqu1fmr0q58","category_id":"ckba6xcty0016mgqulfujodjb","_id":"ckba6xcu5001gmgquvuqsnk1x"},{"post_id":"ckba6xctk000omgqu5kewcmpo","category_id":"ckba6xcu3001cmgquu92zcmxd","_id":"ckba6xcu9001mmgqulyrkbiuq"},{"post_id":"ckba6xctn000smgquevoyolwp","category_id":"ckba6xcu3001cmgquu92zcmxd","_id":"ckba6xcub001qmgqu1kiembtj"},{"post_id":"ckba6xcto000umgqudp73emtt","category_id":"ckba6xcu8001lmgqud7bmwwiw","_id":"ckba6xcue001tmgqun6rttlbo"},{"post_id":"ckba6xctr000ymgqu7l6nosbt","category_id":"ckba6xcub001rmgqulnq3bzfn","_id":"ckba6xcug001xmgquwallg60c"},{"post_id":"ckba6xd2h0028mgqu9u2z7ilf","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd31002emgqucff5e42a"},{"post_id":"ckba6xd2r002amgquurq7x6hx","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd34002gmgqus7s1v1u7"},{"post_id":"ckba6xd2w002cmgqu8zqobtvo","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd36002jmgquxojd3zll"},{"post_id":"ckba6xd30002dmgquwxe23sqi","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd39002lmgqug97h10nj"},{"post_id":"ckba6xd32002fmgqui0apkasd","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd3c002pmgqu35dj7s0d"},{"post_id":"ckba6xd35002imgqus6d47o5q","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd3e002smgqutbz346oe"},{"post_id":"ckba6xd38002kmgquv0l38vqn","category_id":"ckba6xct2000dmgqu6aob04y7","_id":"ckba6xd3h002wmgqupsqaft2c"},{"post_id":"ckba6xd3d002rmgquf6wuurwd","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd3l0030mgquhk8k0sra"},{"post_id":"ckba6xd3a002omgqu08351xda","category_id":"ckba6xd3g002umgqu32wws569","_id":"ckba6xd3n0034mgqugzmzv43v"},{"post_id":"ckba6xd6e003jmgqurg4wkfn8","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd6i003lmgque3xyi6ei"},{"post_id":"ckba6xd94003omgquecdrfe0t","category_id":"ckba6xcsi0003mgqu06up8hs6","_id":"ckba6xd97003qmgqun0gobxbi"}],"PostTag":[{"post_id":"ckba6xcs50000mgqux5bigb7r","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xcsw000amgquce5jjuy4"},{"post_id":"ckba6xcsf0002mgqus41si9er","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xct4000gmgqudya7f4c2"},{"post_id":"ckba6xct9000imgqufmi4js9a","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xctk000nmgqu4nctblko"},{"post_id":"ckba6xcsl0005mgqukanjnwmx","tag_id":"ckba6xct2000fmgquuw52q6o2","_id":"ckba6xctt0010mgqu3fklyj5c"},{"post_id":"ckba6xcsl0005mgqukanjnwmx","tag_id":"ckba6xctd000lmgqutx2nv998","_id":"ckba6xctu0011mgquzzwktcj4"},{"post_id":"ckba6xcsl0005mgqukanjnwmx","tag_id":"ckba6xctm000rmgqui79597dl","_id":"ckba6xctx0015mgquz64iyftf"},{"post_id":"ckba6xcso0006mgquby7ig6q1","tag_id":"ckba6xctr000xmgqu9hwrxva0","_id":"ckba6xcu10019mgqu4ov7czbf"},{"post_id":"ckba6xcso0006mgquby7ig6q1","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xcu2001bmgquf11kw9e9"},{"post_id":"ckba6xcso0006mgquby7ig6q1","tag_id":"ckba6xctw0014mgqup20k7krs","_id":"ckba6xcu4001emgquh9lfgjvi"},{"post_id":"ckba6xcsq0007mgqu5oo447lu","tag_id":"ckba6xctr000xmgqu9hwrxva0","_id":"ckba6xcu5001fmgquq1ek6hx5"},{"post_id":"ckba6xcsw000bmgquspkkq9oy","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xcu7001jmgqu2yhcg63b"},{"post_id":"ckba6xcsw000bmgquspkkq9oy","tag_id":"ckba6xcu3001dmgqu6qumgne7","_id":"ckba6xcu8001kmgqumy6oyie9"},{"post_id":"ckba6xct0000cmgqumz9f8u9d","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xcua001omgqu34rc4apd"},{"post_id":"ckba6xct0000cmgqumz9f8u9d","tag_id":"ckba6xcu3001dmgqu6qumgne7","_id":"ckba6xcub001pmgqukjf120kx"},{"post_id":"ckba6xct4000hmgqu1fmr0q58","tag_id":"ckba6xcu9001nmgqubysq8uv7","_id":"ckba6xcuf001vmgqujmz4z5jn"},{"post_id":"ckba6xct4000hmgqu1fmr0q58","tag_id":"ckba6xcuc001smgquttz5wzoh","_id":"ckba6xcug001wmgqu2v3y0mf5"},{"post_id":"ckba6xctd000mmgqu8li8or4t","tag_id":"ckba6xcuf001umgquhk4liqlc","_id":"ckba6xcuh001zmgquekceu442"},{"post_id":"ckba6xctd000mmgqu8li8or4t","tag_id":"ckba6xctd000lmgqutx2nv998","_id":"ckba6xcuh0020mgquzsogd0o4"},{"post_id":"ckba6xctk000omgqu5kewcmpo","tag_id":"ckba6xcug001ymgqu9g60pezq","_id":"ckba6xcui0022mgquozvnmxep"},{"post_id":"ckba6xctn000smgquevoyolwp","tag_id":"ckba6xcui0021mgqu2cp5xrfq","_id":"ckba6xcuj0024mgqujsmusbch"},{"post_id":"ckba6xcto000umgqudp73emtt","tag_id":"ckba6xcui0023mgquhh318kts","_id":"ckba6xcuj0026mgqumpmpmxzc"},{"post_id":"ckba6xctr000ymgqu7l6nosbt","tag_id":"ckba6xcuj0025mgqukmuoqga6","_id":"ckba6xcuk0027mgqu5m5dhu8j"},{"post_id":"ckba6xd35002imgqus6d47o5q","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd3a002nmgquijk0aqsb"},{"post_id":"ckba6xd2h0028mgqu9u2z7ilf","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd3d002qmgqun1h6a6ad"},{"post_id":"ckba6xd2h0028mgqu9u2z7ilf","tag_id":"ckba6xd2v002bmgquavjp9fdi","_id":"ckba6xd3g002vmgqu32anjdvf"},{"post_id":"ckba6xd2h0028mgqu9u2z7ilf","tag_id":"ckba6xd34002hmgquv546gr74","_id":"ckba6xd3j002xmgqu89igl4ao"},{"post_id":"ckba6xd38002kmgquv0l38vqn","tag_id":"ckba6xct2000fmgquuw52q6o2","_id":"ckba6xd3l002zmgqu4qvjq30n"},{"post_id":"ckba6xd38002kmgquv0l38vqn","tag_id":"ckba6xctd000lmgqutx2nv998","_id":"ckba6xd3m0031mgquvtfnf5pk"},{"post_id":"ckba6xd3d002rmgquf6wuurwd","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd3m0032mgqu30tygm4e"},{"post_id":"ckba6xd2r002amgquurq7x6hx","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd3o0035mgqu276y6996"},{"post_id":"ckba6xd2r002amgquurq7x6hx","tag_id":"ckba6xd39002mmgqu0153rt6j","_id":"ckba6xd3o0036mgquuymslunl"},{"post_id":"ckba6xd2r002amgquurq7x6hx","tag_id":"ckba6xd34002hmgquv546gr74","_id":"ckba6xd3p0038mgqumt598ara"},{"post_id":"ckba6xd2w002cmgqu8zqobtvo","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd3q0039mgqusidfd0a5"},{"post_id":"ckba6xd2w002cmgqu8zqobtvo","tag_id":"ckba6xd3k002ymgquoerqm1e6","_id":"ckba6xd3r003bmgquhkmym8yz"},{"post_id":"ckba6xd30002dmgquwxe23sqi","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd3s003cmgquhmz5nhx7"},{"post_id":"ckba6xd30002dmgquwxe23sqi","tag_id":"ckba6xd3n0033mgquuxcdtzny","_id":"ckba6xd3t003emgqu8ofnzm77"},{"post_id":"ckba6xd30002dmgquwxe23sqi","tag_id":"ckba6xd34002hmgquv546gr74","_id":"ckba6xd3t003fmgquqr8yylis"},{"post_id":"ckba6xd32002fmgqui0apkasd","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd3u003gmgqumv24o8rr"},{"post_id":"ckba6xd32002fmgqui0apkasd","tag_id":"ckba6xd3q003amgqu35tccpll","_id":"ckba6xd3v003hmgquy22343pq"},{"post_id":"ckba6xd3a002omgqu08351xda","tag_id":"ckba6xd3s003dmgqui9fkdpov","_id":"ckba6xd3v003imgquhdmcsagn"},{"post_id":"ckba6xd6e003jmgqurg4wkfn8","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd6j003mmgqulskni142"},{"post_id":"ckba6xd6e003jmgqurg4wkfn8","tag_id":"ckba6xd6h003kmgquq031l49u","_id":"ckba6xd6j003nmgquxmcsbz5w"},{"post_id":"ckba6xd94003omgquecdrfe0t","tag_id":"ckba6xcsl0004mgquv5t5j0ns","_id":"ckba6xd99003rmgquvs6qeue5"},{"post_id":"ckba6xd94003omgquecdrfe0t","tag_id":"ckba6xd97003pmgqu7v8olwgq","_id":"ckba6xd99003smgquhaygx3zf"},{"post_id":"ckba6xd94003omgquecdrfe0t","tag_id":"ckba6xd34002hmgquv546gr74","_id":"ckba6xd9a003tmgqu6cbe0a5o"}],"Tag":[{"name":"Android","_id":"ckba6xcsl0004mgquv5t5j0ns"},{"name":"Chrome","_id":"ckba6xct2000fmgquuw52q6o2"},{"name":"工具","_id":"ckba6xctd000lmgqutx2nv998"},{"name":"调试","_id":"ckba6xctm000rmgqui79597dl"},{"name":"Java","_id":"ckba6xctr000xmgqu9hwrxva0"},{"name":"二进制","_id":"ckba6xctw0014mgqup20k7krs"},{"name":"Kotlin","_id":"ckba6xcu3001dmgqu6qumgne7"},{"name":"测试","_id":"ckba6xcu9001nmgqubysq8uv7"},{"name":"mock","_id":"ckba6xcuc001smgquttz5wzoh"},{"name":"WebStorm","_id":"ckba6xcuf001umgquhk4liqlc"},{"name":"localStorage","_id":"ckba6xcug001ymgqu9g60pezq"},{"name":"前端","_id":"ckba6xcui0021mgqu2cp5xrfq"},{"name":"算法","_id":"ckba6xcui0023mgquhh318kts"},{"name":"阅读笔记","_id":"ckba6xcuj0025mgqukmuoqga6"},{"name":"LiveData","_id":"ckba6xd2v002bmgquavjp9fdi"},{"name":"Jetpack","_id":"ckba6xd34002hmgquv546gr74"},{"name":"ViewModel","_id":"ckba6xd39002mmgqu0153rt6j"},{"name":"Android Studio","_id":"ckba6xd3k002ymgquoerqm1e6"},{"name":"WorkManager","_id":"ckba6xd3n0033mgquuxcdtzny"},{"name":"Activity","_id":"ckba6xd3q003amgqu35tccpll"},{"name":"位运算","_id":"ckba6xd3s003dmgqui9fkdpov"},{"name":"Fragment","_id":"ckba6xd6h003kmgquq031l49u"},{"name":"Lifecycle","_id":"ckba6xd97003pmgqu7v8olwgq"}]}}