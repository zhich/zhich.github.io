---
title: 位运算总结
date: 2019-6-25 11:06:00
categories: "位运算"
tags:
     - 位运算
---


### 二进制概念

在二进制数里，最高位 0 表示正数，1 表示负数。

#### 原码
一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。

```
 5 的原码是：00000000 00000000 00000000 00000101
-5 的原码是：10000000 00000000 00000000 00000101
```

#### 反码
正数的反码与原码相同，负数的反码为对该数的原码**除符号位**外各位**取反**（即 0 变 1，1 变 0）。

```
正数 00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101
负数 10000000 00000000 00000000 00000101 的反码却是 11111111 11111111 11111111 11111010
```

#### 补码

正数的补码与原码相同，负数的补码为该数的反码加 1。

负数 10000000 00000000 00000000 00000101 的反码是 11111111 11111111 11111111 11111010，那么补码为：

```
11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011
```

### 位运算基础
基本的位运算符有与、或、异或、取反、左移、右移这 6 种，它们的运算规则如下所示：

|  符号 | 描述  | 运算规则  |
|:----:|:-----:|:---------|
| &    | 与    | 两个位都为 1 时，结果才为 1 |
| \|   | 或    | 两个位只要有一位为 1，结果都为 1 |
| ^    | 异或  | 两个位相同为 0，不同为 1 |
| ~    | 取反  | 0 变 1，1 变 0 |
| <<   | 左移  | 各二进位全部左移若干位，高位丢弃，低位补 0 |
| >>   | 右移  | 各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）|

**注意**

1. 在这 6 种操作符，只有 **~** 取反是单目操作符，其它 5 种都是双目操作符。
2. 位操作只能用于整形数据，对 float 和 double 类型进行位操作会被编译器报错。
3. 对于移位操作，在微软的 VC6.0 和 VS2008 编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补 0 即可，但在右移中逻辑移位的高位补 0 而算术移位的高位是补符号位。如下面代码会输出 -4 和 3。

   ```
   System.out.println((15) >> 2); // 3
   System.out.println((-15) >> 2); // -4
   ```
   15 = 00000000 00000000 00000000 00001111（二进制），右移二位，高位补 0，得到
   
   00000000 00000000 00000000 00000011 即 3。

   -15 = 11111111 11111111 11111111 11110001（二进制），右移二位，最高位由符号位填充，得到

   11111111 11111111 11111111 11111100 即 -4。
   
















